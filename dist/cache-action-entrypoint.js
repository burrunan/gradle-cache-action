/*! For license information please see cache-action-entrypoint.js.LICENSE.txt */
!function(root, factory) {
 "object" == typeof exports && "object" == typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? exports["cache-action-entrypoint"] = factory() : root["cache-action-entrypoint"] = factory();
}(this, (() => (() => {
 var leafPrototypes, getProto, __webpack_modules__ = {
  9989: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.saveCache = exports.restoreCache = exports.isFeatureAvailable = exports.ReserveCacheError = exports.ValidationError = void 0;
   const core = __importStar(__webpack_require__(4613)), path = __importStar(__webpack_require__(6928)), utils = __importStar(__webpack_require__(3318)), cacheHttpClient = __importStar(__webpack_require__(3444)), cacheTwirpClient = __importStar(__webpack_require__(892)), config_1 = __webpack_require__(5707), tar_1 = __webpack_require__(2), constants_1 = __webpack_require__(5264);
   class ValidationError extends Error {
    constructor(message) {
     super(message), this.name = "ValidationError", Object.setPrototypeOf(this, ValidationError.prototype);
    }
   }
   exports.ValidationError = ValidationError;
   class ReserveCacheError extends Error {
    constructor(message) {
     super(message), this.name = "ReserveCacheError", Object.setPrototypeOf(this, ReserveCacheError.prototype);
    }
   }
   function checkPaths(paths) {
    if (!paths || 0 === paths.length) throw new ValidationError("Path Validation Error: At least one directory or file path is required");
   }
   function checkKey(key) {
    if (key.length > 512) throw new ValidationError(`Key Validation Error: ${key} cannot be larger than 512 characters.`);
    if (!/^[^,]*$/.test(key)) throw new ValidationError(`Key Validation Error: ${key} cannot contain commas.`);
   }
   exports.ReserveCacheError = ReserveCacheError, exports.isFeatureAvailable = function() {
    return !!process.env.ACTIONS_CACHE_URL;
   }, exports.restoreCache = function(paths, primaryKey, restoreKeys, options, enableCrossOsArchive = !1) {
    return __awaiter(this, void 0, void 0, (function*() {
     const cacheServiceVersion = (0, config_1.getCacheServiceVersion)();
     return core.debug(`Cache service version: ${cacheServiceVersion}`), checkPaths(paths), 
     "v2" === cacheServiceVersion ? yield function(paths, primaryKey, restoreKeys, options, enableCrossOsArchive = !1) {
      return __awaiter(this, void 0, void 0, (function*() {
       options = Object.assign(Object.assign({}, options), {
        useAzureSdk: !0
       }), restoreKeys = restoreKeys || [];
       const keys = [ primaryKey, ...restoreKeys ];
       if (core.debug("Resolved Keys:"), core.debug(JSON.stringify(keys)), keys.length > 10) throw new ValidationError("Key Validation Error: Keys are limited to a maximum of 10.");
       for (const key of keys) checkKey(key);
       let archivePath = "";
       try {
        const twirpClient = cacheTwirpClient.internalCacheTwirpClient(), compressionMethod = yield utils.getCompressionMethod(), request = {
         key: primaryKey,
         restoreKeys,
         version: utils.getCacheVersion(paths, compressionMethod, enableCrossOsArchive)
        }, response = yield twirpClient.GetCacheEntryDownloadURL(request);
        if (!response.ok) return void core.debug(`Cache not found for version ${request.version} of keys: ${keys.join(", ")}`);
        if (core.info(`Cache hit for: ${request.key}`), null == options ? void 0 : options.lookupOnly) return core.info("Lookup only - skipping download"), 
        response.matchedKey;
        archivePath = path.join(yield utils.createTempDirectory(), utils.getCacheFileName(compressionMethod)), 
        core.debug(`Archive path: ${archivePath}`), core.debug(`Starting download of archive to: ${archivePath}`), 
        yield cacheHttpClient.downloadCache(response.signedDownloadUrl, archivePath, options);
        const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
        return core.info(`Cache Size: ~${Math.round(archiveFileSize / 1048576)} MB (${archiveFileSize} B)`), 
        core.isDebug() && (yield (0, tar_1.listTar)(archivePath, compressionMethod)), yield (0, 
        tar_1.extractTar)(archivePath, compressionMethod), core.info("Cache restored successfully"), 
        response.matchedKey;
       } catch (error) {
        if (error.name === ValidationError.name) throw error;
        core.warning(`Failed to restore: ${error.message}`);
       } finally {
        try {
         archivePath && (yield utils.unlinkFile(archivePath));
        } catch (error) {
         core.debug(`Failed to delete archive: ${error}`);
        }
       }
      }));
     }(paths, primaryKey, restoreKeys, options, enableCrossOsArchive) : yield function(paths, primaryKey, restoreKeys, options, enableCrossOsArchive = !1) {
      return __awaiter(this, void 0, void 0, (function*() {
       restoreKeys = restoreKeys || [];
       const keys = [ primaryKey, ...restoreKeys ];
       if (core.debug("Resolved Keys:"), core.debug(JSON.stringify(keys)), keys.length > 10) throw new ValidationError("Key Validation Error: Keys are limited to a maximum of 10.");
       for (const key of keys) checkKey(key);
       const compressionMethod = yield utils.getCompressionMethod();
       let archivePath = "";
       try {
        const cacheEntry = yield cacheHttpClient.getCacheEntry(keys, paths, {
         compressionMethod,
         enableCrossOsArchive
        });
        if (!(null == cacheEntry ? void 0 : cacheEntry.archiveLocation)) return;
        if (null == options ? void 0 : options.lookupOnly) return core.info("Lookup only - skipping download"), 
        cacheEntry.cacheKey;
        archivePath = path.join(yield utils.createTempDirectory(), utils.getCacheFileName(compressionMethod)), 
        core.debug(`Archive Path: ${archivePath}`), yield cacheHttpClient.downloadCache(cacheEntry.archiveLocation, archivePath, options), 
        core.isDebug() && (yield (0, tar_1.listTar)(archivePath, compressionMethod));
        const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
        return core.info(`Cache Size: ~${Math.round(archiveFileSize / 1048576)} MB (${archiveFileSize} B)`), 
        yield (0, tar_1.extractTar)(archivePath, compressionMethod), core.info("Cache restored successfully"), 
        cacheEntry.cacheKey;
       } catch (error) {
        if (error.name === ValidationError.name) throw error;
        core.warning(`Failed to restore: ${error.message}`);
       } finally {
        try {
         yield utils.unlinkFile(archivePath);
        } catch (error) {
         core.debug(`Failed to delete archive: ${error}`);
        }
       }
      }));
     }(paths, primaryKey, restoreKeys, options, enableCrossOsArchive);
    }));
   }, exports.saveCache = function(paths, key, options, enableCrossOsArchive = !1) {
    return __awaiter(this, void 0, void 0, (function*() {
     const cacheServiceVersion = (0, config_1.getCacheServiceVersion)();
     return core.debug(`Cache service version: ${cacheServiceVersion}`), checkPaths(paths), 
     checkKey(key), "v2" === cacheServiceVersion ? yield function(paths, key, options, enableCrossOsArchive = !1) {
      return __awaiter(this, void 0, void 0, (function*() {
       options = Object.assign(Object.assign({}, options), {
        uploadChunkSize: 67108864,
        uploadConcurrency: 8,
        useAzureSdk: !0
       });
       const compressionMethod = yield utils.getCompressionMethod(), twirpClient = cacheTwirpClient.internalCacheTwirpClient();
       let cacheId = -1;
       const cachePaths = yield utils.resolvePaths(paths);
       if (core.debug("Cache Paths:"), core.debug(`${JSON.stringify(cachePaths)}`), 0 === cachePaths.length) throw new Error("Path Validation Error: Path(s) specified in the action for caching do(es) not exist, hence no cache is being saved.");
       const archiveFolder = yield utils.createTempDirectory(), archivePath = path.join(archiveFolder, utils.getCacheFileName(compressionMethod));
       core.debug(`Archive Path: ${archivePath}`);
       try {
        yield (0, tar_1.createTar)(archiveFolder, cachePaths, compressionMethod), core.isDebug() && (yield (0, 
        tar_1.listTar)(archivePath, compressionMethod));
        const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
        if (core.debug(`File Size: ${archiveFileSize}`), archiveFileSize > constants_1.CacheFileSizeLimit && !(0, 
        config_1.isGhes)()) throw new Error(`Cache size of ~${Math.round(archiveFileSize / 1048576)} MB (${archiveFileSize} B) is over the 10GB limit, not saving cache.`);
        options.archiveSizeBytes = archiveFileSize, core.debug("Reserving Cache");
        const version = utils.getCacheVersion(paths, compressionMethod, enableCrossOsArchive), request = {
         key,
         version
        };
        let signedUploadUrl;
        try {
         const response = yield twirpClient.CreateCacheEntry(request);
         if (!response.ok) throw new Error("Response was not ok");
         signedUploadUrl = response.signedUploadUrl;
        } catch (error) {
         throw core.debug(`Failed to reserve cache: ${error}`), new ReserveCacheError(`Unable to reserve cache with key ${key}, another job may be creating this cache.`);
        }
        core.debug(`Attempting to upload cache located at: ${archivePath}`), yield cacheHttpClient.saveCache(cacheId, archivePath, signedUploadUrl, options);
        const finalizeRequest = {
         key,
         version,
         sizeBytes: `${archiveFileSize}`
        }, finalizeResponse = yield twirpClient.FinalizeCacheEntryUpload(finalizeRequest);
        if (core.debug(`FinalizeCacheEntryUploadResponse: ${finalizeResponse.ok}`), !finalizeResponse.ok) throw new Error(`Unable to finalize cache with key ${key}, another job may be finalizing this cache.`);
        cacheId = parseInt(finalizeResponse.entryId);
       } catch (error) {
        const typedError = error;
        if (typedError.name === ValidationError.name) throw error;
        typedError.name === ReserveCacheError.name ? core.info(`Failed to save: ${typedError.message}`) : core.warning(`Failed to save: ${typedError.message}`);
       } finally {
        try {
         yield utils.unlinkFile(archivePath);
        } catch (error) {
         core.debug(`Failed to delete archive: ${error}`);
        }
       }
       return cacheId;
      }));
     }(paths, key, options, enableCrossOsArchive) : yield function(paths, key, options, enableCrossOsArchive = !1) {
      var _a, _b, _c, _d, _e;
      return __awaiter(this, void 0, void 0, (function*() {
       const compressionMethod = yield utils.getCompressionMethod();
       let cacheId = -1;
       const cachePaths = yield utils.resolvePaths(paths);
       if (core.debug("Cache Paths:"), core.debug(`${JSON.stringify(cachePaths)}`), 0 === cachePaths.length) throw new Error("Path Validation Error: Path(s) specified in the action for caching do(es) not exist, hence no cache is being saved.");
       const archiveFolder = yield utils.createTempDirectory(), archivePath = path.join(archiveFolder, utils.getCacheFileName(compressionMethod));
       core.debug(`Archive Path: ${archivePath}`);
       try {
        yield (0, tar_1.createTar)(archiveFolder, cachePaths, compressionMethod), core.isDebug() && (yield (0, 
        tar_1.listTar)(archivePath, compressionMethod));
        const fileSizeLimit = 10737418240, archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
        if (core.debug(`File Size: ${archiveFileSize}`), archiveFileSize > fileSizeLimit && !(0, 
        config_1.isGhes)()) throw new Error(`Cache size of ~${Math.round(archiveFileSize / 1048576)} MB (${archiveFileSize} B) is over the 10GB limit, not saving cache.`);
        core.debug("Reserving Cache");
        const reserveCacheResponse = yield cacheHttpClient.reserveCache(key, paths, {
         compressionMethod,
         enableCrossOsArchive,
         cacheSize: archiveFileSize
        });
        if (!(null === (_a = null == reserveCacheResponse ? void 0 : reserveCacheResponse.result) || void 0 === _a ? void 0 : _a.cacheId)) throw 400 === (null == reserveCacheResponse ? void 0 : reserveCacheResponse.statusCode) ? new Error(null !== (_d = null === (_c = null == reserveCacheResponse ? void 0 : reserveCacheResponse.error) || void 0 === _c ? void 0 : _c.message) && void 0 !== _d ? _d : `Cache size of ~${Math.round(archiveFileSize / 1048576)} MB (${archiveFileSize} B) is over the data cap limit, not saving cache.`) : new ReserveCacheError(`Unable to reserve cache with key ${key}, another job may be creating this cache. More details: ${null === (_e = null == reserveCacheResponse ? void 0 : reserveCacheResponse.error) || void 0 === _e ? void 0 : _e.message}`);
        cacheId = null === (_b = null == reserveCacheResponse ? void 0 : reserveCacheResponse.result) || void 0 === _b ? void 0 : _b.cacheId, 
        core.debug(`Saving Cache (ID: ${cacheId})`), yield cacheHttpClient.saveCache(cacheId, archivePath, "", options);
       } catch (error) {
        const typedError = error;
        if (typedError.name === ValidationError.name) throw error;
        typedError.name === ReserveCacheError.name ? core.info(`Failed to save: ${typedError.message}`) : core.warning(`Failed to save: ${typedError.message}`);
       } finally {
        try {
         yield utils.unlinkFile(archivePath);
        } catch (error) {
         core.debug(`Failed to delete archive: ${error}`);
        }
       }
       return cacheId;
      }));
     }(paths, key, options, enableCrossOsArchive);
    }));
   };
  },
  8159: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.CacheService = exports.GetCacheEntryDownloadURLResponse = exports.GetCacheEntryDownloadURLRequest = exports.FinalizeCacheEntryUploadResponse = exports.FinalizeCacheEntryUploadRequest = exports.CreateCacheEntryResponse = exports.CreateCacheEntryRequest = void 0;
   const runtime_rpc_1 = __webpack_require__(165), runtime_1 = __webpack_require__(7876), runtime_2 = __webpack_require__(7876), runtime_3 = __webpack_require__(7876), runtime_4 = __webpack_require__(7876), runtime_5 = __webpack_require__(7876), cachemetadata_1 = __webpack_require__(3661);
   class CreateCacheEntryRequest$Type extends runtime_5.MessageType {
    constructor() {
     super("github.actions.results.api.v1.CreateCacheEntryRequest", [ {
      no: 1,
      name: "metadata",
      kind: "message",
      T: () => cachemetadata_1.CacheMetadata
     }, {
      no: 2,
      name: "key",
      kind: "scalar",
      T: 9
     }, {
      no: 3,
      name: "version",
      kind: "scalar",
      T: 9
     } ]);
    }
    create(value) {
     const message = {
      key: "",
      version: ""
     };
     return globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, {
      enumerable: !1,
      value: this
     }), void 0 !== value && (0, runtime_3.reflectionMergePartial)(this, message, value), 
     message;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       message.metadata = cachemetadata_1.CacheMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
       break;

      case 2:
       message.key = reader.string();
       break;

      case 3:
       message.version = reader.string();
       break;

      default:
       let u = options.readUnknownField;
       if ("throw" === u) throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
     }
     return message;
    }
    internalBinaryWrite(message, writer, options) {
     message.metadata && cachemetadata_1.CacheMetadata.internalBinaryWrite(message.metadata, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join(), 
     "" !== message.key && writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.key), 
     "" !== message.version && writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.version);
     let u = options.writeUnknownFields;
     return !1 !== u && (1 == u ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer), 
     writer;
    }
   }
   exports.CreateCacheEntryRequest = new CreateCacheEntryRequest$Type;
   class CreateCacheEntryResponse$Type extends runtime_5.MessageType {
    constructor() {
     super("github.actions.results.api.v1.CreateCacheEntryResponse", [ {
      no: 1,
      name: "ok",
      kind: "scalar",
      T: 8
     }, {
      no: 2,
      name: "signed_upload_url",
      kind: "scalar",
      T: 9
     } ]);
    }
    create(value) {
     const message = {
      ok: !1,
      signedUploadUrl: ""
     };
     return globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, {
      enumerable: !1,
      value: this
     }), void 0 !== value && (0, runtime_3.reflectionMergePartial)(this, message, value), 
     message;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       message.ok = reader.bool();
       break;

      case 2:
       message.signedUploadUrl = reader.string();
       break;

      default:
       let u = options.readUnknownField;
       if ("throw" === u) throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
     }
     return message;
    }
    internalBinaryWrite(message, writer, options) {
     !1 !== message.ok && writer.tag(1, runtime_1.WireType.Varint).bool(message.ok), 
     "" !== message.signedUploadUrl && writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.signedUploadUrl);
     let u = options.writeUnknownFields;
     return !1 !== u && (1 == u ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer), 
     writer;
    }
   }
   exports.CreateCacheEntryResponse = new CreateCacheEntryResponse$Type;
   class FinalizeCacheEntryUploadRequest$Type extends runtime_5.MessageType {
    constructor() {
     super("github.actions.results.api.v1.FinalizeCacheEntryUploadRequest", [ {
      no: 1,
      name: "metadata",
      kind: "message",
      T: () => cachemetadata_1.CacheMetadata
     }, {
      no: 2,
      name: "key",
      kind: "scalar",
      T: 9
     }, {
      no: 3,
      name: "size_bytes",
      kind: "scalar",
      T: 3
     }, {
      no: 4,
      name: "version",
      kind: "scalar",
      T: 9
     } ]);
    }
    create(value) {
     const message = {
      key: "",
      sizeBytes: "0",
      version: ""
     };
     return globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, {
      enumerable: !1,
      value: this
     }), void 0 !== value && (0, runtime_3.reflectionMergePartial)(this, message, value), 
     message;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       message.metadata = cachemetadata_1.CacheMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
       break;

      case 2:
       message.key = reader.string();
       break;

      case 3:
       message.sizeBytes = reader.int64().toString();
       break;

      case 4:
       message.version = reader.string();
       break;

      default:
       let u = options.readUnknownField;
       if ("throw" === u) throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
     }
     return message;
    }
    internalBinaryWrite(message, writer, options) {
     message.metadata && cachemetadata_1.CacheMetadata.internalBinaryWrite(message.metadata, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join(), 
     "" !== message.key && writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.key), 
     "0" !== message.sizeBytes && writer.tag(3, runtime_1.WireType.Varint).int64(message.sizeBytes), 
     "" !== message.version && writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.version);
     let u = options.writeUnknownFields;
     return !1 !== u && (1 == u ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer), 
     writer;
    }
   }
   exports.FinalizeCacheEntryUploadRequest = new FinalizeCacheEntryUploadRequest$Type;
   class FinalizeCacheEntryUploadResponse$Type extends runtime_5.MessageType {
    constructor() {
     super("github.actions.results.api.v1.FinalizeCacheEntryUploadResponse", [ {
      no: 1,
      name: "ok",
      kind: "scalar",
      T: 8
     }, {
      no: 2,
      name: "entry_id",
      kind: "scalar",
      T: 3
     } ]);
    }
    create(value) {
     const message = {
      ok: !1,
      entryId: "0"
     };
     return globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, {
      enumerable: !1,
      value: this
     }), void 0 !== value && (0, runtime_3.reflectionMergePartial)(this, message, value), 
     message;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       message.ok = reader.bool();
       break;

      case 2:
       message.entryId = reader.int64().toString();
       break;

      default:
       let u = options.readUnknownField;
       if ("throw" === u) throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
     }
     return message;
    }
    internalBinaryWrite(message, writer, options) {
     !1 !== message.ok && writer.tag(1, runtime_1.WireType.Varint).bool(message.ok), 
     "0" !== message.entryId && writer.tag(2, runtime_1.WireType.Varint).int64(message.entryId);
     let u = options.writeUnknownFields;
     return !1 !== u && (1 == u ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer), 
     writer;
    }
   }
   exports.FinalizeCacheEntryUploadResponse = new FinalizeCacheEntryUploadResponse$Type;
   class GetCacheEntryDownloadURLRequest$Type extends runtime_5.MessageType {
    constructor() {
     super("github.actions.results.api.v1.GetCacheEntryDownloadURLRequest", [ {
      no: 1,
      name: "metadata",
      kind: "message",
      T: () => cachemetadata_1.CacheMetadata
     }, {
      no: 2,
      name: "key",
      kind: "scalar",
      T: 9
     }, {
      no: 3,
      name: "restore_keys",
      kind: "scalar",
      repeat: 2,
      T: 9
     }, {
      no: 4,
      name: "version",
      kind: "scalar",
      T: 9
     } ]);
    }
    create(value) {
     const message = {
      key: "",
      restoreKeys: [],
      version: ""
     };
     return globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, {
      enumerable: !1,
      value: this
     }), void 0 !== value && (0, runtime_3.reflectionMergePartial)(this, message, value), 
     message;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       message.metadata = cachemetadata_1.CacheMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
       break;

      case 2:
       message.key = reader.string();
       break;

      case 3:
       message.restoreKeys.push(reader.string());
       break;

      case 4:
       message.version = reader.string();
       break;

      default:
       let u = options.readUnknownField;
       if ("throw" === u) throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
     }
     return message;
    }
    internalBinaryWrite(message, writer, options) {
     message.metadata && cachemetadata_1.CacheMetadata.internalBinaryWrite(message.metadata, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join(), 
     "" !== message.key && writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.key);
     for (let i = 0; i < message.restoreKeys.length; i++) writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.restoreKeys[i]);
     "" !== message.version && writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.version);
     let u = options.writeUnknownFields;
     return !1 !== u && (1 == u ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer), 
     writer;
    }
   }
   exports.GetCacheEntryDownloadURLRequest = new GetCacheEntryDownloadURLRequest$Type;
   class GetCacheEntryDownloadURLResponse$Type extends runtime_5.MessageType {
    constructor() {
     super("github.actions.results.api.v1.GetCacheEntryDownloadURLResponse", [ {
      no: 1,
      name: "ok",
      kind: "scalar",
      T: 8
     }, {
      no: 2,
      name: "signed_download_url",
      kind: "scalar",
      T: 9
     }, {
      no: 3,
      name: "matched_key",
      kind: "scalar",
      T: 9
     } ]);
    }
    create(value) {
     const message = {
      ok: !1,
      signedDownloadUrl: "",
      matchedKey: ""
     };
     return globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, {
      enumerable: !1,
      value: this
     }), void 0 !== value && (0, runtime_3.reflectionMergePartial)(this, message, value), 
     message;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       message.ok = reader.bool();
       break;

      case 2:
       message.signedDownloadUrl = reader.string();
       break;

      case 3:
       message.matchedKey = reader.string();
       break;

      default:
       let u = options.readUnknownField;
       if ("throw" === u) throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
     }
     return message;
    }
    internalBinaryWrite(message, writer, options) {
     !1 !== message.ok && writer.tag(1, runtime_1.WireType.Varint).bool(message.ok), 
     "" !== message.signedDownloadUrl && writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.signedDownloadUrl), 
     "" !== message.matchedKey && writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.matchedKey);
     let u = options.writeUnknownFields;
     return !1 !== u && (1 == u ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer), 
     writer;
    }
   }
   exports.GetCacheEntryDownloadURLResponse = new GetCacheEntryDownloadURLResponse$Type, 
   exports.CacheService = new runtime_rpc_1.ServiceType("github.actions.results.api.v1.CacheService", [ {
    name: "CreateCacheEntry",
    options: {},
    I: exports.CreateCacheEntryRequest,
    O: exports.CreateCacheEntryResponse
   }, {
    name: "FinalizeCacheEntryUpload",
    options: {},
    I: exports.FinalizeCacheEntryUploadRequest,
    O: exports.FinalizeCacheEntryUploadResponse
   }, {
    name: "GetCacheEntryDownloadURL",
    options: {},
    I: exports.GetCacheEntryDownloadURLRequest,
    O: exports.GetCacheEntryDownloadURLResponse
   } ]);
  },
  5895: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.CacheServiceClientProtobuf = exports.CacheServiceClientJSON = void 0;
   const cache_1 = __webpack_require__(8159);
   exports.CacheServiceClientJSON = class {
    constructor(rpc) {
     this.rpc = rpc, this.CreateCacheEntry.bind(this), this.FinalizeCacheEntryUpload.bind(this), 
     this.GetCacheEntryDownloadURL.bind(this);
    }
    CreateCacheEntry(request) {
     const data = cache_1.CreateCacheEntryRequest.toJson(request, {
      useProtoFieldName: !0,
      emitDefaultValues: !1
     });
     return this.rpc.request("github.actions.results.api.v1.CacheService", "CreateCacheEntry", "application/json", data).then((data => cache_1.CreateCacheEntryResponse.fromJson(data, {
      ignoreUnknownFields: !0
     })));
    }
    FinalizeCacheEntryUpload(request) {
     const data = cache_1.FinalizeCacheEntryUploadRequest.toJson(request, {
      useProtoFieldName: !0,
      emitDefaultValues: !1
     });
     return this.rpc.request("github.actions.results.api.v1.CacheService", "FinalizeCacheEntryUpload", "application/json", data).then((data => cache_1.FinalizeCacheEntryUploadResponse.fromJson(data, {
      ignoreUnknownFields: !0
     })));
    }
    GetCacheEntryDownloadURL(request) {
     const data = cache_1.GetCacheEntryDownloadURLRequest.toJson(request, {
      useProtoFieldName: !0,
      emitDefaultValues: !1
     });
     return this.rpc.request("github.actions.results.api.v1.CacheService", "GetCacheEntryDownloadURL", "application/json", data).then((data => cache_1.GetCacheEntryDownloadURLResponse.fromJson(data, {
      ignoreUnknownFields: !0
     })));
    }
   };
   exports.CacheServiceClientProtobuf = class {
    constructor(rpc) {
     this.rpc = rpc, this.CreateCacheEntry.bind(this), this.FinalizeCacheEntryUpload.bind(this), 
     this.GetCacheEntryDownloadURL.bind(this);
    }
    CreateCacheEntry(request) {
     const data = cache_1.CreateCacheEntryRequest.toBinary(request);
     return this.rpc.request("github.actions.results.api.v1.CacheService", "CreateCacheEntry", "application/protobuf", data).then((data => cache_1.CreateCacheEntryResponse.fromBinary(data)));
    }
    FinalizeCacheEntryUpload(request) {
     const data = cache_1.FinalizeCacheEntryUploadRequest.toBinary(request);
     return this.rpc.request("github.actions.results.api.v1.CacheService", "FinalizeCacheEntryUpload", "application/protobuf", data).then((data => cache_1.FinalizeCacheEntryUploadResponse.fromBinary(data)));
    }
    GetCacheEntryDownloadURL(request) {
     const data = cache_1.GetCacheEntryDownloadURLRequest.toBinary(request);
     return this.rpc.request("github.actions.results.api.v1.CacheService", "GetCacheEntryDownloadURL", "application/protobuf", data).then((data => cache_1.GetCacheEntryDownloadURLResponse.fromBinary(data)));
    }
   };
  },
  3661: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.CacheMetadata = void 0;
   const runtime_1 = __webpack_require__(7876), runtime_2 = __webpack_require__(7876), runtime_3 = __webpack_require__(7876), runtime_4 = __webpack_require__(7876), runtime_5 = __webpack_require__(7876), cachescope_1 = __webpack_require__(6630);
   class CacheMetadata$Type extends runtime_5.MessageType {
    constructor() {
     super("github.actions.results.entities.v1.CacheMetadata", [ {
      no: 1,
      name: "repository_id",
      kind: "scalar",
      T: 3
     }, {
      no: 2,
      name: "scope",
      kind: "message",
      repeat: 1,
      T: () => cachescope_1.CacheScope
     } ]);
    }
    create(value) {
     const message = {
      repositoryId: "0",
      scope: []
     };
     return globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, {
      enumerable: !1,
      value: this
     }), void 0 !== value && (0, runtime_3.reflectionMergePartial)(this, message, value), 
     message;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       message.repositoryId = reader.int64().toString();
       break;

      case 2:
       message.scope.push(cachescope_1.CacheScope.internalBinaryRead(reader, reader.uint32(), options));
       break;

      default:
       let u = options.readUnknownField;
       if ("throw" === u) throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
     }
     return message;
    }
    internalBinaryWrite(message, writer, options) {
     "0" !== message.repositoryId && writer.tag(1, runtime_1.WireType.Varint).int64(message.repositoryId);
     for (let i = 0; i < message.scope.length; i++) cachescope_1.CacheScope.internalBinaryWrite(message.scope[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
     let u = options.writeUnknownFields;
     return !1 !== u && (1 == u ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer), 
     writer;
    }
   }
   exports.CacheMetadata = new CacheMetadata$Type;
  },
  6630: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.CacheScope = void 0;
   const runtime_1 = __webpack_require__(7876), runtime_2 = __webpack_require__(7876), runtime_3 = __webpack_require__(7876), runtime_4 = __webpack_require__(7876), runtime_5 = __webpack_require__(7876);
   class CacheScope$Type extends runtime_5.MessageType {
    constructor() {
     super("github.actions.results.entities.v1.CacheScope", [ {
      no: 1,
      name: "scope",
      kind: "scalar",
      T: 9
     }, {
      no: 2,
      name: "permission",
      kind: "scalar",
      T: 3
     } ]);
    }
    create(value) {
     const message = {
      scope: "",
      permission: "0"
     };
     return globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, {
      enumerable: !1,
      value: this
     }), void 0 !== value && (0, runtime_3.reflectionMergePartial)(this, message, value), 
     message;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       message.scope = reader.string();
       break;

      case 2:
       message.permission = reader.int64().toString();
       break;

      default:
       let u = options.readUnknownField;
       if ("throw" === u) throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
     }
     return message;
    }
    internalBinaryWrite(message, writer, options) {
     "" !== message.scope && writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.scope), 
     "0" !== message.permission && writer.tag(2, runtime_1.WireType.Varint).int64(message.permission);
     let u = options.writeUnknownFields;
     return !1 !== u && (1 == u ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer), 
     writer;
    }
   }
   exports.CacheScope = new CacheScope$Type;
  },
  3444: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.saveCache = exports.reserveCache = exports.downloadCache = exports.getCacheEntry = void 0;
   const core = __importStar(__webpack_require__(4613)), http_client_1 = __webpack_require__(5001), auth_1 = __webpack_require__(3503), fs = __importStar(__webpack_require__(9896)), url_1 = __webpack_require__(7016), utils = __importStar(__webpack_require__(3318)), uploadUtils_1 = __webpack_require__(8327), downloadUtils_1 = __webpack_require__(9900), options_1 = __webpack_require__(7961), requestUtils_1 = __webpack_require__(6247), config_1 = __webpack_require__(5707), user_agent_1 = __webpack_require__(3860);
   function getCacheApiUrl(resource) {
    const baseUrl = (0, config_1.getCacheServiceURL)();
    if (!baseUrl) throw new Error("Cache Service Url not found, unable to restore cache.");
    const url = `${baseUrl}_apis/artifactcache/${resource}`;
    return core.debug(`Resource Url: ${url}`), url;
   }
   function createHttpClient() {
    const token = process.env.ACTIONS_RUNTIME_TOKEN || "", bearerCredentialHandler = new auth_1.BearerCredentialHandler(token);
    return new http_client_1.HttpClient((0, user_agent_1.getUserAgentString)(), [ bearerCredentialHandler ], {
     headers: {
      Accept: (type = "application/json", apiVersion = "6.0-preview.1", `${type};api-version=${apiVersion}`)
     }
    });
    var type, apiVersion;
   }
   function getContentRange(start, end) {
    return `bytes ${start}-${end}/*`;
   }
   function uploadChunk(httpClient, resourceUrl, openStream, start, end) {
    return __awaiter(this, void 0, void 0, (function*() {
     core.debug(`Uploading chunk of size ${end - start + 1} bytes at offset ${start} with content range: ${getContentRange(start, end)}`);
     const additionalHeaders = {
      "Content-Type": "application/octet-stream",
      "Content-Range": getContentRange(start, end)
     }, uploadChunkResponse = yield (0, requestUtils_1.retryHttpClientResponse)(`uploadChunk (start: ${start}, end: ${end})`, (() => __awaiter(this, void 0, void 0, (function*() {
      return httpClient.sendStream("PATCH", resourceUrl, openStream(), additionalHeaders);
     }))));
     if (!(0, requestUtils_1.isSuccessStatusCode)(uploadChunkResponse.message.statusCode)) throw new Error(`Cache service responded with ${uploadChunkResponse.message.statusCode} during upload chunk.`);
    }));
   }
   exports.getCacheEntry = function(keys, paths, options) {
    return __awaiter(this, void 0, void 0, (function*() {
     const httpClient = createHttpClient(), version = utils.getCacheVersion(paths, null == options ? void 0 : options.compressionMethod, null == options ? void 0 : options.enableCrossOsArchive), resource = `cache?keys=${encodeURIComponent(keys.join(","))}&version=${version}`, response = yield (0, 
     requestUtils_1.retryTypedResponse)("getCacheEntry", (() => __awaiter(this, void 0, void 0, (function*() {
      return httpClient.getJson(getCacheApiUrl(resource));
     }))));
     if (204 === response.statusCode) return core.isDebug() && (yield function(key, httpClient, version) {
      return __awaiter(this, void 0, void 0, (function*() {
       const resource = `caches?key=${encodeURIComponent(key)}`, response = yield (0, requestUtils_1.retryTypedResponse)("listCache", (() => __awaiter(this, void 0, void 0, (function*() {
        return httpClient.getJson(getCacheApiUrl(resource));
       }))));
       if (200 === response.statusCode) {
        const cacheListResult = response.result, totalCount = null == cacheListResult ? void 0 : cacheListResult.totalCount;
        if (totalCount && totalCount > 0) {
         core.debug(`No matching cache found for cache key '${key}', version '${version} and scope ${process.env.GITHUB_REF}. There exist one or more cache(s) with similar key but they have different version or scope. See more info on cache matching here: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key \nOther caches with similar key:`);
         for (const cacheEntry of (null == cacheListResult ? void 0 : cacheListResult.artifactCaches) || []) core.debug(`Cache Key: ${null == cacheEntry ? void 0 : cacheEntry.cacheKey}, Cache Version: ${null == cacheEntry ? void 0 : cacheEntry.cacheVersion}, Cache Scope: ${null == cacheEntry ? void 0 : cacheEntry.scope}, Cache Created: ${null == cacheEntry ? void 0 : cacheEntry.creationTime}`);
        }
       }
      }));
     }(keys[0], httpClient, version)), null;
     if (!(0, requestUtils_1.isSuccessStatusCode)(response.statusCode)) throw new Error(`Cache service responded with ${response.statusCode}`);
     const cacheResult = response.result, cacheDownloadUrl = null == cacheResult ? void 0 : cacheResult.archiveLocation;
     if (!cacheDownloadUrl) throw new Error("Cache not found.");
     return core.setSecret(cacheDownloadUrl), core.debug("Cache Result:"), core.debug(JSON.stringify(cacheResult)), 
     cacheResult;
    }));
   }, exports.downloadCache = function(archiveLocation, archivePath, options) {
    return __awaiter(this, void 0, void 0, (function*() {
     const archiveUrl = new url_1.URL(archiveLocation), downloadOptions = (0, options_1.getDownloadOptions)(options);
     archiveUrl.hostname.endsWith(".blob.core.windows.net") ? downloadOptions.useAzureSdk ? yield (0, 
     downloadUtils_1.downloadCacheStorageSDK)(archiveLocation, archivePath, downloadOptions) : downloadOptions.concurrentBlobDownloads ? yield (0, 
     downloadUtils_1.downloadCacheHttpClientConcurrent)(archiveLocation, archivePath, downloadOptions) : yield (0, 
     downloadUtils_1.downloadCacheHttpClient)(archiveLocation, archivePath) : yield (0, 
     downloadUtils_1.downloadCacheHttpClient)(archiveLocation, archivePath);
    }));
   }, exports.reserveCache = function(key, paths, options) {
    return __awaiter(this, void 0, void 0, (function*() {
     const httpClient = createHttpClient(), version = utils.getCacheVersion(paths, null == options ? void 0 : options.compressionMethod, null == options ? void 0 : options.enableCrossOsArchive), reserveCacheRequest = {
      key,
      version,
      cacheSize: null == options ? void 0 : options.cacheSize
     };
     return yield (0, requestUtils_1.retryTypedResponse)("reserveCache", (() => __awaiter(this, void 0, void 0, (function*() {
      return httpClient.postJson(getCacheApiUrl("caches"), reserveCacheRequest);
     }))));
    }));
   }, exports.saveCache = function(cacheId, archivePath, signedUploadURL, options) {
    return __awaiter(this, void 0, void 0, (function*() {
     if ((0, options_1.getUploadOptions)(options).useAzureSdk) {
      if (!signedUploadURL) throw new Error("Azure Storage SDK can only be used when a signed URL is provided.");
      yield (0, uploadUtils_1.uploadCacheArchiveSDK)(signedUploadURL, archivePath, options);
     } else {
      const httpClient = createHttpClient();
      core.debug("Upload cache"), yield function(httpClient, cacheId, archivePath, options) {
       return __awaiter(this, void 0, void 0, (function*() {
        const fileSize = utils.getArchiveFileSizeInBytes(archivePath), resourceUrl = getCacheApiUrl(`caches/${cacheId.toString()}`), fd = fs.openSync(archivePath, "r"), uploadOptions = (0, 
        options_1.getUploadOptions)(options), concurrency = utils.assertDefined("uploadConcurrency", uploadOptions.uploadConcurrency), maxChunkSize = utils.assertDefined("uploadChunkSize", uploadOptions.uploadChunkSize), parallelUploads = [ ...new Array(concurrency).keys() ];
        core.debug("Awaiting all uploads");
        let offset = 0;
        try {
         yield Promise.all(parallelUploads.map((() => __awaiter(this, void 0, void 0, (function*() {
          for (;offset < fileSize; ) {
           const chunkSize = Math.min(fileSize - offset, maxChunkSize), start = offset, end = offset + chunkSize - 1;
           offset += maxChunkSize, yield uploadChunk(httpClient, resourceUrl, (() => fs.createReadStream(archivePath, {
            fd,
            start,
            end,
            autoClose: !1
           }).on("error", (error => {
            throw new Error(`Cache upload failed because file read failed with ${error.message}`);
           }))), start, end);
          }
         })))));
        } finally {
         fs.closeSync(fd);
        }
       }));
      }(httpClient, cacheId, archivePath, options), core.debug("Commiting cache");
      const cacheSize = utils.getArchiveFileSizeInBytes(archivePath);
      core.info(`Cache Size: ~${Math.round(cacheSize / 1048576)} MB (${cacheSize} B)`);
      const commitCacheResponse = yield function(httpClient, cacheId, filesize) {
       return __awaiter(this, void 0, void 0, (function*() {
        const commitCacheRequest = {
         size: filesize
        };
        return yield (0, requestUtils_1.retryTypedResponse)("commitCache", (() => __awaiter(this, void 0, void 0, (function*() {
         return httpClient.postJson(getCacheApiUrl(`caches/${cacheId.toString()}`), commitCacheRequest);
        }))));
       }));
      }(httpClient, cacheId, cacheSize);
      if (!(0, requestUtils_1.isSuccessStatusCode)(commitCacheResponse.statusCode)) throw new Error(`Cache service responded with ${commitCacheResponse.statusCode} during commit cache.`);
      core.info("Cache saved successfully");
     }
    }));
   };
  },
  3318: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   }, __asyncValues = this && this.__asyncValues || function(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var i, m = o[Symbol.asyncIterator];
    return m ? m.call(o) : (o = "function" == typeof __values ? __values(o) : o[Symbol.iterator](), 
    i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
     return this;
    }, i);
    function verb(n) {
     i[n] = o[n] && function(v) {
      return new Promise((function(resolve, reject) {
       (function(resolve, reject, d, v) {
        Promise.resolve(v).then((function(v) {
         resolve({
          value: v,
          done: d
         });
        }), reject);
       })(resolve, reject, (v = o[n](v)).done, v.value);
      }));
     };
    }
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getRuntimeToken = exports.getCacheVersion = exports.assertDefined = exports.getGnuTarPathOnWindows = exports.getCacheFileName = exports.getCompressionMethod = exports.unlinkFile = exports.resolvePaths = exports.getArchiveFileSizeInBytes = exports.createTempDirectory = void 0;
   const core = __importStar(__webpack_require__(4613)), exec = __importStar(__webpack_require__(3021)), glob = __importStar(__webpack_require__(9457)), io = __importStar(__webpack_require__(8599)), crypto = __importStar(__webpack_require__(6982)), fs = __importStar(__webpack_require__(9896)), path = __importStar(__webpack_require__(6928)), semver = __importStar(__webpack_require__(1213)), util = __importStar(__webpack_require__(9023)), constants_1 = __webpack_require__(5264);
   function getVersion(app, additionalArgs = []) {
    return __awaiter(this, void 0, void 0, (function*() {
     let versionOutput = "";
     additionalArgs.push("--version"), core.debug(`Checking ${app} ${additionalArgs.join(" ")}`);
     try {
      yield exec.exec(`${app}`, additionalArgs, {
       ignoreReturnCode: !0,
       silent: !0,
       listeners: {
        stdout: data => versionOutput += data.toString(),
        stderr: data => versionOutput += data.toString()
       }
      });
     } catch (err) {
      core.debug(err.message);
     }
     return versionOutput = versionOutput.trim(), core.debug(versionOutput), versionOutput;
    }));
   }
   exports.createTempDirectory = function() {
    return __awaiter(this, void 0, void 0, (function*() {
     const IS_WINDOWS = "win32" === process.platform;
     let tempDirectory = process.env.RUNNER_TEMP || "";
     if (!tempDirectory) {
      let baseLocation;
      baseLocation = IS_WINDOWS ? process.env.USERPROFILE || "C:\\" : "darwin" === process.platform ? "/Users" : "/home", 
      tempDirectory = path.join(baseLocation, "actions", "temp");
     }
     const dest = path.join(tempDirectory, crypto.randomUUID());
     return yield io.mkdirP(dest), dest;
    }));
   }, exports.getArchiveFileSizeInBytes = function(filePath) {
    return fs.statSync(filePath).size;
   }, exports.resolvePaths = function(patterns) {
    var _a, e_1, _b, _c, _d;
    return __awaiter(this, void 0, void 0, (function*() {
     const paths = [], workspace = null !== (_d = process.env.GITHUB_WORKSPACE) && void 0 !== _d ? _d : process.cwd(), globber = yield glob.create(patterns.join("\n"), {
      implicitDescendants: !1
     });
     try {
      for (var _g, _e = !0, _f = __asyncValues(globber.globGenerator()); _g = yield _f.next(), 
      !(_a = _g.done); _e = !0) {
       _c = _g.value, _e = !1;
       const file = _c, relativeFile = path.relative(workspace, file).replace(new RegExp(`\\${path.sep}`, "g"), "/");
       core.debug(`Matched: ${relativeFile}`), "" === relativeFile ? paths.push(".") : paths.push(`${relativeFile}`);
      }
     } catch (e_1_1) {
      e_1 = {
       error: e_1_1
      };
     } finally {
      try {
       _e || _a || !(_b = _f.return) || (yield _b.call(_f));
      } finally {
       if (e_1) throw e_1.error;
      }
     }
     return paths;
    }));
   }, exports.unlinkFile = function(filePath) {
    return __awaiter(this, void 0, void 0, (function*() {
     return util.promisify(fs.unlink)(filePath);
    }));
   }, exports.getCompressionMethod = function() {
    return __awaiter(this, void 0, void 0, (function*() {
     const versionOutput = yield getVersion("zstd", [ "--quiet" ]), version = semver.clean(versionOutput);
     return core.debug(`zstd version: ${version}`), "" === versionOutput ? constants_1.CompressionMethod.Gzip : constants_1.CompressionMethod.ZstdWithoutLong;
    }));
   }, exports.getCacheFileName = function(compressionMethod) {
    return compressionMethod === constants_1.CompressionMethod.Gzip ? constants_1.CacheFilename.Gzip : constants_1.CacheFilename.Zstd;
   }, exports.getGnuTarPathOnWindows = function() {
    return __awaiter(this, void 0, void 0, (function*() {
     if (fs.existsSync(constants_1.GnuTarPathOnWindows)) return constants_1.GnuTarPathOnWindows;
     return (yield getVersion("tar")).toLowerCase().includes("gnu tar") ? io.which("tar") : "";
    }));
   }, exports.assertDefined = function(name, value) {
    if (void 0 === value) throw Error(`Expected ${name} but value was undefiend`);
    return value;
   }, exports.getCacheVersion = function(paths, compressionMethod, enableCrossOsArchive = !1) {
    const components = paths.slice();
    return compressionMethod && components.push(compressionMethod), "win32" !== process.platform || enableCrossOsArchive || components.push("windows-only"), 
    components.push("1.0"), crypto.createHash("sha256").update(components.join("|")).digest("hex");
   }, exports.getRuntimeToken = function() {
    const token = process.env.ACTIONS_RUNTIME_TOKEN;
    if (!token) throw new Error("Unable to get the ACTIONS_RUNTIME_TOKEN env variable");
    return token;
   };
  },
  5707: (__unused_webpack_module, exports) => {
   "use strict";
   function isGhes() {
    const hostname = new URL(process.env.GITHUB_SERVER_URL || "https://github.com").hostname.trimEnd().toUpperCase(), isGitHubHost = "GITHUB.COM" === hostname, isGheHost = hostname.endsWith(".GHE.COM"), isLocalHost = hostname.endsWith(".LOCALHOST");
    return !isGitHubHost && !isGheHost && !isLocalHost;
   }
   function getCacheServiceVersion() {
    return isGhes() ? "v1" : process.env.ACTIONS_CACHE_SERVICE_V2 ? "v2" : "v1";
   }
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getCacheServiceURL = exports.getCacheServiceVersion = exports.isGhes = void 0, 
   exports.isGhes = isGhes, exports.getCacheServiceVersion = getCacheServiceVersion, 
   exports.getCacheServiceURL = function() {
    const version = getCacheServiceVersion();
    switch (version) {
    case "v1":
     return process.env.ACTIONS_CACHE_URL || process.env.ACTIONS_RESULTS_URL || "";

    case "v2":
     return process.env.ACTIONS_RESULTS_URL || "";

    default:
     throw new Error(`Unsupported cache service version: ${version}`);
    }
   };
  },
  5264: (__unused_webpack_module, exports) => {
   "use strict";
   var CacheFilename, CompressionMethod, ArchiveToolType;
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.CacheFileSizeLimit = exports.ManifestFilename = exports.TarFilename = exports.SystemTarPathOnWindows = exports.GnuTarPathOnWindows = exports.SocketTimeout = exports.DefaultRetryDelay = exports.DefaultRetryAttempts = exports.ArchiveToolType = exports.CompressionMethod = exports.CacheFilename = void 0, 
   function(CacheFilename) {
    CacheFilename.Gzip = "cache.tgz", CacheFilename.Zstd = "cache.tzst";
   }(CacheFilename || (exports.CacheFilename = CacheFilename = {})), function(CompressionMethod) {
    CompressionMethod.Gzip = "gzip", CompressionMethod.ZstdWithoutLong = "zstd-without-long", 
    CompressionMethod.Zstd = "zstd";
   }(CompressionMethod || (exports.CompressionMethod = CompressionMethod = {})), function(ArchiveToolType) {
    ArchiveToolType.GNU = "gnu", ArchiveToolType.BSD = "bsd";
   }(ArchiveToolType || (exports.ArchiveToolType = ArchiveToolType = {})), exports.DefaultRetryAttempts = 2, 
   exports.DefaultRetryDelay = 5e3, exports.SocketTimeout = 5e3, exports.GnuTarPathOnWindows = `${process.env.PROGRAMFILES}\\Git\\usr\\bin\\tar.exe`, 
   exports.SystemTarPathOnWindows = `${process.env.SYSTEMDRIVE}\\Windows\\System32\\tar.exe`, 
   exports.TarFilename = "cache.tar", exports.ManifestFilename = "manifest.txt", exports.CacheFileSizeLimit = 10 * Math.pow(1024, 3);
  },
  9900: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.downloadCacheStorageSDK = exports.downloadCacheHttpClientConcurrent = exports.downloadCacheHttpClient = exports.DownloadProgress = void 0;
   const core = __importStar(__webpack_require__(4613)), http_client_1 = __webpack_require__(5001), storage_blob_1 = __webpack_require__(2695), buffer = __importStar(__webpack_require__(181)), fs = __importStar(__webpack_require__(9896)), stream = __importStar(__webpack_require__(2203)), util = __importStar(__webpack_require__(9023)), utils = __importStar(__webpack_require__(3318)), constants_1 = __webpack_require__(5264), requestUtils_1 = __webpack_require__(6247), abort_controller_1 = __webpack_require__(4599);
   class DownloadProgress {
    constructor(contentLength) {
     this.contentLength = contentLength, this.segmentIndex = 0, this.segmentSize = 0, 
     this.segmentOffset = 0, this.receivedBytes = 0, this.displayedComplete = !1, this.startTime = Date.now();
    }
    nextSegment(segmentSize) {
     this.segmentOffset = this.segmentOffset + this.segmentSize, this.segmentIndex = this.segmentIndex + 1, 
     this.segmentSize = segmentSize, this.receivedBytes = 0, core.debug(`Downloading segment at offset ${this.segmentOffset} with length ${this.segmentSize}...`);
    }
    setReceivedBytes(receivedBytes) {
     this.receivedBytes = receivedBytes;
    }
    getTransferredBytes() {
     return this.segmentOffset + this.receivedBytes;
    }
    isDone() {
     return this.getTransferredBytes() === this.contentLength;
    }
    display() {
     if (this.displayedComplete) return;
     const transferredBytes = this.segmentOffset + this.receivedBytes, percentage = (transferredBytes / this.contentLength * 100).toFixed(1), downloadSpeed = (transferredBytes / 1048576 / ((Date.now() - this.startTime) / 1e3)).toFixed(1);
     core.info(`Received ${transferredBytes} of ${this.contentLength} (${percentage}%), ${downloadSpeed} MBs/sec`), 
     this.isDone() && (this.displayedComplete = !0);
    }
    onProgress() {
     return progress => {
      this.setReceivedBytes(progress.loadedBytes);
     };
    }
    startDisplayTimer(delayInMs = 1e3) {
     const displayCallback = () => {
      this.display(), this.isDone() || (this.timeoutHandle = setTimeout(displayCallback, delayInMs));
     };
     this.timeoutHandle = setTimeout(displayCallback, delayInMs);
    }
    stopDisplayTimer() {
     this.timeoutHandle && (clearTimeout(this.timeoutHandle), this.timeoutHandle = void 0), 
     this.display();
    }
   }
   function downloadCacheHttpClient(archiveLocation, archivePath) {
    return __awaiter(this, void 0, void 0, (function*() {
     const writeStream = fs.createWriteStream(archivePath), httpClient = new http_client_1.HttpClient("actions/cache"), downloadResponse = yield (0, 
     requestUtils_1.retryHttpClientResponse)("downloadCache", (() => __awaiter(this, void 0, void 0, (function*() {
      return httpClient.get(archiveLocation);
     }))));
     downloadResponse.message.socket.setTimeout(constants_1.SocketTimeout, (() => {
      downloadResponse.message.destroy(), core.debug(`Aborting download, socket timed out after ${constants_1.SocketTimeout} ms`);
     })), yield function(response, output) {
      return __awaiter(this, void 0, void 0, (function*() {
       const pipeline = util.promisify(stream.pipeline);
       yield pipeline(response.message, output);
      }));
     }(downloadResponse, writeStream);
     const contentLengthHeader = downloadResponse.message.headers["content-length"];
     if (contentLengthHeader) {
      const expectedLength = parseInt(contentLengthHeader), actualLength = utils.getArchiveFileSizeInBytes(archivePath);
      if (actualLength !== expectedLength) throw new Error(`Incomplete download. Expected file size: ${expectedLength}, actual file size: ${actualLength}`);
     } else core.debug("Unable to validate download, no Content-Length header");
    }));
   }
   function downloadSegmentRetry(httpClient, archiveLocation, offset, count) {
    return __awaiter(this, void 0, void 0, (function*() {
     let failures = 0;
     for (;;) try {
      const timeout = 3e4, result = yield promiseWithTimeout(timeout, downloadSegment(httpClient, archiveLocation, offset, count));
      if ("string" == typeof result) throw new Error("downloadSegmentRetry failed due to timeout");
      return result;
     } catch (err) {
      if (failures >= 5) throw err;
      failures++;
     }
    }));
   }
   function downloadSegment(httpClient, archiveLocation, offset, count) {
    return __awaiter(this, void 0, void 0, (function*() {
     const partRes = yield (0, requestUtils_1.retryHttpClientResponse)("downloadCachePart", (() => __awaiter(this, void 0, void 0, (function*() {
      return yield httpClient.get(archiveLocation, {
       Range: `bytes=${offset}-${offset + count - 1}`
      });
     }))));
     if (!partRes.readBodyBuffer) throw new Error("Expected HttpClientResponse to implement readBodyBuffer");
     return {
      offset,
      count,
      buffer: yield partRes.readBodyBuffer()
     };
    }));
   }
   exports.DownloadProgress = DownloadProgress, exports.downloadCacheHttpClient = downloadCacheHttpClient, 
   exports.downloadCacheHttpClientConcurrent = function(archiveLocation, archivePath, options) {
    var _a;
    return __awaiter(this, void 0, void 0, (function*() {
     const archiveDescriptor = yield fs.promises.open(archivePath, "w"), httpClient = new http_client_1.HttpClient("actions/cache", void 0, {
      socketTimeout: options.timeoutInMs,
      keepAlive: !0
     });
     try {
      const lengthHeader = (yield (0, requestUtils_1.retryHttpClientResponse)("downloadCacheMetadata", (() => __awaiter(this, void 0, void 0, (function*() {
       return yield httpClient.request("HEAD", archiveLocation, null, {});
      }))))).message.headers["content-length"];
      if (null == lengthHeader) throw new Error("Content-Length not found on blob response");
      const length = parseInt(lengthHeader);
      if (Number.isNaN(length)) throw new Error(`Could not interpret Content-Length: ${length}`);
      const downloads = [], blockSize = 4194304;
      for (let offset = 0; offset < length; offset += blockSize) {
       const count = Math.min(blockSize, length - offset);
       downloads.push({
        offset,
        promiseGetter: () => __awaiter(this, void 0, void 0, (function*() {
         return yield downloadSegmentRetry(httpClient, archiveLocation, offset, count);
        }))
       });
      }
      downloads.reverse();
      let actives = 0, bytesDownloaded = 0;
      const progress = new DownloadProgress(length);
      progress.startDisplayTimer();
      const progressFn = progress.onProgress(), activeDownloads = [];
      let nextDownload;
      const waitAndWrite = () => __awaiter(this, void 0, void 0, (function*() {
       const segment = yield Promise.race(Object.values(activeDownloads));
       yield archiveDescriptor.write(segment.buffer, 0, segment.count, segment.offset), 
       actives--, delete activeDownloads[segment.offset], bytesDownloaded += segment.count, 
       progressFn({
        loadedBytes: bytesDownloaded
       });
      }));
      for (;nextDownload = downloads.pop(); ) activeDownloads[nextDownload.offset] = nextDownload.promiseGetter(), 
      actives++, actives >= (null !== (_a = options.downloadConcurrency) && void 0 !== _a ? _a : 10) && (yield waitAndWrite());
      for (;actives > 0; ) yield waitAndWrite();
     } finally {
      httpClient.dispose(), yield archiveDescriptor.close();
     }
    }));
   }, exports.downloadCacheStorageSDK = function(archiveLocation, archivePath, options) {
    var _a;
    return __awaiter(this, void 0, void 0, (function*() {
     const client = new storage_blob_1.BlockBlobClient(archiveLocation, void 0, {
      retryOptions: {
       tryTimeoutInMs: options.timeoutInMs
      }
     }), properties = yield client.getProperties(), contentLength = null !== (_a = properties.contentLength) && void 0 !== _a ? _a : -1;
     if (contentLength < 0) core.debug("Unable to determine content length, downloading file with http-client..."), 
     yield downloadCacheHttpClient(archiveLocation, archivePath); else {
      const maxSegmentSize = Math.min(134217728, buffer.constants.MAX_LENGTH), downloadProgress = new DownloadProgress(contentLength), fd = fs.openSync(archivePath, "w");
      try {
       downloadProgress.startDisplayTimer();
       const controller = new abort_controller_1.AbortController, abortSignal = controller.signal;
       for (;!downloadProgress.isDone(); ) {
        const segmentStart = downloadProgress.segmentOffset + downloadProgress.segmentSize, segmentSize = Math.min(maxSegmentSize, contentLength - segmentStart);
        downloadProgress.nextSegment(segmentSize);
        const result = yield promiseWithTimeout(options.segmentTimeoutInMs || 36e5, client.downloadToBuffer(segmentStart, segmentSize, {
         abortSignal,
         concurrency: options.downloadConcurrency,
         onProgress: downloadProgress.onProgress()
        }));
        if ("timeout" === result) throw controller.abort(), new Error("Aborting cache download as the download time exceeded the timeout.");
        Buffer.isBuffer(result) && fs.writeFileSync(fd, result);
       }
      } finally {
       downloadProgress.stopDisplayTimer(), fs.closeSync(fd);
      }
     }
    }));
   };
   const promiseWithTimeout = (timeoutMs, promise) => __awaiter(void 0, void 0, void 0, (function*() {
    let timeoutHandle;
    const timeoutPromise = new Promise((resolve => {
     timeoutHandle = setTimeout((() => resolve("timeout")), timeoutMs);
    }));
    return Promise.race([ promise, timeoutPromise ]).then((result => (clearTimeout(timeoutHandle), 
    result)));
   }));
  },
  6247: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.retryHttpClientResponse = exports.retryTypedResponse = exports.retry = exports.isRetryableStatusCode = exports.isServerErrorStatusCode = exports.isSuccessStatusCode = void 0;
   const core = __importStar(__webpack_require__(4613)), http_client_1 = __webpack_require__(5001), constants_1 = __webpack_require__(5264);
   function isServerErrorStatusCode(statusCode) {
    return !statusCode || statusCode >= 500;
   }
   function isRetryableStatusCode(statusCode) {
    if (!statusCode) return !1;
    return [ http_client_1.HttpCodes.BadGateway, http_client_1.HttpCodes.ServiceUnavailable, http_client_1.HttpCodes.GatewayTimeout ].includes(statusCode);
   }
   function sleep(milliseconds) {
    return __awaiter(this, void 0, void 0, (function*() {
     return new Promise((resolve => setTimeout(resolve, milliseconds)));
    }));
   }
   function retry(name, method, getStatusCode, maxAttempts = constants_1.DefaultRetryAttempts, delay = constants_1.DefaultRetryDelay, onError = void 0) {
    return __awaiter(this, void 0, void 0, (function*() {
     let errorMessage = "", attempt = 1;
     for (;attempt <= maxAttempts; ) {
      let response, statusCode, isRetryable = !1;
      try {
       response = yield method();
      } catch (error) {
       onError && (response = onError(error)), isRetryable = !0, errorMessage = error.message;
      }
      if (response && (statusCode = getStatusCode(response), !isServerErrorStatusCode(statusCode))) return response;
      if (statusCode && (isRetryable = isRetryableStatusCode(statusCode), errorMessage = `Cache service responded with ${statusCode}`), 
      core.debug(`${name} - Attempt ${attempt} of ${maxAttempts} failed with error: ${errorMessage}`), 
      !isRetryable) {
       core.debug(`${name} - Error is not retryable`);
       break;
      }
      yield sleep(delay), attempt++;
     }
     throw Error(`${name} failed: ${errorMessage}`);
    }));
   }
   exports.isSuccessStatusCode = function(statusCode) {
    return !!statusCode && (statusCode >= 200 && statusCode < 300);
   }, exports.isServerErrorStatusCode = isServerErrorStatusCode, exports.isRetryableStatusCode = isRetryableStatusCode, 
   exports.retry = retry, exports.retryTypedResponse = function(name, method, maxAttempts = constants_1.DefaultRetryAttempts, delay = constants_1.DefaultRetryDelay) {
    return __awaiter(this, void 0, void 0, (function*() {
     return yield retry(name, method, (response => response.statusCode), maxAttempts, delay, (error => error instanceof http_client_1.HttpClientError ? {
      statusCode: error.statusCode,
      result: null,
      headers: {},
      error
     } : void 0));
    }));
   }, exports.retryHttpClientResponse = function(name, method, maxAttempts = constants_1.DefaultRetryAttempts, delay = constants_1.DefaultRetryDelay) {
    return __awaiter(this, void 0, void 0, (function*() {
     return yield retry(name, method, (response => response.message.statusCode), maxAttempts, delay);
    }));
   };
  },
  892: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.internalCacheTwirpClient = void 0;
   const core_1 = __webpack_require__(4613), user_agent_1 = __webpack_require__(3860), errors_1 = __webpack_require__(5500), config_1 = __webpack_require__(5707), cacheUtils_1 = __webpack_require__(3318), auth_1 = __webpack_require__(3503), http_client_1 = __webpack_require__(5001), cache_twirp_client_1 = __webpack_require__(5895), util_1 = __webpack_require__(5115);
   class CacheServiceClient {
    constructor(userAgent, maxAttempts, baseRetryIntervalMilliseconds, retryMultiplier) {
     this.maxAttempts = 5, this.baseRetryIntervalMilliseconds = 3e3, this.retryMultiplier = 1.5;
     const token = (0, cacheUtils_1.getRuntimeToken)();
     this.baseUrl = (0, config_1.getCacheServiceURL)(), maxAttempts && (this.maxAttempts = maxAttempts), 
     baseRetryIntervalMilliseconds && (this.baseRetryIntervalMilliseconds = baseRetryIntervalMilliseconds), 
     retryMultiplier && (this.retryMultiplier = retryMultiplier), this.httpClient = new http_client_1.HttpClient(userAgent, [ new auth_1.BearerCredentialHandler(token) ]);
    }
    request(service, method, contentType, data) {
     return __awaiter(this, void 0, void 0, (function*() {
      const url = new URL(`/twirp/${service}/${method}`, this.baseUrl).href;
      (0, core_1.debug)(`[Request] ${method} ${url}`);
      const headers = {
       "Content-Type": contentType
      };
      try {
       const {body} = yield this.retryableRequest((() => __awaiter(this, void 0, void 0, (function*() {
        return this.httpClient.post(url, JSON.stringify(data), headers);
       }))));
       return body;
      } catch (error) {
       throw new Error(`Failed to ${method}: ${error.message}`);
      }
     }));
    }
    retryableRequest(operation) {
     return __awaiter(this, void 0, void 0, (function*() {
      let attempt = 0, errorMessage = "", rawBody = "";
      for (;attempt < this.maxAttempts; ) {
       let isRetryable = !1;
       try {
        const response = yield operation(), statusCode = response.message.statusCode;
        rawBody = yield response.readBody(), (0, core_1.debug)(`[Response] - ${response.message.statusCode}`), 
        (0, core_1.debug)(`Headers: ${JSON.stringify(response.message.headers, null, 2)}`);
        const body = JSON.parse(rawBody);
        if ((0, util_1.maskSecretUrls)(body), (0, core_1.debug)(`Body: ${JSON.stringify(body, null, 2)}`), 
        this.isSuccessStatusCode(statusCode)) return {
         response,
         body
        };
        if (isRetryable = this.isRetryableHttpStatusCode(statusCode), errorMessage = `Failed request: (${statusCode}) ${response.message.statusMessage}`, 
        body.msg) {
         if (errors_1.UsageError.isUsageErrorMessage(body.msg)) throw new errors_1.UsageError;
         errorMessage = `${errorMessage}: ${body.msg}`;
        }
       } catch (error) {
        if (error instanceof SyntaxError && (0, core_1.debug)(`Raw Body: ${rawBody}`), error instanceof errors_1.UsageError) throw error;
        if (errors_1.NetworkError.isNetworkErrorCode(null == error ? void 0 : error.code)) throw new errors_1.NetworkError(null == error ? void 0 : error.code);
        isRetryable = !0, errorMessage = error.message;
       }
       if (!isRetryable) throw new Error(`Received non-retryable error: ${errorMessage}`);
       if (attempt + 1 === this.maxAttempts) throw new Error(`Failed to make request after ${this.maxAttempts} attempts: ${errorMessage}`);
       const retryTimeMilliseconds = this.getExponentialRetryTimeMilliseconds(attempt);
       (0, core_1.info)(`Attempt ${attempt + 1} of ${this.maxAttempts} failed with error: ${errorMessage}. Retrying request in ${retryTimeMilliseconds} ms...`), 
       yield this.sleep(retryTimeMilliseconds), attempt++;
      }
      throw new Error("Request failed");
     }));
    }
    isSuccessStatusCode(statusCode) {
     return !!statusCode && (statusCode >= 200 && statusCode < 300);
    }
    isRetryableHttpStatusCode(statusCode) {
     if (!statusCode) return !1;
     return [ http_client_1.HttpCodes.BadGateway, http_client_1.HttpCodes.GatewayTimeout, http_client_1.HttpCodes.InternalServerError, http_client_1.HttpCodes.ServiceUnavailable, http_client_1.HttpCodes.TooManyRequests ].includes(statusCode);
    }
    sleep(milliseconds) {
     return __awaiter(this, void 0, void 0, (function*() {
      return new Promise((resolve => setTimeout(resolve, milliseconds)));
     }));
    }
    getExponentialRetryTimeMilliseconds(attempt) {
     if (attempt < 0) throw new Error("attempt should be a positive integer");
     if (0 === attempt) return this.baseRetryIntervalMilliseconds;
     const minTime = this.baseRetryIntervalMilliseconds * Math.pow(this.retryMultiplier, attempt), maxTime = minTime * this.retryMultiplier;
     return Math.trunc(Math.random() * (maxTime - minTime) + minTime);
    }
   }
   exports.internalCacheTwirpClient = function(options) {
    const client = new CacheServiceClient((0, user_agent_1.getUserAgentString)(), null == options ? void 0 : options.maxAttempts, null == options ? void 0 : options.retryIntervalMs, null == options ? void 0 : options.retryMultiplier);
    return new cache_twirp_client_1.CacheServiceClientJSON(client);
   };
  },
  5500: (__unused_webpack_module, exports) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.UsageError = exports.NetworkError = exports.GHESNotSupportedError = exports.CacheNotFoundError = exports.InvalidResponseError = exports.FilesNotFoundError = void 0;
   class FilesNotFoundError extends Error {
    constructor(files = []) {
     let message = "No files were found to upload";
     files.length > 0 && (message += `: ${files.join(", ")}`), super(message), this.files = files, 
     this.name = "FilesNotFoundError";
    }
   }
   exports.FilesNotFoundError = FilesNotFoundError;
   class InvalidResponseError extends Error {
    constructor(message) {
     super(message), this.name = "InvalidResponseError";
    }
   }
   exports.InvalidResponseError = InvalidResponseError;
   class CacheNotFoundError extends Error {
    constructor(message = "Cache not found") {
     super(message), this.name = "CacheNotFoundError";
    }
   }
   exports.CacheNotFoundError = CacheNotFoundError;
   class GHESNotSupportedError extends Error {
    constructor(message = "@actions/cache v4.1.4+, actions/cache/save@v4+ and actions/cache/restore@v4+ are not currently supported on GHES.") {
     super(message), this.name = "GHESNotSupportedError";
    }
   }
   exports.GHESNotSupportedError = GHESNotSupportedError;
   class NetworkError extends Error {
    constructor(code) {
     super(`Unable to make request: ${code}\nIf you are using self-hosted runners, please make sure your runner has access to all GitHub endpoints: https://docs.github.com/en/actions/hosting-your-own-runners/managing-self-hosted-runners/about-self-hosted-runners#communication-between-self-hosted-runners-and-github`), 
     this.code = code, this.name = "NetworkError";
    }
   }
   exports.NetworkError = NetworkError, NetworkError.isNetworkErrorCode = code => !!code && [ "ECONNRESET", "ENOTFOUND", "ETIMEDOUT", "ECONNREFUSED", "EHOSTUNREACH" ].includes(code);
   class UsageError extends Error {
    constructor() {
     super("Cache storage quota has been hit. Unable to upload any new cache entries. Usage is recalculated every 6-12 hours.\nMore info on storage limits: https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions#calculating-minute-and-storage-spending"), 
     this.name = "UsageError";
    }
   }
   exports.UsageError = UsageError, UsageError.isUsageErrorMessage = msg => !!msg && msg.includes("insufficient usage");
  },
  3860: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getUserAgentString = void 0;
   const packageJson = __webpack_require__(8187);
   exports.getUserAgentString = function() {
    return `@actions/cache-${packageJson.version}`;
   };
  },
  5115: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.maskSecretUrls = exports.maskSigUrl = void 0;
   const core_1 = __webpack_require__(4613);
   function maskSigUrl(url) {
    if (url) try {
     const signature = new URL(url).searchParams.get("sig");
     signature && ((0, core_1.setSecret)(signature), (0, core_1.setSecret)(encodeURIComponent(signature)));
    } catch (error) {
     (0, core_1.debug)(`Failed to parse URL: ${url} ${error instanceof Error ? error.message : String(error)}`);
    }
   }
   exports.maskSigUrl = maskSigUrl, exports.maskSecretUrls = function(body) {
    "object" == typeof body && null !== body ? ("signed_upload_url" in body && "string" == typeof body.signed_upload_url && maskSigUrl(body.signed_upload_url), 
    "signed_download_url" in body && "string" == typeof body.signed_download_url && maskSigUrl(body.signed_download_url)) : (0, 
    core_1.debug)("body is not an object or is null");
   };
  },
  2: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.createTar = exports.extractTar = exports.listTar = void 0;
   const exec_1 = __webpack_require__(3021), io = __importStar(__webpack_require__(8599)), fs_1 = __webpack_require__(9896), path = __importStar(__webpack_require__(6928)), utils = __importStar(__webpack_require__(3318)), constants_1 = __webpack_require__(5264), IS_WINDOWS = "win32" === process.platform;
   function getCommands(compressionMethod, type, archivePath = "") {
    return __awaiter(this, void 0, void 0, (function*() {
     let args;
     const tarPath = yield function() {
      return __awaiter(this, void 0, void 0, (function*() {
       switch (process.platform) {
       case "win32":
        {
         const gnuTar = yield utils.getGnuTarPathOnWindows(), systemTar = constants_1.SystemTarPathOnWindows;
         if (gnuTar) return {
          path: gnuTar,
          type: constants_1.ArchiveToolType.GNU
         };
         if ((0, fs_1.existsSync)(systemTar)) return {
          path: systemTar,
          type: constants_1.ArchiveToolType.BSD
         };
         break;
        }

       case "darwin":
        {
         const gnuTar = yield io.which("gtar", !1);
         return gnuTar ? {
          path: gnuTar,
          type: constants_1.ArchiveToolType.GNU
         } : {
          path: yield io.which("tar", !0),
          type: constants_1.ArchiveToolType.BSD
         };
        }
       }
       return {
        path: yield io.which("tar", !0),
        type: constants_1.ArchiveToolType.GNU
       };
      }));
     }(), tarArgs = yield function(tarPath, compressionMethod, type, archivePath = "") {
      return __awaiter(this, void 0, void 0, (function*() {
       const args = [ `"${tarPath.path}"` ], cacheFileName = utils.getCacheFileName(compressionMethod), workingDirectory = getWorkingDirectory(), BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD && compressionMethod !== constants_1.CompressionMethod.Gzip && IS_WINDOWS;
       switch (type) {
       case "create":
        args.push("--posix", "-cf", BSD_TAR_ZSTD ? "cache.tar" : cacheFileName.replace(new RegExp(`\\${path.sep}`, "g"), "/"), "--exclude", BSD_TAR_ZSTD ? "cache.tar" : cacheFileName.replace(new RegExp(`\\${path.sep}`, "g"), "/"), "-P", "-C", workingDirectory.replace(new RegExp(`\\${path.sep}`, "g"), "/"), "--files-from", constants_1.ManifestFilename);
        break;

       case "extract":
        args.push("-xf", BSD_TAR_ZSTD ? "cache.tar" : archivePath.replace(new RegExp(`\\${path.sep}`, "g"), "/"), "-P", "-C", workingDirectory.replace(new RegExp(`\\${path.sep}`, "g"), "/"));
        break;

       case "list":
        args.push("-tf", BSD_TAR_ZSTD ? "cache.tar" : archivePath.replace(new RegExp(`\\${path.sep}`, "g"), "/"), "-P");
       }
       if (tarPath.type === constants_1.ArchiveToolType.GNU) switch (process.platform) {
       case "win32":
        args.push("--force-local");
        break;

       case "darwin":
        args.push("--delay-directory-restore");
       }
       return args;
      }));
     }(tarPath, compressionMethod, type, archivePath), compressionArgs = "create" !== type ? yield function(tarPath, compressionMethod, archivePath) {
      return __awaiter(this, void 0, void 0, (function*() {
       const BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD && compressionMethod !== constants_1.CompressionMethod.Gzip && IS_WINDOWS;
       switch (compressionMethod) {
       case constants_1.CompressionMethod.Zstd:
        return BSD_TAR_ZSTD ? [ "zstd -d --long=30 --force -o", constants_1.TarFilename, archivePath.replace(new RegExp(`\\${path.sep}`, "g"), "/") ] : [ "--use-compress-program", IS_WINDOWS ? '"zstd -d --long=30"' : "unzstd --long=30" ];

       case constants_1.CompressionMethod.ZstdWithoutLong:
        return BSD_TAR_ZSTD ? [ "zstd -d --force -o", constants_1.TarFilename, archivePath.replace(new RegExp(`\\${path.sep}`, "g"), "/") ] : [ "--use-compress-program", IS_WINDOWS ? '"zstd -d"' : "unzstd" ];

       default:
        return [ "-z" ];
       }
      }));
     }(tarPath, compressionMethod, archivePath) : yield function(tarPath, compressionMethod) {
      return __awaiter(this, void 0, void 0, (function*() {
       const cacheFileName = utils.getCacheFileName(compressionMethod), BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD && compressionMethod !== constants_1.CompressionMethod.Gzip && IS_WINDOWS;
       switch (compressionMethod) {
       case constants_1.CompressionMethod.Zstd:
        return BSD_TAR_ZSTD ? [ "zstd -T0 --long=30 --force -o", cacheFileName.replace(new RegExp(`\\${path.sep}`, "g"), "/"), constants_1.TarFilename ] : [ "--use-compress-program", IS_WINDOWS ? '"zstd -T0 --long=30"' : "zstdmt --long=30" ];

       case constants_1.CompressionMethod.ZstdWithoutLong:
        return BSD_TAR_ZSTD ? [ "zstd -T0 --force -o", cacheFileName.replace(new RegExp(`\\${path.sep}`, "g"), "/"), constants_1.TarFilename ] : [ "--use-compress-program", IS_WINDOWS ? '"zstd -T0"' : "zstdmt" ];

       default:
        return [ "-z" ];
       }
      }));
     }(tarPath, compressionMethod), BSD_TAR_ZSTD = tarPath.type === constants_1.ArchiveToolType.BSD && compressionMethod !== constants_1.CompressionMethod.Gzip && IS_WINDOWS;
     return args = BSD_TAR_ZSTD && "create" !== type ? [ [ ...compressionArgs ].join(" "), [ ...tarArgs ].join(" ") ] : [ [ ...tarArgs ].join(" "), [ ...compressionArgs ].join(" ") ], 
     BSD_TAR_ZSTD ? args : [ args.join(" ") ];
    }));
   }
   function getWorkingDirectory() {
    var _a;
    return null !== (_a = process.env.GITHUB_WORKSPACE) && void 0 !== _a ? _a : process.cwd();
   }
   function execCommands(commands, cwd) {
    return __awaiter(this, void 0, void 0, (function*() {
     for (const command of commands) try {
      yield (0, exec_1.exec)(command, void 0, {
       cwd,
       env: Object.assign(Object.assign({}, process.env), {
        MSYS: "winsymlinks:nativestrict"
       })
      });
     } catch (error) {
      throw new Error(`${command.split(" ")[0]} failed with error: ${null == error ? void 0 : error.message}`);
     }
    }));
   }
   exports.listTar = function(archivePath, compressionMethod) {
    return __awaiter(this, void 0, void 0, (function*() {
     const commands = yield getCommands(compressionMethod, "list", archivePath);
     yield execCommands(commands);
    }));
   }, exports.extractTar = function(archivePath, compressionMethod) {
    return __awaiter(this, void 0, void 0, (function*() {
     const workingDirectory = getWorkingDirectory();
     yield io.mkdirP(workingDirectory);
     const commands = yield getCommands(compressionMethod, "extract", archivePath);
     yield execCommands(commands);
    }));
   }, exports.createTar = function(archiveFolder, sourceDirectories, compressionMethod) {
    return __awaiter(this, void 0, void 0, (function*() {
     (0, fs_1.writeFileSync)(path.join(archiveFolder, constants_1.ManifestFilename), sourceDirectories.join("\n"));
     const commands = yield getCommands(compressionMethod, "create");
     yield execCommands(commands, archiveFolder);
    }));
   };
  },
  8327: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.uploadCacheArchiveSDK = exports.UploadProgress = void 0;
   const core = __importStar(__webpack_require__(4613)), storage_blob_1 = __webpack_require__(2695), errors_1 = __webpack_require__(5500);
   class UploadProgress {
    constructor(contentLength) {
     this.contentLength = contentLength, this.sentBytes = 0, this.displayedComplete = !1, 
     this.startTime = Date.now();
    }
    setSentBytes(sentBytes) {
     this.sentBytes = sentBytes;
    }
    getTransferredBytes() {
     return this.sentBytes;
    }
    isDone() {
     return this.getTransferredBytes() === this.contentLength;
    }
    display() {
     if (this.displayedComplete) return;
     const transferredBytes = this.sentBytes, percentage = (transferredBytes / this.contentLength * 100).toFixed(1), uploadSpeed = (transferredBytes / 1048576 / ((Date.now() - this.startTime) / 1e3)).toFixed(1);
     core.info(`Sent ${transferredBytes} of ${this.contentLength} (${percentage}%), ${uploadSpeed} MBs/sec`), 
     this.isDone() && (this.displayedComplete = !0);
    }
    onProgress() {
     return progress => {
      this.setSentBytes(progress.loadedBytes);
     };
    }
    startDisplayTimer(delayInMs = 1e3) {
     const displayCallback = () => {
      this.display(), this.isDone() || (this.timeoutHandle = setTimeout(displayCallback, delayInMs));
     };
     this.timeoutHandle = setTimeout(displayCallback, delayInMs);
    }
    stopDisplayTimer() {
     this.timeoutHandle && (clearTimeout(this.timeoutHandle), this.timeoutHandle = void 0), 
     this.display();
    }
   }
   exports.UploadProgress = UploadProgress, exports.uploadCacheArchiveSDK = function(signedUploadURL, archivePath, options) {
    var _a;
    return __awaiter(this, void 0, void 0, (function*() {
     const blobClient = new storage_blob_1.BlobClient(signedUploadURL), blockBlobClient = blobClient.getBlockBlobClient(), uploadProgress = new UploadProgress(null !== (_a = null == options ? void 0 : options.archiveSizeBytes) && void 0 !== _a ? _a : 0), uploadOptions = {
      blockSize: null == options ? void 0 : options.uploadChunkSize,
      concurrency: null == options ? void 0 : options.uploadConcurrency,
      maxSingleShotSize: 134217728,
      onProgress: uploadProgress.onProgress()
     };
     try {
      uploadProgress.startDisplayTimer(), core.debug(`BlobClient: ${blobClient.name}:${blobClient.accountName}:${blobClient.containerName}`);
      const response = yield blockBlobClient.uploadFile(archivePath, uploadOptions);
      if (response._response.status >= 400) throw new errors_1.InvalidResponseError(`uploadCacheArchiveSDK: upload failed with status code ${response._response.status}`);
      return response;
     } catch (error) {
      throw core.warning(`uploadCacheArchiveSDK: internal error uploading cache archive: ${error.message}`), 
      error;
     } finally {
      uploadProgress.stopDisplayTimer();
     }
    }));
   };
  },
  7961: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getDownloadOptions = exports.getUploadOptions = void 0;
   const core = __importStar(__webpack_require__(4613));
   exports.getUploadOptions = function(copy) {
    const result = {
     useAzureSdk: !1,
     uploadConcurrency: 4,
     uploadChunkSize: 33554432
    };
    return copy && ("boolean" == typeof copy.useAzureSdk && (result.useAzureSdk = copy.useAzureSdk), 
    "number" == typeof copy.uploadConcurrency && (result.uploadConcurrency = copy.uploadConcurrency), 
    "number" == typeof copy.uploadChunkSize && (result.uploadChunkSize = copy.uploadChunkSize)), 
    result.uploadConcurrency = isNaN(Number(process.env.CACHE_UPLOAD_CONCURRENCY)) ? result.uploadConcurrency : Math.min(32, Number(process.env.CACHE_UPLOAD_CONCURRENCY)), 
    result.uploadChunkSize = isNaN(Number(process.env.CACHE_UPLOAD_CHUNK_SIZE)) ? result.uploadChunkSize : Math.min(134217728, 1024 * Number(process.env.CACHE_UPLOAD_CHUNK_SIZE) * 1024), 
    core.debug(`Use Azure SDK: ${result.useAzureSdk}`), core.debug(`Upload concurrency: ${result.uploadConcurrency}`), 
    core.debug(`Upload chunk size: ${result.uploadChunkSize}`), result;
   }, exports.getDownloadOptions = function(copy) {
    const result = {
     useAzureSdk: !1,
     concurrentBlobDownloads: !0,
     downloadConcurrency: 8,
     timeoutInMs: 3e4,
     segmentTimeoutInMs: 6e5,
     lookupOnly: !1
    };
    copy && ("boolean" == typeof copy.useAzureSdk && (result.useAzureSdk = copy.useAzureSdk), 
    "boolean" == typeof copy.concurrentBlobDownloads && (result.concurrentBlobDownloads = copy.concurrentBlobDownloads), 
    "number" == typeof copy.downloadConcurrency && (result.downloadConcurrency = copy.downloadConcurrency), 
    "number" == typeof copy.timeoutInMs && (result.timeoutInMs = copy.timeoutInMs), 
    "number" == typeof copy.segmentTimeoutInMs && (result.segmentTimeoutInMs = copy.segmentTimeoutInMs), 
    "boolean" == typeof copy.lookupOnly && (result.lookupOnly = copy.lookupOnly));
    const segmentDownloadTimeoutMins = process.env.SEGMENT_DOWNLOAD_TIMEOUT_MINS;
    return segmentDownloadTimeoutMins && !isNaN(Number(segmentDownloadTimeoutMins)) && isFinite(Number(segmentDownloadTimeoutMins)) && (result.segmentTimeoutInMs = 60 * Number(segmentDownloadTimeoutMins) * 1e3), 
    core.debug(`Use Azure SDK: ${result.useAzureSdk}`), core.debug(`Download concurrency: ${result.downloadConcurrency}`), 
    core.debug(`Request timeout (ms): ${result.timeoutInMs}`), core.debug(`Cache segment download timeout mins env var: ${process.env.SEGMENT_DOWNLOAD_TIMEOUT_MINS}`), 
    core.debug(`Segment download timeout (ms): ${result.segmentTimeoutInMs}`), core.debug(`Lookup only: ${result.lookupOnly}`), 
    result;
   };
  },
  9457: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.create = void 0;
   const internal_globber_1 = __webpack_require__(948);
   exports.create = function(patterns, options) {
    return __awaiter(this, void 0, void 0, (function*() {
     return yield internal_globber_1.DefaultGlobber.create(patterns, options);
    }));
   };
  },
  3087: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getOptions = void 0;
   const core = __importStar(__webpack_require__(4613));
   exports.getOptions = function(copy) {
    const result = {
     followSymbolicLinks: !0,
     implicitDescendants: !0,
     omitBrokenSymbolicLinks: !0
    };
    return copy && ("boolean" == typeof copy.followSymbolicLinks && (result.followSymbolicLinks = copy.followSymbolicLinks, 
    core.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`)), "boolean" == typeof copy.implicitDescendants && (result.implicitDescendants = copy.implicitDescendants, 
    core.debug(`implicitDescendants '${result.implicitDescendants}'`)), "boolean" == typeof copy.omitBrokenSymbolicLinks && (result.omitBrokenSymbolicLinks = copy.omitBrokenSymbolicLinks, 
    core.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`))), result;
   };
  },
  948: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   }, __asyncValues = this && this.__asyncValues || function(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var i, m = o[Symbol.asyncIterator];
    return m ? m.call(o) : (o = "function" == typeof __values ? __values(o) : o[Symbol.iterator](), 
    i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
     return this;
    }, i);
    function verb(n) {
     i[n] = o[n] && function(v) {
      return new Promise((function(resolve, reject) {
       (function(resolve, reject, d, v) {
        Promise.resolve(v).then((function(v) {
         resolve({
          value: v,
          done: d
         });
        }), reject);
       })(resolve, reject, (v = o[n](v)).done, v.value);
      }));
     };
    }
   }, __await = this && this.__await || function(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
   }, __asyncGenerator = this && this.__asyncGenerator || function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var i, g = generator.apply(thisArg, _arguments || []), q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
     return this;
    }, i;
    function verb(n) {
     g[n] && (i[n] = function(v) {
      return new Promise((function(a, b) {
       q.push([ n, v, a, b ]) > 1 || resume(n, v);
      }));
     });
    }
    function resume(n, v) {
     try {
      (r = g[n](v)).value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
     } catch (e) {
      settle(q[0][3], e);
     }
     var r;
    }
    function fulfill(value) {
     resume("next", value);
    }
    function reject(value) {
     resume("throw", value);
    }
    function settle(f, v) {
     f(v), q.shift(), q.length && resume(q[0][0], q[0][1]);
    }
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.DefaultGlobber = void 0;
   const core = __importStar(__webpack_require__(4613)), fs = __importStar(__webpack_require__(9896)), globOptionsHelper = __importStar(__webpack_require__(3087)), path = __importStar(__webpack_require__(6928)), patternHelper = __importStar(__webpack_require__(1454)), internal_match_kind_1 = __webpack_require__(3449), internal_pattern_1 = __webpack_require__(4581), internal_search_state_1 = __webpack_require__(227), IS_WINDOWS = "win32" === process.platform;
   class DefaultGlobber {
    constructor(options) {
     this.patterns = [], this.searchPaths = [], this.options = globOptionsHelper.getOptions(options);
    }
    getSearchPaths() {
     return this.searchPaths.slice();
    }
    glob() {
     var e_1, _a;
     return __awaiter(this, void 0, void 0, (function*() {
      const result = [];
      try {
       for (var _c, _b = __asyncValues(this.globGenerator()); !(_c = yield _b.next()).done; ) {
        const itemPath = _c.value;
        result.push(itemPath);
       }
      } catch (e_1_1) {
       e_1 = {
        error: e_1_1
       };
      } finally {
       try {
        _c && !_c.done && (_a = _b.return) && (yield _a.call(_b));
       } finally {
        if (e_1) throw e_1.error;
       }
      }
      return result;
     }));
    }
    globGenerator() {
     return __asyncGenerator(this, arguments, (function*() {
      const options = globOptionsHelper.getOptions(this.options), patterns = [];
      for (const pattern of this.patterns) patterns.push(pattern), options.implicitDescendants && (pattern.trailingSeparator || "**" !== pattern.segments[pattern.segments.length - 1]) && patterns.push(new internal_pattern_1.Pattern(pattern.negate, !0, pattern.segments.concat("**")));
      const stack = [];
      for (const searchPath of patternHelper.getSearchPaths(patterns)) {
       core.debug(`Search path '${searchPath}'`);
       try {
        yield __await(fs.promises.lstat(searchPath));
       } catch (err) {
        if ("ENOENT" === err.code) continue;
        throw err;
       }
       stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));
      }
      const traversalChain = [];
      for (;stack.length; ) {
       const item = stack.pop(), match = patternHelper.match(patterns, item.path), partialMatch = !!match || patternHelper.partialMatch(patterns, item.path);
       if (!match && !partialMatch) continue;
       const stats = yield __await(DefaultGlobber.stat(item, options, traversalChain));
       if (stats) if (stats.isDirectory()) {
        if (match & internal_match_kind_1.MatchKind.Directory) yield yield __await(item.path); else if (!partialMatch) continue;
        const childLevel = item.level + 1, childItems = (yield __await(fs.promises.readdir(item.path))).map((x => new internal_search_state_1.SearchState(path.join(item.path, x), childLevel)));
        stack.push(...childItems.reverse());
       } else match & internal_match_kind_1.MatchKind.File && (yield yield __await(item.path));
      }
     }));
    }
    static create(patterns, options) {
     return __awaiter(this, void 0, void 0, (function*() {
      const result = new DefaultGlobber(options);
      IS_WINDOWS && (patterns = (patterns = patterns.replace(/\r\n/g, "\n")).replace(/\r/g, "\n"));
      const lines = patterns.split("\n").map((x => x.trim()));
      for (const line of lines) line && !line.startsWith("#") && result.patterns.push(new internal_pattern_1.Pattern(line));
      return result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns)), 
      result;
     }));
    }
    static stat(item, options, traversalChain) {
     return __awaiter(this, void 0, void 0, (function*() {
      let stats;
      if (options.followSymbolicLinks) try {
       stats = yield fs.promises.stat(item.path);
      } catch (err) {
       if ("ENOENT" === err.code) {
        if (options.omitBrokenSymbolicLinks) return void core.debug(`Broken symlink '${item.path}'`);
        throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);
       }
       throw err;
      } else stats = yield fs.promises.lstat(item.path);
      if (stats.isDirectory() && options.followSymbolicLinks) {
       const realPath = yield fs.promises.realpath(item.path);
       for (;traversalChain.length >= item.level; ) traversalChain.pop();
       if (traversalChain.some((x => x === realPath))) return void core.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);
       traversalChain.push(realPath);
      }
      return stats;
     }));
    }
   }
   exports.DefaultGlobber = DefaultGlobber;
  },
  3449: (__unused_webpack_module, exports) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.MatchKind = void 0, function(MatchKind) {
    MatchKind[MatchKind.None = 0] = "None", MatchKind[MatchKind.Directory = 1] = "Directory", 
    MatchKind[MatchKind.File = 2] = "File", MatchKind[MatchKind.All = 3] = "All";
   }(exports.MatchKind || (exports.MatchKind = {}));
  },
  1453: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.safeTrimTrailingSeparator = exports.normalizeSeparators = exports.hasRoot = exports.hasAbsoluteRoot = exports.ensureAbsoluteRoot = exports.dirname = void 0;
   const path = __importStar(__webpack_require__(6928)), assert_1 = __importDefault(__webpack_require__(2613)), IS_WINDOWS = "win32" === process.platform;
   function hasAbsoluteRoot(itemPath) {
    return assert_1.default(itemPath, "hasAbsoluteRoot parameter 'itemPath' must not be empty"), 
    itemPath = normalizeSeparators(itemPath), IS_WINDOWS ? itemPath.startsWith("\\\\") || /^[A-Z]:\\/i.test(itemPath) : itemPath.startsWith("/");
   }
   function normalizeSeparators(p) {
    if (p = p || "", IS_WINDOWS) {
     p = p.replace(/\//g, "\\");
     return (/^\\\\+[^\\]/.test(p) ? "\\" : "") + p.replace(/\\\\+/g, "\\");
    }
    return p.replace(/\/\/+/g, "/");
   }
   function safeTrimTrailingSeparator(p) {
    return p ? (p = normalizeSeparators(p)).endsWith(path.sep) ? p === path.sep || IS_WINDOWS && /^[A-Z]:\\$/i.test(p) ? p : p.substr(0, p.length - 1) : p : "";
   }
   exports.dirname = function(p) {
    if (p = safeTrimTrailingSeparator(p), IS_WINDOWS && /^\\\\[^\\]+(\\[^\\]+)?$/.test(p)) return p;
    let result = path.dirname(p);
    return IS_WINDOWS && /^\\\\[^\\]+\\[^\\]+\\$/.test(result) && (result = safeTrimTrailingSeparator(result)), 
    result;
   }, exports.ensureAbsoluteRoot = function(root, itemPath) {
    if (assert_1.default(root, "ensureAbsoluteRoot parameter 'root' must not be empty"), 
    assert_1.default(itemPath, "ensureAbsoluteRoot parameter 'itemPath' must not be empty"), 
    hasAbsoluteRoot(itemPath)) return itemPath;
    if (IS_WINDOWS) {
     if (itemPath.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
      let cwd = process.cwd();
      return assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`), 
      itemPath[0].toUpperCase() === cwd[0].toUpperCase() ? 2 === itemPath.length ? `${itemPath[0]}:\\${cwd.substr(3)}` : (cwd.endsWith("\\") || (cwd += "\\"), 
      `${itemPath[0]}:\\${cwd.substr(3)}${itemPath.substr(2)}`) : `${itemPath[0]}:\\${itemPath.substr(2)}`;
     }
     if (normalizeSeparators(itemPath).match(/^\\$|^\\[^\\]/)) {
      const cwd = process.cwd();
      return assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`), 
      `${cwd[0]}:\\${itemPath.substr(1)}`;
     }
    }
    return assert_1.default(hasAbsoluteRoot(root), "ensureAbsoluteRoot parameter 'root' must have an absolute root"), 
    root.endsWith("/") || IS_WINDOWS && root.endsWith("\\") || (root += path.sep), root + itemPath;
   }, exports.hasAbsoluteRoot = hasAbsoluteRoot, exports.hasRoot = function(itemPath) {
    return assert_1.default(itemPath, "isRooted parameter 'itemPath' must not be empty"), 
    itemPath = normalizeSeparators(itemPath), IS_WINDOWS ? itemPath.startsWith("\\") || /^[A-Z]:/i.test(itemPath) : itemPath.startsWith("/");
   }, exports.normalizeSeparators = normalizeSeparators, exports.safeTrimTrailingSeparator = safeTrimTrailingSeparator;
  },
  3004: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.Path = void 0;
   const path = __importStar(__webpack_require__(6928)), pathHelper = __importStar(__webpack_require__(1453)), assert_1 = __importDefault(__webpack_require__(2613)), IS_WINDOWS = "win32" === process.platform;
   exports.Path = class {
    constructor(itemPath) {
     if (this.segments = [], "string" == typeof itemPath) if (assert_1.default(itemPath, "Parameter 'itemPath' must not be empty"), 
     itemPath = pathHelper.safeTrimTrailingSeparator(itemPath), pathHelper.hasRoot(itemPath)) {
      let remaining = itemPath, dir = pathHelper.dirname(remaining);
      for (;dir !== remaining; ) {
       const basename = path.basename(remaining);
       this.segments.unshift(basename), remaining = dir, dir = pathHelper.dirname(remaining);
      }
      this.segments.unshift(remaining);
     } else this.segments = itemPath.split(path.sep); else {
      assert_1.default(itemPath.length > 0, "Parameter 'itemPath' must not be an empty array");
      for (let i = 0; i < itemPath.length; i++) {
       let segment = itemPath[i];
       assert_1.default(segment, "Parameter 'itemPath' must not contain any empty segments"), 
       segment = pathHelper.normalizeSeparators(itemPath[i]), 0 === i && pathHelper.hasRoot(segment) ? (segment = pathHelper.safeTrimTrailingSeparator(segment), 
       assert_1.default(segment === pathHelper.dirname(segment), "Parameter 'itemPath' root segment contains information for multiple segments"), 
       this.segments.push(segment)) : (assert_1.default(!segment.includes(path.sep), "Parameter 'itemPath' contains unexpected path separators"), 
       this.segments.push(segment));
      }
     }
    }
    toString() {
     let result = this.segments[0], skipSlash = result.endsWith(path.sep) || IS_WINDOWS && /^[A-Z]:$/i.test(result);
     for (let i = 1; i < this.segments.length; i++) skipSlash ? skipSlash = !1 : result += path.sep, 
     result += this.segments[i];
     return result;
    }
   };
  },
  1454: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.partialMatch = exports.match = exports.getSearchPaths = void 0;
   const pathHelper = __importStar(__webpack_require__(1453)), internal_match_kind_1 = __webpack_require__(3449), IS_WINDOWS = "win32" === process.platform;
   exports.getSearchPaths = function(patterns) {
    patterns = patterns.filter((x => !x.negate));
    const searchPathMap = {};
    for (const pattern of patterns) {
     searchPathMap[IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath] = "candidate";
    }
    const result = [];
    for (const pattern of patterns) {
     const key = IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath;
     if ("included" === searchPathMap[key]) continue;
     let foundAncestor = !1, tempKey = key, parent = pathHelper.dirname(tempKey);
     for (;parent !== tempKey; ) {
      if (searchPathMap[parent]) {
       foundAncestor = !0;
       break;
      }
      tempKey = parent, parent = pathHelper.dirname(tempKey);
     }
     foundAncestor || (result.push(pattern.searchPath), searchPathMap[key] = "included");
    }
    return result;
   }, exports.match = function(patterns, itemPath) {
    let result = internal_match_kind_1.MatchKind.None;
    for (const pattern of patterns) pattern.negate ? result &= ~pattern.match(itemPath) : result |= pattern.match(itemPath);
    return result;
   }, exports.partialMatch = function(patterns, itemPath) {
    return patterns.some((x => !x.negate && x.partialMatch(itemPath)));
   };
  },
  4581: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.Pattern = void 0;
   const os = __importStar(__webpack_require__(857)), path = __importStar(__webpack_require__(6928)), pathHelper = __importStar(__webpack_require__(1453)), assert_1 = __importDefault(__webpack_require__(2613)), minimatch_1 = __webpack_require__(2535), internal_match_kind_1 = __webpack_require__(3449), internal_path_1 = __webpack_require__(3004), IS_WINDOWS = "win32" === process.platform;
   class Pattern {
    constructor(patternOrNegate, isImplicitPattern = !1, segments, homedir) {
     let pattern;
     if (this.negate = !1, "string" == typeof patternOrNegate) pattern = patternOrNegate.trim(); else {
      segments = segments || [], assert_1.default(segments.length, "Parameter 'segments' must not empty");
      const root = Pattern.getLiteral(segments[0]);
      assert_1.default(root && pathHelper.hasAbsoluteRoot(root), "Parameter 'segments' first element must be a root path"), 
      pattern = new internal_path_1.Path(segments).toString().trim(), patternOrNegate && (pattern = `!${pattern}`);
     }
     for (;pattern.startsWith("!"); ) this.negate = !this.negate, pattern = pattern.substr(1).trim();
     pattern = Pattern.fixupPattern(pattern, homedir), this.segments = new internal_path_1.Path(pattern).segments, 
     this.trailingSeparator = pathHelper.normalizeSeparators(pattern).endsWith(path.sep), 
     pattern = pathHelper.safeTrimTrailingSeparator(pattern);
     let foundGlob = !1;
     const searchSegments = this.segments.map((x => Pattern.getLiteral(x))).filter((x => !foundGlob && !(foundGlob = "" === x)));
     this.searchPath = new internal_path_1.Path(searchSegments).toString(), this.rootRegExp = new RegExp(Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? "i" : ""), 
     this.isImplicitPattern = isImplicitPattern;
     const minimatchOptions = {
      dot: !0,
      nobrace: !0,
      nocase: IS_WINDOWS,
      nocomment: !0,
      noext: !0,
      nonegate: !0
     };
     pattern = IS_WINDOWS ? pattern.replace(/\\/g, "/") : pattern, this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions);
    }
    match(itemPath) {
     return "**" === this.segments[this.segments.length - 1] ? (itemPath = pathHelper.normalizeSeparators(itemPath)).endsWith(path.sep) || !1 !== this.isImplicitPattern || (itemPath = `${itemPath}${path.sep}`) : itemPath = pathHelper.safeTrimTrailingSeparator(itemPath), 
     this.minimatch.match(itemPath) ? this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All : internal_match_kind_1.MatchKind.None;
    }
    partialMatch(itemPath) {
     return itemPath = pathHelper.safeTrimTrailingSeparator(itemPath), pathHelper.dirname(itemPath) === itemPath ? this.rootRegExp.test(itemPath) : this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\+/ : /\/+/), this.minimatch.set[0], !0);
    }
    static globEscape(s) {
     return (IS_WINDOWS ? s : s.replace(/\\/g, "\\\\")).replace(/(\[)(?=[^/]+\])/g, "[[]").replace(/\?/g, "[?]").replace(/\*/g, "[*]");
    }
    static fixupPattern(pattern, homedir) {
     assert_1.default(pattern, "pattern cannot be empty");
     const literalSegments = new internal_path_1.Path(pattern).segments.map((x => Pattern.getLiteral(x)));
     if (assert_1.default(literalSegments.every(((x, i) => ("." !== x || 0 === i) && ".." !== x)), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`), 
     assert_1.default(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`), 
     "." === (pattern = pathHelper.normalizeSeparators(pattern)) || pattern.startsWith(`.${path.sep}`)) pattern = Pattern.globEscape(process.cwd()) + pattern.substr(1); else if ("~" === pattern || pattern.startsWith(`~${path.sep}`)) homedir = homedir || os.homedir(), 
     assert_1.default(homedir, "Unable to determine HOME directory"), assert_1.default(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`), 
     pattern = Pattern.globEscape(homedir) + pattern.substr(1); else if (IS_WINDOWS && (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\]/i))) {
      let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", pattern.substr(0, 2));
      pattern.length > 2 && !root.endsWith("\\") && (root += "\\"), pattern = Pattern.globEscape(root) + pattern.substr(2);
     } else if (IS_WINDOWS && ("\\" === pattern || pattern.match(/^\\[^\\]/))) {
      let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", "\\");
      root.endsWith("\\") || (root += "\\"), pattern = Pattern.globEscape(root) + pattern.substr(1);
     } else pattern = pathHelper.ensureAbsoluteRoot(Pattern.globEscape(process.cwd()), pattern);
     return pathHelper.normalizeSeparators(pattern);
    }
    static getLiteral(segment) {
     let literal = "";
     for (let i = 0; i < segment.length; i++) {
      const c = segment[i];
      if ("\\" === c && !IS_WINDOWS && i + 1 < segment.length) literal += segment[++i]; else {
       if ("*" === c || "?" === c) return "";
       if ("[" === c && i + 1 < segment.length) {
        let set = "", closed = -1;
        for (let i2 = i + 1; i2 < segment.length; i2++) {
         const c2 = segment[i2];
         if ("\\" === c2 && !IS_WINDOWS && i2 + 1 < segment.length) set += segment[++i2]; else {
          if ("]" === c2) {
           closed = i2;
           break;
          }
          set += c2;
         }
        }
        if (closed >= 0) {
         if (set.length > 1) return "";
         if (set) {
          literal += set, i = closed;
          continue;
         }
        }
       }
       literal += c;
      }
     }
     return literal;
    }
    static regExpEscape(s) {
     return s.replace(/[[\\^$.|?*+()]/g, "\\$&");
    }
   }
   exports.Pattern = Pattern;
  },
  227: (__unused_webpack_module, exports) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.SearchState = void 0;
   exports.SearchState = class {
    constructor(path, level) {
     this.path = path, this.level = level;
    }
   };
  },
  4599: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
   "use strict";
   __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
    AbortController: () => AbortController,
    AbortError: () => AbortError,
    AbortSignal: () => AbortSignal
   });
   const listenersMap = new WeakMap, abortedMap = new WeakMap;
   class AbortSignal {
    constructor() {
     this.onabort = null, listenersMap.set(this, []), abortedMap.set(this, !1);
    }
    get aborted() {
     if (!abortedMap.has(this)) throw new TypeError("Expected `this` to be an instance of AbortSignal.");
     return abortedMap.get(this);
    }
    static get none() {
     return new AbortSignal;
    }
    addEventListener(_type, listener) {
     if (!listenersMap.has(this)) throw new TypeError("Expected `this` to be an instance of AbortSignal.");
     listenersMap.get(this).push(listener);
    }
    removeEventListener(_type, listener) {
     if (!listenersMap.has(this)) throw new TypeError("Expected `this` to be an instance of AbortSignal.");
     const listeners = listenersMap.get(this), index = listeners.indexOf(listener);
     index > -1 && listeners.splice(index, 1);
    }
    dispatchEvent(_event) {
     throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
    }
   }
   function abortSignal(signal) {
    if (signal.aborted) return;
    signal.onabort && signal.onabort.call(signal);
    const listeners = listenersMap.get(signal);
    listeners && listeners.slice().forEach((listener => {
     listener.call(signal, {
      type: "abort"
     });
    })), abortedMap.set(signal, !0);
   }
   class AbortError extends Error {
    constructor(message) {
     super(message), this.name = "AbortError";
    }
   }
   class AbortController {
    constructor(parentSignals) {
     if (this._signal = new AbortSignal, parentSignals) {
      Array.isArray(parentSignals) || (parentSignals = arguments);
      for (const parentSignal of parentSignals) parentSignal.aborted ? this.abort() : parentSignal.addEventListener("abort", (() => {
       this.abort();
      }));
     }
    }
    get signal() {
     return this._signal;
    }
    abort() {
     abortSignal(this._signal);
    }
    static timeout(ms) {
     const signal = new AbortSignal, timer = setTimeout(abortSignal, ms, signal);
     return "function" == typeof timer.unref && timer.unref(), signal;
    }
   }
  },
  5217: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.issue = exports.issueCommand = void 0;
   const os = __importStar(__webpack_require__(857)), utils_1 = __webpack_require__(6613);
   function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
   }
   exports.issueCommand = issueCommand, exports.issue = function(name, message = "") {
    issueCommand(name, {}, message);
   };
   class Command {
    constructor(command, properties, message) {
     command || (command = "missing.command"), this.command = command, this.properties = properties, 
     this.message = message;
    }
    toString() {
     let cmdStr = "::" + this.command;
     if (this.properties && Object.keys(this.properties).length > 0) {
      cmdStr += " ";
      let first = !0;
      for (const key in this.properties) if (this.properties.hasOwnProperty(key)) {
       const val = this.properties[key];
       val && (first ? first = !1 : cmdStr += ",", cmdStr += `${key}=${s = val, (0, utils_1.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C")}`);
      }
     }
     var s;
     return cmdStr += `::${function(s) {
      return (0, utils_1.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
     }(this.message)}`, cmdStr;
    }
   }
  },
  4613: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
   const command_1 = __webpack_require__(5217), file_command_1 = __webpack_require__(3468), utils_1 = __webpack_require__(6613), os = __importStar(__webpack_require__(857)), path = __importStar(__webpack_require__(6928)), oidc_utils_1 = __webpack_require__(1339);
   var ExitCode;
   function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
    if (options && options.required && !val) throw new Error(`Input required and not supplied: ${name}`);
    return options && !1 === options.trimWhitespace ? val : val.trim();
   }
   function error(message, properties = {}) {
    (0, command_1.issueCommand)("error", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
   }
   function startGroup(name) {
    (0, command_1.issue)("group", name);
   }
   function endGroup() {
    (0, command_1.issue)("endgroup");
   }
   !function(ExitCode) {
    ExitCode[ExitCode.Success = 0] = "Success", ExitCode[ExitCode.Failure = 1] = "Failure";
   }(ExitCode || (exports.ExitCode = ExitCode = {})), exports.exportVariable = function(name, val) {
    const convertedVal = (0, utils_1.toCommandValue)(val);
    if (process.env[name] = convertedVal, process.env.GITHUB_ENV || "") return (0, file_command_1.issueFileCommand)("ENV", (0, 
    file_command_1.prepareKeyValueMessage)(name, val));
    (0, command_1.issueCommand)("set-env", {
     name
    }, convertedVal);
   }, exports.setSecret = function(secret) {
    (0, command_1.issueCommand)("add-mask", {}, secret);
   }, exports.addPath = function(inputPath) {
    process.env.GITHUB_PATH || "" ? (0, file_command_1.issueFileCommand)("PATH", inputPath) : (0, 
    command_1.issueCommand)("add-path", {}, inputPath), process.env.PATH = `${inputPath}${path.delimiter}${process.env.PATH}`;
   }, exports.getInput = getInput, exports.getMultilineInput = function(name, options) {
    const inputs = getInput(name, options).split("\n").filter((x => "" !== x));
    return options && !1 === options.trimWhitespace ? inputs : inputs.map((input => input.trim()));
   }, exports.getBooleanInput = function(name, options) {
    const val = getInput(name, options);
    if ([ "true", "True", "TRUE" ].includes(val)) return !0;
    if ([ "false", "False", "FALSE" ].includes(val)) return !1;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\nSupport boolean input list: \`true | True | TRUE | false | False | FALSE\``);
   }, exports.setOutput = function(name, value) {
    if (process.env.GITHUB_OUTPUT || "") return (0, file_command_1.issueFileCommand)("OUTPUT", (0, 
    file_command_1.prepareKeyValueMessage)(name, value));
    process.stdout.write(os.EOL), (0, command_1.issueCommand)("set-output", {
     name
    }, (0, utils_1.toCommandValue)(value));
   }, exports.setCommandEcho = function(enabled) {
    (0, command_1.issue)("echo", enabled ? "on" : "off");
   }, exports.setFailed = function(message) {
    process.exitCode = ExitCode.Failure, error(message);
   }, exports.isDebug = function() {
    return "1" === process.env.RUNNER_DEBUG;
   }, exports.debug = function(message) {
    (0, command_1.issueCommand)("debug", {}, message);
   }, exports.error = error, exports.warning = function(message, properties = {}) {
    (0, command_1.issueCommand)("warning", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
   }, exports.notice = function(message, properties = {}) {
    (0, command_1.issueCommand)("notice", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
   }, exports.info = function(message) {
    process.stdout.write(message + os.EOL);
   }, exports.startGroup = startGroup, exports.endGroup = endGroup, exports.group = function(name, fn) {
    return __awaiter(this, void 0, void 0, (function*() {
     let result;
     startGroup(name);
     try {
      result = yield fn();
     } finally {
      endGroup();
     }
     return result;
    }));
   }, exports.saveState = function(name, value) {
    if (process.env.GITHUB_STATE || "") return (0, file_command_1.issueFileCommand)("STATE", (0, 
    file_command_1.prepareKeyValueMessage)(name, value));
    (0, command_1.issueCommand)("save-state", {
     name
    }, (0, utils_1.toCommandValue)(value));
   }, exports.getState = function(name) {
    return process.env[`STATE_${name}`] || "";
   }, exports.getIDToken = function(aud) {
    return __awaiter(this, void 0, void 0, (function*() {
     return yield oidc_utils_1.OidcClient.getIDToken(aud);
    }));
   };
   var summary_1 = __webpack_require__(3188);
   Object.defineProperty(exports, "summary", {
    enumerable: !0,
    get: function() {
     return summary_1.summary;
    }
   });
   var summary_2 = __webpack_require__(3188);
   Object.defineProperty(exports, "markdownSummary", {
    enumerable: !0,
    get: function() {
     return summary_2.markdownSummary;
    }
   });
   var path_utils_1 = __webpack_require__(7801);
   Object.defineProperty(exports, "toPosixPath", {
    enumerable: !0,
    get: function() {
     return path_utils_1.toPosixPath;
    }
   }), Object.defineProperty(exports, "toWin32Path", {
    enumerable: !0,
    get: function() {
     return path_utils_1.toWin32Path;
    }
   }), Object.defineProperty(exports, "toPlatformPath", {
    enumerable: !0,
    get: function() {
     return path_utils_1.toPlatformPath;
    }
   }), exports.platform = __importStar(__webpack_require__(1857));
  },
  3468: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
   const crypto = __importStar(__webpack_require__(6982)), fs = __importStar(__webpack_require__(9896)), os = __importStar(__webpack_require__(857)), utils_1 = __webpack_require__(6613);
   exports.issueFileCommand = function(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) throw new Error(`Unable to find environment variable for file command ${command}`);
    if (!fs.existsSync(filePath)) throw new Error(`Missing file at path: ${filePath}`);
    fs.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os.EOL}`, {
     encoding: "utf8"
    });
   }, exports.prepareKeyValueMessage = function(key, value) {
    const delimiter = `ghadelimiter_${crypto.randomUUID()}`, convertedValue = (0, utils_1.toCommandValue)(value);
    if (key.includes(delimiter)) throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    if (convertedValue.includes(delimiter)) throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
   };
  },
  1339: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.OidcClient = void 0;
   const http_client_1 = __webpack_require__(5001), auth_1 = __webpack_require__(3503), core_1 = __webpack_require__(4613);
   class OidcClient {
    static createHttpClient(allowRetry = !0, maxRetry = 10) {
     const requestOptions = {
      allowRetries: allowRetry,
      maxRetries: maxRetry
     };
     return new http_client_1.HttpClient("actions/oidc-client", [ new auth_1.BearerCredentialHandler(OidcClient.getRequestToken()) ], requestOptions);
    }
    static getRequestToken() {
     const token = process.env.ACTIONS_ID_TOKEN_REQUEST_TOKEN;
     if (!token) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
     return token;
    }
    static getIDTokenUrl() {
     const runtimeUrl = process.env.ACTIONS_ID_TOKEN_REQUEST_URL;
     if (!runtimeUrl) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
     return runtimeUrl;
    }
    static getCall(id_token_url) {
     var _a;
     return __awaiter(this, void 0, void 0, (function*() {
      const httpclient = OidcClient.createHttpClient(), res = yield httpclient.getJson(id_token_url).catch((error => {
       throw new Error(`Failed to get ID Token. \n \n        Error Code : ${error.statusCode}\n \n        Error Message: ${error.message}`);
      })), id_token = null === (_a = res.result) || void 0 === _a ? void 0 : _a.value;
      if (!id_token) throw new Error("Response json body do not have ID Token field");
      return id_token;
     }));
    }
    static getIDToken(audience) {
     return __awaiter(this, void 0, void 0, (function*() {
      try {
       let id_token_url = OidcClient.getIDTokenUrl();
       if (audience) {
        id_token_url = `${id_token_url}&audience=${encodeURIComponent(audience)}`;
       }
       (0, core_1.debug)(`ID token url is ${id_token_url}`);
       const id_token = yield OidcClient.getCall(id_token_url);
       return (0, core_1.setSecret)(id_token), id_token;
      } catch (error) {
       throw new Error(`Error message: ${error.message}`);
      }
     }));
    }
   }
   exports.OidcClient = OidcClient;
  },
  7801: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
   const path = __importStar(__webpack_require__(6928));
   exports.toPosixPath = function(pth) {
    return pth.replace(/[\\]/g, "/");
   }, exports.toWin32Path = function(pth) {
    return pth.replace(/[/]/g, "\\");
   }, exports.toPlatformPath = function(pth) {
    return pth.replace(/[/\\]/g, path.sep);
   };
  },
  1857: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;
   const os_1 = __importDefault(__webpack_require__(857)), exec = __importStar(__webpack_require__(3021));
   exports.platform = os_1.default.platform(), exports.arch = os_1.default.arch(), 
   exports.isWindows = "win32" === exports.platform, exports.isMacOS = "darwin" === exports.platform, 
   exports.isLinux = "linux" === exports.platform, exports.getDetails = function() {
    return __awaiter(this, void 0, void 0, (function*() {
     return Object.assign(Object.assign({}, yield exports.isWindows ? __awaiter(void 0, void 0, void 0, (function*() {
      const {stdout: version} = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"', void 0, {
       silent: !0
      }), {stdout: name} = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"', void 0, {
       silent: !0
      });
      return {
       name: name.trim(),
       version: version.trim()
      };
     })) : exports.isMacOS ? __awaiter(void 0, void 0, void 0, (function*() {
      var _a, _b, _c, _d;
      const {stdout} = yield exec.getExecOutput("sw_vers", void 0, {
       silent: !0
      }), version = null !== (_b = null === (_a = stdout.match(/ProductVersion:\s*(.+)/)) || void 0 === _a ? void 0 : _a[1]) && void 0 !== _b ? _b : "";
      return {
       name: null !== (_d = null === (_c = stdout.match(/ProductName:\s*(.+)/)) || void 0 === _c ? void 0 : _c[1]) && void 0 !== _d ? _d : "",
       version
      };
     })) : __awaiter(void 0, void 0, void 0, (function*() {
      const {stdout} = yield exec.getExecOutput("lsb_release", [ "-i", "-r", "-s" ], {
       silent: !0
      }), [name, version] = stdout.trim().split("\n");
      return {
       name,
       version
      };
     }))), {
      platform: exports.platform,
      arch: exports.arch,
      isWindows: exports.isWindows,
      isMacOS: exports.isMacOS,
      isLinux: exports.isLinux
     });
    }));
   };
  },
  3188: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
   const os_1 = __webpack_require__(857), fs_1 = __webpack_require__(9896), {access, appendFile, writeFile} = fs_1.promises;
   exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY", exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
   const _summary = new class {
    constructor() {
     this._buffer = "";
    }
    filePath() {
     return __awaiter(this, void 0, void 0, (function*() {
      if (this._filePath) return this._filePath;
      const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
      if (!pathFromEnv) throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
      try {
       yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
      } catch (_a) {
       throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
      }
      return this._filePath = pathFromEnv, this._filePath;
     }));
    }
    wrap(tag, content, attrs = {}) {
     const htmlAttrs = Object.entries(attrs).map((([key, value]) => ` ${key}="${value}"`)).join("");
     return content ? `<${tag}${htmlAttrs}>${content}</${tag}>` : `<${tag}${htmlAttrs}>`;
    }
    write(options) {
     return __awaiter(this, void 0, void 0, (function*() {
      const overwrite = !!(null == options ? void 0 : options.overwrite), filePath = yield this.filePath(), writeFunc = overwrite ? writeFile : appendFile;
      return yield writeFunc(filePath, this._buffer, {
       encoding: "utf8"
      }), this.emptyBuffer();
     }));
    }
    clear() {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.emptyBuffer().write({
       overwrite: !0
      });
     }));
    }
    stringify() {
     return this._buffer;
    }
    isEmptyBuffer() {
     return 0 === this._buffer.length;
    }
    emptyBuffer() {
     return this._buffer = "", this;
    }
    addRaw(text, addEOL = !1) {
     return this._buffer += text, addEOL ? this.addEOL() : this;
    }
    addEOL() {
     return this.addRaw(os_1.EOL);
    }
    addCodeBlock(code, lang) {
     const attrs = Object.assign({}, lang && {
      lang
     }), element = this.wrap("pre", this.wrap("code", code), attrs);
     return this.addRaw(element).addEOL();
    }
    addList(items, ordered = !1) {
     const tag = ordered ? "ol" : "ul", listItems = items.map((item => this.wrap("li", item))).join(""), element = this.wrap(tag, listItems);
     return this.addRaw(element).addEOL();
    }
    addTable(rows) {
     const tableBody = rows.map((row => {
      const cells = row.map((cell => {
       if ("string" == typeof cell) return this.wrap("td", cell);
       const {header, data, colspan, rowspan} = cell, tag = header ? "th" : "td", attrs = Object.assign(Object.assign({}, colspan && {
        colspan
       }), rowspan && {
        rowspan
       });
       return this.wrap(tag, data, attrs);
      })).join("");
      return this.wrap("tr", cells);
     })).join(""), element = this.wrap("table", tableBody);
     return this.addRaw(element).addEOL();
    }
    addDetails(label, content) {
     const element = this.wrap("details", this.wrap("summary", label) + content);
     return this.addRaw(element).addEOL();
    }
    addImage(src, alt, options) {
     const {width, height} = options || {}, attrs = Object.assign(Object.assign({}, width && {
      width
     }), height && {
      height
     }), element = this.wrap("img", null, Object.assign({
      src,
      alt
     }, attrs));
     return this.addRaw(element).addEOL();
    }
    addHeading(text, level) {
     const tag = `h${level}`, allowedTag = [ "h1", "h2", "h3", "h4", "h5", "h6" ].includes(tag) ? tag : "h1", element = this.wrap(allowedTag, text);
     return this.addRaw(element).addEOL();
    }
    addSeparator() {
     const element = this.wrap("hr", null);
     return this.addRaw(element).addEOL();
    }
    addBreak() {
     const element = this.wrap("br", null);
     return this.addRaw(element).addEOL();
    }
    addQuote(text, cite) {
     const attrs = Object.assign({}, cite && {
      cite
     }), element = this.wrap("blockquote", text, attrs);
     return this.addRaw(element).addEOL();
    }
    addLink(text, href) {
     const element = this.wrap("a", text, {
      href
     });
     return this.addRaw(element).addEOL();
    }
   };
   exports.markdownSummary = _summary, exports.summary = _summary;
  },
  6613: (__unused_webpack_module, exports) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.toCommandProperties = exports.toCommandValue = void 0, exports.toCommandValue = function(input) {
    return null == input ? "" : "string" == typeof input || input instanceof String ? input : JSON.stringify(input);
   }, exports.toCommandProperties = function(annotationProperties) {
    return Object.keys(annotationProperties).length ? {
     title: annotationProperties.title,
     file: annotationProperties.file,
     line: annotationProperties.startLine,
     endLine: annotationProperties.endLine,
     col: annotationProperties.startColumn,
     endColumn: annotationProperties.endColumn
    } : {};
   };
  },
  3021: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getExecOutput = exports.exec = void 0;
   const string_decoder_1 = __webpack_require__(3193), tr = __importStar(__webpack_require__(6660));
   function exec(commandLine, args, options) {
    return __awaiter(this, void 0, void 0, (function*() {
     const commandArgs = tr.argStringToArray(commandLine);
     if (0 === commandArgs.length) throw new Error("Parameter 'commandLine' cannot be null or empty.");
     const toolPath = commandArgs[0];
     args = commandArgs.slice(1).concat(args || []);
     return new tr.ToolRunner(toolPath, args, options).exec();
    }));
   }
   exports.exec = exec, exports.getExecOutput = function(commandLine, args, options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, (function*() {
     let stdout = "", stderr = "";
     const stdoutDecoder = new string_decoder_1.StringDecoder("utf8"), stderrDecoder = new string_decoder_1.StringDecoder("utf8"), originalStdoutListener = null === (_a = null == options ? void 0 : options.listeners) || void 0 === _a ? void 0 : _a.stdout, originalStdErrListener = null === (_b = null == options ? void 0 : options.listeners) || void 0 === _b ? void 0 : _b.stderr, listeners = Object.assign(Object.assign({}, null == options ? void 0 : options.listeners), {
      stdout: data => {
       stdout += stdoutDecoder.write(data), originalStdoutListener && originalStdoutListener(data);
      },
      stderr: data => {
       stderr += stderrDecoder.write(data), originalStdErrListener && originalStdErrListener(data);
      }
     }), exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), {
      listeners
     }));
     return stdout += stdoutDecoder.end(), stderr += stderrDecoder.end(), {
      exitCode,
      stdout,
      stderr
     };
    }));
   };
  },
  6660: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.argStringToArray = exports.ToolRunner = void 0;
   const os = __importStar(__webpack_require__(857)), events = __importStar(__webpack_require__(4434)), child = __importStar(__webpack_require__(5317)), path = __importStar(__webpack_require__(6928)), io = __importStar(__webpack_require__(8599)), ioUtil = __importStar(__webpack_require__(4664)), timers_1 = __webpack_require__(3557), IS_WINDOWS = "win32" === process.platform;
   class ToolRunner extends events.EventEmitter {
    constructor(toolPath, args, options) {
     if (super(), !toolPath) throw new Error("Parameter 'toolPath' cannot be null or empty.");
     this.toolPath = toolPath, this.args = args || [], this.options = options || {};
    }
    _debug(message) {
     this.options.listeners && this.options.listeners.debug && this.options.listeners.debug(message);
    }
    _getCommandString(options, noPrefix) {
     const toolPath = this._getSpawnFileName(), args = this._getSpawnArgs(options);
     let cmd = noPrefix ? "" : "[command]";
     if (IS_WINDOWS) if (this._isCmdFile()) {
      cmd += toolPath;
      for (const a of args) cmd += ` ${a}`;
     } else if (options.windowsVerbatimArguments) {
      cmd += `"${toolPath}"`;
      for (const a of args) cmd += ` ${a}`;
     } else {
      cmd += this._windowsQuoteCmdArg(toolPath);
      for (const a of args) cmd += ` ${this._windowsQuoteCmdArg(a)}`;
     } else {
      cmd += toolPath;
      for (const a of args) cmd += ` ${a}`;
     }
     return cmd;
    }
    _processLineBuffer(data, strBuffer, onLine) {
     try {
      let s = strBuffer + data.toString(), n = s.indexOf(os.EOL);
      for (;n > -1; ) {
       onLine(s.substring(0, n)), s = s.substring(n + os.EOL.length), n = s.indexOf(os.EOL);
      }
      return s;
     } catch (err) {
      return this._debug(`error processing line. Failed with error ${err}`), "";
     }
    }
    _getSpawnFileName() {
     return IS_WINDOWS && this._isCmdFile() ? process.env.COMSPEC || "cmd.exe" : this.toolPath;
    }
    _getSpawnArgs(options) {
     if (IS_WINDOWS && this._isCmdFile()) {
      let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
      for (const a of this.args) argline += " ", argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
      return argline += '"', [ argline ];
     }
     return this.args;
    }
    _endsWith(str, end) {
     return str.endsWith(end);
    }
    _isCmdFile() {
     const upperToolPath = this.toolPath.toUpperCase();
     return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
    }
    _windowsQuoteCmdArg(arg) {
     if (!this._isCmdFile()) return this._uvQuoteCmdArg(arg);
     if (!arg) return '""';
     const cmdSpecialChars = [ " ", "\t", "&", "(", ")", "[", "]", "{", "}", "^", "=", ";", "!", "'", "+", ",", "`", "~", "|", "<", ">", '"' ];
     let needsQuotes = !1;
     for (const char of arg) if (cmdSpecialChars.some((x => x === char))) {
      needsQuotes = !0;
      break;
     }
     if (!needsQuotes) return arg;
     let reverse = '"', quoteHit = !0;
     for (let i = arg.length; i > 0; i--) reverse += arg[i - 1], quoteHit && "\\" === arg[i - 1] ? reverse += "\\" : '"' === arg[i - 1] ? (quoteHit = !0, 
     reverse += '"') : quoteHit = !1;
     return reverse += '"', reverse.split("").reverse().join("");
    }
    _uvQuoteCmdArg(arg) {
     if (!arg) return '""';
     if (!arg.includes(" ") && !arg.includes("\t") && !arg.includes('"')) return arg;
     if (!arg.includes('"') && !arg.includes("\\")) return `"${arg}"`;
     let reverse = '"', quoteHit = !0;
     for (let i = arg.length; i > 0; i--) reverse += arg[i - 1], quoteHit && "\\" === arg[i - 1] ? reverse += "\\" : '"' === arg[i - 1] ? (quoteHit = !0, 
     reverse += "\\") : quoteHit = !1;
     return reverse += '"', reverse.split("").reverse().join("");
    }
    _cloneExecOptions(options) {
     const result = {
      cwd: (options = options || {}).cwd || process.cwd(),
      env: options.env || process.env,
      silent: options.silent || !1,
      windowsVerbatimArguments: options.windowsVerbatimArguments || !1,
      failOnStdErr: options.failOnStdErr || !1,
      ignoreReturnCode: options.ignoreReturnCode || !1,
      delay: options.delay || 1e4
     };
     return result.outStream = options.outStream || process.stdout, result.errStream = options.errStream || process.stderr, 
     result;
    }
    _getSpawnOptions(options, toolPath) {
     options = options || {};
     const result = {};
     return result.cwd = options.cwd, result.env = options.env, result.windowsVerbatimArguments = options.windowsVerbatimArguments || this._isCmdFile(), 
     options.windowsVerbatimArguments && (result.argv0 = `"${toolPath}"`), result;
    }
    exec() {
     return __awaiter(this, void 0, void 0, (function*() {
      return !ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\")) && (this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath)), 
      this.toolPath = yield io.which(this.toolPath, !0), new Promise(((resolve, reject) => __awaiter(this, void 0, void 0, (function*() {
       this._debug(`exec tool: ${this.toolPath}`), this._debug("arguments:");
       for (const arg of this.args) this._debug(`   ${arg}`);
       const optionsNonNull = this._cloneExecOptions(this.options);
       !optionsNonNull.silent && optionsNonNull.outStream && optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
       const state = new ExecState(optionsNonNull, this.toolPath);
       if (state.on("debug", (message => {
        this._debug(message);
       })), this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
       const fileName = this._getSpawnFileName(), cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
       let stdbuffer = "";
       cp.stdout && cp.stdout.on("data", (data => {
        this.options.listeners && this.options.listeners.stdout && this.options.listeners.stdout(data), 
        !optionsNonNull.silent && optionsNonNull.outStream && optionsNonNull.outStream.write(data), 
        stdbuffer = this._processLineBuffer(data, stdbuffer, (line => {
         this.options.listeners && this.options.listeners.stdline && this.options.listeners.stdline(line);
        }));
       }));
       let errbuffer = "";
       if (cp.stderr && cp.stderr.on("data", (data => {
        if (state.processStderr = !0, this.options.listeners && this.options.listeners.stderr && this.options.listeners.stderr(data), 
        !optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
         (optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream).write(data);
        }
        errbuffer = this._processLineBuffer(data, errbuffer, (line => {
         this.options.listeners && this.options.listeners.errline && this.options.listeners.errline(line);
        }));
       })), cp.on("error", (err => {
        state.processError = err.message, state.processExited = !0, state.processClosed = !0, 
        state.CheckComplete();
       })), cp.on("exit", (code => {
        state.processExitCode = code, state.processExited = !0, this._debug(`Exit code ${code} received from tool '${this.toolPath}'`), 
        state.CheckComplete();
       })), cp.on("close", (code => {
        state.processExitCode = code, state.processExited = !0, state.processClosed = !0, 
        this._debug(`STDIO streams have closed for tool '${this.toolPath}'`), state.CheckComplete();
       })), state.on("done", ((error, exitCode) => {
        stdbuffer.length > 0 && this.emit("stdline", stdbuffer), errbuffer.length > 0 && this.emit("errline", errbuffer), 
        cp.removeAllListeners(), error ? reject(error) : resolve(exitCode);
       })), this.options.input) {
        if (!cp.stdin) throw new Error("child process missing stdin");
        cp.stdin.end(this.options.input);
       }
      }))));
     }));
    }
   }
   exports.ToolRunner = ToolRunner, exports.argStringToArray = function(argString) {
    const args = [];
    let inQuotes = !1, escaped = !1, arg = "";
    function append(c) {
     escaped && '"' !== c && (arg += "\\"), arg += c, escaped = !1;
    }
    for (let i = 0; i < argString.length; i++) {
     const c = argString.charAt(i);
     '"' !== c ? "\\" === c && escaped ? append(c) : "\\" === c && inQuotes ? escaped = !0 : " " !== c || inQuotes ? append(c) : arg.length > 0 && (args.push(arg), 
     arg = "") : escaped ? append(c) : inQuotes = !inQuotes;
    }
    return arg.length > 0 && args.push(arg.trim()), args;
   };
   class ExecState extends events.EventEmitter {
    constructor(options, toolPath) {
     if (super(), this.processClosed = !1, this.processError = "", this.processExitCode = 0, 
     this.processExited = !1, this.processStderr = !1, this.delay = 1e4, this.done = !1, 
     this.timeout = null, !toolPath) throw new Error("toolPath must not be empty");
     this.options = options, this.toolPath = toolPath, options.delay && (this.delay = options.delay);
    }
    CheckComplete() {
     this.done || (this.processClosed ? this._setResult() : this.processExited && (this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this)));
    }
    _debug(message) {
     this.emit("debug", message);
    }
    _setResult() {
     let error;
     this.processExited && (this.processError ? error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`) : 0 === this.processExitCode || this.options.ignoreReturnCode ? this.processStderr && this.options.failOnStdErr && (error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`)) : error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`)), 
     this.timeout && (clearTimeout(this.timeout), this.timeout = null), this.done = !0, 
     this.emit("done", error, this.processExitCode);
    }
    static HandleTimeout(state) {
     if (!state.done) {
      if (!state.processClosed && state.processExited) {
       const message = `The STDIO streams did not close within ${state.delay / 1e3} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
       state._debug(message);
      }
      state._setResult();
     }
    }
   }
  },
  3675: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.hashFiles = exports.create = void 0;
   const internal_globber_1 = __webpack_require__(410), internal_hash_files_1 = __webpack_require__(6555);
   function create(patterns, options) {
    return __awaiter(this, void 0, void 0, (function*() {
     return yield internal_globber_1.DefaultGlobber.create(patterns, options);
    }));
   }
   exports.create = create, exports.hashFiles = function(patterns, currentWorkspace = "", options, verbose = !1) {
    return __awaiter(this, void 0, void 0, (function*() {
     let followSymbolicLinks = !0;
     options && "boolean" == typeof options.followSymbolicLinks && (followSymbolicLinks = options.followSymbolicLinks);
     const globber = yield create(patterns, {
      followSymbolicLinks
     });
     return (0, internal_hash_files_1.hashFiles)(globber, currentWorkspace, verbose);
    }));
   };
  },
  1065: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getOptions = void 0;
   const core = __importStar(__webpack_require__(4613));
   exports.getOptions = function(copy) {
    const result = {
     followSymbolicLinks: !0,
     implicitDescendants: !0,
     matchDirectories: !0,
     omitBrokenSymbolicLinks: !0,
     excludeHiddenFiles: !1
    };
    return copy && ("boolean" == typeof copy.followSymbolicLinks && (result.followSymbolicLinks = copy.followSymbolicLinks, 
    core.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`)), "boolean" == typeof copy.implicitDescendants && (result.implicitDescendants = copy.implicitDescendants, 
    core.debug(`implicitDescendants '${result.implicitDescendants}'`)), "boolean" == typeof copy.matchDirectories && (result.matchDirectories = copy.matchDirectories, 
    core.debug(`matchDirectories '${result.matchDirectories}'`)), "boolean" == typeof copy.omitBrokenSymbolicLinks && (result.omitBrokenSymbolicLinks = copy.omitBrokenSymbolicLinks, 
    core.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`)), "boolean" == typeof copy.excludeHiddenFiles && (result.excludeHiddenFiles = copy.excludeHiddenFiles, 
    core.debug(`excludeHiddenFiles '${result.excludeHiddenFiles}'`))), result;
   };
  },
  410: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   }, __asyncValues = this && this.__asyncValues || function(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var i, m = o[Symbol.asyncIterator];
    return m ? m.call(o) : (o = "function" == typeof __values ? __values(o) : o[Symbol.iterator](), 
    i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
     return this;
    }, i);
    function verb(n) {
     i[n] = o[n] && function(v) {
      return new Promise((function(resolve, reject) {
       (function(resolve, reject, d, v) {
        Promise.resolve(v).then((function(v) {
         resolve({
          value: v,
          done: d
         });
        }), reject);
       })(resolve, reject, (v = o[n](v)).done, v.value);
      }));
     };
    }
   }, __await = this && this.__await || function(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
   }, __asyncGenerator = this && this.__asyncGenerator || function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var i, g = generator.apply(thisArg, _arguments || []), q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
     return this;
    }, i;
    function verb(n) {
     g[n] && (i[n] = function(v) {
      return new Promise((function(a, b) {
       q.push([ n, v, a, b ]) > 1 || resume(n, v);
      }));
     });
    }
    function resume(n, v) {
     try {
      (r = g[n](v)).value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
     } catch (e) {
      settle(q[0][3], e);
     }
     var r;
    }
    function fulfill(value) {
     resume("next", value);
    }
    function reject(value) {
     resume("throw", value);
    }
    function settle(f, v) {
     f(v), q.shift(), q.length && resume(q[0][0], q[0][1]);
    }
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.DefaultGlobber = void 0;
   const core = __importStar(__webpack_require__(4613)), fs = __importStar(__webpack_require__(9896)), globOptionsHelper = __importStar(__webpack_require__(1065)), path = __importStar(__webpack_require__(6928)), patternHelper = __importStar(__webpack_require__(9288)), internal_match_kind_1 = __webpack_require__(8339), internal_pattern_1 = __webpack_require__(7639), internal_search_state_1 = __webpack_require__(2481), IS_WINDOWS = "win32" === process.platform;
   class DefaultGlobber {
    constructor(options) {
     this.patterns = [], this.searchPaths = [], this.options = globOptionsHelper.getOptions(options);
    }
    getSearchPaths() {
     return this.searchPaths.slice();
    }
    glob() {
     var _a, e_1, _b, _c;
     return __awaiter(this, void 0, void 0, (function*() {
      const result = [];
      try {
       for (var _f, _d = !0, _e = __asyncValues(this.globGenerator()); _f = yield _e.next(), 
       !(_a = _f.done); _d = !0) {
        _c = _f.value, _d = !1;
        const itemPath = _c;
        result.push(itemPath);
       }
      } catch (e_1_1) {
       e_1 = {
        error: e_1_1
       };
      } finally {
       try {
        _d || _a || !(_b = _e.return) || (yield _b.call(_e));
       } finally {
        if (e_1) throw e_1.error;
       }
      }
      return result;
     }));
    }
    globGenerator() {
     return __asyncGenerator(this, arguments, (function*() {
      const options = globOptionsHelper.getOptions(this.options), patterns = [];
      for (const pattern of this.patterns) patterns.push(pattern), options.implicitDescendants && (pattern.trailingSeparator || "**" !== pattern.segments[pattern.segments.length - 1]) && patterns.push(new internal_pattern_1.Pattern(pattern.negate, !0, pattern.segments.concat("**")));
      const stack = [];
      for (const searchPath of patternHelper.getSearchPaths(patterns)) {
       core.debug(`Search path '${searchPath}'`);
       try {
        yield __await(fs.promises.lstat(searchPath));
       } catch (err) {
        if ("ENOENT" === err.code) continue;
        throw err;
       }
       stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));
      }
      const traversalChain = [];
      for (;stack.length; ) {
       const item = stack.pop(), match = patternHelper.match(patterns, item.path), partialMatch = !!match || patternHelper.partialMatch(patterns, item.path);
       if (!match && !partialMatch) continue;
       const stats = yield __await(DefaultGlobber.stat(item, options, traversalChain));
       if (stats && (!options.excludeHiddenFiles || !path.basename(item.path).match(/^\./))) if (stats.isDirectory()) {
        if (match & internal_match_kind_1.MatchKind.Directory && options.matchDirectories) yield yield __await(item.path); else if (!partialMatch) continue;
        const childLevel = item.level + 1, childItems = (yield __await(fs.promises.readdir(item.path))).map((x => new internal_search_state_1.SearchState(path.join(item.path, x), childLevel)));
        stack.push(...childItems.reverse());
       } else match & internal_match_kind_1.MatchKind.File && (yield yield __await(item.path));
      }
     }));
    }
    static create(patterns, options) {
     return __awaiter(this, void 0, void 0, (function*() {
      const result = new DefaultGlobber(options);
      IS_WINDOWS && (patterns = (patterns = patterns.replace(/\r\n/g, "\n")).replace(/\r/g, "\n"));
      const lines = patterns.split("\n").map((x => x.trim()));
      for (const line of lines) line && !line.startsWith("#") && result.patterns.push(new internal_pattern_1.Pattern(line));
      return result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns)), 
      result;
     }));
    }
    static stat(item, options, traversalChain) {
     return __awaiter(this, void 0, void 0, (function*() {
      let stats;
      if (options.followSymbolicLinks) try {
       stats = yield fs.promises.stat(item.path);
      } catch (err) {
       if ("ENOENT" === err.code) {
        if (options.omitBrokenSymbolicLinks) return void core.debug(`Broken symlink '${item.path}'`);
        throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);
       }
       throw err;
      } else stats = yield fs.promises.lstat(item.path);
      if (stats.isDirectory() && options.followSymbolicLinks) {
       const realPath = yield fs.promises.realpath(item.path);
       for (;traversalChain.length >= item.level; ) traversalChain.pop();
       if (traversalChain.some((x => x === realPath))) return void core.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);
       traversalChain.push(realPath);
      }
      return stats;
     }));
    }
   }
   exports.DefaultGlobber = DefaultGlobber;
  },
  6555: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   }, __asyncValues = this && this.__asyncValues || function(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var i, m = o[Symbol.asyncIterator];
    return m ? m.call(o) : (o = "function" == typeof __values ? __values(o) : o[Symbol.iterator](), 
    i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
     return this;
    }, i);
    function verb(n) {
     i[n] = o[n] && function(v) {
      return new Promise((function(resolve, reject) {
       (function(resolve, reject, d, v) {
        Promise.resolve(v).then((function(v) {
         resolve({
          value: v,
          done: d
         });
        }), reject);
       })(resolve, reject, (v = o[n](v)).done, v.value);
      }));
     };
    }
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.hashFiles = void 0;
   const crypto = __importStar(__webpack_require__(6982)), core = __importStar(__webpack_require__(4613)), fs = __importStar(__webpack_require__(9896)), stream = __importStar(__webpack_require__(2203)), util = __importStar(__webpack_require__(9023)), path = __importStar(__webpack_require__(6928));
   exports.hashFiles = function(globber, currentWorkspace, verbose = !1) {
    var _a, e_1, _b, _c, _d;
    return __awaiter(this, void 0, void 0, (function*() {
     const writeDelegate = verbose ? core.info : core.debug;
     let hasMatch = !1;
     const githubWorkspace = currentWorkspace || (null !== (_d = process.env.GITHUB_WORKSPACE) && void 0 !== _d ? _d : process.cwd()), result = crypto.createHash("sha256");
     let count = 0;
     try {
      for (var _g, _e = !0, _f = __asyncValues(globber.globGenerator()); _g = yield _f.next(), 
      !(_a = _g.done); _e = !0) {
       _c = _g.value, _e = !1;
       const file = _c;
       if (writeDelegate(file), !file.startsWith(`${githubWorkspace}${path.sep}`)) {
        writeDelegate(`Ignore '${file}' since it is not under GITHUB_WORKSPACE.`);
        continue;
       }
       if (fs.statSync(file).isDirectory()) {
        writeDelegate(`Skip directory '${file}'.`);
        continue;
       }
       const hash = crypto.createHash("sha256"), pipeline = util.promisify(stream.pipeline);
       yield pipeline(fs.createReadStream(file), hash), result.write(hash.digest()), count++, 
       hasMatch || (hasMatch = !0);
      }
     } catch (e_1_1) {
      e_1 = {
       error: e_1_1
      };
     } finally {
      try {
       _e || _a || !(_b = _f.return) || (yield _b.call(_f));
      } finally {
       if (e_1) throw e_1.error;
      }
     }
     return result.end(), hasMatch ? (writeDelegate(`Found ${count} files to hash.`), 
     result.digest("hex")) : (writeDelegate("No matches found for glob"), "");
    }));
   };
  },
  8339: (__unused_webpack_module, exports) => {
   "use strict";
   var MatchKind;
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.MatchKind = void 0, function(MatchKind) {
    MatchKind[MatchKind.None = 0] = "None", MatchKind[MatchKind.Directory = 1] = "Directory", 
    MatchKind[MatchKind.File = 2] = "File", MatchKind[MatchKind.All = 3] = "All";
   }(MatchKind || (exports.MatchKind = MatchKind = {}));
  },
  459: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.safeTrimTrailingSeparator = exports.normalizeSeparators = exports.hasRoot = exports.hasAbsoluteRoot = exports.ensureAbsoluteRoot = exports.dirname = void 0;
   const path = __importStar(__webpack_require__(6928)), assert_1 = __importDefault(__webpack_require__(2613)), IS_WINDOWS = "win32" === process.platform;
   function hasAbsoluteRoot(itemPath) {
    return (0, assert_1.default)(itemPath, "hasAbsoluteRoot parameter 'itemPath' must not be empty"), 
    itemPath = normalizeSeparators(itemPath), IS_WINDOWS ? itemPath.startsWith("\\\\") || /^[A-Z]:\\/i.test(itemPath) : itemPath.startsWith("/");
   }
   function normalizeSeparators(p) {
    if (p = p || "", IS_WINDOWS) {
     p = p.replace(/\//g, "\\");
     return (/^\\\\+[^\\]/.test(p) ? "\\" : "") + p.replace(/\\\\+/g, "\\");
    }
    return p.replace(/\/\/+/g, "/");
   }
   function safeTrimTrailingSeparator(p) {
    return p ? (p = normalizeSeparators(p)).endsWith(path.sep) ? p === path.sep || IS_WINDOWS && /^[A-Z]:\\$/i.test(p) ? p : p.substr(0, p.length - 1) : p : "";
   }
   exports.dirname = function(p) {
    if (p = safeTrimTrailingSeparator(p), IS_WINDOWS && /^\\\\[^\\]+(\\[^\\]+)?$/.test(p)) return p;
    let result = path.dirname(p);
    return IS_WINDOWS && /^\\\\[^\\]+\\[^\\]+\\$/.test(result) && (result = safeTrimTrailingSeparator(result)), 
    result;
   }, exports.ensureAbsoluteRoot = function(root, itemPath) {
    if ((0, assert_1.default)(root, "ensureAbsoluteRoot parameter 'root' must not be empty"), 
    (0, assert_1.default)(itemPath, "ensureAbsoluteRoot parameter 'itemPath' must not be empty"), 
    hasAbsoluteRoot(itemPath)) return itemPath;
    if (IS_WINDOWS) {
     if (itemPath.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
      let cwd = process.cwd();
      return (0, assert_1.default)(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`), 
      itemPath[0].toUpperCase() === cwd[0].toUpperCase() ? 2 === itemPath.length ? `${itemPath[0]}:\\${cwd.substr(3)}` : (cwd.endsWith("\\") || (cwd += "\\"), 
      `${itemPath[0]}:\\${cwd.substr(3)}${itemPath.substr(2)}`) : `${itemPath[0]}:\\${itemPath.substr(2)}`;
     }
     if (normalizeSeparators(itemPath).match(/^\\$|^\\[^\\]/)) {
      const cwd = process.cwd();
      return (0, assert_1.default)(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`), 
      `${cwd[0]}:\\${itemPath.substr(1)}`;
     }
    }
    return (0, assert_1.default)(hasAbsoluteRoot(root), "ensureAbsoluteRoot parameter 'root' must have an absolute root"), 
    root.endsWith("/") || IS_WINDOWS && root.endsWith("\\") || (root += path.sep), root + itemPath;
   }, exports.hasAbsoluteRoot = hasAbsoluteRoot, exports.hasRoot = function(itemPath) {
    return (0, assert_1.default)(itemPath, "isRooted parameter 'itemPath' must not be empty"), 
    itemPath = normalizeSeparators(itemPath), IS_WINDOWS ? itemPath.startsWith("\\") || /^[A-Z]:/i.test(itemPath) : itemPath.startsWith("/");
   }, exports.normalizeSeparators = normalizeSeparators, exports.safeTrimTrailingSeparator = safeTrimTrailingSeparator;
  },
  7706: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.Path = void 0;
   const path = __importStar(__webpack_require__(6928)), pathHelper = __importStar(__webpack_require__(459)), assert_1 = __importDefault(__webpack_require__(2613)), IS_WINDOWS = "win32" === process.platform;
   exports.Path = class {
    constructor(itemPath) {
     if (this.segments = [], "string" == typeof itemPath) if ((0, assert_1.default)(itemPath, "Parameter 'itemPath' must not be empty"), 
     itemPath = pathHelper.safeTrimTrailingSeparator(itemPath), pathHelper.hasRoot(itemPath)) {
      let remaining = itemPath, dir = pathHelper.dirname(remaining);
      for (;dir !== remaining; ) {
       const basename = path.basename(remaining);
       this.segments.unshift(basename), remaining = dir, dir = pathHelper.dirname(remaining);
      }
      this.segments.unshift(remaining);
     } else this.segments = itemPath.split(path.sep); else {
      (0, assert_1.default)(itemPath.length > 0, "Parameter 'itemPath' must not be an empty array");
      for (let i = 0; i < itemPath.length; i++) {
       let segment = itemPath[i];
       (0, assert_1.default)(segment, "Parameter 'itemPath' must not contain any empty segments"), 
       segment = pathHelper.normalizeSeparators(itemPath[i]), 0 === i && pathHelper.hasRoot(segment) ? (segment = pathHelper.safeTrimTrailingSeparator(segment), 
       (0, assert_1.default)(segment === pathHelper.dirname(segment), "Parameter 'itemPath' root segment contains information for multiple segments"), 
       this.segments.push(segment)) : ((0, assert_1.default)(!segment.includes(path.sep), "Parameter 'itemPath' contains unexpected path separators"), 
       this.segments.push(segment));
      }
     }
    }
    toString() {
     let result = this.segments[0], skipSlash = result.endsWith(path.sep) || IS_WINDOWS && /^[A-Z]:$/i.test(result);
     for (let i = 1; i < this.segments.length; i++) skipSlash ? skipSlash = !1 : result += path.sep, 
     result += this.segments[i];
     return result;
    }
   };
  },
  9288: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.partialMatch = exports.match = exports.getSearchPaths = void 0;
   const pathHelper = __importStar(__webpack_require__(459)), internal_match_kind_1 = __webpack_require__(8339), IS_WINDOWS = "win32" === process.platform;
   exports.getSearchPaths = function(patterns) {
    patterns = patterns.filter((x => !x.negate));
    const searchPathMap = {};
    for (const pattern of patterns) {
     searchPathMap[IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath] = "candidate";
    }
    const result = [];
    for (const pattern of patterns) {
     const key = IS_WINDOWS ? pattern.searchPath.toUpperCase() : pattern.searchPath;
     if ("included" === searchPathMap[key]) continue;
     let foundAncestor = !1, tempKey = key, parent = pathHelper.dirname(tempKey);
     for (;parent !== tempKey; ) {
      if (searchPathMap[parent]) {
       foundAncestor = !0;
       break;
      }
      tempKey = parent, parent = pathHelper.dirname(tempKey);
     }
     foundAncestor || (result.push(pattern.searchPath), searchPathMap[key] = "included");
    }
    return result;
   }, exports.match = function(patterns, itemPath) {
    let result = internal_match_kind_1.MatchKind.None;
    for (const pattern of patterns) pattern.negate ? result &= ~pattern.match(itemPath) : result |= pattern.match(itemPath);
    return result;
   }, exports.partialMatch = function(patterns, itemPath) {
    return patterns.some((x => !x.negate && x.partialMatch(itemPath)));
   };
  },
  7639: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.Pattern = void 0;
   const os = __importStar(__webpack_require__(857)), path = __importStar(__webpack_require__(6928)), pathHelper = __importStar(__webpack_require__(459)), assert_1 = __importDefault(__webpack_require__(2613)), minimatch_1 = __webpack_require__(2535), internal_match_kind_1 = __webpack_require__(8339), internal_path_1 = __webpack_require__(7706), IS_WINDOWS = "win32" === process.platform;
   class Pattern {
    constructor(patternOrNegate, isImplicitPattern = !1, segments, homedir) {
     let pattern;
     if (this.negate = !1, "string" == typeof patternOrNegate) pattern = patternOrNegate.trim(); else {
      segments = segments || [], (0, assert_1.default)(segments.length, "Parameter 'segments' must not empty");
      const root = Pattern.getLiteral(segments[0]);
      (0, assert_1.default)(root && pathHelper.hasAbsoluteRoot(root), "Parameter 'segments' first element must be a root path"), 
      pattern = new internal_path_1.Path(segments).toString().trim(), patternOrNegate && (pattern = `!${pattern}`);
     }
     for (;pattern.startsWith("!"); ) this.negate = !this.negate, pattern = pattern.substr(1).trim();
     pattern = Pattern.fixupPattern(pattern, homedir), this.segments = new internal_path_1.Path(pattern).segments, 
     this.trailingSeparator = pathHelper.normalizeSeparators(pattern).endsWith(path.sep), 
     pattern = pathHelper.safeTrimTrailingSeparator(pattern);
     let foundGlob = !1;
     const searchSegments = this.segments.map((x => Pattern.getLiteral(x))).filter((x => !foundGlob && !(foundGlob = "" === x)));
     this.searchPath = new internal_path_1.Path(searchSegments).toString(), this.rootRegExp = new RegExp(Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? "i" : ""), 
     this.isImplicitPattern = isImplicitPattern;
     const minimatchOptions = {
      dot: !0,
      nobrace: !0,
      nocase: IS_WINDOWS,
      nocomment: !0,
      noext: !0,
      nonegate: !0
     };
     pattern = IS_WINDOWS ? pattern.replace(/\\/g, "/") : pattern, this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions);
    }
    match(itemPath) {
     return "**" === this.segments[this.segments.length - 1] ? (itemPath = pathHelper.normalizeSeparators(itemPath)).endsWith(path.sep) || !1 !== this.isImplicitPattern || (itemPath = `${itemPath}${path.sep}`) : itemPath = pathHelper.safeTrimTrailingSeparator(itemPath), 
     this.minimatch.match(itemPath) ? this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All : internal_match_kind_1.MatchKind.None;
    }
    partialMatch(itemPath) {
     return itemPath = pathHelper.safeTrimTrailingSeparator(itemPath), pathHelper.dirname(itemPath) === itemPath ? this.rootRegExp.test(itemPath) : this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\+/ : /\/+/), this.minimatch.set[0], !0);
    }
    static globEscape(s) {
     return (IS_WINDOWS ? s : s.replace(/\\/g, "\\\\")).replace(/(\[)(?=[^/]+\])/g, "[[]").replace(/\?/g, "[?]").replace(/\*/g, "[*]");
    }
    static fixupPattern(pattern, homedir) {
     (0, assert_1.default)(pattern, "pattern cannot be empty");
     const literalSegments = new internal_path_1.Path(pattern).segments.map((x => Pattern.getLiteral(x)));
     if ((0, assert_1.default)(literalSegments.every(((x, i) => ("." !== x || 0 === i) && ".." !== x)), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`), 
     (0, assert_1.default)(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`), 
     "." === (pattern = pathHelper.normalizeSeparators(pattern)) || pattern.startsWith(`.${path.sep}`)) pattern = Pattern.globEscape(process.cwd()) + pattern.substr(1); else if ("~" === pattern || pattern.startsWith(`~${path.sep}`)) homedir = homedir || os.homedir(), 
     (0, assert_1.default)(homedir, "Unable to determine HOME directory"), (0, assert_1.default)(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`), 
     pattern = Pattern.globEscape(homedir) + pattern.substr(1); else if (IS_WINDOWS && (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\]/i))) {
      let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", pattern.substr(0, 2));
      pattern.length > 2 && !root.endsWith("\\") && (root += "\\"), pattern = Pattern.globEscape(root) + pattern.substr(2);
     } else if (IS_WINDOWS && ("\\" === pattern || pattern.match(/^\\[^\\]/))) {
      let root = pathHelper.ensureAbsoluteRoot("C:\\dummy-root", "\\");
      root.endsWith("\\") || (root += "\\"), pattern = Pattern.globEscape(root) + pattern.substr(1);
     } else pattern = pathHelper.ensureAbsoluteRoot(Pattern.globEscape(process.cwd()), pattern);
     return pathHelper.normalizeSeparators(pattern);
    }
    static getLiteral(segment) {
     let literal = "";
     for (let i = 0; i < segment.length; i++) {
      const c = segment[i];
      if ("\\" === c && !IS_WINDOWS && i + 1 < segment.length) literal += segment[++i]; else {
       if ("*" === c || "?" === c) return "";
       if ("[" === c && i + 1 < segment.length) {
        let set = "", closed = -1;
        for (let i2 = i + 1; i2 < segment.length; i2++) {
         const c2 = segment[i2];
         if ("\\" === c2 && !IS_WINDOWS && i2 + 1 < segment.length) set += segment[++i2]; else {
          if ("]" === c2) {
           closed = i2;
           break;
          }
          set += c2;
         }
        }
        if (closed >= 0) {
         if (set.length > 1) return "";
         if (set) {
          literal += set, i = closed;
          continue;
         }
        }
       }
       literal += c;
      }
     }
     return literal;
    }
    static regExpEscape(s) {
     return s.replace(/[[\\^$.|?*+()]/g, "\\$&");
    }
   }
   exports.Pattern = Pattern;
  },
  2481: (__unused_webpack_module, exports) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.SearchState = void 0;
   exports.SearchState = class {
    constructor(path, level) {
     this.path = path, this.level = level;
    }
   };
  },
  3503: function(__unused_webpack_module, exports) {
   "use strict";
   var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
   exports.BasicCredentialHandler = class {
    constructor(username, password) {
     this.username = username, this.password = password;
    }
    prepareRequest(options) {
     if (!options.headers) throw Error("The request has no headers");
     options.headers.Authorization = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
    }
    canHandleAuthentication() {
     return !1;
    }
    handleAuthentication() {
     return __awaiter(this, void 0, void 0, (function*() {
      throw new Error("not implemented");
     }));
    }
   };
   exports.BearerCredentialHandler = class {
    constructor(token) {
     this.token = token;
    }
    prepareRequest(options) {
     if (!options.headers) throw Error("The request has no headers");
     options.headers.Authorization = `Bearer ${this.token}`;
    }
    canHandleAuthentication() {
     return !1;
    }
    handleAuthentication() {
     return __awaiter(this, void 0, void 0, (function*() {
      throw new Error("not implemented");
     }));
    }
   };
   exports.PersonalAccessTokenCredentialHandler = class {
    constructor(token) {
     this.token = token;
    }
    prepareRequest(options) {
     if (!options.headers) throw Error("The request has no headers");
     options.headers.Authorization = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
    }
    canHandleAuthentication() {
     return !1;
    }
    handleAuthentication() {
     return __awaiter(this, void 0, void 0, (function*() {
      throw new Error("not implemented");
     }));
    }
   };
  },
  5001: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
   const http = __importStar(__webpack_require__(8611)), https = __importStar(__webpack_require__(5692)), pm = __importStar(__webpack_require__(4257)), tunnel = __importStar(__webpack_require__(3663)), undici_1 = __webpack_require__(3001);
   var HttpCodes, Headers, MediaTypes;
   !function(HttpCodes) {
    HttpCodes[HttpCodes.OK = 200] = "OK", HttpCodes[HttpCodes.MultipleChoices = 300] = "MultipleChoices", 
    HttpCodes[HttpCodes.MovedPermanently = 301] = "MovedPermanently", HttpCodes[HttpCodes.ResourceMoved = 302] = "ResourceMoved", 
    HttpCodes[HttpCodes.SeeOther = 303] = "SeeOther", HttpCodes[HttpCodes.NotModified = 304] = "NotModified", 
    HttpCodes[HttpCodes.UseProxy = 305] = "UseProxy", HttpCodes[HttpCodes.SwitchProxy = 306] = "SwitchProxy", 
    HttpCodes[HttpCodes.TemporaryRedirect = 307] = "TemporaryRedirect", HttpCodes[HttpCodes.PermanentRedirect = 308] = "PermanentRedirect", 
    HttpCodes[HttpCodes.BadRequest = 400] = "BadRequest", HttpCodes[HttpCodes.Unauthorized = 401] = "Unauthorized", 
    HttpCodes[HttpCodes.PaymentRequired = 402] = "PaymentRequired", HttpCodes[HttpCodes.Forbidden = 403] = "Forbidden", 
    HttpCodes[HttpCodes.NotFound = 404] = "NotFound", HttpCodes[HttpCodes.MethodNotAllowed = 405] = "MethodNotAllowed", 
    HttpCodes[HttpCodes.NotAcceptable = 406] = "NotAcceptable", HttpCodes[HttpCodes.ProxyAuthenticationRequired = 407] = "ProxyAuthenticationRequired", 
    HttpCodes[HttpCodes.RequestTimeout = 408] = "RequestTimeout", HttpCodes[HttpCodes.Conflict = 409] = "Conflict", 
    HttpCodes[HttpCodes.Gone = 410] = "Gone", HttpCodes[HttpCodes.TooManyRequests = 429] = "TooManyRequests", 
    HttpCodes[HttpCodes.InternalServerError = 500] = "InternalServerError", HttpCodes[HttpCodes.NotImplemented = 501] = "NotImplemented", 
    HttpCodes[HttpCodes.BadGateway = 502] = "BadGateway", HttpCodes[HttpCodes.ServiceUnavailable = 503] = "ServiceUnavailable", 
    HttpCodes[HttpCodes.GatewayTimeout = 504] = "GatewayTimeout";
   }(HttpCodes || (exports.HttpCodes = HttpCodes = {})), function(Headers) {
    Headers.Accept = "accept", Headers.ContentType = "content-type";
   }(Headers || (exports.Headers = Headers = {})), function(MediaTypes) {
    MediaTypes.ApplicationJson = "application/json";
   }(MediaTypes || (exports.MediaTypes = MediaTypes = {})), exports.getProxyUrl = function(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : "";
   };
   const HttpRedirectCodes = [ HttpCodes.MovedPermanently, HttpCodes.ResourceMoved, HttpCodes.SeeOther, HttpCodes.TemporaryRedirect, HttpCodes.PermanentRedirect ], HttpResponseRetryCodes = [ HttpCodes.BadGateway, HttpCodes.ServiceUnavailable, HttpCodes.GatewayTimeout ], RetryableHttpVerbs = [ "OPTIONS", "GET", "DELETE", "HEAD" ];
   class HttpClientError extends Error {
    constructor(message, statusCode) {
     super(message), this.name = "HttpClientError", this.statusCode = statusCode, Object.setPrototypeOf(this, HttpClientError.prototype);
    }
   }
   exports.HttpClientError = HttpClientError;
   class HttpClientResponse {
    constructor(message) {
     this.message = message;
    }
    readBody() {
     return __awaiter(this, void 0, void 0, (function*() {
      return new Promise((resolve => __awaiter(this, void 0, void 0, (function*() {
       let output = Buffer.alloc(0);
       this.message.on("data", (chunk => {
        output = Buffer.concat([ output, chunk ]);
       })), this.message.on("end", (() => {
        resolve(output.toString());
       }));
      }))));
     }));
    }
    readBodyBuffer() {
     return __awaiter(this, void 0, void 0, (function*() {
      return new Promise((resolve => __awaiter(this, void 0, void 0, (function*() {
       const chunks = [];
       this.message.on("data", (chunk => {
        chunks.push(chunk);
       })), this.message.on("end", (() => {
        resolve(Buffer.concat(chunks));
       }));
      }))));
     }));
    }
   }
   exports.HttpClientResponse = HttpClientResponse, exports.isHttps = function(requestUrl) {
    return "https:" === new URL(requestUrl).protocol;
   };
   exports.HttpClient = class {
    constructor(userAgent, handlers, requestOptions) {
     this._ignoreSslError = !1, this._allowRedirects = !0, this._allowRedirectDowngrade = !1, 
     this._maxRedirects = 50, this._allowRetries = !1, this._maxRetries = 1, this._keepAlive = !1, 
     this._disposed = !1, this.userAgent = userAgent, this.handlers = handlers || [], 
     this.requestOptions = requestOptions, requestOptions && (null != requestOptions.ignoreSslError && (this._ignoreSslError = requestOptions.ignoreSslError), 
     this._socketTimeout = requestOptions.socketTimeout, null != requestOptions.allowRedirects && (this._allowRedirects = requestOptions.allowRedirects), 
     null != requestOptions.allowRedirectDowngrade && (this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade), 
     null != requestOptions.maxRedirects && (this._maxRedirects = Math.max(requestOptions.maxRedirects, 0)), 
     null != requestOptions.keepAlive && (this._keepAlive = requestOptions.keepAlive), 
     null != requestOptions.allowRetries && (this._allowRetries = requestOptions.allowRetries), 
     null != requestOptions.maxRetries && (this._maxRetries = requestOptions.maxRetries));
    }
    options(requestUrl, additionalHeaders) {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
     }));
    }
    get(requestUrl, additionalHeaders) {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.request("GET", requestUrl, null, additionalHeaders || {});
     }));
    }
    del(requestUrl, additionalHeaders) {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.request("DELETE", requestUrl, null, additionalHeaders || {});
     }));
    }
    post(requestUrl, data, additionalHeaders) {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.request("POST", requestUrl, data, additionalHeaders || {});
     }));
    }
    patch(requestUrl, data, additionalHeaders) {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.request("PATCH", requestUrl, data, additionalHeaders || {});
     }));
    }
    put(requestUrl, data, additionalHeaders) {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.request("PUT", requestUrl, data, additionalHeaders || {});
     }));
    }
    head(requestUrl, additionalHeaders) {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.request("HEAD", requestUrl, null, additionalHeaders || {});
     }));
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
     return __awaiter(this, void 0, void 0, (function*() {
      return this.request(verb, requestUrl, stream, additionalHeaders);
     }));
    }
    getJson(requestUrl, additionalHeaders = {}) {
     return __awaiter(this, void 0, void 0, (function*() {
      additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
      const res = yield this.get(requestUrl, additionalHeaders);
      return this._processResponse(res, this.requestOptions);
     }));
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
     return __awaiter(this, void 0, void 0, (function*() {
      const data = JSON.stringify(obj, null, 2);
      additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson), 
      additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
      const res = yield this.post(requestUrl, data, additionalHeaders);
      return this._processResponse(res, this.requestOptions);
     }));
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
     return __awaiter(this, void 0, void 0, (function*() {
      const data = JSON.stringify(obj, null, 2);
      additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson), 
      additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
      const res = yield this.put(requestUrl, data, additionalHeaders);
      return this._processResponse(res, this.requestOptions);
     }));
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
     return __awaiter(this, void 0, void 0, (function*() {
      const data = JSON.stringify(obj, null, 2);
      additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson), 
      additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
      const res = yield this.patch(requestUrl, data, additionalHeaders);
      return this._processResponse(res, this.requestOptions);
     }));
    }
    request(verb, requestUrl, data, headers) {
     return __awaiter(this, void 0, void 0, (function*() {
      if (this._disposed) throw new Error("Client has already been disposed.");
      const parsedUrl = new URL(requestUrl);
      let info = this._prepareRequest(verb, parsedUrl, headers);
      const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
      let response, numTries = 0;
      do {
       if (response = yield this.requestRaw(info, data), response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
        let authenticationHandler;
        for (const handler of this.handlers) if (handler.canHandleAuthentication(response)) {
         authenticationHandler = handler;
         break;
        }
        return authenticationHandler ? authenticationHandler.handleAuthentication(this, info, data) : response;
       }
       let redirectsRemaining = this._maxRedirects;
       for (;response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0; ) {
        const redirectUrl = response.message.headers.location;
        if (!redirectUrl) break;
        const parsedRedirectUrl = new URL(redirectUrl);
        if ("https:" === parsedUrl.protocol && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
        if (yield response.readBody(), parsedRedirectUrl.hostname !== parsedUrl.hostname) for (const header in headers) "authorization" === header.toLowerCase() && delete headers[header];
        info = this._prepareRequest(verb, parsedRedirectUrl, headers), response = yield this.requestRaw(info, data), 
        redirectsRemaining--;
       }
       if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) return response;
       numTries += 1, numTries < maxTries && (yield response.readBody(), yield this._performExponentialBackoff(numTries));
      } while (numTries < maxTries);
      return response;
     }));
    }
    dispose() {
     this._agent && this._agent.destroy(), this._disposed = !0;
    }
    requestRaw(info, data) {
     return __awaiter(this, void 0, void 0, (function*() {
      return new Promise(((resolve, reject) => {
       this.requestRawWithCallback(info, data, (function(err, res) {
        err ? reject(err) : res ? resolve(res) : reject(new Error("Unknown error"));
       }));
      }));
     }));
    }
    requestRawWithCallback(info, data, onResult) {
     "string" == typeof data && (info.options.headers || (info.options.headers = {}), 
     info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8"));
     let callbackCalled = !1;
     function handleResult(err, res) {
      callbackCalled || (callbackCalled = !0, onResult(err, res));
     }
     const req = info.httpModule.request(info.options, (msg => {
      handleResult(void 0, new HttpClientResponse(msg));
     }));
     let socket;
     req.on("socket", (sock => {
      socket = sock;
     })), req.setTimeout(this._socketTimeout || 18e4, (() => {
      socket && socket.end(), handleResult(new Error(`Request timeout: ${info.options.path}`));
     })), req.on("error", (function(err) {
      handleResult(err);
     })), data && "string" == typeof data && req.write(data, "utf8"), data && "string" != typeof data ? (data.on("close", (function() {
      req.end();
     })), data.pipe(req)) : req.end();
    }
    getAgent(serverUrl) {
     const parsedUrl = new URL(serverUrl);
     return this._getAgent(parsedUrl);
    }
    getAgentDispatcher(serverUrl) {
     const parsedUrl = new URL(serverUrl), proxyUrl = pm.getProxyUrl(parsedUrl);
     if (proxyUrl && proxyUrl.hostname) return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
     const info = {};
     info.parsedUrl = requestUrl;
     const usingSsl = "https:" === info.parsedUrl.protocol;
     info.httpModule = usingSsl ? https : http;
     const defaultPort = usingSsl ? 443 : 80;
     if (info.options = {}, info.options.host = info.parsedUrl.hostname, info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort, 
     info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || ""), 
     info.options.method = method, info.options.headers = this._mergeHeaders(headers), 
     null != this.userAgent && (info.options.headers["user-agent"] = this.userAgent), 
     info.options.agent = this._getAgent(info.parsedUrl), this.handlers) for (const handler of this.handlers) handler.prepareRequest(info.options);
     return info;
    }
    _mergeHeaders(headers) {
     return this.requestOptions && this.requestOptions.headers ? Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {})) : lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
     let clientHeader;
     return this.requestOptions && this.requestOptions.headers && (clientHeader = lowercaseKeys(this.requestOptions.headers)[header]), 
     additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
     let agent;
     const proxyUrl = pm.getProxyUrl(parsedUrl), useProxy = proxyUrl && proxyUrl.hostname;
     if (this._keepAlive && useProxy && (agent = this._proxyAgent), useProxy || (agent = this._agent), 
     agent) return agent;
     const usingSsl = "https:" === parsedUrl.protocol;
     let maxSockets = 100;
     if (this.requestOptions && (maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets), 
     proxyUrl && proxyUrl.hostname) {
      const agentOptions = {
       maxSockets,
       keepAlive: this._keepAlive,
       proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
        proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
       }), {
        host: proxyUrl.hostname,
        port: proxyUrl.port
       })
      };
      let tunnelAgent;
      const overHttps = "https:" === proxyUrl.protocol;
      tunnelAgent = usingSsl ? overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp : overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp, 
      agent = tunnelAgent(agentOptions), this._proxyAgent = agent;
     }
     if (!agent) {
      const options = {
       keepAlive: this._keepAlive,
       maxSockets
      };
      agent = usingSsl ? new https.Agent(options) : new http.Agent(options), this._agent = agent;
     }
     return usingSsl && this._ignoreSslError && (agent.options = Object.assign(agent.options || {}, {
      rejectUnauthorized: !1
     })), agent;
    }
    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
     let proxyAgent;
     if (this._keepAlive && (proxyAgent = this._proxyAgentDispatcher), proxyAgent) return proxyAgent;
     const usingSsl = "https:" === parsedUrl.protocol;
     return proxyAgent = new undici_1.ProxyAgent(Object.assign({
      uri: proxyUrl.href,
      pipelining: this._keepAlive ? 1 : 0
     }, (proxyUrl.username || proxyUrl.password) && {
      token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}`
     })), this._proxyAgentDispatcher = proxyAgent, usingSsl && this._ignoreSslError && (proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
      rejectUnauthorized: !1
     })), proxyAgent;
    }
    _performExponentialBackoff(retryNumber) {
     return __awaiter(this, void 0, void 0, (function*() {
      retryNumber = Math.min(10, retryNumber);
      const ms = 5 * Math.pow(2, retryNumber);
      return new Promise((resolve => setTimeout((() => resolve()), ms)));
     }));
    }
    _processResponse(res, options) {
     return __awaiter(this, void 0, void 0, (function*() {
      return new Promise(((resolve, reject) => __awaiter(this, void 0, void 0, (function*() {
       const statusCode = res.message.statusCode || 0, response = {
        statusCode,
        result: null,
        headers: {}
       };
       let obj, contents;
       statusCode === HttpCodes.NotFound && resolve(response);
       try {
        contents = yield res.readBody(), contents && contents.length > 0 && (obj = options && options.deserializeDates ? JSON.parse(contents, (function(key, value) {
         if ("string" == typeof value) {
          const a = new Date(value);
          if (!isNaN(a.valueOf())) return a;
         }
         return value;
        })) : JSON.parse(contents), response.result = obj), response.headers = res.message.headers;
       } catch (err) {}
       if (statusCode > 299) {
        let msg;
        msg = obj && obj.message ? obj.message : contents && contents.length > 0 ? contents : `Failed request: (${statusCode})`;
        const err = new HttpClientError(msg, statusCode);
        err.result = response.result, reject(err);
       } else resolve(response);
      }))));
     }));
    }
   };
   const lowercaseKeys = obj => Object.keys(obj).reduce(((c, k) => (c[k.toLowerCase()] = obj[k], 
   c)), {});
  },
  4257: (__unused_webpack_module, exports) => {
   "use strict";
   function checkBypass(reqUrl) {
    if (!reqUrl.hostname) return !1;
    if (function(host) {
     const hostLower = host.toLowerCase();
     return "localhost" === hostLower || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
    }(reqUrl.hostname)) return !0;
    const noProxy = process.env.no_proxy || process.env.NO_PROXY || "";
    if (!noProxy) return !1;
    let reqPort;
    reqUrl.port ? reqPort = Number(reqUrl.port) : "http:" === reqUrl.protocol ? reqPort = 80 : "https:" === reqUrl.protocol && (reqPort = 443);
    const upperReqHosts = [ reqUrl.hostname.toUpperCase() ];
    "number" == typeof reqPort && upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    for (const upperNoProxyItem of noProxy.split(",").map((x => x.trim().toUpperCase())).filter((x => x))) if ("*" === upperNoProxyItem || upperReqHosts.some((x => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`)))) return !0;
    return !1;
   }
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.checkBypass = exports.getProxyUrl = void 0, exports.getProxyUrl = function(reqUrl) {
    const usingSsl = "https:" === reqUrl.protocol;
    if (checkBypass(reqUrl)) return;
    const proxyVar = usingSsl ? process.env.https_proxy || process.env.HTTPS_PROXY : process.env.http_proxy || process.env.HTTP_PROXY;
    if (proxyVar) try {
     return new DecodedURL(proxyVar);
    } catch (_a) {
     if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://")) return new DecodedURL(`http://${proxyVar}`);
    }
   }, exports.checkBypass = checkBypass;
   class DecodedURL extends URL {
    constructor(url, base) {
     super(url, base), this._decodedUsername = decodeURIComponent(super.username), this._decodedPassword = decodeURIComponent(super.password);
    }
    get username() {
     return this._decodedUsername;
    }
    get password() {
     return this._decodedPassword;
    }
   }
  },
  4664: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var _a, __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
   const fs = __importStar(__webpack_require__(9896)), path = __importStar(__webpack_require__(6928));
   function isUnixExecutable(stats) {
    return (1 & stats.mode) > 0 || (8 & stats.mode) > 0 && stats.gid === process.getgid() || (64 & stats.mode) > 0 && stats.uid === process.getuid();
   }
   _a = fs.promises, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, 
   exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, 
   exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, 
   exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, 
   exports.unlink = _a.unlink, exports.IS_WINDOWS = "win32" === process.platform, exports.UV_FS_O_EXLOCK = 268435456, 
   exports.READONLY = fs.constants.O_RDONLY, exports.exists = function(fsPath) {
    return __awaiter(this, void 0, void 0, (function*() {
     try {
      yield exports.stat(fsPath);
     } catch (err) {
      if ("ENOENT" === err.code) return !1;
      throw err;
     }
     return !0;
    }));
   }, exports.isDirectory = function(fsPath, useStat = !1) {
    return __awaiter(this, void 0, void 0, (function*() {
     return (useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath)).isDirectory();
    }));
   }, exports.isRooted = function(p) {
    if (!(p = function(p) {
     if (p = p || "", exports.IS_WINDOWS) return (p = p.replace(/\//g, "\\")).replace(/\\\\+/g, "\\");
     return p.replace(/\/\/+/g, "/");
    }(p))) throw new Error('isRooted() parameter "p" cannot be empty');
    return exports.IS_WINDOWS ? p.startsWith("\\") || /^[A-Z]:/i.test(p) : p.startsWith("/");
   }, exports.tryGetExecutablePath = function(filePath, extensions) {
    return __awaiter(this, void 0, void 0, (function*() {
     let stats;
     try {
      stats = yield exports.stat(filePath);
     } catch (err) {
      "ENOENT" !== err.code && console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
     }
     if (stats && stats.isFile()) if (exports.IS_WINDOWS) {
      const upperExt = path.extname(filePath).toUpperCase();
      if (extensions.some((validExt => validExt.toUpperCase() === upperExt))) return filePath;
     } else if (isUnixExecutable(stats)) return filePath;
     const originalFilePath = filePath;
     for (const extension of extensions) {
      filePath = originalFilePath + extension, stats = void 0;
      try {
       stats = yield exports.stat(filePath);
      } catch (err) {
       "ENOENT" !== err.code && console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
      }
      if (stats && stats.isFile()) {
       if (exports.IS_WINDOWS) {
        try {
         const directory = path.dirname(filePath), upperName = path.basename(filePath).toUpperCase();
         for (const actualName of yield exports.readdir(directory)) if (upperName === actualName.toUpperCase()) {
          filePath = path.join(directory, actualName);
          break;
         }
        } catch (err) {
         console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
        }
        return filePath;
       }
       if (isUnixExecutable(stats)) return filePath;
      }
     }
     return "";
    }));
   }, exports.getCmdPath = function() {
    var _a;
    return null !== (_a = process.env.COMSPEC) && void 0 !== _a ? _a : "cmd.exe";
   };
  },
  8599: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), Object.defineProperty(o, k2, {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    });
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
   const assert_1 = __webpack_require__(2613), path = __importStar(__webpack_require__(6928)), ioUtil = __importStar(__webpack_require__(4664));
   function rmRF(inputPath) {
    return __awaiter(this, void 0, void 0, (function*() {
     if (ioUtil.IS_WINDOWS && /[*"<>|]/.test(inputPath)) throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
     try {
      yield ioUtil.rm(inputPath, {
       force: !0,
       maxRetries: 3,
       recursive: !0,
       retryDelay: 300
      });
     } catch (err) {
      throw new Error(`File was unable to be removed ${err}`);
     }
    }));
   }
   function mkdirP(fsPath) {
    return __awaiter(this, void 0, void 0, (function*() {
     assert_1.ok(fsPath, "a path argument must be provided"), yield ioUtil.mkdir(fsPath, {
      recursive: !0
     });
    }));
   }
   function findInPath(tool) {
    return __awaiter(this, void 0, void 0, (function*() {
     if (!tool) throw new Error("parameter 'tool' is required");
     const extensions = [];
     if (ioUtil.IS_WINDOWS && process.env.PATHEXT) for (const extension of process.env.PATHEXT.split(path.delimiter)) extension && extensions.push(extension);
     if (ioUtil.isRooted(tool)) {
      const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
      return filePath ? [ filePath ] : [];
     }
     if (tool.includes(path.sep)) return [];
     const directories = [];
     if (process.env.PATH) for (const p of process.env.PATH.split(path.delimiter)) p && directories.push(p);
     const matches = [];
     for (const directory of directories) {
      const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);
      filePath && matches.push(filePath);
     }
     return matches;
    }));
   }
   function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
    return __awaiter(this, void 0, void 0, (function*() {
     if (currentDepth >= 255) return;
     currentDepth++, yield mkdirP(destDir);
     const files = yield ioUtil.readdir(sourceDir);
     for (const fileName of files) {
      const srcFile = `${sourceDir}/${fileName}`, destFile = `${destDir}/${fileName}`;
      (yield ioUtil.lstat(srcFile)).isDirectory() ? yield cpDirRecursive(srcFile, destFile, currentDepth, force) : yield copyFile(srcFile, destFile, force);
     }
     yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
    }));
   }
   function copyFile(srcFile, destFile, force) {
    return __awaiter(this, void 0, void 0, (function*() {
     if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
      try {
       yield ioUtil.lstat(destFile), yield ioUtil.unlink(destFile);
      } catch (e) {
       "EPERM" === e.code && (yield ioUtil.chmod(destFile, "0666"), yield ioUtil.unlink(destFile));
      }
      const symlinkFull = yield ioUtil.readlink(srcFile);
      yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? "junction" : null);
     } else (yield ioUtil.exists(destFile)) && !force || (yield ioUtil.copyFile(srcFile, destFile));
    }));
   }
   exports.cp = function(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, (function*() {
     const {force, recursive, copySourceDirectory} = function(options) {
      const force = null == options.force || options.force, recursive = Boolean(options.recursive), copySourceDirectory = null == options.copySourceDirectory || Boolean(options.copySourceDirectory);
      return {
       force,
       recursive,
       copySourceDirectory
      };
     }(options), destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
     if (destStat && destStat.isFile() && !force) return;
     const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path.join(dest, path.basename(source)) : dest;
     if (!(yield ioUtil.exists(source))) throw new Error(`no such file or directory: ${source}`);
     if ((yield ioUtil.stat(source)).isDirectory()) {
      if (!recursive) throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
      yield cpDirRecursive(source, newDest, 0, force);
     } else {
      if ("" === path.relative(source, newDest)) throw new Error(`'${newDest}' and '${source}' are the same file`);
      yield copyFile(source, newDest, force);
     }
    }));
   }, exports.mv = function(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, (function*() {
     if (yield ioUtil.exists(dest)) {
      let destExists = !0;
      if ((yield ioUtil.isDirectory(dest)) && (dest = path.join(dest, path.basename(source)), 
      destExists = yield ioUtil.exists(dest)), destExists) {
       if (null != options.force && !options.force) throw new Error("Destination already exists");
       yield rmRF(dest);
      }
     }
     yield mkdirP(path.dirname(dest)), yield ioUtil.rename(source, dest);
    }));
   }, exports.rmRF = rmRF, exports.mkdirP = mkdirP, exports.which = function which(tool, check) {
    return __awaiter(this, void 0, void 0, (function*() {
     if (!tool) throw new Error("parameter 'tool' is required");
     if (check) {
      const result = yield which(tool, !1);
      if (!result) throw ioUtil.IS_WINDOWS ? new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`) : new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
      return result;
     }
     const matches = yield findInPath(tool);
     return matches && matches.length > 0 ? matches[0] : "";
    }));
   }, exports.findInPath = findInPath;
  },
  7937: function(module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports._readLinuxVersionFile = exports._getOsVersion = exports._findMatch = void 0;
   const semver = __importStar(__webpack_require__(1213)), core_1 = __webpack_require__(4613), os = __webpack_require__(857), cp = __webpack_require__(5317), fs = __webpack_require__(9896);
   exports._findMatch = function(versionSpec, stable, candidates, archFilter) {
    return __awaiter(this, void 0, void 0, (function*() {
     const platFilter = os.platform();
     let result, match, file;
     for (const candidate of candidates) {
      const version = candidate.version;
      if ((0, core_1.debug)(`check ${version} satisfies ${versionSpec}`), semver.satisfies(version, versionSpec) && (!stable || candidate.stable === stable) && (file = candidate.files.find((item => {
       (0, core_1.debug)(`${item.arch}===${archFilter} && ${item.platform}===${platFilter}`);
       let chk = item.arch === archFilter && item.platform === platFilter;
       if (chk && item.platform_version) {
        const osVersion = module.exports._getOsVersion();
        chk = osVersion === item.platform_version || semver.satisfies(osVersion, item.platform_version);
       }
       return chk;
      })), file)) {
       (0, core_1.debug)(`matched ${candidate.version}`), match = candidate;
       break;
      }
     }
     return match && file && (result = Object.assign({}, match), result.files = [ file ]), 
     result;
    }));
   }, exports._getOsVersion = function() {
    const plat = os.platform();
    let version = "";
    if ("darwin" === plat) version = cp.execSync("sw_vers -productVersion").toString(); else if ("linux" === plat) {
     const lsbContents = module.exports._readLinuxVersionFile();
     if (lsbContents) {
      const lines = lsbContents.split("\n");
      for (const line of lines) {
       const parts = line.split("=");
       if (2 === parts.length && ("VERSION_ID" === parts[0].trim() || "DISTRIB_RELEASE" === parts[0].trim())) {
        version = parts[1].trim().replace(/^"/, "").replace(/"$/, "");
        break;
       }
      }
     }
    }
    return version;
   }, exports._readLinuxVersionFile = function() {
    let contents = "";
    return fs.existsSync("/etc/lsb-release") ? contents = fs.readFileSync("/etc/lsb-release").toString() : fs.existsSync("/etc/os-release") && (contents = fs.readFileSync("/etc/os-release").toString()), 
    contents;
   };
  },
  153: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.RetryHelper = void 0;
   const core = __importStar(__webpack_require__(4613));
   exports.RetryHelper = class {
    constructor(maxAttempts, minSeconds, maxSeconds) {
     if (maxAttempts < 1) throw new Error("max attempts should be greater than or equal to 1");
     if (this.maxAttempts = maxAttempts, this.minSeconds = Math.floor(minSeconds), this.maxSeconds = Math.floor(maxSeconds), 
     this.minSeconds > this.maxSeconds) throw new Error("min seconds should be less than or equal to max seconds");
    }
    execute(action, isRetryable) {
     return __awaiter(this, void 0, void 0, (function*() {
      let attempt = 1;
      for (;attempt < this.maxAttempts; ) {
       try {
        return yield action();
       } catch (err) {
        if (isRetryable && !isRetryable(err)) throw err;
        core.info(err.message);
       }
       const seconds = this.getSleepAmount();
       core.info(`Waiting ${seconds} seconds before trying again`), yield this.sleep(seconds), 
       attempt++;
      }
      return yield action();
     }));
    }
    getSleepAmount() {
     return Math.floor(Math.random() * (this.maxSeconds - this.minSeconds + 1)) + this.minSeconds;
    }
    sleep(seconds) {
     return __awaiter(this, void 0, void 0, (function*() {
      return new Promise((resolve => setTimeout(resolve, 1e3 * seconds)));
     }));
    }
   };
  },
  8101: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.evaluateVersions = exports.isExplicitVersion = exports.findFromManifest = exports.getManifestFromRepo = exports.findAllVersions = exports.find = exports.cacheFile = exports.cacheDir = exports.extractZip = exports.extractXar = exports.extractTar = exports.extract7z = exports.downloadTool = exports.HTTPError = void 0;
   const core = __importStar(__webpack_require__(4613)), io = __importStar(__webpack_require__(8599)), crypto = __importStar(__webpack_require__(6982)), fs = __importStar(__webpack_require__(9896)), mm = __importStar(__webpack_require__(7937)), os = __importStar(__webpack_require__(857)), path = __importStar(__webpack_require__(6928)), httpm = __importStar(__webpack_require__(5001)), semver = __importStar(__webpack_require__(1213)), stream = __importStar(__webpack_require__(2203)), util = __importStar(__webpack_require__(9023)), assert_1 = __webpack_require__(2613), exec_1 = __webpack_require__(3021), retry_helper_1 = __webpack_require__(153);
   class HTTPError extends Error {
    constructor(httpStatusCode) {
     super(`Unexpected HTTP response: ${httpStatusCode}`), this.httpStatusCode = httpStatusCode, 
     Object.setPrototypeOf(this, new.target.prototype);
    }
   }
   exports.HTTPError = HTTPError;
   const IS_WINDOWS = "win32" === process.platform, IS_MAC = "darwin" === process.platform;
   function findAllVersions(toolName, arch) {
    const versions = [];
    arch = arch || os.arch();
    const toolPath = path.join(_getCacheDirectory(), toolName);
    if (fs.existsSync(toolPath)) {
     const children = fs.readdirSync(toolPath);
     for (const child of children) if (isExplicitVersion(child)) {
      const fullPath = path.join(toolPath, child, arch || "");
      fs.existsSync(fullPath) && fs.existsSync(`${fullPath}.complete`) && versions.push(child);
     }
    }
    return versions;
   }
   function _createExtractFolder(dest) {
    return __awaiter(this, void 0, void 0, (function*() {
     return dest || (dest = path.join(_getTempDirectory(), crypto.randomUUID())), yield io.mkdirP(dest), 
     dest;
    }));
   }
   function _createToolPath(tool, version, arch) {
    return __awaiter(this, void 0, void 0, (function*() {
     const folderPath = path.join(_getCacheDirectory(), tool, semver.clean(version) || version, arch || "");
     core.debug(`destination ${folderPath}`);
     const markerPath = `${folderPath}.complete`;
     return yield io.rmRF(folderPath), yield io.rmRF(markerPath), yield io.mkdirP(folderPath), 
     folderPath;
    }));
   }
   function _completeToolPath(tool, version, arch) {
    const markerPath = `${path.join(_getCacheDirectory(), tool, semver.clean(version) || version, arch || "")}.complete`;
    fs.writeFileSync(markerPath, ""), core.debug("finished caching tool");
   }
   function isExplicitVersion(versionSpec) {
    const c = semver.clean(versionSpec) || "";
    core.debug(`isExplicit: ${c}`);
    const valid = null != semver.valid(c);
    return core.debug(`explicit? ${valid}`), valid;
   }
   function evaluateVersions(versions, versionSpec) {
    let version = "";
    core.debug(`evaluating ${versions.length} versions`);
    for (let i = (versions = versions.sort(((a, b) => semver.gt(a, b) ? 1 : -1))).length - 1; i >= 0; i--) {
     const potential = versions[i];
     if (semver.satisfies(potential, versionSpec)) {
      version = potential;
      break;
     }
    }
    return version ? core.debug(`matched: ${version}`) : core.debug("match not found"), 
    version;
   }
   function _getCacheDirectory() {
    const cacheDirectory = process.env.RUNNER_TOOL_CACHE || "";
    return (0, assert_1.ok)(cacheDirectory, "Expected RUNNER_TOOL_CACHE to be defined"), 
    cacheDirectory;
   }
   function _getTempDirectory() {
    const tempDirectory = process.env.RUNNER_TEMP || "";
    return (0, assert_1.ok)(tempDirectory, "Expected RUNNER_TEMP to be defined"), tempDirectory;
   }
   function _getGlobal(key, defaultValue) {
    const value = global[key];
    return void 0 !== value ? value : defaultValue;
   }
   exports.downloadTool = function(url, dest, auth, headers) {
    return __awaiter(this, void 0, void 0, (function*() {
     dest = dest || path.join(_getTempDirectory(), crypto.randomUUID()), yield io.mkdirP(path.dirname(dest)), 
     core.debug(`Downloading ${url}`), core.debug(`Destination ${dest}`);
     const minSeconds = _getGlobal("TEST_DOWNLOAD_TOOL_RETRY_MIN_SECONDS", 10), maxSeconds = _getGlobal("TEST_DOWNLOAD_TOOL_RETRY_MAX_SECONDS", 20), retryHelper = new retry_helper_1.RetryHelper(3, minSeconds, maxSeconds);
     return yield retryHelper.execute((() => __awaiter(this, void 0, void 0, (function*() {
      return yield function(url, dest, auth, headers) {
       return __awaiter(this, void 0, void 0, (function*() {
        if (fs.existsSync(dest)) throw new Error(`Destination file path ${dest} already exists`);
        const http = new httpm.HttpClient("actions/tool-cache", [], {
         allowRetries: !1
        });
        auth && (core.debug("set auth"), void 0 === headers && (headers = {}), headers.authorization = auth);
        const response = yield http.get(url, headers);
        if (200 !== response.message.statusCode) {
         const err = new HTTPError(response.message.statusCode);
         throw core.debug(`Failed to download from "${url}". Code(${response.message.statusCode}) Message(${response.message.statusMessage})`), 
         err;
        }
        const pipeline = util.promisify(stream.pipeline), readStream = _getGlobal("TEST_DOWNLOAD_TOOL_RESPONSE_MESSAGE_FACTORY", (() => response.message))();
        let succeeded = !1;
        try {
         return yield pipeline(readStream, fs.createWriteStream(dest)), core.debug("download complete"), 
         succeeded = !0, dest;
        } finally {
         if (!succeeded) {
          core.debug("download failed");
          try {
           yield io.rmRF(dest);
          } catch (err) {
           core.debug(`Failed to delete '${dest}'. ${err.message}`);
          }
         }
        }
       }));
      }(url, dest || "", auth, headers);
     }))), (err => !(err instanceof HTTPError && err.httpStatusCode && err.httpStatusCode < 500 && 408 !== err.httpStatusCode && 429 !== err.httpStatusCode)));
    }));
   }, exports.extract7z = function(file, dest, _7zPath) {
    return __awaiter(this, void 0, void 0, (function*() {
     (0, assert_1.ok)(IS_WINDOWS, "extract7z() not supported on current OS"), (0, assert_1.ok)(file, 'parameter "file" is required'), 
     dest = yield _createExtractFolder(dest);
     const originalCwd = process.cwd();
     if (process.chdir(dest), _7zPath) try {
      const args = [ "x", core.isDebug() ? "-bb1" : "-bb0", "-bd", "-sccUTF-8", file ], options = {
       silent: !0
      };
      yield (0, exec_1.exec)(`"${_7zPath}"`, args, options);
     } finally {
      process.chdir(originalCwd);
     } else {
      const args = [ "-NoLogo", "-Sta", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Unrestricted", "-Command", `& '${path.join(__dirname, "..", "scripts", "Invoke-7zdec.ps1").replace(/'/g, "''").replace(/"|\n|\r/g, "")}' -Source '${file.replace(/'/g, "''").replace(/"|\n|\r/g, "")}' -Target '${dest.replace(/'/g, "''").replace(/"|\n|\r/g, "")}'` ], options = {
       silent: !0
      };
      try {
       const powershellPath = yield io.which("powershell", !0);
       yield (0, exec_1.exec)(`"${powershellPath}"`, args, options);
      } finally {
       process.chdir(originalCwd);
      }
     }
     return dest;
    }));
   }, exports.extractTar = function(file, dest, flags = "xz") {
    return __awaiter(this, void 0, void 0, (function*() {
     if (!file) throw new Error("parameter 'file' is required");
     dest = yield _createExtractFolder(dest), core.debug("Checking tar --version");
     let versionOutput = "";
     yield (0, exec_1.exec)("tar --version", [], {
      ignoreReturnCode: !0,
      silent: !0,
      listeners: {
       stdout: data => versionOutput += data.toString(),
       stderr: data => versionOutput += data.toString()
      }
     }), core.debug(versionOutput.trim());
     const isGnuTar = versionOutput.toUpperCase().includes("GNU TAR");
     let args;
     args = flags instanceof Array ? flags : [ flags ], core.isDebug() && !flags.includes("v") && args.push("-v");
     let destArg = dest, fileArg = file;
     return IS_WINDOWS && isGnuTar && (args.push("--force-local"), destArg = dest.replace(/\\/g, "/"), 
     fileArg = file.replace(/\\/g, "/")), isGnuTar && (args.push("--warning=no-unknown-keyword"), 
     args.push("--overwrite")), args.push("-C", destArg, "-f", fileArg), yield (0, exec_1.exec)("tar", args), 
     dest;
    }));
   }, exports.extractXar = function(file, dest, flags = []) {
    return __awaiter(this, void 0, void 0, (function*() {
     let args;
     (0, assert_1.ok)(IS_MAC, "extractXar() not supported on current OS"), (0, assert_1.ok)(file, 'parameter "file" is required'), 
     dest = yield _createExtractFolder(dest), args = flags instanceof Array ? flags : [ flags ], 
     args.push("-x", "-C", dest, "-f", file), core.isDebug() && args.push("-v");
     const xarPath = yield io.which("xar", !0);
     var values;
     return yield (0, exec_1.exec)(`"${xarPath}"`, (values = args, Array.from(new Set(values)))), 
     dest;
    }));
   }, exports.extractZip = function(file, dest) {
    return __awaiter(this, void 0, void 0, (function*() {
     if (!file) throw new Error("parameter 'file' is required");
     return dest = yield _createExtractFolder(dest), IS_WINDOWS ? yield function(file, dest) {
      return __awaiter(this, void 0, void 0, (function*() {
       const escapedFile = file.replace(/'/g, "''").replace(/"|\n|\r/g, ""), escapedDest = dest.replace(/'/g, "''").replace(/"|\n|\r/g, ""), pwshPath = yield io.which("pwsh", !1);
       if (pwshPath) {
        const args = [ "-NoLogo", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Unrestricted", "-Command", [ "$ErrorActionPreference = 'Stop' ;", "try { Add-Type -AssemblyName System.IO.Compression.ZipFile } catch { } ;", `try { [System.IO.Compression.ZipFile]::ExtractToDirectory('${escapedFile}', '${escapedDest}', $true) }`, `catch { if (($_.Exception.GetType().FullName -eq 'System.Management.Automation.MethodException') -or ($_.Exception.GetType().FullName -eq 'System.Management.Automation.RuntimeException') ){ Expand-Archive -LiteralPath '${escapedFile}' -DestinationPath '${escapedDest}' -Force } else { throw $_ } } ;` ].join(" ") ];
        core.debug(`Using pwsh at path: ${pwshPath}`), yield (0, exec_1.exec)(`"${pwshPath}"`, args);
       } else {
        const args = [ "-NoLogo", "-Sta", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Unrestricted", "-Command", [ "$ErrorActionPreference = 'Stop' ;", "try { Add-Type -AssemblyName System.IO.Compression.FileSystem } catch { } ;", `if ((Get-Command -Name Expand-Archive -Module Microsoft.PowerShell.Archive -ErrorAction Ignore)) { Expand-Archive -LiteralPath '${escapedFile}' -DestinationPath '${escapedDest}' -Force }`, `else {[System.IO.Compression.ZipFile]::ExtractToDirectory('${escapedFile}', '${escapedDest}', $true) }` ].join(" ") ], powershellPath = yield io.which("powershell", !0);
        core.debug(`Using powershell at path: ${powershellPath}`), yield (0, exec_1.exec)(`"${powershellPath}"`, args);
       }
      }));
     }(file, dest) : yield function(file, dest) {
      return __awaiter(this, void 0, void 0, (function*() {
       const unzipPath = yield io.which("unzip", !0), args = [ file ];
       core.isDebug() || args.unshift("-q"), args.unshift("-o"), yield (0, exec_1.exec)(`"${unzipPath}"`, args, {
        cwd: dest
       });
      }));
     }(file, dest), dest;
    }));
   }, exports.cacheDir = function(sourceDir, tool, version, arch) {
    return __awaiter(this, void 0, void 0, (function*() {
     if (version = semver.clean(version) || version, arch = arch || os.arch(), core.debug(`Caching tool ${tool} ${version} ${arch}`), 
     core.debug(`source dir: ${sourceDir}`), !fs.statSync(sourceDir).isDirectory()) throw new Error("sourceDir is not a directory");
     const destPath = yield _createToolPath(tool, version, arch);
     for (const itemName of fs.readdirSync(sourceDir)) {
      const s = path.join(sourceDir, itemName);
      yield io.cp(s, destPath, {
       recursive: !0
      });
     }
     return _completeToolPath(tool, version, arch), destPath;
    }));
   }, exports.cacheFile = function(sourceFile, targetFile, tool, version, arch) {
    return __awaiter(this, void 0, void 0, (function*() {
     if (version = semver.clean(version) || version, arch = arch || os.arch(), core.debug(`Caching tool ${tool} ${version} ${arch}`), 
     core.debug(`source file: ${sourceFile}`), !fs.statSync(sourceFile).isFile()) throw new Error("sourceFile is not a file");
     const destFolder = yield _createToolPath(tool, version, arch), destPath = path.join(destFolder, targetFile);
     return core.debug(`destination file ${destPath}`), yield io.cp(sourceFile, destPath), 
     _completeToolPath(tool, version, arch), destFolder;
    }));
   }, exports.find = function(toolName, versionSpec, arch) {
    if (!toolName) throw new Error("toolName parameter is required");
    if (!versionSpec) throw new Error("versionSpec parameter is required");
    if (arch = arch || os.arch(), !isExplicitVersion(versionSpec)) {
     versionSpec = evaluateVersions(findAllVersions(toolName, arch), versionSpec);
    }
    let toolPath = "";
    if (versionSpec) {
     versionSpec = semver.clean(versionSpec) || "";
     const cachePath = path.join(_getCacheDirectory(), toolName, versionSpec, arch);
     core.debug(`checking cache: ${cachePath}`), fs.existsSync(cachePath) && fs.existsSync(`${cachePath}.complete`) ? (core.debug(`Found tool in cache ${toolName} ${versionSpec} ${arch}`), 
     toolPath = cachePath) : core.debug("not found");
    }
    return toolPath;
   }, exports.findAllVersions = findAllVersions, exports.getManifestFromRepo = function(owner, repo, auth, branch = "master") {
    return __awaiter(this, void 0, void 0, (function*() {
     let releases = [];
     const treeUrl = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}`, http = new httpm.HttpClient("tool-cache"), headers = {};
     auth && (core.debug("set auth"), headers.authorization = auth);
     const response = yield http.getJson(treeUrl, headers);
     if (!response.result) return releases;
     let manifestUrl = "";
     for (const item of response.result.tree) if ("versions-manifest.json" === item.path) {
      manifestUrl = item.url;
      break;
     }
     headers.accept = "application/vnd.github.VERSION.raw";
     let versionsRaw = yield (yield http.get(manifestUrl, headers)).readBody();
     if (versionsRaw) {
      versionsRaw = versionsRaw.replace(/^\uFEFF/, "");
      try {
       releases = JSON.parse(versionsRaw);
      } catch (_a) {
       core.debug("Invalid json");
      }
     }
     return releases;
    }));
   }, exports.findFromManifest = function(versionSpec, stable, manifest, archFilter = os.arch()) {
    return __awaiter(this, void 0, void 0, (function*() {
     return yield mm._findMatch(versionSpec, stable, manifest, archFilter);
    }));
   }, exports.isExplicitVersion = isExplicitVersion, exports.evaluateVersions = evaluateVersions;
  },
  2695: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
   "use strict";
   __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
    AccountSASPermissions: () => AccountSASPermissions,
    AccountSASResourceTypes: () => AccountSASResourceTypes,
    AccountSASServices: () => AccountSASServices,
    AnonymousCredential: () => AnonymousCredential,
    AnonymousCredentialPolicy: () => AnonymousCredentialPolicy,
    AppendBlobClient: () => AppendBlobClient,
    BaseRequestPolicy: () => BaseRequestPolicy,
    BlobBatch: () => BlobBatch,
    BlobBatchClient: () => BlobBatchClient,
    BlobClient: () => BlobClient,
    BlobLeaseClient: () => BlobLeaseClient,
    BlobSASPermissions: () => BlobSASPermissions,
    BlobServiceClient: () => BlobServiceClient,
    BlockBlobClient: () => BlockBlobClient,
    BlockBlobTier: () => BlockBlobTier,
    ContainerClient: () => ContainerClient,
    ContainerSASPermissions: () => ContainerSASPermissions,
    Credential: () => Credential,
    CredentialPolicy: () => CredentialPolicy,
    KnownEncryptionAlgorithmType: () => KnownEncryptionAlgorithmType,
    PageBlobClient: () => PageBlobClient,
    Pipeline: () => Pipeline,
    PremiumPageBlobTier: () => PremiumPageBlobTier,
    RestError: () => esm_restError_RestError,
    SASProtocol: () => SASProtocol,
    SASQueryParameters: () => SASQueryParameters,
    StorageBlobAudience: () => StorageBlobAudience,
    StorageBrowserPolicy: () => StorageBrowserPolicy,
    StorageBrowserPolicyFactory: () => StorageBrowserPolicyFactory,
    StorageOAuthScopes: () => StorageOAuthScopes,
    StorageRetryPolicy: () => StorageRetryPolicy,
    StorageRetryPolicyFactory: () => StorageRetryPolicyFactory,
    StorageRetryPolicyType: () => StorageRetryPolicyType,
    StorageSharedKeyCredential: () => StorageSharedKeyCredential,
    StorageSharedKeyCredentialPolicy: () => StorageSharedKeyCredentialPolicy,
    generateAccountSASQueryParameters: () => generateAccountSASQueryParameters,
    generateBlobSASQueryParameters: () => generateBlobSASQueryParameters,
    getBlobServiceAccountAudience: () => getBlobServiceAccountAudience,
    isPipelineLike: () => isPipelineLike,
    logger: () => src_log_logger,
    newPipeline: () => newPipeline
   });
   var mappers_namespaceObject = {};
   __webpack_require__.r(mappers_namespaceObject), __webpack_require__.d(mappers_namespaceObject, {
    AccessPolicy: () => AccessPolicy,
    AppendBlobAppendBlockExceptionHeaders: () => AppendBlobAppendBlockExceptionHeaders,
    AppendBlobAppendBlockFromUrlExceptionHeaders: () => AppendBlobAppendBlockFromUrlExceptionHeaders,
    AppendBlobAppendBlockFromUrlHeaders: () => AppendBlobAppendBlockFromUrlHeaders,
    AppendBlobAppendBlockHeaders: () => AppendBlobAppendBlockHeaders,
    AppendBlobCreateExceptionHeaders: () => AppendBlobCreateExceptionHeaders,
    AppendBlobCreateHeaders: () => AppendBlobCreateHeaders,
    AppendBlobSealExceptionHeaders: () => AppendBlobSealExceptionHeaders,
    AppendBlobSealHeaders: () => AppendBlobSealHeaders,
    ArrowConfiguration: () => ArrowConfiguration,
    ArrowField: () => ArrowField,
    BlobAbortCopyFromURLExceptionHeaders: () => BlobAbortCopyFromURLExceptionHeaders,
    BlobAbortCopyFromURLHeaders: () => BlobAbortCopyFromURLHeaders,
    BlobAcquireLeaseExceptionHeaders: () => BlobAcquireLeaseExceptionHeaders,
    BlobAcquireLeaseHeaders: () => BlobAcquireLeaseHeaders,
    BlobBreakLeaseExceptionHeaders: () => BlobBreakLeaseExceptionHeaders,
    BlobBreakLeaseHeaders: () => BlobBreakLeaseHeaders,
    BlobChangeLeaseExceptionHeaders: () => BlobChangeLeaseExceptionHeaders,
    BlobChangeLeaseHeaders: () => BlobChangeLeaseHeaders,
    BlobCopyFromURLExceptionHeaders: () => BlobCopyFromURLExceptionHeaders,
    BlobCopyFromURLHeaders: () => BlobCopyFromURLHeaders,
    BlobCreateSnapshotExceptionHeaders: () => BlobCreateSnapshotExceptionHeaders,
    BlobCreateSnapshotHeaders: () => BlobCreateSnapshotHeaders,
    BlobDeleteExceptionHeaders: () => BlobDeleteExceptionHeaders,
    BlobDeleteHeaders: () => BlobDeleteHeaders,
    BlobDeleteImmutabilityPolicyExceptionHeaders: () => BlobDeleteImmutabilityPolicyExceptionHeaders,
    BlobDeleteImmutabilityPolicyHeaders: () => BlobDeleteImmutabilityPolicyHeaders,
    BlobDownloadExceptionHeaders: () => BlobDownloadExceptionHeaders,
    BlobDownloadHeaders: () => BlobDownloadHeaders,
    BlobFlatListSegment: () => BlobFlatListSegment,
    BlobGetAccountInfoExceptionHeaders: () => BlobGetAccountInfoExceptionHeaders,
    BlobGetAccountInfoHeaders: () => BlobGetAccountInfoHeaders,
    BlobGetPropertiesExceptionHeaders: () => BlobGetPropertiesExceptionHeaders,
    BlobGetPropertiesHeaders: () => BlobGetPropertiesHeaders,
    BlobGetTagsExceptionHeaders: () => BlobGetTagsExceptionHeaders,
    BlobGetTagsHeaders: () => BlobGetTagsHeaders,
    BlobHierarchyListSegment: () => BlobHierarchyListSegment,
    BlobItemInternal: () => BlobItemInternal,
    BlobName: () => BlobName,
    BlobPrefix: () => BlobPrefix,
    BlobPropertiesInternal: () => BlobPropertiesInternal,
    BlobQueryExceptionHeaders: () => BlobQueryExceptionHeaders,
    BlobQueryHeaders: () => BlobQueryHeaders,
    BlobReleaseLeaseExceptionHeaders: () => BlobReleaseLeaseExceptionHeaders,
    BlobReleaseLeaseHeaders: () => BlobReleaseLeaseHeaders,
    BlobRenewLeaseExceptionHeaders: () => BlobRenewLeaseExceptionHeaders,
    BlobRenewLeaseHeaders: () => BlobRenewLeaseHeaders,
    BlobServiceProperties: () => BlobServiceProperties,
    BlobServiceStatistics: () => BlobServiceStatistics,
    BlobSetExpiryExceptionHeaders: () => BlobSetExpiryExceptionHeaders,
    BlobSetExpiryHeaders: () => BlobSetExpiryHeaders,
    BlobSetHttpHeadersExceptionHeaders: () => BlobSetHttpHeadersExceptionHeaders,
    BlobSetHttpHeadersHeaders: () => BlobSetHttpHeadersHeaders,
    BlobSetImmutabilityPolicyExceptionHeaders: () => BlobSetImmutabilityPolicyExceptionHeaders,
    BlobSetImmutabilityPolicyHeaders: () => BlobSetImmutabilityPolicyHeaders,
    BlobSetLegalHoldExceptionHeaders: () => BlobSetLegalHoldExceptionHeaders,
    BlobSetLegalHoldHeaders: () => BlobSetLegalHoldHeaders,
    BlobSetMetadataExceptionHeaders: () => BlobSetMetadataExceptionHeaders,
    BlobSetMetadataHeaders: () => BlobSetMetadataHeaders,
    BlobSetTagsExceptionHeaders: () => BlobSetTagsExceptionHeaders,
    BlobSetTagsHeaders: () => BlobSetTagsHeaders,
    BlobSetTierExceptionHeaders: () => BlobSetTierExceptionHeaders,
    BlobSetTierHeaders: () => BlobSetTierHeaders,
    BlobStartCopyFromURLExceptionHeaders: () => BlobStartCopyFromURLExceptionHeaders,
    BlobStartCopyFromURLHeaders: () => BlobStartCopyFromURLHeaders,
    BlobTag: () => BlobTag,
    BlobTags: () => BlobTags,
    BlobUndeleteExceptionHeaders: () => BlobUndeleteExceptionHeaders,
    BlobUndeleteHeaders: () => BlobUndeleteHeaders,
    Block: () => Block,
    BlockBlobCommitBlockListExceptionHeaders: () => BlockBlobCommitBlockListExceptionHeaders,
    BlockBlobCommitBlockListHeaders: () => BlockBlobCommitBlockListHeaders,
    BlockBlobGetBlockListExceptionHeaders: () => BlockBlobGetBlockListExceptionHeaders,
    BlockBlobGetBlockListHeaders: () => BlockBlobGetBlockListHeaders,
    BlockBlobPutBlobFromUrlExceptionHeaders: () => BlockBlobPutBlobFromUrlExceptionHeaders,
    BlockBlobPutBlobFromUrlHeaders: () => BlockBlobPutBlobFromUrlHeaders,
    BlockBlobStageBlockExceptionHeaders: () => BlockBlobStageBlockExceptionHeaders,
    BlockBlobStageBlockFromURLExceptionHeaders: () => BlockBlobStageBlockFromURLExceptionHeaders,
    BlockBlobStageBlockFromURLHeaders: () => BlockBlobStageBlockFromURLHeaders,
    BlockBlobStageBlockHeaders: () => BlockBlobStageBlockHeaders,
    BlockBlobUploadExceptionHeaders: () => BlockBlobUploadExceptionHeaders,
    BlockBlobUploadHeaders: () => BlockBlobUploadHeaders,
    BlockList: () => BlockList,
    BlockLookupList: () => BlockLookupList,
    ClearRange: () => ClearRange,
    ContainerAcquireLeaseExceptionHeaders: () => ContainerAcquireLeaseExceptionHeaders,
    ContainerAcquireLeaseHeaders: () => ContainerAcquireLeaseHeaders,
    ContainerBreakLeaseExceptionHeaders: () => ContainerBreakLeaseExceptionHeaders,
    ContainerBreakLeaseHeaders: () => ContainerBreakLeaseHeaders,
    ContainerChangeLeaseExceptionHeaders: () => ContainerChangeLeaseExceptionHeaders,
    ContainerChangeLeaseHeaders: () => ContainerChangeLeaseHeaders,
    ContainerCreateExceptionHeaders: () => ContainerCreateExceptionHeaders,
    ContainerCreateHeaders: () => ContainerCreateHeaders,
    ContainerDeleteExceptionHeaders: () => ContainerDeleteExceptionHeaders,
    ContainerDeleteHeaders: () => ContainerDeleteHeaders,
    ContainerFilterBlobsExceptionHeaders: () => ContainerFilterBlobsExceptionHeaders,
    ContainerFilterBlobsHeaders: () => ContainerFilterBlobsHeaders,
    ContainerGetAccessPolicyExceptionHeaders: () => ContainerGetAccessPolicyExceptionHeaders,
    ContainerGetAccessPolicyHeaders: () => ContainerGetAccessPolicyHeaders,
    ContainerGetAccountInfoExceptionHeaders: () => ContainerGetAccountInfoExceptionHeaders,
    ContainerGetAccountInfoHeaders: () => ContainerGetAccountInfoHeaders,
    ContainerGetPropertiesExceptionHeaders: () => ContainerGetPropertiesExceptionHeaders,
    ContainerGetPropertiesHeaders: () => ContainerGetPropertiesHeaders,
    ContainerItem: () => ContainerItem,
    ContainerListBlobFlatSegmentExceptionHeaders: () => ContainerListBlobFlatSegmentExceptionHeaders,
    ContainerListBlobFlatSegmentHeaders: () => ContainerListBlobFlatSegmentHeaders,
    ContainerListBlobHierarchySegmentExceptionHeaders: () => ContainerListBlobHierarchySegmentExceptionHeaders,
    ContainerListBlobHierarchySegmentHeaders: () => ContainerListBlobHierarchySegmentHeaders,
    ContainerProperties: () => ContainerProperties,
    ContainerReleaseLeaseExceptionHeaders: () => ContainerReleaseLeaseExceptionHeaders,
    ContainerReleaseLeaseHeaders: () => ContainerReleaseLeaseHeaders,
    ContainerRenameExceptionHeaders: () => ContainerRenameExceptionHeaders,
    ContainerRenameHeaders: () => ContainerRenameHeaders,
    ContainerRenewLeaseExceptionHeaders: () => ContainerRenewLeaseExceptionHeaders,
    ContainerRenewLeaseHeaders: () => ContainerRenewLeaseHeaders,
    ContainerRestoreExceptionHeaders: () => ContainerRestoreExceptionHeaders,
    ContainerRestoreHeaders: () => ContainerRestoreHeaders,
    ContainerSetAccessPolicyExceptionHeaders: () => ContainerSetAccessPolicyExceptionHeaders,
    ContainerSetAccessPolicyHeaders: () => ContainerSetAccessPolicyHeaders,
    ContainerSetMetadataExceptionHeaders: () => ContainerSetMetadataExceptionHeaders,
    ContainerSetMetadataHeaders: () => ContainerSetMetadataHeaders,
    ContainerSubmitBatchExceptionHeaders: () => ContainerSubmitBatchExceptionHeaders,
    ContainerSubmitBatchHeaders: () => ContainerSubmitBatchHeaders,
    CorsRule: () => CorsRule,
    DelimitedTextConfiguration: () => DelimitedTextConfiguration,
    FilterBlobItem: () => FilterBlobItem,
    FilterBlobSegment: () => FilterBlobSegment,
    GeoReplication: () => GeoReplication,
    JsonTextConfiguration: () => JsonTextConfiguration,
    KeyInfo: () => KeyInfo,
    ListBlobsFlatSegmentResponse: () => ListBlobsFlatSegmentResponse,
    ListBlobsHierarchySegmentResponse: () => ListBlobsHierarchySegmentResponse,
    ListContainersSegmentResponse: () => ListContainersSegmentResponse,
    Logging: () => Logging,
    Metrics: () => Metrics,
    PageBlobClearPagesExceptionHeaders: () => PageBlobClearPagesExceptionHeaders,
    PageBlobClearPagesHeaders: () => PageBlobClearPagesHeaders,
    PageBlobCopyIncrementalExceptionHeaders: () => PageBlobCopyIncrementalExceptionHeaders,
    PageBlobCopyIncrementalHeaders: () => PageBlobCopyIncrementalHeaders,
    PageBlobCreateExceptionHeaders: () => PageBlobCreateExceptionHeaders,
    PageBlobCreateHeaders: () => PageBlobCreateHeaders,
    PageBlobGetPageRangesDiffExceptionHeaders: () => PageBlobGetPageRangesDiffExceptionHeaders,
    PageBlobGetPageRangesDiffHeaders: () => PageBlobGetPageRangesDiffHeaders,
    PageBlobGetPageRangesExceptionHeaders: () => PageBlobGetPageRangesExceptionHeaders,
    PageBlobGetPageRangesHeaders: () => PageBlobGetPageRangesHeaders,
    PageBlobResizeExceptionHeaders: () => PageBlobResizeExceptionHeaders,
    PageBlobResizeHeaders: () => PageBlobResizeHeaders,
    PageBlobUpdateSequenceNumberExceptionHeaders: () => PageBlobUpdateSequenceNumberExceptionHeaders,
    PageBlobUpdateSequenceNumberHeaders: () => PageBlobUpdateSequenceNumberHeaders,
    PageBlobUploadPagesExceptionHeaders: () => PageBlobUploadPagesExceptionHeaders,
    PageBlobUploadPagesFromURLExceptionHeaders: () => PageBlobUploadPagesFromURLExceptionHeaders,
    PageBlobUploadPagesFromURLHeaders: () => PageBlobUploadPagesFromURLHeaders,
    PageBlobUploadPagesHeaders: () => PageBlobUploadPagesHeaders,
    PageList: () => PageList,
    PageRange: () => PageRange,
    QueryFormat: () => QueryFormat,
    QueryRequest: () => QueryRequest,
    QuerySerialization: () => QuerySerialization,
    RetentionPolicy: () => RetentionPolicy,
    ServiceFilterBlobsExceptionHeaders: () => ServiceFilterBlobsExceptionHeaders,
    ServiceFilterBlobsHeaders: () => ServiceFilterBlobsHeaders,
    ServiceGetAccountInfoExceptionHeaders: () => ServiceGetAccountInfoExceptionHeaders,
    ServiceGetAccountInfoHeaders: () => ServiceGetAccountInfoHeaders,
    ServiceGetPropertiesExceptionHeaders: () => ServiceGetPropertiesExceptionHeaders,
    ServiceGetPropertiesHeaders: () => ServiceGetPropertiesHeaders,
    ServiceGetStatisticsExceptionHeaders: () => ServiceGetStatisticsExceptionHeaders,
    ServiceGetStatisticsHeaders: () => ServiceGetStatisticsHeaders,
    ServiceGetUserDelegationKeyExceptionHeaders: () => ServiceGetUserDelegationKeyExceptionHeaders,
    ServiceGetUserDelegationKeyHeaders: () => ServiceGetUserDelegationKeyHeaders,
    ServiceListContainersSegmentExceptionHeaders: () => ServiceListContainersSegmentExceptionHeaders,
    ServiceListContainersSegmentHeaders: () => ServiceListContainersSegmentHeaders,
    ServiceSetPropertiesExceptionHeaders: () => ServiceSetPropertiesExceptionHeaders,
    ServiceSetPropertiesHeaders: () => ServiceSetPropertiesHeaders,
    ServiceSubmitBatchExceptionHeaders: () => ServiceSubmitBatchExceptionHeaders,
    ServiceSubmitBatchHeaders: () => ServiceSubmitBatchHeaders,
    SignedIdentifier: () => SignedIdentifier,
    StaticWebsite: () => StaticWebsite,
    StorageError: () => StorageError,
    UserDelegationKey: () => UserDelegationKey
   });
   class AbortError extends Error {
    constructor(message) {
     super(message), this.name = "AbortError";
    }
   }
   var external_node_os_ = __webpack_require__(8161), external_node_util_ = __webpack_require__(7975), external_node_process_ = __webpack_require__(1708), external_node_process_namespaceObject = __webpack_require__.t(external_node_process_, 2);
   const debugEnvVariable = "undefined" != typeof process && process.env && process.env.DEBUG || void 0;
   let enabledString, enabledNamespaces = [], skippedNamespaces = [];
   const debuggers = [];
   debugEnvVariable && enable(debugEnvVariable);
   const debugObj = Object.assign((namespace => createDebugger(namespace)), {
    enable,
    enabled,
    disable: function() {
     const result = enabledString || "";
     return enable(""), result;
    },
    log: function(message, ...args) {
     external_node_process_.stderr.write(`${external_node_util_.format(message, ...args)}${external_node_os_.EOL}`);
    }
   });
   function enable(namespaces) {
    enabledString = namespaces, enabledNamespaces = [], skippedNamespaces = [];
    const wildcard = /\*/g, namespaceList = namespaces.split(",").map((ns => ns.trim().replace(wildcard, ".*?")));
    for (const ns of namespaceList) ns.startsWith("-") ? skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`)) : enabledNamespaces.push(new RegExp(`^${ns}$`));
    for (const instance of debuggers) instance.enabled = enabled(instance.namespace);
   }
   function enabled(namespace) {
    if (namespace.endsWith("*")) return !0;
    for (const skipped of skippedNamespaces) if (skipped.test(namespace)) return !1;
    for (const enabledNamespace of enabledNamespaces) if (enabledNamespace.test(namespace)) return !0;
    return !1;
   }
   function createDebugger(namespace) {
    const newDebugger = Object.assign((function(...args) {
     if (!newDebugger.enabled) return;
     args.length > 0 && (args[0] = `${namespace} ${args[0]}`);
     newDebugger.log(...args);
    }), {
     enabled: enabled(namespace),
     destroy,
     log: debugObj.log,
     namespace,
     extend
    });
    return debuggers.push(newDebugger), newDebugger;
   }
   function destroy() {
    const index = debuggers.indexOf(this);
    return index >= 0 && (debuggers.splice(index, 1), !0);
   }
   function extend(namespace) {
    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);
    return newDebugger.log = this.log, newDebugger;
   }
   const debug = debugObj, TYPESPEC_RUNTIME_LOG_LEVELS = [ "verbose", "info", "warning", "error" ], levelMap = {
    verbose: 400,
    info: 300,
    warning: 200,
    error: 100
   };
   function patchLogMethod(parent, child) {
    child.log = (...args) => {
     parent.log(...args);
    };
   }
   function isTypeSpecRuntimeLogLevel(level) {
    return TYPESPEC_RUNTIME_LOG_LEVELS.includes(level);
   }
   function createLoggerContext(options) {
    const registeredLoggers = new Set, logLevelFromEnv = "undefined" != typeof process && process.env && process.env[options.logLevelEnvVarName] || void 0;
    let logLevel;
    const clientLogger = debug(options.namespace);
    function shouldEnable(logger) {
     return Boolean(logLevel && levelMap[logger.level] <= levelMap[logLevel]);
    }
    function createLogger(parent, level) {
     const logger = Object.assign(parent.extend(level), {
      level
     });
     if (patchLogMethod(parent, logger), shouldEnable(logger)) {
      const enabledNamespaces = debug.disable();
      debug.enable(enabledNamespaces + "," + logger.namespace);
     }
     return registeredLoggers.add(logger), logger;
    }
    return clientLogger.log = (...args) => {
     debug.log(...args);
    }, logLevelFromEnv && (isTypeSpecRuntimeLogLevel(logLevelFromEnv) ? function(logLevel) {
     context.setLogLevel(logLevel);
    }(logLevelFromEnv) : console.error(`${options.logLevelEnvVarName} set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${TYPESPEC_RUNTIME_LOG_LEVELS.join(", ")}.`)), 
    {
     setLogLevel(level) {
      if (level && !isTypeSpecRuntimeLogLevel(level)) throw new Error(`Unknown log level '${level}'. Acceptable values: ${TYPESPEC_RUNTIME_LOG_LEVELS.join(",")}`);
      logLevel = level;
      const enabledNamespaces = [];
      for (const logger of registeredLoggers) shouldEnable(logger) && enabledNamespaces.push(logger.namespace);
      debug.enable(enabledNamespaces.join(","));
     },
     getLogLevel: () => logLevel,
     createClientLogger(namespace) {
      const clientRootLogger = clientLogger.extend(namespace);
      return patchLogMethod(clientLogger, clientRootLogger), {
       error: createLogger(clientRootLogger, "error"),
       warning: createLogger(clientRootLogger, "warning"),
       info: createLogger(clientRootLogger, "info"),
       verbose: createLogger(clientRootLogger, "verbose")
      };
     },
     logger: clientLogger
    };
   }
   const context = createLoggerContext({
    logLevelEnvVarName: "TYPESPEC_RUNTIME_LOG_LEVEL",
    namespace: "typeSpecRuntime"
   });
   context.logger;
   function createClientLogger(namespace) {
    return context.createClientLogger(namespace);
   }
   function normalizeName(name) {
    return name.toLowerCase();
   }
   class HttpHeadersImpl {
    constructor(rawHeaders) {
     if (this._headersMap = new Map, rawHeaders) for (const headerName of Object.keys(rawHeaders)) this.set(headerName, rawHeaders[headerName]);
    }
    set(name, value) {
     this._headersMap.set(normalizeName(name), {
      name,
      value: String(value).trim()
     });
    }
    get(name) {
     var _a;
     return null === (_a = this._headersMap.get(normalizeName(name))) || void 0 === _a ? void 0 : _a.value;
    }
    has(name) {
     return this._headersMap.has(normalizeName(name));
    }
    delete(name) {
     this._headersMap.delete(normalizeName(name));
    }
    toJSON(options = {}) {
     const result = {};
     if (options.preserveCase) for (const entry of this._headersMap.values()) result[entry.name] = entry.value; else for (const [normalizedName, entry] of this._headersMap) result[normalizedName] = entry.value;
     return result;
    }
    toString() {
     return JSON.stringify(this.toJSON({
      preserveCase: !0
     }));
    }
    [Symbol.iterator]() {
     return function*(map) {
      for (const entry of map.values()) yield [ entry.name, entry.value ];
     }(this._headersMap);
    }
   }
   function httpHeaders_createHttpHeaders(rawHeaders) {
    return new HttpHeadersImpl(rawHeaders);
   }
   var _a, external_node_crypto_ = __webpack_require__(7598);
   const uuidFunction = "function" == typeof (null === (_a = null === globalThis || void 0 === globalThis ? void 0 : globalThis.crypto) || void 0 === _a ? void 0 : _a.randomUUID) ? globalThis.crypto.randomUUID.bind(globalThis.crypto) : external_node_crypto_.randomUUID;
   function randomUUID() {
    return uuidFunction();
   }
   class PipelineRequestImpl {
    constructor(options) {
     var _a, _b, _c, _d, _e, _f, _g;
     this.url = options.url, this.body = options.body, this.headers = null !== (_a = options.headers) && void 0 !== _a ? _a : httpHeaders_createHttpHeaders(), 
     this.method = null !== (_b = options.method) && void 0 !== _b ? _b : "GET", this.timeout = null !== (_c = options.timeout) && void 0 !== _c ? _c : 0, 
     this.multipartBody = options.multipartBody, this.formData = options.formData, this.disableKeepAlive = null !== (_d = options.disableKeepAlive) && void 0 !== _d && _d, 
     this.proxySettings = options.proxySettings, this.streamResponseStatusCodes = options.streamResponseStatusCodes, 
     this.withCredentials = null !== (_e = options.withCredentials) && void 0 !== _e && _e, 
     this.abortSignal = options.abortSignal, this.onUploadProgress = options.onUploadProgress, 
     this.onDownloadProgress = options.onDownloadProgress, this.requestId = options.requestId || randomUUID(), 
     this.allowInsecureConnection = null !== (_f = options.allowInsecureConnection) && void 0 !== _f && _f, 
     this.enableBrowserStreams = null !== (_g = options.enableBrowserStreams) && void 0 !== _g && _g, 
     this.requestOverrides = options.requestOverrides;
    }
   }
   const ValidPhaseNames = new Set([ "Deserialize", "Serialize", "Retry", "Sign" ]);
   class HttpPipeline {
    constructor(policies) {
     var _a;
     this._policies = [], this._policies = null !== (_a = null == policies ? void 0 : policies.slice(0)) && void 0 !== _a ? _a : [], 
     this._orderedPolicies = void 0;
    }
    addPolicy(policy, options = {}) {
     if (options.phase && options.afterPhase) throw new Error("Policies inside a phase cannot specify afterPhase.");
     if (options.phase && !ValidPhaseNames.has(options.phase)) throw new Error(`Invalid phase name: ${options.phase}`);
     if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);
     this._policies.push({
      policy,
      options
     }), this._orderedPolicies = void 0;
    }
    removePolicy(options) {
     const removedPolicies = [];
     return this._policies = this._policies.filter((policyDescriptor => !(options.name && policyDescriptor.policy.name === options.name || options.phase && policyDescriptor.options.phase === options.phase) || (removedPolicies.push(policyDescriptor.policy), 
     !1))), this._orderedPolicies = void 0, removedPolicies;
    }
    sendRequest(httpClient, request) {
     return this.getOrderedPolicies().reduceRight(((next, policy) => req => policy.sendRequest(req, next)), (req => httpClient.sendRequest(req)))(request);
    }
    getOrderedPolicies() {
     return this._orderedPolicies || (this._orderedPolicies = this.orderPolicies()), 
     this._orderedPolicies;
    }
    clone() {
     return new HttpPipeline(this._policies);
    }
    static create() {
     return new HttpPipeline;
    }
    orderPolicies() {
     const result = [], policyMap = new Map;
     function createPhase(name) {
      return {
       name,
       policies: new Set,
       hasRun: !1,
       hasAfterPolicies: !1
      };
     }
     const serializePhase = createPhase("Serialize"), noPhase = createPhase("None"), deserializePhase = createPhase("Deserialize"), retryPhase = createPhase("Retry"), signPhase = createPhase("Sign"), orderedPhases = [ serializePhase, noPhase, deserializePhase, retryPhase, signPhase ];
     function getPhase(phase) {
      return "Retry" === phase ? retryPhase : "Serialize" === phase ? serializePhase : "Deserialize" === phase ? deserializePhase : "Sign" === phase ? signPhase : noPhase;
     }
     for (const descriptor of this._policies) {
      const policy = descriptor.policy, options = descriptor.options, policyName = policy.name;
      if (policyMap.has(policyName)) throw new Error("Duplicate policy names not allowed in pipeline");
      const node = {
       policy,
       dependsOn: new Set,
       dependants: new Set
      };
      options.afterPhase && (node.afterPhase = getPhase(options.afterPhase), node.afterPhase.hasAfterPolicies = !0), 
      policyMap.set(policyName, node);
      getPhase(options.phase).policies.add(node);
     }
     for (const descriptor of this._policies) {
      const {policy, options} = descriptor, policyName = policy.name, node = policyMap.get(policyName);
      if (!node) throw new Error(`Missing node for policy ${policyName}`);
      if (options.afterPolicies) for (const afterPolicyName of options.afterPolicies) {
       const afterNode = policyMap.get(afterPolicyName);
       afterNode && (node.dependsOn.add(afterNode), afterNode.dependants.add(node));
      }
      if (options.beforePolicies) for (const beforePolicyName of options.beforePolicies) {
       const beforeNode = policyMap.get(beforePolicyName);
       beforeNode && (beforeNode.dependsOn.add(node), node.dependants.add(beforeNode));
      }
     }
     function walkPhase(phase) {
      phase.hasRun = !0;
      for (const node of phase.policies) if ((!node.afterPhase || node.afterPhase.hasRun && !node.afterPhase.policies.size) && 0 === node.dependsOn.size) {
       result.push(node.policy);
       for (const dependant of node.dependants) dependant.dependsOn.delete(node);
       policyMap.delete(node.policy.name), phase.policies.delete(node);
      }
     }
     function walkPhases() {
      for (const phase of orderedPhases) {
       if (walkPhase(phase), phase.policies.size > 0 && phase !== noPhase) return void (noPhase.hasRun || walkPhase(noPhase));
       phase.hasAfterPolicies && walkPhase(noPhase);
      }
     }
     let iteration = 0;
     for (;policyMap.size > 0; ) {
      iteration++;
      const initialResultLength = result.length;
      if (walkPhases(), result.length <= initialResultLength && iteration > 1) throw new Error("Cannot satisfy policy dependencies due to requirements cycle.");
     }
     return result;
    }
   }
   function isObject(input) {
    return !("object" != typeof input || null === input || Array.isArray(input) || input instanceof RegExp || input instanceof Date);
   }
   function isError(e) {
    if (isObject(e)) {
     const hasName = "string" == typeof e.name, hasMessage = "string" == typeof e.message;
     return hasName && hasMessage;
    }
    return !1;
   }
   const custom = external_node_util_.inspect.custom, defaultAllowedHeaderNames = [ "x-ms-client-request-id", "x-ms-return-client-request-id", "x-ms-useragent", "x-ms-correlation-request-id", "x-ms-request-id", "client-request-id", "ms-cv", "return-client-request-id", "traceparent", "Access-Control-Allow-Credentials", "Access-Control-Allow-Headers", "Access-Control-Allow-Methods", "Access-Control-Allow-Origin", "Access-Control-Expose-Headers", "Access-Control-Max-Age", "Access-Control-Request-Headers", "Access-Control-Request-Method", "Origin", "Accept", "Accept-Encoding", "Cache-Control", "Connection", "Content-Length", "Content-Type", "Date", "ETag", "Expires", "If-Match", "If-Modified-Since", "If-None-Match", "If-Unmodified-Since", "Last-Modified", "Pragma", "Request-Id", "Retry-After", "Server", "Transfer-Encoding", "User-Agent", "WWW-Authenticate" ], defaultAllowedQueryParameters = [ "api-version" ];
   class Sanitizer {
    constructor({additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = []} = {}) {
     allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames), allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters), 
     this.allowedHeaderNames = new Set(allowedHeaderNames.map((n => n.toLowerCase()))), 
     this.allowedQueryParameters = new Set(allowedQueryParameters.map((p => p.toLowerCase())));
    }
    sanitize(obj) {
     const seen = new Set;
     return JSON.stringify(obj, ((key, value) => {
      if (value instanceof Error) return Object.assign(Object.assign({}, value), {
       name: value.name,
       message: value.message
      });
      if ("headers" === key) return this.sanitizeHeaders(value);
      if ("url" === key) return this.sanitizeUrl(value);
      if ("query" === key) return this.sanitizeQuery(value);
      if ("body" !== key && "response" !== key && "operationSpec" !== key) {
       if (Array.isArray(value) || isObject(value)) {
        if (seen.has(value)) return "[Circular]";
        seen.add(value);
       }
       return value;
      }
     }), 2);
    }
    sanitizeUrl(value) {
     if ("string" != typeof value || null === value || "" === value) return value;
     const url = new URL(value);
     if (!url.search) return value;
     for (const [key] of url.searchParams) this.allowedQueryParameters.has(key.toLowerCase()) || url.searchParams.set(key, "REDACTED");
     return url.toString();
    }
    sanitizeHeaders(obj) {
     const sanitized = {};
     for (const key of Object.keys(obj)) this.allowedHeaderNames.has(key.toLowerCase()) ? sanitized[key] = obj[key] : sanitized[key] = "REDACTED";
     return sanitized;
    }
    sanitizeQuery(value) {
     if ("object" != typeof value || null === value) return value;
     const sanitized = {};
     for (const k of Object.keys(value)) this.allowedQueryParameters.has(k.toLowerCase()) ? sanitized[k] = value[k] : sanitized[k] = "REDACTED";
     return sanitized;
    }
   }
   const errorSanitizer = new Sanitizer;
   class restError_RestError extends Error {
    constructor(message, options = {}) {
     super(message), this.name = "RestError", this.code = options.code, this.statusCode = options.statusCode, 
     Object.defineProperty(this, "request", {
      value: options.request,
      enumerable: !1
     }), Object.defineProperty(this, "response", {
      value: options.response,
      enumerable: !1
     }), Object.defineProperty(this, custom, {
      value: () => `RestError: ${this.message} \n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), {
       request: this.request,
       response: this.response
      }))}`,
      enumerable: !1
     }), Object.setPrototypeOf(this, restError_RestError.prototype);
    }
   }
   restError_RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR", restError_RestError.PARSE_ERROR = "PARSE_ERROR";
   var external_node_http_ = __webpack_require__(7067);
   const external_node_https_namespaceObject = require("node:https"), external_node_zlib_namespaceObject = require("node:zlib");
   var external_node_stream_ = __webpack_require__(7075);
   const log_logger = createClientLogger("ts-http-runtime"), DEFAULT_TLS_SETTINGS = {};
   function nodeHttpClient_isReadableStream(body) {
    return body && "function" == typeof body.pipe;
   }
   function isStreamComplete(stream) {
    return !1 === stream.readable ? Promise.resolve() : new Promise((resolve => {
     const handler = () => {
      resolve(), stream.removeListener("close", handler), stream.removeListener("end", handler), 
      stream.removeListener("error", handler);
     };
     stream.on("close", handler), stream.on("end", handler), stream.on("error", handler);
    }));
   }
   function isArrayBuffer(body) {
    return body && "number" == typeof body.byteLength;
   }
   class ReportTransform extends external_node_stream_.Transform {
    _transform(chunk, _encoding, callback) {
     this.push(chunk), this.loadedBytes += chunk.length;
     try {
      this.progressCallback({
       loadedBytes: this.loadedBytes
      }), callback();
     } catch (e) {
      callback(e);
     }
    }
    constructor(progressCallback) {
     super(), this.loadedBytes = 0, this.progressCallback = progressCallback;
    }
   }
   class NodeHttpClient {
    constructor() {
     this.cachedHttpsAgents = new WeakMap;
    }
    async sendRequest(request) {
     var _a, _b, _c;
     const abortController = new AbortController;
     let abortListener, timeoutId;
     if (request.abortSignal) {
      if (request.abortSignal.aborted) throw new AbortError("The operation was aborted. Request has already been canceled.");
      abortListener = event => {
       "abort" === event.type && abortController.abort();
      }, request.abortSignal.addEventListener("abort", abortListener);
     }
     request.timeout > 0 && (timeoutId = setTimeout((() => {
      const sanitizer = new Sanitizer;
      log_logger.info(`request to '${sanitizer.sanitizeUrl(request.url)}' timed out. canceling...`), 
      abortController.abort();
     }), request.timeout));
     const acceptEncoding = request.headers.get("Accept-Encoding"), shouldDecompress = (null == acceptEncoding ? void 0 : acceptEncoding.includes("gzip")) || (null == acceptEncoding ? void 0 : acceptEncoding.includes("deflate"));
     let responseStream, body = "function" == typeof request.body ? request.body() : request.body;
     if (body && !request.headers.has("Content-Length")) {
      const bodyLength = function(body) {
       return body ? Buffer.isBuffer(body) ? body.length : nodeHttpClient_isReadableStream(body) ? null : isArrayBuffer(body) ? body.byteLength : "string" == typeof body ? Buffer.from(body).length : null : 0;
      }(body);
      null !== bodyLength && request.headers.set("Content-Length", bodyLength);
     }
     try {
      if (body && request.onUploadProgress) {
       const onUploadProgress = request.onUploadProgress, uploadReportStream = new ReportTransform(onUploadProgress);
       uploadReportStream.on("error", (e => {
        log_logger.error("Error in upload progress", e);
       })), nodeHttpClient_isReadableStream(body) ? body.pipe(uploadReportStream) : uploadReportStream.end(body), 
       body = uploadReportStream;
      }
      const res = await this.makeRequest(request, abortController, body);
      void 0 !== timeoutId && clearTimeout(timeoutId);
      const headers = function(res) {
       const headers = httpHeaders_createHttpHeaders();
       for (const header of Object.keys(res.headers)) {
        const value = res.headers[header];
        Array.isArray(value) ? value.length > 0 && headers.set(header, value[0]) : value && headers.set(header, value);
       }
       return headers;
      }(res), response = {
       status: null !== (_a = res.statusCode) && void 0 !== _a ? _a : 0,
       headers,
       request
      };
      if ("HEAD" === request.method) return res.resume(), response;
      responseStream = shouldDecompress ? function(stream, headers) {
       const contentEncoding = headers.get("Content-Encoding");
       if ("gzip" === contentEncoding) {
        const unzip = external_node_zlib_namespaceObject.createGunzip();
        return stream.pipe(unzip), unzip;
       }
       if ("deflate" === contentEncoding) {
        const inflate = external_node_zlib_namespaceObject.createInflate();
        return stream.pipe(inflate), inflate;
       }
       return stream;
      }(res, headers) : res;
      const onDownloadProgress = request.onDownloadProgress;
      if (onDownloadProgress) {
       const downloadReportStream = new ReportTransform(onDownloadProgress);
       downloadReportStream.on("error", (e => {
        log_logger.error("Error in download progress", e);
       })), responseStream.pipe(downloadReportStream), responseStream = downloadReportStream;
      }
      return (null === (_b = request.streamResponseStatusCodes) || void 0 === _b ? void 0 : _b.has(Number.POSITIVE_INFINITY)) || (null === (_c = request.streamResponseStatusCodes) || void 0 === _c ? void 0 : _c.has(response.status)) ? response.readableStreamBody = responseStream : response.bodyAsText = await (stream = responseStream, 
      new Promise(((resolve, reject) => {
       const buffer = [];
       stream.on("data", (chunk => {
        Buffer.isBuffer(chunk) ? buffer.push(chunk) : buffer.push(Buffer.from(chunk));
       })), stream.on("end", (() => {
        resolve(Buffer.concat(buffer).toString("utf8"));
       })), stream.on("error", (e => {
        e && "AbortError" === (null == e ? void 0 : e.name) ? reject(e) : reject(new restError_RestError(`Error reading response as text: ${e.message}`, {
         code: restError_RestError.PARSE_ERROR
        }));
       }));
      }))), response;
     } finally {
      if (request.abortSignal && abortListener) {
       let uploadStreamDone = Promise.resolve();
       nodeHttpClient_isReadableStream(body) && (uploadStreamDone = isStreamComplete(body));
       let downloadStreamDone = Promise.resolve();
       nodeHttpClient_isReadableStream(responseStream) && (downloadStreamDone = isStreamComplete(responseStream)), 
       Promise.all([ uploadStreamDone, downloadStreamDone ]).then((() => {
        var _a;
        abortListener && (null === (_a = request.abortSignal) || void 0 === _a || _a.removeEventListener("abort", abortListener));
       })).catch((e => {
        log_logger.warning("Error when cleaning up abortListener on httpRequest", e);
       }));
      }
     }
     var stream;
    }
    makeRequest(request, abortController, body) {
     var _a;
     const url = new URL(request.url), isInsecure = "https:" !== url.protocol;
     if (isInsecure && !request.allowInsecureConnection) throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);
     const agent = null !== (_a = request.agent) && void 0 !== _a ? _a : this.getOrCreateAgent(request, isInsecure), options = Object.assign({
      agent,
      hostname: url.hostname,
      path: `${url.pathname}${url.search}`,
      port: url.port,
      method: request.method,
      headers: request.headers.toJSON({
       preserveCase: !0
      })
     }, request.requestOverrides);
     return new Promise(((resolve, reject) => {
      const req = isInsecure ? external_node_http_.request(options, resolve) : external_node_https_namespaceObject.request(options, resolve);
      req.once("error", (err => {
       var _a;
       reject(new restError_RestError(err.message, {
        code: null !== (_a = err.code) && void 0 !== _a ? _a : restError_RestError.REQUEST_SEND_ERROR,
        request
       }));
      })), abortController.signal.addEventListener("abort", (() => {
       const abortError = new AbortError("The operation was aborted. Rejecting from abort signal callback while making request.");
       req.destroy(abortError), reject(abortError);
      })), body && nodeHttpClient_isReadableStream(body) ? body.pipe(req) : body ? "string" == typeof body || Buffer.isBuffer(body) ? req.end(body) : isArrayBuffer(body) ? req.end(ArrayBuffer.isView(body) ? Buffer.from(body.buffer) : Buffer.from(body)) : (log_logger.error("Unrecognized body type", body), 
      reject(new restError_RestError("Unrecognized body type"))) : req.end();
     }));
    }
    getOrCreateAgent(request, isInsecure) {
     var _a;
     const disableKeepAlive = request.disableKeepAlive;
     if (isInsecure) return disableKeepAlive ? external_node_http_.globalAgent : (this.cachedHttpAgent || (this.cachedHttpAgent = new external_node_http_.Agent({
      keepAlive: !0
     })), this.cachedHttpAgent);
     {
      if (disableKeepAlive && !request.tlsSettings) return external_node_https_namespaceObject.globalAgent;
      const tlsSettings = null !== (_a = request.tlsSettings) && void 0 !== _a ? _a : DEFAULT_TLS_SETTINGS;
      let agent = this.cachedHttpsAgents.get(tlsSettings);
      return agent && agent.options.keepAlive === !disableKeepAlive || (log_logger.info("No cached TLS Agent exist, creating a new Agent"), 
      agent = new external_node_https_namespaceObject.Agent(Object.assign({
       keepAlive: !disableKeepAlive
      }, tlsSettings)), this.cachedHttpsAgents.set(tlsSettings, agent)), agent;
     }
    }
   }
   function defaultHttpClient_createDefaultHttpClient() {
    return new NodeHttpClient;
   }
   function calculateRetryDelay(retryAttempt, config) {
    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt), clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);
    var min, max;
    return {
     retryAfterInMs: clampedDelay / 2 + (min = 0, max = clampedDelay / 2, min = Math.ceil(min), 
     max = Math.floor(max), Math.floor(Math.random() * (max - min + 1)) + min)
    };
   }
   function helpers_delay(delayInMs, value, options) {
    return new Promise(((resolve, reject) => {
     let timer, onAborted;
     const rejectOnAbort = () => reject(new AbortError((null == options ? void 0 : options.abortErrorMsg) ? null == options ? void 0 : options.abortErrorMsg : "The operation was aborted.")), removeListeners = () => {
      (null == options ? void 0 : options.abortSignal) && onAborted && options.abortSignal.removeEventListener("abort", onAborted);
     };
     if (onAborted = () => (timer && clearTimeout(timer), removeListeners(), rejectOnAbort()), 
     (null == options ? void 0 : options.abortSignal) && options.abortSignal.aborted) return rejectOnAbort();
     timer = setTimeout((() => {
      removeListeners(), resolve(value);
     }), delayInMs), (null == options ? void 0 : options.abortSignal) && options.abortSignal.addEventListener("abort", onAborted);
    }));
   }
   function parseHeaderValueAsNumber(response, headerName) {
    const value = response.headers.get(headerName);
    if (!value) return;
    const valueAsNum = Number(value);
    return Number.isNaN(valueAsNum) ? void 0 : valueAsNum;
   }
   const AllRetryAfterHeaders = [ "retry-after-ms", "x-ms-retry-after-ms", "Retry-After" ];
   function getRetryAfterInMs(response) {
    if (response && [ 429, 503 ].includes(response.status)) try {
     for (const header of AllRetryAfterHeaders) {
      const retryAfterValue = parseHeaderValueAsNumber(response, header);
      if (0 === retryAfterValue || retryAfterValue) {
       return retryAfterValue * ("Retry-After" === header ? 1e3 : 1);
      }
     }
     const retryAfterHeader = response.headers.get("Retry-After");
     if (!retryAfterHeader) return;
     const diff = Date.parse(retryAfterHeader) - Date.now();
     return Number.isFinite(diff) ? Math.max(0, diff) : void 0;
    } catch (_a) {
     return;
    }
   }
   function exponentialRetryStrategy_exponentialRetryStrategy(options = {}) {
    var _a, _b;
    const retryInterval = null !== (_a = options.retryDelayInMs) && void 0 !== _a ? _a : 1e3, maxRetryInterval = null !== (_b = options.maxRetryDelayInMs) && void 0 !== _b ? _b : 64e3;
    return {
     name: "exponentialRetryStrategy",
     retry({retryCount, response, responseError}) {
      const matchedSystemError = function(err) {
       if (!err) return !1;
       return "ETIMEDOUT" === err.code || "ESOCKETTIMEDOUT" === err.code || "ECONNREFUSED" === err.code || "ECONNRESET" === err.code || "ENOENT" === err.code || "ENOTFOUND" === err.code;
      }(responseError), ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors, isExponential = function(response) {
       return Boolean(response && void 0 !== response.status && (response.status >= 500 || 408 === response.status) && 501 !== response.status && 505 !== response.status);
      }(response), ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes, unknownResponse = response && (function(response) {
       return Number.isFinite(getRetryAfterInMs(response));
      }(response) || !isExponential);
      return unknownResponse || ignoreExponentialResponse || ignoreSystemErrors ? {
       skipStrategy: !0
      } : !responseError || matchedSystemError || isExponential ? calculateRetryDelay(retryCount, {
       retryDelayInMs: retryInterval,
       maxRetryDelayInMs: maxRetryInterval
      }) : {
       errorToThrow: responseError
      };
     }
    };
   }
   const retryPolicyLogger = createClientLogger("ts-http-runtime retryPolicy");
   function retryPolicy_retryPolicy(strategies, options = {
    maxRetries: 3
   }) {
    const logger = options.logger || retryPolicyLogger;
    return {
     name: "retryPolicy",
     async sendRequest(request, next) {
      var _a, _b;
      let response, responseError, retryCount = -1;
      retryRequest: for (;;) {
       retryCount += 1, response = void 0, responseError = void 0;
       try {
        logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId), 
        response = await next(request), logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);
       } catch (e) {
        if (logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId), 
        responseError = e, !e || "RestError" !== responseError.name) throw e;
        response = responseError.response;
       }
       if (null === (_a = request.abortSignal) || void 0 === _a ? void 0 : _a.aborted) {
        logger.error(`Retry ${retryCount}: Request aborted.`);
        throw new AbortError;
       }
       if (retryCount >= (null !== (_b = options.maxRetries) && void 0 !== _b ? _b : 3)) {
        if (logger.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`), 
        responseError) throw responseError;
        if (response) return response;
        throw new Error("Maximum retries reached with no response or error to throw");
       }
       logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);
       strategiesLoop: for (const strategy of strategies) {
        const strategyLogger = strategy.logger || logger;
        strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);
        const modifiers = strategy.retry({
         retryCount,
         response,
         responseError
        });
        if (modifiers.skipStrategy) {
         strategyLogger.info(`Retry ${retryCount}: Skipped.`);
         continue strategiesLoop;
        }
        const {errorToThrow, retryAfterInMs, redirectTo} = modifiers;
        if (errorToThrow) throw strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow), 
        errorToThrow;
        if (retryAfterInMs || 0 === retryAfterInMs) {
         strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`), 
         await helpers_delay(retryAfterInMs, void 0, {
          abortSignal: request.abortSignal
         });
         continue retryRequest;
        }
        if (redirectTo) {
         strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`), 
         request.url = redirectTo;
         continue retryRequest;
        }
       }
       if (responseError) throw logger.info("None of the retry strategies could work with the received error. Throwing it."), 
       responseError;
       if (response) return logger.info("None of the retry strategies could work with the received response. Returning it."), 
       response;
      }
     }
    };
   }
   function bytesEncoding_stringToUint8Array(value, format) {
    return Buffer.from(value, format);
   }
   var checkEnvironment_a, _b, _c, _d;
   "undefined" != typeof window && window.document, "object" == typeof self && "function" == typeof (null === self || void 0 === self ? void 0 : self.importScripts) && ("DedicatedWorkerGlobalScope" === (null === (checkEnvironment_a = self.constructor) || void 0 === checkEnvironment_a ? void 0 : checkEnvironment_a.name) || "ServiceWorkerGlobalScope" === (null === (_b = self.constructor) || void 0 === _b ? void 0 : _b.name) || null === (_c = self.constructor) || void 0 === _c || _c.name), 
   "undefined" != typeof Deno && void 0 !== Deno.version && Deno.version.deno, "undefined" != typeof Bun && Bun.version;
   const checkEnvironment_isNodeLike = void 0 !== globalThis.process && Boolean(globalThis.process.version) && Boolean(null === (_d = globalThis.process.versions) || void 0 === _d ? void 0 : _d.node);
   "undefined" != typeof navigator && (null === navigator || void 0 === navigator || navigator.product);
   function formDataPolicy_formDataPolicy() {
    return {
     name: "formDataPolicy",
     async sendRequest(request, next) {
      if (checkEnvironment_isNodeLike && "undefined" != typeof FormData && request.body instanceof FormData && (request.formData = function(formData) {
       var _a;
       const formDataMap = {};
       for (const [key, value] of formData.entries()) null !== (_a = formDataMap[key]) && void 0 !== _a || (formDataMap[key] = []), 
       formDataMap[key].push(value);
       return formDataMap;
      }(request.body), request.body = void 0), request.formData) {
       const contentType = request.headers.get("Content-Type");
       contentType && -1 !== contentType.indexOf("application/x-www-form-urlencoded") ? request.body = function(formData) {
        const urlSearchParams = new URLSearchParams;
        for (const [key, value] of Object.entries(formData)) if (Array.isArray(value)) for (const subValue of value) urlSearchParams.append(key, subValue.toString()); else urlSearchParams.append(key, value.toString());
        return urlSearchParams.toString();
       }(request.formData) : await async function(formData, request) {
        const contentType = request.headers.get("Content-Type");
        if (contentType && !contentType.startsWith("multipart/form-data")) return;
        request.headers.set("Content-Type", null != contentType ? contentType : "multipart/form-data");
        const parts = [];
        for (const [fieldName, values] of Object.entries(formData)) for (const value of Array.isArray(values) ? values : [ values ]) if ("string" == typeof value) parts.push({
         headers: httpHeaders_createHttpHeaders({
          "Content-Disposition": `form-data; name="${fieldName}"`
         }),
         body: bytesEncoding_stringToUint8Array(value, "utf-8")
        }); else {
         if (null == value || "object" != typeof value) throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);
         {
          const fileName = value.name || "blob", headers = httpHeaders_createHttpHeaders();
          headers.set("Content-Disposition", `form-data; name="${fieldName}"; filename="${fileName}"`), 
          headers.set("Content-Type", value.type || "application/octet-stream"), parts.push({
           headers,
           body: value
          });
         }
        }
        request.multipartBody = {
         parts
        };
       }(request.formData, request), request.formData = void 0;
      }
      return next(request);
     }
    };
   }
   var dist = __webpack_require__(1516), http_proxy_agent_dist = __webpack_require__(4009);
   const globalNoProxyList = [];
   let noProxyListLoaded = !1;
   const globalBypassedMap = new Map;
   function getEnvironmentValue(name) {
    return process.env[name] ? process.env[name] : process.env[name.toLowerCase()] ? process.env[name.toLowerCase()] : void 0;
   }
   function loadEnvironmentProxyValue() {
    if (!process) return;
    const httpsProxy = getEnvironmentValue("HTTPS_PROXY"), allProxy = getEnvironmentValue("ALL_PROXY"), httpProxy = getEnvironmentValue("HTTP_PROXY");
    return httpsProxy || allProxy || httpProxy;
   }
   function getUrlFromProxySettings(settings) {
    let parsedProxyUrl;
    try {
     parsedProxyUrl = new URL(settings.host);
    } catch (_a) {
     throw new Error(`Expecting a valid host string in proxy settings, but found "${settings.host}".`);
    }
    return parsedProxyUrl.port = String(settings.port), settings.username && (parsedProxyUrl.username = settings.username), 
    settings.password && (parsedProxyUrl.password = settings.password), parsedProxyUrl;
   }
   function setProxyAgentOnRequest(request, cachedAgents, proxyUrl) {
    if (request.agent) return;
    const isInsecure = "https:" !== new URL(request.url).protocol;
    request.tlsSettings && log_logger.warning("TLS settings are not supported in combination with custom Proxy, certificates provided to the client will be ignored.");
    const headers = request.headers.toJSON();
    isInsecure ? (cachedAgents.httpProxyAgent || (cachedAgents.httpProxyAgent = new http_proxy_agent_dist.HttpProxyAgent(proxyUrl, {
     headers
    })), request.agent = cachedAgents.httpProxyAgent) : (cachedAgents.httpsProxyAgent || (cachedAgents.httpsProxyAgent = new dist.HttpsProxyAgent(proxyUrl, {
     headers
    })), request.agent = cachedAgents.httpsProxyAgent);
   }
   function proxyPolicy_proxyPolicy(proxySettings, options) {
    noProxyListLoaded || globalNoProxyList.push(...function() {
     const noProxy = getEnvironmentValue("NO_PROXY");
     return noProxyListLoaded = !0, noProxy ? noProxy.split(",").map((item => item.trim())).filter((item => item.length)) : [];
    }());
    const defaultProxy = proxySettings ? getUrlFromProxySettings(proxySettings) : function() {
     const envProxy = loadEnvironmentProxyValue();
     return envProxy ? new URL(envProxy) : void 0;
    }(), cachedAgents = {};
    return {
     name: "proxyPolicy",
     async sendRequest(request, next) {
      var _a;
      return request.proxySettings || !defaultProxy || function(uri, noProxyList, bypassedMap) {
       if (0 === noProxyList.length) return !1;
       const host = new URL(uri).hostname;
       if (null == bypassedMap ? void 0 : bypassedMap.has(host)) return bypassedMap.get(host);
       let isBypassedFlag = !1;
       for (const pattern of noProxyList) "." === pattern[0] ? (host.endsWith(pattern) || host.length === pattern.length - 1 && host === pattern.slice(1)) && (isBypassedFlag = !0) : host === pattern && (isBypassedFlag = !0);
       return null == bypassedMap || bypassedMap.set(host, isBypassedFlag), isBypassedFlag;
      }(request.url, null !== (_a = null == options ? void 0 : options.customNoProxyList) && void 0 !== _a ? _a : globalNoProxyList, (null == options ? void 0 : options.customNoProxyList) ? void 0 : globalBypassedMap) ? request.proxySettings && setProxyAgentOnRequest(request, cachedAgents, getUrlFromProxySettings(request.proxySettings)) : setProxyAgentOnRequest(request, cachedAgents, defaultProxy), 
      next(request);
     }
    };
   }
   function isBlob(x) {
    return "function" == typeof x.stream;
   }
   function __rest(s, e) {
    var t = {};
    for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
    if (null != s && "function" == typeof Object.getOwnPropertySymbols) {
     var i = 0;
     for (p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
    }
    return t;
   }
   Object.create;
   function __values(o) {
    var s = "function" == typeof Symbol && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && "number" == typeof o.length) return {
     next: function() {
      return o && i >= o.length && (o = void 0), {
       value: o && o[i++],
       done: !o
      };
     }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
   }
   function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
   }
   function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var i, g = generator.apply(thisArg, _arguments || []), q = [];
    return i = Object.create(("function" == typeof AsyncIterator ? AsyncIterator : Object).prototype), 
    verb("next"), verb("throw"), verb("return", (function(f) {
     return function(v) {
      return Promise.resolve(v).then(f, reject);
     };
    })), i[Symbol.asyncIterator] = function() {
     return this;
    }, i;
    function verb(n, f) {
     g[n] && (i[n] = function(v) {
      return new Promise((function(a, b) {
       q.push([ n, v, a, b ]) > 1 || resume(n, v);
      }));
     }, f && (i[n] = f(i[n])));
    }
    function resume(n, v) {
     try {
      (r = g[n](v)).value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
     } catch (e) {
      settle(q[0][3], e);
     }
     var r;
    }
    function fulfill(value) {
     resume("next", value);
    }
    function reject(value) {
     resume("throw", value);
    }
    function settle(f, v) {
     f(v), q.shift(), q.length && resume(q[0][0], q[0][1]);
    }
   }
   function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", (function(e) {
     throw e;
    })), verb("return"), i[Symbol.iterator] = function() {
     return this;
    }, i;
    function verb(n, f) {
     i[n] = o[n] ? function(v) {
      return (p = !p) ? {
       value: __await(o[n](v)),
       done: !1
      } : f ? f(v) : v;
     } : f;
    }
   }
   function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var i, m = o[Symbol.asyncIterator];
    return m ? m.call(o) : (o = __values(o), i = {}, verb("next"), verb("throw"), verb("return"), 
    i[Symbol.asyncIterator] = function() {
     return this;
    }, i);
    function verb(n) {
     i[n] = o[n] && function(v) {
      return new Promise((function(resolve, reject) {
       (function(resolve, reject, d, v) {
        Promise.resolve(v).then((function(v) {
         resolve({
          value: v,
          done: d
         });
        }), reject);
       })(resolve, reject, (v = o[n](v)).done, v.value);
      }));
     };
    }
   }
   Object.create;
   "function" == typeof SuppressedError && SuppressedError;
   var external_stream_ = __webpack_require__(2203);
   function streamAsyncIterator() {
    return __asyncGenerator(this, arguments, (function*() {
     const reader = this.getReader();
     try {
      for (;;) {
       const {done, value} = yield __await(reader.read());
       if (done) return yield __await(void 0);
       yield yield __await(value);
      }
     } finally {
      reader.releaseLock();
     }
    }));
   }
   function ensureNodeStream(stream) {
    return stream instanceof ReadableStream ? ((webStream = stream)[Symbol.asyncIterator] || (webStream[Symbol.asyncIterator] = streamAsyncIterator.bind(webStream)), 
    webStream.values || (webStream.values = streamAsyncIterator.bind(webStream)), external_stream_.Readable.fromWeb(stream)) : stream;
    var webStream;
   }
   function toStream(source) {
    return source instanceof Uint8Array ? external_stream_.Readable.from(Buffer.from(source)) : isBlob(source) ? ensureNodeStream(source.stream()) : ensureNodeStream(source);
   }
   function encodeHeaders(headers) {
    let result = "";
    for (const [key, value] of headers) result += `${key}: ${value}\r\n`;
    return result;
   }
   function getLength(source) {
    return source instanceof Uint8Array ? source.byteLength : isBlob(source) ? -1 === source.size ? void 0 : source.size : void 0;
   }
   async function buildRequestBody(request, parts, boundary) {
    const sources = [ bytesEncoding_stringToUint8Array(`--${boundary}`, "utf-8"), ...parts.flatMap((part => [ bytesEncoding_stringToUint8Array("\r\n", "utf-8"), bytesEncoding_stringToUint8Array(encodeHeaders(part.headers), "utf-8"), bytesEncoding_stringToUint8Array("\r\n", "utf-8"), part.body, bytesEncoding_stringToUint8Array(`\r\n--${boundary}`, "utf-8") ])), bytesEncoding_stringToUint8Array("--\r\n\r\n", "utf-8") ], contentLength = function(sources) {
     let total = 0;
     for (const source of sources) {
      const partLength = getLength(source);
      if (void 0 === partLength) return;
      total += partLength;
     }
     return total;
    }(sources);
    contentLength && request.headers.set("Content-Length", contentLength), request.body = await async function(sources) {
     return function() {
      const streams = sources.map((x => "function" == typeof x ? x() : x)).map(toStream);
      return external_stream_.Readable.from(function() {
       return __asyncGenerator(this, arguments, (function*() {
        var _a, e_1, _b, _c;
        for (const stream of streams) try {
         for (var stream_1_1, _d = !0, stream_1 = (e_1 = void 0, __asyncValues(stream)); !(_a = (stream_1_1 = yield __await(stream_1.next())).done); _d = !0) {
          _c = stream_1_1.value, _d = !1;
          const chunk = _c;
          yield yield __await(chunk);
         }
        } catch (e_1_1) {
         e_1 = {
          error: e_1_1
         };
        } finally {
         try {
          _d || _a || !(_b = stream_1.return) || (yield __await(_b.call(stream_1)));
         } finally {
          if (e_1) throw e_1.error;
         }
        }
       }));
      }());
     };
    }(sources);
   }
   const validBoundaryCharacters = new Set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?");
   function multipartPolicy_multipartPolicy() {
    return {
     name: "multipartPolicy",
     async sendRequest(request, next) {
      var _a;
      if (!request.multipartBody) return next(request);
      if (request.body) throw new Error("multipartBody and regular body cannot be set at the same time");
      let boundary = request.multipartBody.boundary;
      const contentTypeHeader = null !== (_a = request.headers.get("Content-Type")) && void 0 !== _a ? _a : "multipart/mixed", parsedHeader = contentTypeHeader.match(/^(multipart\/[^ ;]+)(?:; *boundary=(.+))?$/);
      if (!parsedHeader) throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);
      const [, contentType, parsedBoundary] = parsedHeader;
      if (parsedBoundary && boundary && parsedBoundary !== boundary) throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);
      return null != boundary || (boundary = parsedBoundary), boundary ? function(boundary) {
       if (boundary.length > 70) throw new Error(`Multipart boundary "${boundary}" exceeds maximum length of 70 characters`);
       if (Array.from(boundary).some((x => !validBoundaryCharacters.has(x)))) throw new Error(`Multipart boundary "${boundary}" contains invalid characters`);
      }(boundary) : boundary = `----AzSDKFormBoundary${randomUUID()}`, request.headers.set("Content-Type", `${contentType}; boundary=${boundary}`), 
      await buildRequestBody(request, request.multipartBody.parts, boundary), request.multipartBody = void 0, 
      next(request);
     }
    };
   }
   function esm_pipeline_createEmptyPipeline() {
    return HttpPipeline.create();
   }
   const esm_context = createLoggerContext({
    logLevelEnvVarName: "AZURE_LOG_LEVEL",
    namespace: "azure"
   });
   esm_context.logger;
   function esm_createClientLogger(namespace) {
    return esm_context.createClientLogger(namespace);
   }
   const esm_log_logger = esm_createClientLogger("core-rest-pipeline");
   const allowedRedirect = [ "GET", "HEAD" ];
   function redirectPolicy_redirectPolicy(options = {}) {
    const {maxRetries = 20} = options;
    return {
     name: "redirectPolicy",
     async sendRequest(request, next) {
      const response = await next(request);
      return handleRedirect(next, response, maxRetries);
     }
    };
   }
   async function handleRedirect(next, response, maxRetries, currentRetries = 0) {
    const {request, status, headers} = response, locationHeader = headers.get("location");
    if (locationHeader && (300 === status || 301 === status && allowedRedirect.includes(request.method) || 302 === status && allowedRedirect.includes(request.method) || 303 === status && "POST" === request.method || 307 === status) && currentRetries < maxRetries) {
     const url = new URL(locationHeader, request.url);
     request.url = url.toString(), 303 === status && (request.method = "GET", request.headers.delete("Content-Length"), 
     delete request.body), request.headers.delete("Authorization");
     const res = await next(request);
     return handleRedirect(next, res, maxRetries, currentRetries + 1);
    }
    return response;
   }
   function policies_logPolicy_logPolicy(options = {}) {
    return function(options = {}) {
     var _a;
     const logger = null !== (_a = options.logger) && void 0 !== _a ? _a : log_logger.info, sanitizer = new Sanitizer({
      additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,
      additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
     });
     return {
      name: "logPolicy",
      async sendRequest(request, next) {
       if (!logger.enabled) return next(request);
       logger(`Request: ${sanitizer.sanitize(request)}`);
       const response = await next(request);
       return logger(`Response status code: ${response.status}`), logger(`Headers: ${sanitizer.sanitize(response.headers)}`), 
       response;
      }
     };
    }(Object.assign({
     logger: esm_log_logger.info
    }, options));
   }
   async function util_userAgent_getUserAgentValue(prefix) {
    const runtimeInfo = new Map;
    runtimeInfo.set("core-rest-pipeline", "1.20.0"), await async function(map) {
     if (external_node_process_namespaceObject && external_node_process_.versions) {
      const versions = external_node_process_.versions;
      versions.bun ? map.set("Bun", versions.bun) : versions.deno ? map.set("Deno", versions.deno) : versions.node && map.set("Node", versions.node);
     }
     map.set("OS", `(${external_node_os_.arch()}-${external_node_os_.type()}-${external_node_os_.release()})`);
    }(runtimeInfo);
    const defaultAgent = function(telemetryInfo) {
     const parts = [];
     for (const [key, value] of telemetryInfo) {
      const token = value ? `${key}/${value}` : key;
      parts.push(token);
     }
     return parts.join(" ");
    }(runtimeInfo);
    return prefix ? `${prefix} ${defaultAgent}` : defaultAgent;
   }
   class AbortError_AbortError extends Error {
    constructor(message) {
     super(message), this.name = "AbortError";
    }
   }
   function delay_delay(timeInMs, options) {
    let token;
    const {abortSignal, abortErrorMsg} = null != options ? options : {};
    return function(buildPromise, options) {
     const {cleanupBeforeAbort, abortSignal, abortErrorMsg} = null != options ? options : {};
     return new Promise(((resolve, reject) => {
      function rejectOnAbort() {
       reject(new AbortError_AbortError(null != abortErrorMsg ? abortErrorMsg : "The operation was aborted."));
      }
      function removeListeners() {
       null == abortSignal || abortSignal.removeEventListener("abort", onAbort);
      }
      function onAbort() {
       null == cleanupBeforeAbort || cleanupBeforeAbort(), removeListeners(), rejectOnAbort();
      }
      if (null == abortSignal ? void 0 : abortSignal.aborted) return rejectOnAbort();
      try {
       buildPromise((x => {
        removeListeners(), resolve(x);
       }), (x => {
        removeListeners(), reject(x);
       }));
      } catch (err) {
       reject(err);
      }
      null == abortSignal || abortSignal.addEventListener("abort", onAbort);
     }));
    }((resolve => {
     token = setTimeout(resolve, timeInMs);
    }), {
     cleanupBeforeAbort: () => clearTimeout(token),
     abortSignal,
     abortErrorMsg: null != abortErrorMsg ? abortErrorMsg : "The delay was aborted."
    });
   }
   function getErrorMessage(e) {
    if (isError(e)) return e.message;
    {
     let stringified;
     try {
      stringified = "object" == typeof e && e ? JSON.stringify(e) : String(e);
     } catch (err) {
      stringified = "[unable to stringify input]";
     }
     return `Unknown error ${stringified}`;
    }
   }
   function esm_isError(e) {
    return isError(e);
   }
   function esm_randomUUID() {
    return randomUUID();
   }
   const esm_isNode = checkEnvironment_isNodeLike, esm_isNodeLike = checkEnvironment_isNodeLike;
   const rawContent = Symbol("rawContent");
   function hasRawContent(x) {
    return "function" == typeof x[rawContent];
   }
   function policies_defaultRetryPolicy_defaultRetryPolicy(options = {}) {
    return function(options = {}) {
     var _a;
     return {
      name: "defaultRetryPolicy",
      sendRequest: retryPolicy_retryPolicy([ {
       name: "throttlingRetryStrategy",
       retry({response}) {
        const retryAfterInMs = getRetryAfterInMs(response);
        return Number.isFinite(retryAfterInMs) ? {
         retryAfterInMs
        } : {
         skipStrategy: !0
        };
       }
      }, exponentialRetryStrategy_exponentialRetryStrategy(options) ], {
       maxRetries: null !== (_a = options.maxRetries) && void 0 !== _a ? _a : 3
      }).sendRequest
     };
    }(options);
   }
   function proxyPolicy_getDefaultProxySettings(proxyUrl) {
    return function(proxyUrl) {
     if (!proxyUrl && !(proxyUrl = loadEnvironmentProxyValue())) return;
     const parsedUrl = new URL(proxyUrl);
     return {
      host: (parsedUrl.protocol ? parsedUrl.protocol + "//" : "") + parsedUrl.hostname,
      port: Number.parseInt(parsedUrl.port || "80"),
      username: parsedUrl.username,
      password: parsedUrl.password
     };
    }(proxyUrl);
   }
   const knownContextKeys = {
    span: Symbol.for("@azure/core-tracing span"),
    namespace: Symbol.for("@azure/core-tracing namespace")
   };
   function createTracingContext(options = {}) {
    let context = new TracingContextImpl(options.parentContext);
    return options.span && (context = context.setValue(knownContextKeys.span, options.span)), 
    options.namespace && (context = context.setValue(knownContextKeys.namespace, options.namespace)), 
    context;
   }
   class TracingContextImpl {
    constructor(initialContext) {
     this._contextMap = initialContext instanceof TracingContextImpl ? new Map(initialContext._contextMap) : new Map;
    }
    setValue(key, value) {
     const newContext = new TracingContextImpl(this);
     return newContext._contextMap.set(key, value), newContext;
    }
    getValue(key) {
     return this._contextMap.get(key);
    }
    deleteValue(key) {
     const newContext = new TracingContextImpl(this);
     return newContext._contextMap.delete(key), newContext;
    }
   }
   const state_state = __webpack_require__(4417).w;
   function getInstrumenter() {
    return state_state.instrumenterImplementation || (state_state.instrumenterImplementation = {
     createRequestHeaders: () => ({}),
     parseTraceparentHeader: () => {},
     startSpan: (_name, spanOptions) => ({
      span: {
       end: () => {},
       isRecording: () => !1,
       recordException: () => {},
       setAttribute: () => {},
       setStatus: () => {},
       addEvent: () => {}
      },
      tracingContext: createTracingContext({
       parentContext: spanOptions.tracingContext
      })
     }),
     withContext: (_context, callback, ...callbackArgs) => callback(...callbackArgs)
    }), state_state.instrumenterImplementation;
   }
   function createTracingClient(options) {
    const {namespace, packageName, packageVersion} = options;
    function startSpan(name, operationOptions, spanOptions) {
     var _a;
     const startSpanResult = getInstrumenter().startSpan(name, Object.assign(Object.assign({}, spanOptions), {
      packageName,
      packageVersion,
      tracingContext: null === (_a = null == operationOptions ? void 0 : operationOptions.tracingOptions) || void 0 === _a ? void 0 : _a.tracingContext
     }));
     let tracingContext = startSpanResult.tracingContext;
     const span = startSpanResult.span;
     tracingContext.getValue(knownContextKeys.namespace) || (tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace)), 
     span.setAttribute("az.namespace", tracingContext.getValue(knownContextKeys.namespace));
     return {
      span,
      updatedOptions: Object.assign({}, operationOptions, {
       tracingOptions: Object.assign(Object.assign({}, null == operationOptions ? void 0 : operationOptions.tracingOptions), {
        tracingContext
       })
      })
     };
    }
    function withContext(context, callback, ...callbackArgs) {
     return getInstrumenter().withContext(context, callback, ...callbackArgs);
    }
    return {
     startSpan,
     withSpan: async function(name, operationOptions, callback, spanOptions) {
      const {span, updatedOptions} = startSpan(name, operationOptions, spanOptions);
      try {
       const result = await withContext(updatedOptions.tracingOptions.tracingContext, (() => Promise.resolve(callback(updatedOptions, span))));
       return span.setStatus({
        status: "success"
       }), result;
      } catch (err) {
       throw span.setStatus({
        status: "error",
        error: err
       }), err;
      } finally {
       span.end();
      }
     },
     withContext,
     parseTraceparentHeader: function(traceparentHeader) {
      return getInstrumenter().parseTraceparentHeader(traceparentHeader);
     },
     createRequestHeaders: function(tracingContext) {
      return getInstrumenter().createRequestHeaders(tracingContext);
     }
    };
   }
   class esm_restError_RestError extends Error {
    constructor(message, options = {}) {
     return super(message), new restError_RestError(message, options);
    }
   }
   function esm_restError_isRestError(e) {
    return function(e) {
     return e instanceof restError_RestError || isError(e) && "RestError" === e.name;
    }(e);
   }
   esm_restError_RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR", esm_restError_RestError.PARSE_ERROR = "PARSE_ERROR";
   function tracingPolicy(options = {}) {
    const userAgentPromise = util_userAgent_getUserAgentValue(options.userAgentPrefix), sanitizer = new Sanitizer({
     additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
    }), tracingClient = function() {
     try {
      return createTracingClient({
       namespace: "",
       packageName: "@azure/core-rest-pipeline",
       packageVersion: "1.20.0"
      });
     } catch (e) {
      return void esm_log_logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);
     }
    }();
    return {
     name: "tracingPolicy",
     async sendRequest(request, next) {
      var _a;
      if (!tracingClient) return next(request);
      const userAgent = await userAgentPromise, spanAttributes = {
       "http.url": sanitizer.sanitizeUrl(request.url),
       "http.method": request.method,
       "http.user_agent": userAgent,
       requestId: request.requestId
      };
      userAgent && (spanAttributes["http.user_agent"] = userAgent);
      const {span, tracingContext} = null !== (_a = function(tracingClient, request, spanAttributes) {
       try {
        const {span, updatedOptions} = tracingClient.startSpan(`HTTP ${request.method}`, {
         tracingOptions: request.tracingOptions
        }, {
         spanKind: "client",
         spanAttributes
        });
        if (!span.isRecording()) return void span.end();
        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);
        for (const [key, value] of Object.entries(headers)) request.headers.set(key, value);
        return {
         span,
         tracingContext: updatedOptions.tracingOptions.tracingContext
        };
       } catch (e) {
        return void esm_log_logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);
       }
      }(tracingClient, request, spanAttributes)) && void 0 !== _a ? _a : {};
      if (!span || !tracingContext) return next(request);
      try {
       const response = await tracingClient.withContext(tracingContext, next, request);
       return function(span, response) {
        try {
         span.setAttribute("http.status_code", response.status);
         const serviceRequestId = response.headers.get("x-ms-request-id");
         serviceRequestId && span.setAttribute("serviceRequestId", serviceRequestId), response.status >= 400 && span.setStatus({
          status: "error"
         }), span.end();
        } catch (e) {
         esm_log_logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);
        }
       }(span, response), response;
      } catch (err) {
       throw function(span, error) {
        try {
         span.setStatus({
          status: "error",
          error: esm_isError(error) ? error : void 0
         }), esm_restError_isRestError(error) && error.statusCode && span.setAttribute("http.status_code", error.statusCode), 
         span.end();
        } catch (e) {
         esm_log_logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);
        }
       }(span, err), err;
      }
     }
    };
   }
   function wrapAbortSignalLike(abortSignalLike) {
    if (abortSignalLike instanceof AbortSignal) return {
     abortSignal: abortSignalLike
    };
    if (abortSignalLike.aborted) return {
     abortSignal: AbortSignal.abort(abortSignalLike.reason)
    };
    const controller = new AbortController;
    let needsCleanup = !0;
    function cleanup() {
     needsCleanup && (abortSignalLike.removeEventListener("abort", listener), needsCleanup = !1);
    }
    function listener() {
     controller.abort(abortSignalLike.reason), cleanup();
    }
    return abortSignalLike.addEventListener("abort", listener), {
     abortSignal: controller.signal,
     cleanup
    };
   }
   function esm_createPipelineFromOptions_createPipelineFromOptions(options) {
    var _a;
    const pipeline = esm_pipeline_createEmptyPipeline();
    return esm_isNodeLike && (options.agent && pipeline.addPolicy(function(agent) {
     return {
      name: "agentPolicy",
      sendRequest: async (req, next) => (req.agent || (req.agent = agent), next(req))
     };
    }(options.agent)), options.tlsOptions && pipeline.addPolicy(function(tlsSettings) {
     return {
      name: "tlsPolicy",
      sendRequest: async (req, next) => (req.tlsSettings || (req.tlsSettings = tlsSettings), 
      next(req))
     };
    }(options.tlsOptions)), pipeline.addPolicy(function(proxySettings, options) {
     return proxyPolicy_proxyPolicy(proxySettings, options);
    }(options.proxyOptions)), pipeline.addPolicy({
     name: "decompressResponsePolicy",
     sendRequest: async (request, next) => ("HEAD" !== request.method && request.headers.set("Accept-Encoding", "gzip,deflate"), 
     next(request))
    })), pipeline.addPolicy(function wrapAbortSignalLikePolicy() {
     return {
      name: "wrapAbortSignalLikePolicy",
      sendRequest: async (request, next) => {
       if (!request.abortSignal) return next(request);
       const {abortSignal, cleanup} = wrapAbortSignalLike(request.abortSignal);
       request.abortSignal = abortSignal;
       try {
        return await next(request);
       } finally {
        null == cleanup || cleanup();
       }
      }
     };
    }()), pipeline.addPolicy(formDataPolicy_formDataPolicy(), {
     beforePolicies: [ "multipartPolicy" ]
    }), pipeline.addPolicy(function(options = {}) {
     const userAgentValue = util_userAgent_getUserAgentValue(options.userAgentPrefix);
     return {
      name: "userAgentPolicy",
      sendRequest: async (request, next) => (request.headers.has("User-Agent") || request.headers.set("User-Agent", await userAgentValue), 
      next(request))
     };
    }(options.userAgentOptions)), pipeline.addPolicy(function(requestIdHeaderName = "x-ms-client-request-id") {
     return {
      name: "setClientRequestIdPolicy",
      sendRequest: async (request, next) => (request.headers.has(requestIdHeaderName) || request.headers.set(requestIdHeaderName, request.requestId), 
      next(request))
     };
    }(null === (_a = options.telemetryOptions) || void 0 === _a ? void 0 : _a.clientRequestIdHeaderName)), 
    pipeline.addPolicy(function() {
     const tspPolicy = multipartPolicy_multipartPolicy();
     return {
      name: "multipartPolicy",
      sendRequest: async (request, next) => {
       if (request.multipartBody) for (const part of request.multipartBody.parts) hasRawContent(part.body) && (part.body = hasRawContent(blob = part.body) ? blob[rawContent]() : blob);
       var blob;
       return tspPolicy.sendRequest(request, next);
      }
     };
    }(), {
     afterPhase: "Deserialize"
    }), pipeline.addPolicy(policies_defaultRetryPolicy_defaultRetryPolicy(options.retryOptions), {
     phase: "Retry"
    }), pipeline.addPolicy(tracingPolicy(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {
     afterPhase: "Retry"
    }), esm_isNodeLike && pipeline.addPolicy(function(options = {}) {
     return redirectPolicy_redirectPolicy(options);
    }(options.redirectOptions), {
     afterPhase: "Retry"
    }), pipeline.addPolicy(policies_logPolicy_logPolicy(options.loggingOptions), {
     afterPhase: "Sign"
    }), pipeline;
   }
   function esm_defaultHttpClient_createDefaultHttpClient() {
    const client = defaultHttpClient_createDefaultHttpClient();
    return {
     async sendRequest(request) {
      const {abortSignal, cleanup} = request.abortSignal ? wrapAbortSignalLike(request.abortSignal) : {};
      try {
       return request.abortSignal = abortSignal, await client.sendRequest(request);
      } finally {
       null == cleanup || cleanup();
      }
     }
    };
   }
   function esm_httpHeaders_createHttpHeaders(rawHeaders) {
    return httpHeaders_createHttpHeaders(rawHeaders);
   }
   function esm_pipelineRequest_createPipelineRequest(options) {
    return function(options) {
     return new PipelineRequestImpl(options);
    }(options);
   }
   esm_createClientLogger("core-rest-pipeline retryPolicy");
   const DEFAULT_CYCLER_OPTIONS = {
    forcedRefreshWindowInMs: 1e3,
    retryIntervalInMs: 3e3,
    refreshWindowInMs: 12e4
   };
   function tokenCycler_createTokenCycler(credential, tokenCyclerOptions) {
    let tenantId, refreshWorker = null, token = null;
    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions), cycler = {
     get isRefreshing() {
      return null !== refreshWorker;
     },
     get shouldRefresh() {
      var _a;
      return !cycler.isRefreshing && (!!((null == token ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) || (null !== (_a = null == token ? void 0 : token.expiresOnTimestamp) && void 0 !== _a ? _a : 0) - options.refreshWindowInMs < Date.now());
     },
     get mustRefresh() {
      return null === token || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
     }
    };
    function refresh(scopes, getTokenOptions) {
     var _a;
     if (!cycler.isRefreshing) {
      refreshWorker = async function(getAccessToken, retryIntervalInMs, refreshTimeout) {
       async function tryGetAccessToken() {
        if (!(Date.now() < refreshTimeout)) {
         const finalToken = await getAccessToken();
         if (null === finalToken) throw new Error("Failed to refresh access token.");
         return finalToken;
        }
        try {
         return await getAccessToken();
        } catch (_a) {
         return null;
        }
       }
       let token = await tryGetAccessToken();
       for (;null === token; ) await delay_delay(retryIntervalInMs), token = await tryGetAccessToken();
       return token;
      }((() => credential.getToken(scopes, getTokenOptions)), options.retryIntervalInMs, null !== (_a = null == token ? void 0 : token.expiresOnTimestamp) && void 0 !== _a ? _a : Date.now()).then((_token => (refreshWorker = null, 
      token = _token, tenantId = getTokenOptions.tenantId, token))).catch((reason => {
       throw refreshWorker = null, token = null, tenantId = void 0, reason;
      }));
     }
     return refreshWorker;
    }
    return async (scopes, tokenOptions) => {
     const hasClaimChallenge = Boolean(tokenOptions.claims), tenantIdChanged = tenantId !== tokenOptions.tenantId;
     hasClaimChallenge && (token = null);
     return tenantIdChanged || hasClaimChallenge || cycler.mustRefresh ? refresh(scopes, tokenOptions) : (cycler.shouldRefresh && refresh(scopes, tokenOptions), 
     token);
    };
   }
   async function trySendRequest(request, next) {
    try {
     return [ await next(request), void 0 ];
    } catch (e) {
     if (esm_restError_isRestError(e) && e.response) return [ e.response, e ];
     throw e;
    }
   }
   async function defaultAuthorizeRequest(options) {
    const {scopes, getAccessToken, request} = options, getTokenOptions = {
     abortSignal: request.abortSignal,
     tracingOptions: request.tracingOptions,
     enableCae: !0
    }, accessToken = await getAccessToken(scopes, getTokenOptions);
    accessToken && options.request.headers.set("Authorization", `Bearer ${accessToken.token}`);
   }
   function isChallengeResponse(response) {
    return 401 === response.status && response.headers.has("WWW-Authenticate");
   }
   async function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {
    var _a;
    const {scopes} = onChallengeOptions, accessToken = await onChallengeOptions.getAccessToken(scopes, {
     enableCae: !0,
     claims: caeClaims
    });
    return !!accessToken && (onChallengeOptions.request.headers.set("Authorization", `${null !== (_a = accessToken.tokenType) && void 0 !== _a ? _a : "Bearer"} ${accessToken.token}`), 
    !0);
   }
   function bearerTokenAuthenticationPolicy(options) {
    var _a, _b, _c;
    const {credential, scopes, challengeCallbacks} = options, logger = options.logger || esm_log_logger, callbacks = {
     authorizeRequest: null !== (_b = null === (_a = null == challengeCallbacks ? void 0 : challengeCallbacks.authorizeRequest) || void 0 === _a ? void 0 : _a.bind(challengeCallbacks)) && void 0 !== _b ? _b : defaultAuthorizeRequest,
     authorizeRequestOnChallenge: null === (_c = null == challengeCallbacks ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) || void 0 === _c ? void 0 : _c.bind(challengeCallbacks)
    }, getAccessToken = credential ? tokenCycler_createTokenCycler(credential) : () => Promise.resolve(null);
    return {
     name: "bearerTokenAuthenticationPolicy",
     async sendRequest(request, next) {
      if (!request.url.toLowerCase().startsWith("https://")) throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
      let response, error, shouldSendRequest;
      if (await callbacks.authorizeRequest({
       scopes: Array.isArray(scopes) ? scopes : [ scopes ],
       request,
       getAccessToken,
       logger
      }), [response, error] = await trySendRequest(request, next), isChallengeResponse(response)) {
       let claims = getCaeChallengeClaims(response.headers.get("WWW-Authenticate"));
       if (claims) {
        let parsedClaim;
        try {
         parsedClaim = atob(claims);
        } catch (e) {
         return logger.warning(`The WWW-Authenticate header contains "claims" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`), 
         response;
        }
        shouldSendRequest = await authorizeRequestOnCaeChallenge({
         scopes: Array.isArray(scopes) ? scopes : [ scopes ],
         response,
         request,
         getAccessToken,
         logger
        }, parsedClaim), shouldSendRequest && ([response, error] = await trySendRequest(request, next));
       } else if (callbacks.authorizeRequestOnChallenge && (shouldSendRequest = await callbacks.authorizeRequestOnChallenge({
        scopes: Array.isArray(scopes) ? scopes : [ scopes ],
        request,
        response,
        getAccessToken,
        logger
       }), shouldSendRequest && ([response, error] = await trySendRequest(request, next)), 
       isChallengeResponse(response) && (claims = getCaeChallengeClaims(response.headers.get("WWW-Authenticate")), 
       claims))) {
        let parsedClaim;
        try {
         parsedClaim = atob(claims);
        } catch (e) {
         return logger.warning(`The WWW-Authenticate header contains "claims" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`), 
         response;
        }
        shouldSendRequest = await authorizeRequestOnCaeChallenge({
         scopes: Array.isArray(scopes) ? scopes : [ scopes ],
         response,
         request,
         getAccessToken,
         logger
        }, parsedClaim), shouldSendRequest && ([response, error] = await trySendRequest(request, next));
       }
      }
      if (error) throw error;
      return response;
     }
    };
   }
   function getCaeChallengeClaims(challenges) {
    var _a;
    if (!challenges) return;
    const parsedChallenges = function(challenges) {
     const challengeRegex = /(\w+)\s+((?:\w+=(?:"[^"]*"|[^,]*),?\s*)+)/g, paramRegex = /(\w+)="([^"]*)"/g, parsedChallenges = [];
     let match;
     for (;null !== (match = challengeRegex.exec(challenges)); ) {
      const scheme = match[1], paramsString = match[2], params = {};
      let paramMatch;
      for (;null !== (paramMatch = paramRegex.exec(paramsString)); ) params[paramMatch[1]] = paramMatch[2];
      parsedChallenges.push({
       scheme,
       params
      });
     }
     return parsedChallenges;
    }(challenges);
    return null === (_a = parsedChallenges.find((x => "Bearer" === x.scheme && x.params.claims && "insufficient_claims" === x.params.error))) || void 0 === _a ? void 0 : _a.params.claims;
   }
   function isTokenCredential(credential) {
    const castCredential = credential;
    return castCredential && "function" == typeof castCredential.getToken && (void 0 === castCredential.signRequest || castCredential.getToken.length > 0);
   }
   function encodeByteArray(value) {
    return (value instanceof Buffer ? value : Buffer.from(value.buffer)).toString("base64");
   }
   function decodeString(value) {
    return Buffer.from(value, "base64");
   }
   const XML_ATTRKEY = "$";
   const validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
   const validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
   function flattenResponse(fullResponse, responseSpec) {
    var _a, _b;
    const parsedHeaders = fullResponse.parsedHeaders;
    if ("HEAD" === fullResponse.request.method) return Object.assign(Object.assign({}, parsedHeaders), {
     body: fullResponse.parsedBody
    });
    const bodyMapper = responseSpec && responseSpec.bodyMapper, isNullable = Boolean(null == bodyMapper ? void 0 : bodyMapper.nullable), expectedBodyTypeName = null == bodyMapper ? void 0 : bodyMapper.type.name;
    if ("Stream" === expectedBodyTypeName) return Object.assign(Object.assign({}, parsedHeaders), {
     blobBody: fullResponse.blobBody,
     readableStreamBody: fullResponse.readableStreamBody
    });
    const modelProperties = "Composite" === expectedBodyTypeName && bodyMapper.type.modelProperties || {}, isPageableResponse = Object.keys(modelProperties).some((k => "" === modelProperties[k].serializedName));
    if ("Sequence" === expectedBodyTypeName || isPageableResponse) {
     const arrayResponse = null !== (_a = fullResponse.parsedBody) && void 0 !== _a ? _a : [];
     for (const key of Object.keys(modelProperties)) modelProperties[key].serializedName && (arrayResponse[key] = null === (_b = fullResponse.parsedBody) || void 0 === _b ? void 0 : _b[key]);
     if (parsedHeaders) for (const key of Object.keys(parsedHeaders)) arrayResponse[key] = parsedHeaders[key];
     return !isNullable || fullResponse.parsedBody || parsedHeaders || 0 !== Object.getOwnPropertyNames(modelProperties).length ? arrayResponse : null;
    }
    return function(responseObject) {
     const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);
     return responseObject.hasNullableType && 0 === Object.getOwnPropertyNames(combinedHeadersAndBody).length ? responseObject.shouldWrapBody ? {
      body: null
     } : null : responseObject.shouldWrapBody ? Object.assign(Object.assign({}, responseObject.headers), {
      body: responseObject.body
     }) : combinedHeadersAndBody;
    }({
     body: fullResponse.parsedBody,
     headers: parsedHeaders,
     hasNullableType: isNullable,
     shouldWrapBody: (value = fullResponse.parsedBody, mapperTypeName = expectedBodyTypeName, 
     "Composite" !== mapperTypeName && "Dictionary" !== mapperTypeName && ("string" == typeof value || "number" == typeof value || "boolean" == typeof value || null !== (null == mapperTypeName ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) || null == value))
    });
    var value, mapperTypeName;
   }
   class SerializerImpl {
    constructor(modelMappers = {}, isXML = !1) {
     this.modelMappers = modelMappers, this.isXML = isXML;
    }
    validateConstraints(mapper, value, objectName) {
     const failValidation = (constraintName, constraintValue) => {
      throw new Error(`"${objectName}" with value "${value}" should satisfy the constraint "${constraintName}": ${constraintValue}.`);
     };
     if (mapper.constraints && null != value) {
      const {ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems} = mapper.constraints;
      if (void 0 !== ExclusiveMaximum && value >= ExclusiveMaximum && failValidation("ExclusiveMaximum", ExclusiveMaximum), 
      void 0 !== ExclusiveMinimum && value <= ExclusiveMinimum && failValidation("ExclusiveMinimum", ExclusiveMinimum), 
      void 0 !== InclusiveMaximum && value > InclusiveMaximum && failValidation("InclusiveMaximum", InclusiveMaximum), 
      void 0 !== InclusiveMinimum && value < InclusiveMinimum && failValidation("InclusiveMinimum", InclusiveMinimum), 
      void 0 !== MaxItems && value.length > MaxItems && failValidation("MaxItems", MaxItems), 
      void 0 !== MaxLength && value.length > MaxLength && failValidation("MaxLength", MaxLength), 
      void 0 !== MinItems && value.length < MinItems && failValidation("MinItems", MinItems), 
      void 0 !== MinLength && value.length < MinLength && failValidation("MinLength", MinLength), 
      void 0 !== MultipleOf && value % MultipleOf != 0 && failValidation("MultipleOf", MultipleOf), 
      Pattern) {
       const pattern = "string" == typeof Pattern ? new RegExp(Pattern) : Pattern;
       "string" == typeof value && null !== value.match(pattern) || failValidation("Pattern", Pattern);
      }
      UniqueItems && value.some(((item, i, ar) => ar.indexOf(item) !== i)) && failValidation("UniqueItems", UniqueItems);
     }
    }
    serialize(mapper, object, objectName, options = {
     xml: {}
    }) {
     var _a, _b, _c;
     const updatedOptions = {
      xml: {
       rootName: null !== (_a = options.xml.rootName) && void 0 !== _a ? _a : "",
       includeRoot: null !== (_b = options.xml.includeRoot) && void 0 !== _b && _b,
       xmlCharKey: null !== (_c = options.xml.xmlCharKey) && void 0 !== _c ? _c : "_"
      }
     };
     let payload = {};
     const mapperType = mapper.type.name;
     objectName || (objectName = mapper.serializedName), null !== mapperType.match(/^Sequence$/i) && (payload = []), 
     mapper.isConstant && (object = mapper.defaultValue);
     const {required, nullable} = mapper;
     if (required && nullable && void 0 === object) throw new Error(`${objectName} cannot be undefined.`);
     if (required && !nullable && null == object) throw new Error(`${objectName} cannot be null or undefined.`);
     if (!required && !1 === nullable && null === object) throw new Error(`${objectName} cannot be null.`);
     if (null == object) payload = object; else if (null !== mapperType.match(/^any$/i)) payload = object; else if (null !== mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i)) payload = function(typeName, objectName, value) {
      if (null != value) if (null !== typeName.match(/^Number$/i)) {
       if ("number" != typeof value) throw new Error(`${objectName} with value ${value} must be of type number.`);
      } else if (null !== typeName.match(/^String$/i)) {
       if ("string" != typeof value.valueOf()) throw new Error(`${objectName} with value "${value}" must be of type string.`);
      } else if (null !== typeName.match(/^Uuid$/i)) {
       if ("string" != typeof value.valueOf() || (uuid = value, !validUuidRegex.test(uuid))) throw new Error(`${objectName} with value "${value}" must be of type string and a valid uuid.`);
      } else if (null !== typeName.match(/^Boolean$/i)) {
       if ("boolean" != typeof value) throw new Error(`${objectName} with value ${value} must be of type boolean.`);
      } else if (null !== typeName.match(/^Stream$/i)) {
       const objectType = typeof value;
       if (!("string" === objectType || "function" == typeof value.pipe || "function" == typeof value.tee || value instanceof ArrayBuffer || ArrayBuffer.isView(value) || ("function" == typeof Blob || "object" == typeof Blob) && value instanceof Blob || "function" === objectType)) throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);
      }
      var uuid;
      return value;
     }(mapperType, objectName, object); else if (null !== mapperType.match(/^Enum$/i)) {
      payload = function(objectName, allowedValues, value) {
       if (!allowedValues) throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);
       if (!allowedValues.some((item => "string" == typeof item.valueOf() ? item.toLowerCase() === value.toLowerCase() : item === value))) throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);
       return value;
      }(objectName, mapper.type.allowedValues, object);
     } else null !== mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) ? payload = function(typeName, value, objectName) {
      if (null != value) if (null !== typeName.match(/^Date$/i)) {
       if (!(value instanceof Date || "string" == typeof value.valueOf() && !isNaN(Date.parse(value)))) throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
       value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
      } else if (null !== typeName.match(/^DateTime$/i)) {
       if (!(value instanceof Date || "string" == typeof value.valueOf() && !isNaN(Date.parse(value)))) throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
       value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
      } else if (null !== typeName.match(/^DateTimeRfc1123$/i)) {
       if (!(value instanceof Date || "string" == typeof value.valueOf() && !isNaN(Date.parse(value)))) throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);
       value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
      } else if (null !== typeName.match(/^UnixTime$/i)) {
       if (!(value instanceof Date || "string" == typeof value.valueOf() && !isNaN(Date.parse(value)))) throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format for it to be serialized in UnixTime/Epoch format.`);
       value = function(d) {
        if (!d) return;
        "string" == typeof d.valueOf() && (d = new Date(d));
        return Math.floor(d.getTime() / 1e3);
       }(value);
      } else if (null !== typeName.match(/^TimeSpan$/i) && !function(value) {
       return validateISODuration.test(value);
      }(value)) throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was "${value}".`);
      return value;
     }(mapperType, object, objectName) : null !== mapperType.match(/^ByteArray$/i) ? payload = function(objectName, value) {
      if (null != value) {
       if (!(value instanceof Uint8Array)) throw new Error(`${objectName} must be of type Uint8Array.`);
       value = encodeByteArray(value);
      }
      return value;
     }(objectName, object) : null !== mapperType.match(/^Base64Url$/i) ? payload = function(objectName, value) {
      if (null != value) {
       if (!(value instanceof Uint8Array)) throw new Error(`${objectName} must be of type Uint8Array.`);
       value = function(buffer) {
        if (!buffer) return;
        if (!(buffer instanceof Uint8Array)) throw new Error("Please provide an input of type Uint8Array for converting to Base64Url.");
        return function(str, ch) {
         let len = str.length;
         for (;len - 1 >= 0 && str[len - 1] === ch; ) --len;
         return str.substr(0, len);
        }(encodeByteArray(buffer), "=").replace(/\+/g, "-").replace(/\//g, "_");
       }(value);
      }
      return value;
     }(objectName, object) : null !== mapperType.match(/^Sequence$/i) ? payload = function(serializer, mapper, object, objectName, isXml, options) {
      var _a;
      if (!Array.isArray(object)) throw new Error(`${objectName} must be of type Array.`);
      let elementType = mapper.type.element;
      if (!elementType || "object" != typeof elementType) throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}.`);
      "Composite" === elementType.type.name && elementType.type.className && (elementType = null !== (_a = serializer.modelMappers[elementType.type.className]) && void 0 !== _a ? _a : elementType);
      const tempArray = [];
      for (let i = 0; i < object.length; i++) {
       const serializedValue = serializer.serialize(elementType, object[i], objectName, options);
       if (isXml && elementType.xmlNamespace) {
        const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : "xmlns";
        "Composite" === elementType.type.name ? (tempArray[i] = Object.assign({}, serializedValue), 
        tempArray[i][XML_ATTRKEY] = {
         [xmlnsKey]: elementType.xmlNamespace
        }) : (tempArray[i] = {}, tempArray[i][options.xml.xmlCharKey] = serializedValue, 
        tempArray[i][XML_ATTRKEY] = {
         [xmlnsKey]: elementType.xmlNamespace
        });
       } else tempArray[i] = serializedValue;
      }
      return tempArray;
     }(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions) : null !== mapperType.match(/^Dictionary$/i) ? payload = function(serializer, mapper, object, objectName, isXml, options) {
      if ("object" != typeof object) throw new Error(`${objectName} must be of type object.`);
      const valueType = mapper.type.value;
      if (!valueType || "object" != typeof valueType) throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}.`);
      const tempDictionary = {};
      for (const key of Object.keys(object)) {
       const serializedValue = serializer.serialize(valueType, object[key], objectName, options);
       tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
      }
      if (isXml && mapper.xmlNamespace) {
       const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns", result = tempDictionary;
       return result[XML_ATTRKEY] = {
        [xmlnsKey]: mapper.xmlNamespace
       }, result;
      }
      return tempDictionary;
     }(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions) : null !== mapperType.match(/^Composite$/i) && (payload = function(serializer, mapper, object, objectName, isXml, options) {
      getPolymorphicDiscriminatorRecursively(serializer, mapper) && (mapper = getPolymorphicMapper(serializer, mapper, object, "clientName"));
      if (null != object) {
       const payload = {}, modelProps = resolveModelProperties(serializer, mapper, objectName);
       for (const key of Object.keys(modelProps)) {
        const propertyMapper = modelProps[key];
        if (propertyMapper.readOnly) continue;
        let propName, parentObject = payload;
        if (serializer.isXML) propName = propertyMapper.xmlIsWrapped ? propertyMapper.xmlName : propertyMapper.xmlElementName || propertyMapper.xmlName; else {
         const paths = splitSerializeName(propertyMapper.serializedName);
         propName = paths.pop();
         for (const pathName of paths) {
          const childObject = parentObject[pathName];
          null == childObject && (void 0 !== object[key] && null !== object[key] || void 0 !== propertyMapper.defaultValue) && (parentObject[pathName] = {}), 
          parentObject = parentObject[pathName];
         }
        }
        if (null != parentObject) {
         if (isXml && mapper.xmlNamespace) {
          const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
          parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), {
           [xmlnsKey]: mapper.xmlNamespace
          });
         }
         const propertyObjectName = "" !== propertyMapper.serializedName ? objectName + "." + propertyMapper.serializedName : objectName;
         let toSerialize = object[key];
         const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
         polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && null == toSerialize && (toSerialize = mapper.serializedName);
         const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);
         if (void 0 !== serializedValue && null != propName) {
          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
          isXml && propertyMapper.xmlIsAttribute ? (parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {}, 
          parentObject[XML_ATTRKEY][propName] = serializedValue) : isXml && propertyMapper.xmlIsWrapped ? parentObject[propName] = {
           [propertyMapper.xmlElementName]: value
          } : parentObject[propName] = value;
         }
        }
       }
       const additionalPropertiesMapper = function(serializer, mapper, objectName) {
        const additionalProperties = mapper.type.additionalProperties;
        if (!additionalProperties && mapper.type.className) {
         const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
         return null == modelMapper ? void 0 : modelMapper.type.additionalProperties;
        }
        return additionalProperties;
       }(serializer, mapper, objectName);
       if (additionalPropertiesMapper) {
        const propNames = Object.keys(modelProps);
        for (const clientPropName in object) {
         propNames.every((pn => pn !== clientPropName)) && (payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options));
        }
       }
       return payload;
      }
      return object;
     }(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions));
     return payload;
    }
    deserialize(mapper, responseBody, objectName, options = {
     xml: {}
    }) {
     var _a, _b, _c, _d;
     const updatedOptions = {
      xml: {
       rootName: null !== (_a = options.xml.rootName) && void 0 !== _a ? _a : "",
       includeRoot: null !== (_b = options.xml.includeRoot) && void 0 !== _b && _b,
       xmlCharKey: null !== (_c = options.xml.xmlCharKey) && void 0 !== _c ? _c : "_"
      },
      ignoreUnknownProperties: null !== (_d = options.ignoreUnknownProperties) && void 0 !== _d && _d
     };
     if (null == responseBody) return this.isXML && "Sequence" === mapper.type.name && !mapper.xmlIsWrapped && (responseBody = []), 
     void 0 !== mapper.defaultValue && (responseBody = mapper.defaultValue), responseBody;
     let payload;
     const mapperType = mapper.type.name;
     if (objectName || (objectName = mapper.serializedName), null !== mapperType.match(/^Composite$/i)) payload = function(serializer, mapper, responseBody, objectName, options) {
      var _a, _b;
      const xmlCharKey = null !== (_a = options.xml.xmlCharKey) && void 0 !== _a ? _a : "_";
      getPolymorphicDiscriminatorRecursively(serializer, mapper) && (mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName"));
      const modelProps = resolveModelProperties(serializer, mapper, objectName);
      let instance = {};
      const handledPropertyNames = [];
      for (const key of Object.keys(modelProps)) {
       const propertyMapper = modelProps[key], paths = splitSerializeName(modelProps[key].serializedName);
       handledPropertyNames.push(paths[0]);
       const {serializedName, xmlName, xmlElementName} = propertyMapper;
       let propertyObjectName = objectName;
       "" !== serializedName && void 0 !== serializedName && (propertyObjectName = objectName + "." + serializedName);
       const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
       if (headerCollectionPrefix) {
        const dictionary = {};
        for (const headerKey of Object.keys(responseBody)) headerKey.startsWith(headerCollectionPrefix) && (dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options)), 
        handledPropertyNames.push(headerKey);
        instance[key] = dictionary;
       } else if (serializer.isXML) if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options); else if (propertyMapper.xmlIsMsText) void 0 !== responseBody[xmlCharKey] ? instance[key] = responseBody[xmlCharKey] : "string" == typeof responseBody && (instance[key] = responseBody); else {
        const propertyName = xmlElementName || xmlName || serializedName;
        if (propertyMapper.xmlIsWrapped) {
         const wrapped = responseBody[xmlName], elementList = null !== (_b = null == wrapped ? void 0 : wrapped[xmlElementName]) && void 0 !== _b ? _b : [];
         instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options), 
         handledPropertyNames.push(xmlName);
        } else {
         const property = responseBody[propertyName];
         instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options), 
         handledPropertyNames.push(propertyName);
        }
       } else {
        let propertyInstance, res = responseBody, steps = 0;
        for (const item of paths) {
         if (!res) break;
         steps++, res = res[item];
        }
        null === res && steps < paths.length && (res = void 0), propertyInstance = res;
        const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
        let serializedValue;
        if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && null == propertyInstance && (propertyInstance = mapper.serializedName), 
        Array.isArray(responseBody[key]) && "" === modelProps[key].serializedName) {
         propertyInstance = responseBody[key];
         const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
         for (const [k, v] of Object.entries(instance)) Object.prototype.hasOwnProperty.call(arrayInstance, k) || (arrayInstance[k] = v);
         instance = arrayInstance;
        } else void 0 === propertyInstance && void 0 === propertyMapper.defaultValue || (serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options), 
        instance[key] = serializedValue);
       }
      }
      const additionalPropertiesMapper = mapper.type.additionalProperties;
      if (additionalPropertiesMapper) {
       const isAdditionalProperty = responsePropName => {
        for (const clientPropName in modelProps) {
         if (splitSerializeName(modelProps[clientPropName].serializedName)[0] === responsePropName) return !1;
        }
        return !0;
       };
       for (const responsePropName in responseBody) isAdditionalProperty(responsePropName) && (instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options));
      } else if (responseBody && !options.ignoreUnknownProperties) for (const key of Object.keys(responseBody)) void 0 !== instance[key] || handledPropertyNames.includes(key) || isSpecialXmlProperty(key, options) || (instance[key] = responseBody[key]);
      return instance;
     }(this, mapper, responseBody, objectName, updatedOptions); else {
      if (this.isXML) {
       const xmlCharKey = updatedOptions.xml.xmlCharKey;
       void 0 !== responseBody[XML_ATTRKEY] && void 0 !== responseBody[xmlCharKey] && (responseBody = responseBody[xmlCharKey]);
      }
      null !== mapperType.match(/^Number$/i) ? (payload = parseFloat(responseBody), isNaN(payload) && (payload = responseBody)) : null !== mapperType.match(/^Boolean$/i) ? payload = "true" === responseBody || "false" !== responseBody && responseBody : null !== mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) ? payload = responseBody : null !== mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) ? payload = new Date(responseBody) : null !== mapperType.match(/^UnixTime$/i) ? payload = function(n) {
       if (!n) return;
       return new Date(1e3 * n);
      }(responseBody) : null !== mapperType.match(/^ByteArray$/i) ? payload = decodeString(responseBody) : null !== mapperType.match(/^Base64Url$/i) ? payload = function(str) {
       if (!str) return;
       if (str && "string" != typeof str.valueOf()) throw new Error("Please provide an input of type string for converting to Uint8Array");
       return decodeString(str = str.replace(/-/g, "+").replace(/_/g, "/"));
      }(responseBody) : null !== mapperType.match(/^Sequence$/i) ? payload = function(serializer, mapper, responseBody, objectName, options) {
       var _a;
       let element = mapper.type.element;
       if (!element || "object" != typeof element) throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}`);
       if (responseBody) {
        Array.isArray(responseBody) || (responseBody = [ responseBody ]), "Composite" === element.type.name && element.type.className && (element = null !== (_a = serializer.modelMappers[element.type.className]) && void 0 !== _a ? _a : element);
        const tempArray = [];
        for (let i = 0; i < responseBody.length; i++) tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);
        return tempArray;
       }
       return responseBody;
      }(this, mapper, responseBody, objectName, updatedOptions) : null !== mapperType.match(/^Dictionary$/i) && (payload = function(serializer, mapper, responseBody, objectName, options) {
       const value = mapper.type.value;
       if (!value || "object" != typeof value) throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}`);
       if (responseBody) {
        const tempDictionary = {};
        for (const key of Object.keys(responseBody)) tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);
        return tempDictionary;
       }
       return responseBody;
      }(this, mapper, responseBody, objectName, updatedOptions));
     }
     return mapper.isConstant && (payload = mapper.defaultValue), payload;
    }
   }
   function createSerializer(modelMappers = {}, isXML = !1) {
    return new SerializerImpl(modelMappers, isXML);
   }
   function splitSerializeName(prop) {
    const classes = [];
    let partialclass = "";
    if (prop) {
     const subwords = prop.split(".");
     for (const item of subwords) "\\" === item.charAt(item.length - 1) ? partialclass += item.substr(0, item.length - 1) + "." : (partialclass += item, 
     classes.push(partialclass), partialclass = "");
    }
    return classes;
   }
   function resolveReferencedMapper(serializer, mapper, objectName) {
    const className = mapper.type.className;
    if (!className) throw new Error(`Class name for model "${objectName}" is not provided in the mapper "${JSON.stringify(mapper, void 0, 2)}".`);
    return serializer.modelMappers[className];
   }
   function resolveModelProperties(serializer, mapper, objectName) {
    let modelProps = mapper.type.modelProperties;
    if (!modelProps) {
     const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
     if (!modelMapper) throw new Error(`mapper() cannot be null or undefined for model "${mapper.type.className}".`);
     if (modelProps = null == modelMapper ? void 0 : modelMapper.type.modelProperties, 
     !modelProps) throw new Error(`modelProperties cannot be null or undefined in the mapper "${JSON.stringify(modelMapper)}" of type "${mapper.type.className}" for object "${objectName}".`);
    }
    return modelProps;
   }
   function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
    if (!isXml || !propertyMapper.xmlNamespace) return serializedValue;
    const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : "xmlns", xmlNamespace = {
     [xmlnsKey]: propertyMapper.xmlNamespace
    };
    if ([ "Composite" ].includes(propertyMapper.type.name)) {
     if (serializedValue[XML_ATTRKEY]) return serializedValue;
     {
      const result = Object.assign({}, serializedValue);
      return result[XML_ATTRKEY] = xmlNamespace, result;
     }
    }
    const result = {};
    return result[options.xml.xmlCharKey] = serializedValue, result[XML_ATTRKEY] = xmlNamespace, 
    result;
   }
   function isSpecialXmlProperty(propertyName, options) {
    return [ XML_ATTRKEY, options.xml.xmlCharKey ].includes(propertyName);
   }
   function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
    var _a;
    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
    if (polymorphicDiscriminator) {
     let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
     if (discriminatorName) {
      "serializedName" === polymorphicPropertyName && (discriminatorName = discriminatorName.replace(/\\/gi, ""));
      const discriminatorValue = object[discriminatorName], typeName = null !== (_a = mapper.type.uberParent) && void 0 !== _a ? _a : mapper.type.className;
      if ("string" == typeof discriminatorValue && typeName) {
       const polymorphicMapper = function(discriminators, discriminatorValue, typeName) {
        const typeNamesToCheck = [ typeName ];
        for (;typeNamesToCheck.length; ) {
         const currentName = typeNamesToCheck.shift(), indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + "." + discriminatorValue;
         if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) return discriminators[indexDiscriminator];
         for (const [name, mapper] of Object.entries(discriminators)) name.startsWith(currentName + ".") && mapper.type.uberParent === currentName && mapper.type.className && typeNamesToCheck.push(mapper.type.className);
        }
       }(serializer.modelMappers.discriminators, discriminatorValue, typeName);
       polymorphicMapper && (mapper = polymorphicMapper);
      }
     }
    }
    return mapper;
   }
   function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
    return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);
   }
   function getPolymorphicDiscriminatorSafely(serializer, typeName) {
    return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;
   }
   const MapperTypeNames_Sequence = "Sequence", MapperTypeNames_String = "String", MapperTypeNames_Stream = "Stream";
   const esm_state_state = __webpack_require__(5924).w;
   function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {
    let parameterPath = parameter.parameterPath;
    const parameterMapper = parameter.mapper;
    let value;
    if ("string" == typeof parameterPath && (parameterPath = [ parameterPath ]), Array.isArray(parameterPath)) {
     if (parameterPath.length > 0) if (parameterMapper.isConstant) value = parameterMapper.defaultValue; else {
      let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
      !propertySearchResult.propertyFound && fallbackObject && (propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath));
      let useDefaultValue = !1;
      propertySearchResult.propertyFound || (useDefaultValue = parameterMapper.required || "options" === parameterPath[0] && 2 === parameterPath.length), 
      value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
     }
    } else {
     parameterMapper.required && (value = {});
     for (const propertyName in parameterPath) {
      const propertyMapper = parameterMapper.type.modelProperties[propertyName], propertyValue = getOperationArgumentValueFromParameter(operationArguments, {
       parameterPath: parameterPath[propertyName],
       mapper: propertyMapper
      }, fallbackObject);
      void 0 !== propertyValue && (value || (value = {}), value[propertyName] = propertyValue);
     }
    }
    return value;
   }
   function getPropertyFromParameterPath(parent, parameterPath) {
    const result = {
     propertyFound: !1
    };
    let i = 0;
    for (;i < parameterPath.length; ++i) {
     const parameterPathPart = parameterPath[i];
     if (!parent || !(parameterPathPart in parent)) break;
     parent = parent[parameterPathPart];
    }
    return i === parameterPath.length && (result.propertyValue = parent, result.propertyFound = !0), 
    result;
   }
   const originalRequestSymbol = Symbol.for("@azure/core-client original request");
   function getOperationRequestInfo(request) {
    if (function(request) {
     return originalRequestSymbol in request;
    }(request)) return getOperationRequestInfo(request[originalRequestSymbol]);
    let info = esm_state_state.operationRequestMap.get(request);
    return info || (info = {}, esm_state_state.operationRequestMap.set(request, info)), 
    info;
   }
   const defaultJsonContentTypes = [ "application/json", "text/json" ], defaultXmlContentTypes = [ "application/xml", "application/atom+xml" ];
   function deserializationPolicy(options = {}) {
    var _a, _b, _c, _d, _e, _f, _g;
    const jsonContentTypes = null !== (_b = null === (_a = options.expectedContentTypes) || void 0 === _a ? void 0 : _a.json) && void 0 !== _b ? _b : defaultJsonContentTypes, xmlContentTypes = null !== (_d = null === (_c = options.expectedContentTypes) || void 0 === _c ? void 0 : _c.xml) && void 0 !== _d ? _d : defaultXmlContentTypes, parseXML = options.parseXML, serializerOptions = options.serializerOptions, updatedOptions = {
     xml: {
      rootName: null !== (_e = null == serializerOptions ? void 0 : serializerOptions.xml.rootName) && void 0 !== _e ? _e : "",
      includeRoot: null !== (_f = null == serializerOptions ? void 0 : serializerOptions.xml.includeRoot) && void 0 !== _f && _f,
      xmlCharKey: null !== (_g = null == serializerOptions ? void 0 : serializerOptions.xml.xmlCharKey) && void 0 !== _g ? _g : "_"
     }
    };
    return {
     name: "deserializationPolicy",
     async sendRequest(request, next) {
      const response = await next(request);
      return async function(jsonContentTypes, xmlContentTypes, response, options, parseXML) {
       const parsedResponse = await async function(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {
        var _a;
        if (!(null === (_a = operationResponse.request.streamResponseStatusCodes) || void 0 === _a ? void 0 : _a.has(operationResponse.status)) && operationResponse.bodyAsText) {
         const text = operationResponse.bodyAsText, contentType = operationResponse.headers.get("Content-Type") || "", contentComponents = contentType ? contentType.split(";").map((component => component.toLowerCase())) : [];
         try {
          if (0 === contentComponents.length || contentComponents.some((component => -1 !== jsonContentTypes.indexOf(component)))) return operationResponse.parsedBody = JSON.parse(text), 
          operationResponse;
          if (contentComponents.some((component => -1 !== xmlContentTypes.indexOf(component)))) {
           if (!parseXML) throw new Error("Parsing XML not supported.");
           const body = await parseXML(text, opts.xml);
           return operationResponse.parsedBody = body, operationResponse;
          }
         } catch (err) {
          const msg = `Error "${err}" occurred while parsing the response body - ${operationResponse.bodyAsText}.`, errCode = err.code || esm_restError_RestError.PARSE_ERROR;
          throw new esm_restError_RestError(msg, {
           code: errCode,
           statusCode: operationResponse.status,
           request: operationResponse.request,
           response: operationResponse
          });
         }
        }
        return operationResponse;
       }(jsonContentTypes, xmlContentTypes, response, options, parseXML);
       if (!function(parsedResponse) {
        const request = parsedResponse.request, operationInfo = getOperationRequestInfo(request), shouldDeserialize = null == operationInfo ? void 0 : operationInfo.shouldDeserialize;
        let result;
        result = void 0 === shouldDeserialize || ("boolean" == typeof shouldDeserialize ? shouldDeserialize : shouldDeserialize(parsedResponse));
        return result;
       }(parsedResponse)) return parsedResponse;
       const operationInfo = getOperationRequestInfo(parsedResponse.request), operationSpec = null == operationInfo ? void 0 : operationInfo.operationSpec;
       if (!operationSpec || !operationSpec.responses) return parsedResponse;
       const responseSpec = function(parsedResponse) {
        let result;
        const request = parsedResponse.request, operationInfo = getOperationRequestInfo(request), operationSpec = null == operationInfo ? void 0 : operationInfo.operationSpec;
        operationSpec && (result = (null == operationInfo ? void 0 : operationInfo.operationResponseGetter) ? null == operationInfo ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse) : operationSpec.responses[parsedResponse.status]);
        return result;
       }(parsedResponse), {error, shouldReturnResponse} = function(parsedResponse, operationSpec, responseSpec, options) {
        var _a, _b, _c, _d, _e;
        const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300, isExpectedStatusCode = function(operationSpec) {
         const expectedStatusCodes = Object.keys(operationSpec.responses);
         return 0 === expectedStatusCodes.length || 1 === expectedStatusCodes.length && "default" === expectedStatusCodes[0];
        }(operationSpec) ? isSuccessByStatus : !!responseSpec;
        if (isExpectedStatusCode) {
         if (!responseSpec) return {
          error: null,
          shouldReturnResponse: !1
         };
         if (!responseSpec.isError) return {
          error: null,
          shouldReturnResponse: !1
         };
        }
        const errorResponseSpec = null != responseSpec ? responseSpec : operationSpec.responses.default, initialErrorMessage = (null === (_a = parsedResponse.request.streamResponseStatusCodes) || void 0 === _a ? void 0 : _a.has(parsedResponse.status)) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText, error = new esm_restError_RestError(initialErrorMessage, {
         statusCode: parsedResponse.status,
         request: parsedResponse.request,
         response: parsedResponse
        });
        if (!(errorResponseSpec || (null === (_c = null === (_b = parsedResponse.parsedBody) || void 0 === _b ? void 0 : _b.error) || void 0 === _c ? void 0 : _c.code) && (null === (_e = null === (_d = parsedResponse.parsedBody) || void 0 === _d ? void 0 : _d.error) || void 0 === _e ? void 0 : _e.message))) throw error;
        const defaultBodyMapper = null == errorResponseSpec ? void 0 : errorResponseSpec.bodyMapper, defaultHeadersMapper = null == errorResponseSpec ? void 0 : errorResponseSpec.headersMapper;
        try {
         if (parsedResponse.parsedBody) {
          const parsedBody = parsedResponse.parsedBody;
          let deserializedError;
          if (defaultBodyMapper) {
           let valueToDeserialize = parsedBody;
           if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames_Sequence) {
            valueToDeserialize = [];
            const elementName = defaultBodyMapper.xmlElementName;
            "object" == typeof parsedBody && elementName && (valueToDeserialize = parsedBody[elementName]);
           }
           deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody", options);
          }
          const internalError = parsedBody.error || deserializedError || parsedBody;
          error.code = internalError.code, internalError.message && (error.message = internalError.message), 
          defaultBodyMapper && (error.response.parsedBody = deserializedError);
         }
         parsedResponse.headers && defaultHeadersMapper && (error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders"));
        } catch (defaultError) {
         error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody - "${parsedResponse.bodyAsText}" for the default response.`;
        }
        return {
         error,
         shouldReturnResponse: !1
        };
       }(parsedResponse, operationSpec, responseSpec, options);
       if (error) throw error;
       if (shouldReturnResponse) return parsedResponse;
       if (responseSpec) {
        if (responseSpec.bodyMapper) {
         let valueToDeserialize = parsedResponse.parsedBody;
         operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames_Sequence && (valueToDeserialize = "object" == typeof valueToDeserialize ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : []);
         try {
          parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
         } catch (deserializeError) {
          throw new esm_restError_RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {
           statusCode: parsedResponse.status,
           request: parsedResponse.request,
           response: parsedResponse
          });
         }
        } else "HEAD" === operationSpec.httpMethod && (parsedResponse.parsedBody = response.status >= 200 && response.status < 300);
        responseSpec.headersMapper && (parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders", {
         xml: {},
         ignoreUnknownProperties: !0
        }));
       }
       return parsedResponse;
      }(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);
     }
    };
   }
   function getPathStringFromParameter(parameter) {
    const {parameterPath, mapper} = parameter;
    let result;
    return result = "string" == typeof parameterPath ? parameterPath : Array.isArray(parameterPath) ? parameterPath.join(".") : mapper.serializedName, 
    result;
   }
   function serializationPolicy(options = {}) {
    const stringifyXML = options.stringifyXML;
    return {
     name: "serializationPolicy",
     async sendRequest(request, next) {
      const operationInfo = getOperationRequestInfo(request), operationSpec = null == operationInfo ? void 0 : operationInfo.operationSpec, operationArguments = null == operationInfo ? void 0 : operationInfo.operationArguments;
      return operationSpec && operationArguments && (function(request, operationArguments, operationSpec) {
       var _a, _b;
       if (operationSpec.headerParameters) for (const headerParameter of operationSpec.headerParameters) {
        let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);
        if (null != headerValue || headerParameter.mapper.required) {
         headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));
         const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;
         if (headerCollectionPrefix) for (const key of Object.keys(headerValue)) request.headers.set(headerCollectionPrefix + key, headerValue[key]); else request.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);
        }
       }
       const customHeaders = null === (_b = null === (_a = operationArguments.options) || void 0 === _a ? void 0 : _a.requestOptions) || void 0 === _b ? void 0 : _b.customHeaders;
       if (customHeaders) for (const customHeaderName of Object.keys(customHeaders)) request.headers.set(customHeaderName, customHeaders[customHeaderName]);
      }(request, operationArguments, operationSpec), function(request, operationArguments, operationSpec, stringifyXML = function() {
       throw new Error("XML serialization unsupported!");
      }) {
       var _a, _b, _c, _d, _e;
       const serializerOptions = null === (_a = operationArguments.options) || void 0 === _a ? void 0 : _a.serializerOptions, updatedOptions = {
        xml: {
         rootName: null !== (_b = null == serializerOptions ? void 0 : serializerOptions.xml.rootName) && void 0 !== _b ? _b : "",
         includeRoot: null !== (_c = null == serializerOptions ? void 0 : serializerOptions.xml.includeRoot) && void 0 !== _c && _c,
         xmlCharKey: null !== (_d = null == serializerOptions ? void 0 : serializerOptions.xml.xmlCharKey) && void 0 !== _d ? _d : "_"
        }
       }, xmlCharKey = updatedOptions.xml.xmlCharKey;
       if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
        request.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);
        const bodyMapper = operationSpec.requestBody.mapper, {required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable} = bodyMapper, typeName = bodyMapper.type.name;
        try {
         if (void 0 !== request.body && null !== request.body || nullable && null === request.body || required) {
          const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);
          request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);
          const isStream = typeName === MapperTypeNames_Stream;
          if (operationSpec.isXML) {
           const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : "xmlns", value = function(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
            if (xmlNamespace && ![ "Composite", "Sequence", "Dictionary" ].includes(typeName)) {
             const result = {};
             return result[options.xml.xmlCharKey] = serializedValue, result[XML_ATTRKEY] = {
              [xmlnsKey]: xmlNamespace
             }, result;
            }
            return serializedValue;
           }(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);
           typeName === MapperTypeNames_Sequence ? request.body = stringifyXML(function(obj, elementName, xmlNamespaceKey, xmlNamespace) {
            Array.isArray(obj) || (obj = [ obj ]);
            if (!xmlNamespaceKey || !xmlNamespace) return {
             [elementName]: obj
            };
            const result = {
             [elementName]: obj
            };
            return result[XML_ATTRKEY] = {
             [xmlNamespaceKey]: xmlNamespace
            }, result;
           }(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {
            rootName: xmlName || serializedName,
            xmlCharKey
           }) : isStream || (request.body = stringifyXML(value, {
            rootName: xmlName || serializedName,
            xmlCharKey
           }));
          } else {
           if (typeName === MapperTypeNames_String && ((null === (_e = operationSpec.contentType) || void 0 === _e ? void 0 : _e.match("text/plain")) || "text" === operationSpec.mediaType)) return;
           isStream || (request.body = JSON.stringify(request.body));
          }
         }
        } catch (error) {
         throw new Error(`Error "${error.message}" occurred in serializing the payload - ${JSON.stringify(serializedName, void 0, "  ")}.`);
        }
       } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
        request.formData = {};
        for (const formDataParameter of operationSpec.formDataParameters) {
         const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);
         if (null != formDataParameterValue) {
          const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);
          request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);
         }
        }
       }
      }(request, operationArguments, operationSpec, stringifyXML)), next(request);
     }
    };
   }
   function createClientPipeline(options = {}) {
    const pipeline = esm_createPipelineFromOptions_createPipelineFromOptions(null != options ? options : {});
    return options.credentialOptions && pipeline.addPolicy(bearerTokenAuthenticationPolicy({
     credential: options.credentialOptions.credential,
     scopes: options.credentialOptions.credentialScopes
    })), pipeline.addPolicy(serializationPolicy(options.serializationOptions), {
     phase: "Serialize"
    }), pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {
     phase: "Deserialize"
    }), pipeline;
   }
   let httpClientCache_cachedHttpClient;
   const CollectionFormatToDelimiterMap = {
    CSV: ",",
    SSV: " ",
    Multi: "Multi",
    TSV: "\t",
    Pipes: "|"
   };
   function getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {
    const urlReplacements = function(operationSpec, operationArguments, fallbackObject) {
     var _a;
     const result = new Map;
     if (null === (_a = operationSpec.urlParameters) || void 0 === _a ? void 0 : _a.length) for (const urlParameter of operationSpec.urlParameters) {
      let urlParameterValue = getOperationArgumentValueFromParameter(operationArguments, urlParameter, fallbackObject);
      const parameterPathString = getPathStringFromParameter(urlParameter);
      urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString), 
      urlParameter.skipEncoding || (urlParameterValue = encodeURIComponent(urlParameterValue)), 
      result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);
     }
     return result;
    }(operationSpec, operationArguments, fallbackObject);
    let isAbsolutePath = !1, requestUrl = replaceAll(baseUri, urlReplacements);
    if (operationSpec.path) {
     let path = replaceAll(operationSpec.path, urlReplacements);
     "/{nextLink}" === operationSpec.path && path.startsWith("/") && (path = path.substring(1)), 
     !function(url) {
      return url.includes("://");
     }(path) ? requestUrl = function(url, pathToAppend) {
      if (!pathToAppend) return url;
      const parsedUrl = new URL(url);
      let newPath = parsedUrl.pathname;
      newPath.endsWith("/") || (newPath = `${newPath}/`);
      pathToAppend.startsWith("/") && (pathToAppend = pathToAppend.substring(1));
      const searchStart = pathToAppend.indexOf("?");
      if (-1 !== searchStart) {
       const path = pathToAppend.substring(0, searchStart), search = pathToAppend.substring(searchStart + 1);
       newPath += path, search && (parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search);
      } else newPath += pathToAppend;
      return parsedUrl.pathname = newPath, parsedUrl.toString();
     }(requestUrl, path) : (requestUrl = path, isAbsolutePath = !0);
    }
    const {queryParams, sequenceParams} = function(operationSpec, operationArguments, fallbackObject) {
     var _a;
     const result = new Map, sequenceParams = new Set;
     if (null === (_a = operationSpec.queryParameters) || void 0 === _a ? void 0 : _a.length) for (const queryParameter of operationSpec.queryParameters) {
      "Sequence" === queryParameter.mapper.type.name && queryParameter.mapper.serializedName && sequenceParams.add(queryParameter.mapper.serializedName);
      let queryParameterValue = getOperationArgumentValueFromParameter(operationArguments, queryParameter, fallbackObject);
      if (null != queryParameterValue || queryParameter.mapper.required) {
       queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));
       const delimiter = queryParameter.collectionFormat ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat] : "";
       if (Array.isArray(queryParameterValue) && (queryParameterValue = queryParameterValue.map((item => null == item ? "" : item))), 
       "Multi" === queryParameter.collectionFormat && 0 === queryParameterValue.length) continue;
       !Array.isArray(queryParameterValue) || "SSV" !== queryParameter.collectionFormat && "TSV" !== queryParameter.collectionFormat || (queryParameterValue = queryParameterValue.join(delimiter)), 
       queryParameter.skipEncoding || (queryParameterValue = Array.isArray(queryParameterValue) ? queryParameterValue.map((item => encodeURIComponent(item))) : encodeURIComponent(queryParameterValue)), 
       !Array.isArray(queryParameterValue) || "CSV" !== queryParameter.collectionFormat && "Pipes" !== queryParameter.collectionFormat || (queryParameterValue = queryParameterValue.join(delimiter)), 
       result.set(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);
      }
     }
     return {
      queryParams: result,
      sequenceParams
     };
    }(operationSpec, operationArguments, fallbackObject);
    return requestUrl = function(url, queryParams, sequenceParams, noOverwrite = !1) {
     if (0 === queryParams.size) return url;
     const parsedUrl = new URL(url), combinedParams = function(queryString) {
      const result = new Map;
      if (!queryString || "?" !== queryString[0]) return result;
      const pairs = (queryString = queryString.slice(1)).split("&");
      for (const pair of pairs) {
       const [name, value] = pair.split("=", 2), existingValue = result.get(name);
       existingValue ? Array.isArray(existingValue) ? existingValue.push(value) : result.set(name, [ existingValue, value ]) : result.set(name, value);
      }
      return result;
     }(parsedUrl.search);
     for (const [name, value] of queryParams) {
      const existingValue = combinedParams.get(name);
      if (Array.isArray(existingValue)) if (Array.isArray(value)) {
       existingValue.push(...value);
       const valueSet = new Set(existingValue);
       combinedParams.set(name, Array.from(valueSet));
      } else existingValue.push(value); else existingValue ? (Array.isArray(value) ? value.unshift(existingValue) : sequenceParams.has(name) && combinedParams.set(name, [ existingValue, value ]), 
      noOverwrite || combinedParams.set(name, value)) : combinedParams.set(name, value);
     }
     const searchPieces = [];
     for (const [name, value] of combinedParams) if ("string" == typeof value) searchPieces.push(`${name}=${value}`); else if (Array.isArray(value)) for (const subValue of value) searchPieces.push(`${name}=${subValue}`); else searchPieces.push(`${name}=${value}`);
     return parsedUrl.search = searchPieces.length ? `?${searchPieces.join("&")}` : "", 
     parsedUrl.toString();
    }(requestUrl, queryParams, sequenceParams, isAbsolutePath), requestUrl;
   }
   function replaceAll(input, replacements) {
    let result = input;
    for (const [searchValue, replaceValue] of replacements) result = result.split(searchValue).join(replaceValue);
    return result;
   }
   const dist_esm_log_logger = esm_createClientLogger("core-client");
   class ServiceClient {
    constructor(options = {}) {
     var _a, _b;
     if (this._requestContentType = options.requestContentType, this._endpoint = null !== (_a = options.endpoint) && void 0 !== _a ? _a : options.baseUri, 
     options.baseUri && dist_esm_log_logger.warning("The baseUri option for SDK Clients has been deprecated, please use endpoint instead."), 
     this._allowInsecureConnection = options.allowInsecureConnection, this._httpClient = options.httpClient || (httpClientCache_cachedHttpClient || (httpClientCache_cachedHttpClient = esm_defaultHttpClient_createDefaultHttpClient()), 
     httpClientCache_cachedHttpClient), this.pipeline = options.pipeline || function(options) {
      const credentialScopes = function(options) {
       if (options.credentialScopes) return options.credentialScopes;
       if (options.endpoint) return `${options.endpoint}/.default`;
       if (options.baseUri) return `${options.baseUri}/.default`;
       if (options.credential && !options.credentialScopes) throw new Error("When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy");
       return;
      }(options), credentialOptions = options.credential && credentialScopes ? {
       credentialScopes,
       credential: options.credential
      } : void 0;
      return createClientPipeline(Object.assign(Object.assign({}, options), {
       credentialOptions
      }));
     }(options), null === (_b = options.additionalPolicies) || void 0 === _b ? void 0 : _b.length) for (const {policy, position} of options.additionalPolicies) {
      const afterPhase = "perRetry" === position ? "Sign" : void 0;
      this.pipeline.addPolicy(policy, {
       afterPhase
      });
     }
    }
    async sendRequest(request) {
     return this.pipeline.sendRequest(this._httpClient, request);
    }
    async sendOperationRequest(operationArguments, operationSpec) {
     const endpoint = operationSpec.baseUrl || this._endpoint;
     if (!endpoint) throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.");
     const request = esm_pipelineRequest_createPipelineRequest({
      url: getRequestUrl(endpoint, operationSpec, operationArguments, this)
     });
     request.method = operationSpec.httpMethod;
     const operationInfo = getOperationRequestInfo(request);
     operationInfo.operationSpec = operationSpec, operationInfo.operationArguments = operationArguments;
     const contentType = operationSpec.contentType || this._requestContentType;
     contentType && operationSpec.requestBody && request.headers.set("Content-Type", contentType);
     const options = operationArguments.options;
     if (options) {
      const requestOptions = options.requestOptions;
      requestOptions && (requestOptions.timeout && (request.timeout = requestOptions.timeout), 
      requestOptions.onUploadProgress && (request.onUploadProgress = requestOptions.onUploadProgress), 
      requestOptions.onDownloadProgress && (request.onDownloadProgress = requestOptions.onDownloadProgress), 
      void 0 !== requestOptions.shouldDeserialize && (operationInfo.shouldDeserialize = requestOptions.shouldDeserialize), 
      requestOptions.allowInsecureConnection && (request.allowInsecureConnection = !0)), 
      options.abortSignal && (request.abortSignal = options.abortSignal), options.tracingOptions && (request.tracingOptions = options.tracingOptions);
     }
     this._allowInsecureConnection && (request.allowInsecureConnection = !0), void 0 === request.streamResponseStatusCodes && (request.streamResponseStatusCodes = function(operationSpec) {
      const result = new Set;
      for (const statusCode in operationSpec.responses) {
       const operationResponse = operationSpec.responses[statusCode];
       operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperTypeNames_Stream && result.add(Number(statusCode));
      }
      return result;
     }(operationSpec));
     try {
      const rawResponse = await this.sendRequest(request), flatResponse = flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]);
      return (null == options ? void 0 : options.onResponse) && options.onResponse(rawResponse, flatResponse), 
      flatResponse;
     } catch (error) {
      if ("object" == typeof error && (null == error ? void 0 : error.response)) {
       const rawResponse = error.response, flatResponse = flattenResponse(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses.default);
       error.details = flatResponse, (null == options ? void 0 : options.onResponse) && options.onResponse(rawResponse, flatResponse, error);
      }
      throw error;
     }
    }
   }
   const Constants_DefaultScope = "/.default", Constants_HeaderConstants = {
    AUTHORIZATION: "authorization"
   };
   const authorizeRequestOnTenantChallenge = async challengeOptions => {
    var _a;
    const requestOptions = {
     abortSignal: (request = challengeOptions.request).abortSignal,
     requestOptions: {
      timeout: request.timeout
     },
     tracingOptions: request.tracingOptions
    };
    var request;
    const challenge = function(response) {
     const challenge = response.headers.get("WWW-Authenticate");
     if (401 === response.status && challenge) return challenge;
     return;
    }(challengeOptions.response);
    if (challenge) {
     const challengeInfo = function(challenge) {
      const bearerChallenge = challenge.slice(7), challengeParts = `${bearerChallenge.trim()} `.split(" ").filter((x => x));
      return challengeParts.map((keyValue => (([key, value]) => ({
       [key]: value
      }))(keyValue.trim().split("=")))).reduce(((a, b) => Object.assign(Object.assign({}, a), b)), {});
     }(challenge), challengeScopes = function(challengeOptions, challengeInfo) {
      if (!challengeInfo.resource_id) return challengeOptions.scopes;
      const challengeScopes = new URL(challengeInfo.resource_id);
      challengeScopes.pathname = Constants_DefaultScope;
      let scope = challengeScopes.toString();
      "https://disk.azure.com/.default" === scope && (scope = "https://disk.azure.com//.default");
      return [ scope ];
     }(challengeOptions, challengeInfo), tenantId = function(challengeInfo) {
      const parsedAuthUri = new URL(challengeInfo.authorization_uri), tenantId = parsedAuthUri.pathname.split("/")[1];
      if (tenantId && (text = tenantId, /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/.test(text))) return tenantId;
      var text;
      return;
     }(challengeInfo);
     if (!tenantId) return !1;
     const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), {
      tenantId
     }));
     return !!accessToken && (challengeOptions.request.headers.set(Constants_HeaderConstants.AUTHORIZATION, `${null !== (_a = accessToken.tokenType) && void 0 !== _a ? _a : "Bearer"} ${accessToken.token}`), 
     !0);
    }
    return !1;
   };
   const util_originalRequestSymbol = Symbol("Original PipelineRequest"), originalClientRequestSymbol = Symbol.for("@azure/core-client original request");
   function toPipelineRequest(webResource, options = {}) {
    const request = webResource[util_originalRequestSymbol], headers = esm_httpHeaders_createHttpHeaders(webResource.headers.toJson({
     preserveCase: !0
    }));
    if (request) return request.headers = headers, request;
    {
     const newRequest = esm_pipelineRequest_createPipelineRequest({
      url: webResource.url,
      method: webResource.method,
      headers,
      withCredentials: webResource.withCredentials,
      timeout: webResource.timeout,
      requestId: webResource.requestId,
      abortSignal: webResource.abortSignal,
      body: webResource.body,
      formData: webResource.formData,
      disableKeepAlive: !!webResource.keepAlive,
      onDownloadProgress: webResource.onDownloadProgress,
      onUploadProgress: webResource.onUploadProgress,
      proxySettings: webResource.proxySettings,
      streamResponseStatusCodes: webResource.streamResponseStatusCodes,
      agent: webResource.agent,
      requestOverrides: webResource.requestOverrides
     });
     return options.originalRequest && (newRequest[originalClientRequestSymbol] = options.originalRequest), 
     newRequest;
    }
   }
   function toWebResourceLike(request, options) {
    var _a;
    const originalRequest = null !== (_a = null == options ? void 0 : options.originalRequest) && void 0 !== _a ? _a : request, webResource = {
     url: request.url,
     method: request.method,
     headers: toHttpHeadersLike(request.headers),
     withCredentials: request.withCredentials,
     timeout: request.timeout,
     requestId: request.headers.get("x-ms-client-request-id") || request.requestId,
     abortSignal: request.abortSignal,
     body: request.body,
     formData: request.formData,
     keepAlive: !!request.disableKeepAlive,
     onDownloadProgress: request.onDownloadProgress,
     onUploadProgress: request.onUploadProgress,
     proxySettings: request.proxySettings,
     streamResponseStatusCodes: request.streamResponseStatusCodes,
     agent: request.agent,
     requestOverrides: request.requestOverrides,
     clone() {
      throw new Error("Cannot clone a non-proxied WebResourceLike");
     },
     prepare() {
      throw new Error("WebResourceLike.prepare() is not supported by @azure/core-http-compat");
     },
     validateRequestProperties() {}
    };
    return (null == options ? void 0 : options.createProxy) ? new Proxy(webResource, {
     get: (target, prop, receiver) => prop === util_originalRequestSymbol ? request : "clone" === prop ? () => toWebResourceLike(toPipelineRequest(webResource, {
      originalRequest
     }), {
      createProxy: !0,
      originalRequest
     }) : Reflect.get(target, prop, receiver),
     set(target, prop, value, receiver) {
      "keepAlive" === prop && (request.disableKeepAlive = !value);
      return "string" == typeof prop && [ "url", "method", "withCredentials", "timeout", "requestId", "abortSignal", "body", "formData", "onDownloadProgress", "onUploadProgress", "proxySettings", "streamResponseStatusCodes", "agent", "requestOverrides" ].includes(prop) && (request[prop] = value), 
      Reflect.set(target, prop, value, receiver);
     }
    }) : webResource;
   }
   function toHttpHeadersLike(headers) {
    return new HttpHeaders(headers.toJSON({
     preserveCase: !0
    }));
   }
   function getHeaderKey(headerName) {
    return headerName.toLowerCase();
   }
   class HttpHeaders {
    constructor(rawHeaders) {
     if (this._headersMap = {}, rawHeaders) for (const headerName in rawHeaders) this.set(headerName, rawHeaders[headerName]);
    }
    set(headerName, headerValue) {
     this._headersMap[getHeaderKey(headerName)] = {
      name: headerName,
      value: headerValue.toString()
     };
    }
    get(headerName) {
     const header = this._headersMap[getHeaderKey(headerName)];
     return header ? header.value : void 0;
    }
    contains(headerName) {
     return !!this._headersMap[getHeaderKey(headerName)];
    }
    remove(headerName) {
     const result = this.contains(headerName);
     return delete this._headersMap[getHeaderKey(headerName)], result;
    }
    rawHeaders() {
     return this.toJson({
      preserveCase: !0
     });
    }
    headersArray() {
     const headers = [];
     for (const headerKey in this._headersMap) headers.push(this._headersMap[headerKey]);
     return headers;
    }
    headerNames() {
     const headerNames = [], headers = this.headersArray();
     for (let i = 0; i < headers.length; ++i) headerNames.push(headers[i].name);
     return headerNames;
    }
    headerValues() {
     const headerValues = [], headers = this.headersArray();
     for (let i = 0; i < headers.length; ++i) headerValues.push(headers[i].value);
     return headerValues;
    }
    toJson(options = {}) {
     const result = {};
     if (options.preserveCase) for (const headerKey in this._headersMap) {
      const header = this._headersMap[headerKey];
      result[header.name] = header.value;
     } else for (const headerKey in this._headersMap) {
      const header = this._headersMap[headerKey];
      result[getHeaderKey(header.name)] = header.value;
     }
     return result;
    }
    toString() {
     return JSON.stringify(this.toJson({
      preserveCase: !0
     }));
    }
    clone() {
     const resultPreservingCasing = {};
     for (const headerKey in this._headersMap) {
      const header = this._headersMap[headerKey];
      resultPreservingCasing[header.name] = header.value;
     }
     return new HttpHeaders(resultPreservingCasing);
    }
   }
   const originalResponse = Symbol("Original FullOperationResponse");
   function toCompatResponse(response, options) {
    let request = toWebResourceLike(response.request), headers = toHttpHeadersLike(response.headers);
    return (null == options ? void 0 : options.createProxy) ? new Proxy(response, {
     get: (target, prop, receiver) => "headers" === prop ? headers : "request" === prop ? request : prop === originalResponse ? response : Reflect.get(target, prop, receiver),
     set: (target, prop, value, receiver) => ("headers" === prop ? headers = value : "request" === prop && (request = value), 
     Reflect.set(target, prop, value, receiver))
    }) : Object.assign(Object.assign({}, response), {
     request,
     headers
    });
   }
   function response_toPipelineResponse(compatResponse) {
    const response = compatResponse[originalResponse], headers = esm_httpHeaders_createHttpHeaders(compatResponse.headers.toJson({
     preserveCase: !0
    }));
    return response ? (response.headers = headers, response) : Object.assign(Object.assign({}, compatResponse), {
     headers,
     request: toPipelineRequest(compatResponse.request)
    });
   }
   class ExtendedServiceClient extends ServiceClient {
    constructor(options) {
     var _a, _b;
     super(options), !1 !== (null === (_a = options.keepAliveOptions) || void 0 === _a ? void 0 : _a.enable) || this.pipeline.getOrderedPolicies().some((policy => "DisableKeepAlivePolicy" === policy.name)) || this.pipeline.addPolicy({
      name: "DisableKeepAlivePolicy",
      sendRequest: async (request, next) => (request.disableKeepAlive = !0, next(request))
     }), !1 === (null === (_b = options.redirectOptions) || void 0 === _b ? void 0 : _b.handleRedirects) && this.pipeline.removePolicy({
      name: "redirectPolicy"
     });
    }
    async sendOperationRequest(operationArguments, operationSpec) {
     var _a;
     const userProvidedCallBack = null === (_a = null == operationArguments ? void 0 : operationArguments.options) || void 0 === _a ? void 0 : _a.onResponse;
     let lastResponse;
     operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), {
      onResponse: function(rawResponse, flatResponse, error) {
       lastResponse = rawResponse, userProvidedCallBack && userProvidedCallBack(rawResponse, flatResponse, error);
      }
     });
     const result = await super.sendOperationRequest(operationArguments, operationSpec);
     return lastResponse && Object.defineProperty(result, "_response", {
      value: toCompatResponse(lastResponse)
     }), result;
    }
   }
   var HttpPipelineLogLevel;
   !function(HttpPipelineLogLevel) {
    HttpPipelineLogLevel[HttpPipelineLogLevel.ERROR = 1] = "ERROR", HttpPipelineLogLevel[HttpPipelineLogLevel.INFO = 3] = "INFO", 
    HttpPipelineLogLevel[HttpPipelineLogLevel.OFF = 0] = "OFF", HttpPipelineLogLevel[HttpPipelineLogLevel.WARNING = 2] = "WARNING";
   }(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));
   const mockRequestPolicyOptions = {
    log(_logLevel, _message) {},
    shouldLog: _logLevel => !1
   };
   function createRequestPolicyFactoryPolicy(factories) {
    const orderedFactories = factories.slice().reverse();
    return {
     name: "RequestPolicyFactoryPolicy",
     async sendRequest(request, next) {
      let httpPipeline = {
       sendRequest: async httpRequest => toCompatResponse(await next(toPipelineRequest(httpRequest)), {
        createProxy: !0
       })
      };
      for (const factory of orderedFactories) httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);
      const webResourceLike = toWebResourceLike(request, {
       createProxy: !0
      });
      return response_toPipelineResponse(await httpPipeline.sendRequest(webResourceLike));
     }
    };
   }
   function toXml(jArray, options) {
    let indentation = "";
    return options.format && options.indentBy.length > 0 && (indentation = "\n"), arrToStr(jArray, options, "", indentation);
   }
   function arrToStr(arr, options, jPath, indentation) {
    let xmlStr = "", isPreviousElementTag = !1;
    for (let i = 0; i < arr.length; i++) {
     const tagObj = arr[i], tagName = propName(tagObj);
     if (void 0 === tagName) continue;
     let newJPath = "";
     if (newJPath = 0 === jPath.length ? tagName : `${jPath}.${tagName}`, tagName === options.textNodeName) {
      let tagText = tagObj[tagName];
      isStopNode(newJPath, options) || (tagText = options.tagValueProcessor(tagName, tagText), 
      tagText = replaceEntitiesValue(tagText, options)), isPreviousElementTag && (xmlStr += indentation), 
      xmlStr += tagText, isPreviousElementTag = !1;
      continue;
     }
     if (tagName === options.cdataPropName) {
      isPreviousElementTag && (xmlStr += indentation), xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`, 
      isPreviousElementTag = !1;
      continue;
     }
     if (tagName === options.commentPropName) {
      xmlStr += indentation + `\x3c!--${tagObj[tagName][0][options.textNodeName]}--\x3e`, 
      isPreviousElementTag = !0;
      continue;
     }
     if ("?" === tagName[0]) {
      const attStr = attr_to_str(tagObj[":@"], options), tempInd = "?xml" === tagName ? "" : indentation;
      let piTextNodeName = tagObj[tagName][0][options.textNodeName];
      piTextNodeName = 0 !== piTextNodeName.length ? " " + piTextNodeName : "", xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`, 
      isPreviousElementTag = !0;
      continue;
     }
     let newIdentation = indentation;
     "" !== newIdentation && (newIdentation += options.indentBy);
     const tagStart = indentation + `<${tagName}${attr_to_str(tagObj[":@"], options)}`, tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
     -1 !== options.unpairedTags.indexOf(tagName) ? options.suppressUnpairedNode ? xmlStr += tagStart + ">" : xmlStr += tagStart + "/>" : tagValue && 0 !== tagValue.length || !options.suppressEmptyNode ? tagValue && tagValue.endsWith(">") ? xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>` : (xmlStr += tagStart + ">", 
     tagValue && "" !== indentation && (tagValue.includes("/>") || tagValue.includes("</")) ? xmlStr += indentation + options.indentBy + tagValue + indentation : xmlStr += tagValue, 
     xmlStr += `</${tagName}>`) : xmlStr += tagStart + "/>", isPreviousElementTag = !0;
    }
    return xmlStr;
   }
   function propName(obj) {
    const keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
     const key = keys[i];
     if (obj.hasOwnProperty(key) && ":@" !== key) return key;
    }
   }
   function attr_to_str(attrMap, options) {
    let attrStr = "";
    if (attrMap && !options.ignoreAttributes) for (let attr in attrMap) {
     if (!attrMap.hasOwnProperty(attr)) continue;
     let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
     attrVal = replaceEntitiesValue(attrVal, options), !0 === attrVal && options.suppressBooleanAttributes ? attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}` : attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
    }
    return attrStr;
   }
   function isStopNode(jPath, options) {
    let tagName = (jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1)).substr(jPath.lastIndexOf(".") + 1);
    for (let index in options.stopNodes) if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName) return !0;
    return !1;
   }
   function replaceEntitiesValue(textValue, options) {
    if (textValue && textValue.length > 0 && options.processEntities) for (let i = 0; i < options.entities.length; i++) {
     const entity = options.entities[i];
     textValue = textValue.replace(entity.regex, entity.val);
    }
    return textValue;
   }
   function getIgnoreAttributesFn(ignoreAttributes) {
    return "function" == typeof ignoreAttributes ? ignoreAttributes : Array.isArray(ignoreAttributes) ? attrName => {
     for (const pattern of ignoreAttributes) {
      if ("string" == typeof pattern && attrName === pattern) return !0;
      if (pattern instanceof RegExp && pattern.test(attrName)) return !0;
     }
    } : () => !1;
   }
   const defaultOptions = {
    attributeNamePrefix: "@_",
    attributesGroupName: !1,
    textNodeName: "#text",
    ignoreAttributes: !0,
    cdataPropName: !1,
    format: !1,
    indentBy: "  ",
    suppressEmptyNode: !1,
    suppressUnpairedNode: !0,
    suppressBooleanAttributes: !0,
    tagValueProcessor: function(key, a) {
     return a;
    },
    attributeValueProcessor: function(attrName, a) {
     return a;
    },
    preserveOrder: !1,
    commentPropName: !1,
    unpairedTags: [],
    entities: [ {
     regex: new RegExp("&", "g"),
     val: "&amp;"
    }, {
     regex: new RegExp(">", "g"),
     val: "&gt;"
    }, {
     regex: new RegExp("<", "g"),
     val: "&lt;"
    }, {
     regex: new RegExp("'", "g"),
     val: "&apos;"
    }, {
     regex: new RegExp('"', "g"),
     val: "&quot;"
    } ],
    processEntities: !0,
    stopNodes: [],
    oneListGroup: !1
   };
   function Builder(options) {
    this.options = Object.assign({}, defaultOptions, options), !0 === this.options.ignoreAttributes || this.options.attributesGroupName ? this.isAttribute = function() {
     return !1;
    } : (this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes), 
    this.attrPrefixLen = this.options.attributeNamePrefix.length, this.isAttribute = isAttribute), 
    this.processTextOrObjNode = processTextOrObjNode, this.options.format ? (this.indentate = indentate, 
    this.tagEndChar = ">\n", this.newLine = "\n") : (this.indentate = function() {
     return "";
    }, this.tagEndChar = ">", this.newLine = "");
   }
   function processTextOrObjNode(object, key, level, ajPath) {
    const result = this.j2x(object, level + 1, ajPath.concat(key));
    return void 0 !== object[this.options.textNodeName] && 1 === Object.keys(object).length ? this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level) : this.buildObjectNode(result.val, key, result.attrStr, level);
   }
   function indentate(level) {
    return this.options.indentBy.repeat(level);
   }
   function isAttribute(name) {
    return !(!name.startsWith(this.options.attributeNamePrefix) || name === this.options.textNodeName) && name.substr(this.attrPrefixLen);
   }
   Builder.prototype.build = function(jObj) {
    return this.options.preserveOrder ? toXml(jObj, this.options) : (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1 && (jObj = {
     [this.options.arrayNodeName]: jObj
    }), this.j2x(jObj, 0, []).val);
   }, Builder.prototype.j2x = function(jObj, level, ajPath) {
    let attrStr = "", val = "";
    const jPath = ajPath.join(".");
    for (let key in jObj) if (Object.prototype.hasOwnProperty.call(jObj, key)) if (void 0 === jObj[key]) this.isAttribute(key) && (val += ""); else if (null === jObj[key]) this.isAttribute(key) || key === this.options.cdataPropName ? val += "" : "?" === key[0] ? val += this.indentate(level) + "<" + key + "?" + this.tagEndChar : val += this.indentate(level) + "<" + key + "/" + this.tagEndChar; else if (jObj[key] instanceof Date) val += this.buildTextValNode(jObj[key], key, "", level); else if ("object" != typeof jObj[key]) {
     const attr = this.isAttribute(key);
     if (attr && !this.ignoreAttributesFn(attr, jPath)) attrStr += this.buildAttrPairStr(attr, "" + jObj[key]); else if (!attr) if (key === this.options.textNodeName) {
      let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
      val += this.replaceEntitiesValue(newval);
     } else val += this.buildTextValNode(jObj[key], key, "", level);
    } else if (Array.isArray(jObj[key])) {
     const arrLen = jObj[key].length;
     let listTagVal = "", listTagAttr = "";
     for (let j = 0; j < arrLen; j++) {
      const item = jObj[key][j];
      if (void 0 === item) ; else if (null === item) "?" === key[0] ? val += this.indentate(level) + "<" + key + "?" + this.tagEndChar : val += this.indentate(level) + "<" + key + "/" + this.tagEndChar; else if ("object" == typeof item) if (this.options.oneListGroup) {
       const result = this.j2x(item, level + 1, ajPath.concat(key));
       listTagVal += result.val, this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName) && (listTagAttr += result.attrStr);
      } else listTagVal += this.processTextOrObjNode(item, key, level, ajPath); else if (this.options.oneListGroup) {
       let textValue = this.options.tagValueProcessor(key, item);
       textValue = this.replaceEntitiesValue(textValue), listTagVal += textValue;
      } else listTagVal += this.buildTextValNode(item, key, "", level);
     }
     this.options.oneListGroup && (listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level)), 
     val += listTagVal;
    } else if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
     const Ks = Object.keys(jObj[key]), L = Ks.length;
     for (let j = 0; j < L; j++) attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
    } else val += this.processTextOrObjNode(jObj[key], key, level, ajPath);
    return {
     attrStr,
     val
    };
   }, Builder.prototype.buildAttrPairStr = function(attrName, val) {
    return val = this.options.attributeValueProcessor(attrName, "" + val), val = this.replaceEntitiesValue(val), 
    this.options.suppressBooleanAttributes && "true" === val ? " " + attrName : " " + attrName + '="' + val + '"';
   }, Builder.prototype.buildObjectNode = function(val, key, attrStr, level) {
    if ("" === val) return "?" === key[0] ? this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar : this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
    {
     let tagEndExp = "</" + key + this.tagEndChar, piClosingChar = "";
     return "?" === key[0] && (piClosingChar = "?", tagEndExp = ""), !attrStr && "" !== attrStr || -1 !== val.indexOf("<") ? !1 !== this.options.commentPropName && key === this.options.commentPropName && 0 === piClosingChar.length ? this.indentate(level) + `\x3c!--${val}--\x3e` + this.newLine : this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp : this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
    }
   }, Builder.prototype.closeTag = function(key) {
    let closeTag = "";
    return -1 !== this.options.unpairedTags.indexOf(key) ? this.options.suppressUnpairedNode || (closeTag = "/") : closeTag = this.options.suppressEmptyNode ? "/" : `></${key}`, 
    closeTag;
   }, Builder.prototype.buildTextValNode = function(val, key, attrStr, level) {
    if (!1 !== this.options.cdataPropName && key === this.options.cdataPropName) return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
    if (!1 !== this.options.commentPropName && key === this.options.commentPropName) return this.indentate(level) + `\x3c!--${val}--\x3e` + this.newLine;
    if ("?" === key[0]) return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
    {
     let textValue = this.options.tagValueProcessor(key, val);
     return textValue = this.replaceEntitiesValue(textValue), "" === textValue ? this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar : this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
    }
   }, Builder.prototype.replaceEntitiesValue = function(textValue) {
    if (textValue && textValue.length > 0 && this.options.processEntities) for (let i = 0; i < this.options.entities.length; i++) {
     const entity = this.options.entities[i];
     textValue = textValue.replace(entity.regex, entity.val);
    }
    return textValue;
   };
   const nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", regexName = new RegExp("^" + ("[" + nameStartChar + "][" + (nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040") + "]*") + "$");
   function getAllMatches(string, regex) {
    const matches = [];
    let match = regex.exec(string);
    for (;match; ) {
     const allmatches = [];
     allmatches.startIndex = regex.lastIndex - match[0].length;
     const len = match.length;
     for (let index = 0; index < len; index++) allmatches.push(match[index]);
     matches.push(allmatches), match = regex.exec(string);
    }
    return matches;
   }
   const isName = function(string) {
    const match = regexName.exec(string);
    return !(null == match);
   };
   const validator_defaultOptions = {
    allowBooleanAttributes: !1,
    unpairedTags: []
   };
   function validate(xmlData, options) {
    options = Object.assign({}, validator_defaultOptions, options);
    const tags = [];
    let tagFound = !1, reachedRoot = !1;
    "\ufeff" === xmlData[0] && (xmlData = xmlData.substr(1));
    for (let i = 0; i < xmlData.length; i++) if ("<" === xmlData[i] && "?" === xmlData[i + 1]) {
     if (i += 2, i = readPI(xmlData, i), i.err) return i;
    } else {
     if ("<" !== xmlData[i]) {
      if (isWhiteSpace(xmlData[i])) continue;
      return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
     }
     {
      let tagStartPos = i;
      if (i++, "!" === xmlData[i]) {
       i = readCommentAndCDATA(xmlData, i);
       continue;
      }
      {
       let closingTag = !1;
       "/" === xmlData[i] && (closingTag = !0, i++);
       let tagName = "";
       for (;i < xmlData.length && ">" !== xmlData[i] && " " !== xmlData[i] && "\t" !== xmlData[i] && "\n" !== xmlData[i] && "\r" !== xmlData[i]; i++) tagName += xmlData[i];
       if (tagName = tagName.trim(), "/" === tagName[tagName.length - 1] && (tagName = tagName.substring(0, tagName.length - 1), 
       i--), !isName(tagName)) {
        let msg;
        return msg = 0 === tagName.trim().length ? "Invalid space after '<'." : "Tag '" + tagName + "' is an invalid name.", 
        getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
       }
       const result = readAttributeStr(xmlData, i);
       if (!1 === result) return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
       let attrStr = result.value;
       if (i = result.index, "/" === attrStr[attrStr.length - 1]) {
        const attrStrStart = i - attrStr.length;
        attrStr = attrStr.substring(0, attrStr.length - 1);
        const isValid = validateAttributeString(attrStr, options);
        if (!0 !== isValid) return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
        tagFound = !0;
       } else if (closingTag) {
        if (!result.tagClosed) return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
        if (attrStr.trim().length > 0) return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
        if (0 === tags.length) return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
        {
         const otg = tags.pop();
         if (tagName !== otg.tagName) {
          let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
          return getErrorObject("InvalidTag", "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
         }
         0 == tags.length && (reachedRoot = !0);
        }
       } else {
        const isValid = validateAttributeString(attrStr, options);
        if (!0 !== isValid) return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
        if (!0 === reachedRoot) return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
        -1 !== options.unpairedTags.indexOf(tagName) || tags.push({
         tagName,
         tagStartPos
        }), tagFound = !0;
       }
       for (i++; i < xmlData.length; i++) if ("<" === xmlData[i]) {
        if ("!" === xmlData[i + 1]) {
         i++, i = readCommentAndCDATA(xmlData, i);
         continue;
        }
        if ("?" !== xmlData[i + 1]) break;
        if (i = readPI(xmlData, ++i), i.err) return i;
       } else if ("&" === xmlData[i]) {
        const afterAmp = validateAmpersand(xmlData, i);
        if (-1 == afterAmp) return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
        i = afterAmp;
       } else if (!0 === reachedRoot && !isWhiteSpace(xmlData[i])) return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
       "<" === xmlData[i] && i--;
      }
     }
    }
    return tagFound ? 1 == tags.length ? getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos)) : !(tags.length > 0) || getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t => t.tagName)), null, 4).replace(/\r?\n/g, "") + "' found.", {
     line: 1,
     col: 1
    }) : getErrorObject("InvalidXml", "Start tag expected.", 1);
   }
   function isWhiteSpace(char) {
    return " " === char || "\t" === char || "\n" === char || "\r" === char;
   }
   function readPI(xmlData, i) {
    const start = i;
    for (;i < xmlData.length; i++) if ("?" != xmlData[i] && " " != xmlData[i]) ; else {
     const tagname = xmlData.substr(start, i - start);
     if (i > 5 && "xml" === tagname) return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
     if ("?" == xmlData[i] && ">" == xmlData[i + 1]) {
      i++;
      break;
     }
    }
    return i;
   }
   function readCommentAndCDATA(xmlData, i) {
    if (xmlData.length > i + 5 && "-" === xmlData[i + 1] && "-" === xmlData[i + 2]) {
     for (i += 3; i < xmlData.length; i++) if ("-" === xmlData[i] && "-" === xmlData[i + 1] && ">" === xmlData[i + 2]) {
      i += 2;
      break;
     }
    } else if (xmlData.length > i + 8 && "D" === xmlData[i + 1] && "O" === xmlData[i + 2] && "C" === xmlData[i + 3] && "T" === xmlData[i + 4] && "Y" === xmlData[i + 5] && "P" === xmlData[i + 6] && "E" === xmlData[i + 7]) {
     let angleBracketsCount = 1;
     for (i += 8; i < xmlData.length; i++) if ("<" === xmlData[i]) angleBracketsCount++; else if (">" === xmlData[i] && (angleBracketsCount--, 
     0 === angleBracketsCount)) break;
    } else if (xmlData.length > i + 9 && "[" === xmlData[i + 1] && "C" === xmlData[i + 2] && "D" === xmlData[i + 3] && "A" === xmlData[i + 4] && "T" === xmlData[i + 5] && "A" === xmlData[i + 6] && "[" === xmlData[i + 7]) for (i += 8; i < xmlData.length; i++) if ("]" === xmlData[i] && "]" === xmlData[i + 1] && ">" === xmlData[i + 2]) {
     i += 2;
     break;
    }
    return i;
   }
   const doubleQuote = '"', singleQuote = "'";
   function readAttributeStr(xmlData, i) {
    let attrStr = "", startChar = "", tagClosed = !1;
    for (;i < xmlData.length; i++) {
     if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) "" === startChar ? startChar = xmlData[i] : startChar !== xmlData[i] || (startChar = ""); else if (">" === xmlData[i] && "" === startChar) {
      tagClosed = !0;
      break;
     }
     attrStr += xmlData[i];
    }
    return "" === startChar && {
     value: attrStr,
     index: i,
     tagClosed
    };
   }
   const validAttrStrRegxp = new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?", "g");
   function validateAttributeString(attrStr, options) {
    const matches = getAllMatches(attrStr, validAttrStrRegxp), attrNames = {};
    for (let i = 0; i < matches.length; i++) {
     if (0 === matches[i][1].length) return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
     if (void 0 !== matches[i][3] && void 0 === matches[i][4]) return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
     if (void 0 === matches[i][3] && !options.allowBooleanAttributes) return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
     const attrName = matches[i][2];
     if (!validateAttrName(attrName)) return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
     if (attrNames.hasOwnProperty(attrName)) return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
     attrNames[attrName] = 1;
    }
    return !0;
   }
   function validateAmpersand(xmlData, i) {
    if (";" === xmlData[++i]) return -1;
    if ("#" === xmlData[i]) return function(xmlData, i) {
     let re = /\d/;
     for ("x" === xmlData[i] && (i++, re = /[\da-fA-F]/); i < xmlData.length; i++) {
      if (";" === xmlData[i]) return i;
      if (!xmlData[i].match(re)) break;
     }
     return -1;
    }(xmlData, ++i);
    let count = 0;
    for (;i < xmlData.length; i++, count++) if (!(xmlData[i].match(/\w/) && count < 20)) {
     if (";" === xmlData[i]) break;
     return -1;
    }
    return i;
   }
   function getErrorObject(code, message, lineNumber) {
    return {
     err: {
      code,
      msg: message,
      line: lineNumber.line || lineNumber,
      col: lineNumber.col
     }
    };
   }
   function validateAttrName(attrName) {
    return isName(attrName);
   }
   function getLineNumberForPosition(xmlData, index) {
    const lines = xmlData.substring(0, index).split(/\r?\n/);
    return {
     line: lines.length,
     col: lines[lines.length - 1].length + 1
    };
   }
   function getPositionFromMatch(match) {
    return match.startIndex + match[1].length;
   }
   const XMLValidator = {
    validate
   }, OptionsBuilder_defaultOptions = {
    preserveOrder: !1,
    attributeNamePrefix: "@_",
    attributesGroupName: !1,
    textNodeName: "#text",
    ignoreAttributes: !0,
    removeNSPrefix: !1,
    allowBooleanAttributes: !1,
    parseTagValue: !0,
    parseAttributeValue: !1,
    trimValues: !0,
    cdataPropName: !1,
    numberParseOptions: {
     hex: !0,
     leadingZeros: !0,
     eNotation: !0
    },
    tagValueProcessor: function(tagName, val) {
     return val;
    },
    attributeValueProcessor: function(attrName, val) {
     return val;
    },
    stopNodes: [],
    alwaysCreateTextNode: !1,
    isArray: () => !1,
    commentPropName: !1,
    unpairedTags: [],
    processEntities: !0,
    htmlEntities: !1,
    ignoreDeclaration: !1,
    ignorePiTags: !1,
    transformTagName: !1,
    transformAttributeName: !1,
    updateTag: function(tagName, jPath, attrs) {
     return tagName;
    },
    captureMetaData: !1
   };
   let METADATA_SYMBOL;
   METADATA_SYMBOL = "function" != typeof Symbol ? "@@xmlMetadata" : Symbol("XML Node Metadata");
   class XmlNode {
    constructor(tagname) {
     this.tagname = tagname, this.child = [], this[":@"] = {};
    }
    add(key, val) {
     "__proto__" === key && (key = "#__proto__"), this.child.push({
      [key]: val
     });
    }
    addChild(node, startIndex) {
     "__proto__" === node.tagname && (node.tagname = "#__proto__"), node[":@"] && Object.keys(node[":@"]).length > 0 ? this.child.push({
      [node.tagname]: node.child,
      ":@": node[":@"]
     }) : this.child.push({
      [node.tagname]: node.child
     }), void 0 !== startIndex && (this.child[this.child.length - 1][METADATA_SYMBOL] = {
      startIndex
     });
    }
    static getMetaDataSymbol() {
     return METADATA_SYMBOL;
    }
   }
   function readDocType(xmlData, i) {
    const entities = {};
    if ("O" !== xmlData[i + 3] || "C" !== xmlData[i + 4] || "T" !== xmlData[i + 5] || "Y" !== xmlData[i + 6] || "P" !== xmlData[i + 7] || "E" !== xmlData[i + 8]) throw new Error("Invalid Tag instead of DOCTYPE");
    {
     i += 9;
     let angleBracketsCount = 1, hasBody = !1, comment = !1, exp = "";
     for (;i < xmlData.length; i++) if ("<" !== xmlData[i] || comment) if (">" === xmlData[i]) {
      if (comment ? "-" === xmlData[i - 1] && "-" === xmlData[i - 2] && (comment = !1, 
      angleBracketsCount--) : angleBracketsCount--, 0 === angleBracketsCount) break;
     } else "[" === xmlData[i] ? hasBody = !0 : exp += xmlData[i]; else {
      if (hasBody && isEntity(xmlData, i)) {
       let entityName, val;
       i += 7, [entityName, val, i] = readEntityExp(xmlData, i + 1), -1 === val.indexOf("&") && (entities[entityName] = {
        regx: RegExp(`&${entityName};`, "g"),
        val
       });
      } else if (hasBody && isElement(xmlData, i)) {
       i += 8;
       const {index} = readElementExp(xmlData, i + 1);
       i = index;
      } else if (hasBody && isAttlist(xmlData, i)) i += 8; else if (hasBody && isNotation(xmlData, i)) {
       i += 9;
       const {index} = readNotationExp(xmlData, i + 1);
       i = index;
      } else {
       if (!isComment) throw new Error("Invalid DOCTYPE");
       comment = !0;
      }
      angleBracketsCount++, exp = "";
     }
     if (0 !== angleBracketsCount) throw new Error("Unclosed DOCTYPE");
    }
    return {
     entities,
     i
    };
   }
   const skipWhitespace = (data, index) => {
    for (;index < data.length && /\s/.test(data[index]); ) index++;
    return index;
   };
   function readEntityExp(xmlData, i) {
    i = skipWhitespace(xmlData, i);
    let entityName = "";
    for (;i < xmlData.length && !/\s/.test(xmlData[i]) && '"' !== xmlData[i] && "'" !== xmlData[i]; ) entityName += xmlData[i], 
    i++;
    if (validateEntityName(entityName), i = skipWhitespace(xmlData, i), "SYSTEM" === xmlData.substring(i, i + 6).toUpperCase()) throw new Error("External entities are not supported");
    if ("%" === xmlData[i]) throw new Error("Parameter entities are not supported");
    let entityValue = "";
    return [i, entityValue] = readIdentifierVal(xmlData, i, "entity"), [ entityName, entityValue, --i ];
   }
   function readNotationExp(xmlData, i) {
    i = skipWhitespace(xmlData, i);
    let notationName = "";
    for (;i < xmlData.length && !/\s/.test(xmlData[i]); ) notationName += xmlData[i], 
    i++;
    validateEntityName(notationName), i = skipWhitespace(xmlData, i);
    const identifierType = xmlData.substring(i, i + 6).toUpperCase();
    if ("SYSTEM" !== identifierType && "PUBLIC" !== identifierType) throw new Error(`Expected SYSTEM or PUBLIC, found "${identifierType}"`);
    i += identifierType.length, i = skipWhitespace(xmlData, i);
    let publicIdentifier = null, systemIdentifier = null;
    if ("PUBLIC" === identifierType) [i, publicIdentifier] = readIdentifierVal(xmlData, i, "publicIdentifier"), 
    '"' !== xmlData[i = skipWhitespace(xmlData, i)] && "'" !== xmlData[i] || ([i, systemIdentifier] = readIdentifierVal(xmlData, i, "systemIdentifier")); else if ("SYSTEM" === identifierType && ([i, systemIdentifier] = readIdentifierVal(xmlData, i, "systemIdentifier"), 
    !systemIdentifier)) throw new Error("Missing mandatory system identifier for SYSTEM notation");
    return {
     notationName,
     publicIdentifier,
     systemIdentifier,
     index: --i
    };
   }
   function readIdentifierVal(xmlData, i, type) {
    let identifierVal = "";
    const startChar = xmlData[i];
    if ('"' !== startChar && "'" !== startChar) throw new Error(`Expected quoted string, found "${startChar}"`);
    for (i++; i < xmlData.length && xmlData[i] !== startChar; ) identifierVal += xmlData[i], 
    i++;
    if (xmlData[i] !== startChar) throw new Error(`Unterminated ${type} value`);
    return [ ++i, identifierVal ];
   }
   function readElementExp(xmlData, i) {
    i = skipWhitespace(xmlData, i);
    let elementName = "";
    for (;i < xmlData.length && !/\s/.test(xmlData[i]); ) elementName += xmlData[i], 
    i++;
    if (!validateEntityName(elementName)) throw new Error(`Invalid element name: "${elementName}"`);
    if ("(" !== xmlData[i = skipWhitespace(xmlData, i)]) throw new Error(`Expected '(', found "${xmlData[i]}"`);
    i++;
    let contentModel = "";
    for (;i < xmlData.length && ")" !== xmlData[i]; ) contentModel += xmlData[i], i++;
    if (")" !== xmlData[i]) throw new Error("Unterminated content model");
    return {
     elementName,
     contentModel: contentModel.trim(),
     index: i
    };
   }
   function isComment(xmlData, i) {
    return "!" === xmlData[i + 1] && "-" === xmlData[i + 2] && "-" === xmlData[i + 3];
   }
   function isEntity(xmlData, i) {
    return "!" === xmlData[i + 1] && "E" === xmlData[i + 2] && "N" === xmlData[i + 3] && "T" === xmlData[i + 4] && "I" === xmlData[i + 5] && "T" === xmlData[i + 6] && "Y" === xmlData[i + 7];
   }
   function isElement(xmlData, i) {
    return "!" === xmlData[i + 1] && "E" === xmlData[i + 2] && "L" === xmlData[i + 3] && "E" === xmlData[i + 4] && "M" === xmlData[i + 5] && "E" === xmlData[i + 6] && "N" === xmlData[i + 7] && "T" === xmlData[i + 8];
   }
   function isAttlist(xmlData, i) {
    return "!" === xmlData[i + 1] && "A" === xmlData[i + 2] && "T" === xmlData[i + 3] && "T" === xmlData[i + 4] && "L" === xmlData[i + 5] && "I" === xmlData[i + 6] && "S" === xmlData[i + 7] && "T" === xmlData[i + 8];
   }
   function isNotation(xmlData, i) {
    return "!" === xmlData[i + 1] && "N" === xmlData[i + 2] && "O" === xmlData[i + 3] && "T" === xmlData[i + 4] && "A" === xmlData[i + 5] && "T" === xmlData[i + 6] && "I" === xmlData[i + 7] && "O" === xmlData[i + 8] && "N" === xmlData[i + 9];
   }
   function validateEntityName(name) {
    if (isName(name)) return name;
    throw new Error(`Invalid entity name ${name}`);
   }
   const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/, numRegex = /^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/, consider = {
    hex: !0,
    leadingZeros: !0,
    decimalPoint: ".",
    eNotation: !0
   };
   function toNumber(str, options = {}) {
    if (options = Object.assign({}, consider, options), !str || "string" != typeof str) return str;
    let trimmedStr = str.trim();
    if (void 0 !== options.skipLike && options.skipLike.test(trimmedStr)) return str;
    if ("0" === str) return 0;
    if (options.hex && hexRegex.test(trimmedStr)) return function(numStr, base) {
     if (parseInt) return parseInt(numStr, base);
     if (Number.parseInt) return Number.parseInt(numStr, base);
     if (window && window.parseInt) return window.parseInt(numStr, base);
     throw new Error("parseInt, Number.parseInt, window.parseInt are not supported");
    }(trimmedStr, 16);
    if (-1 !== trimmedStr.search(/.+[eE].+/)) return function(str, trimmedStr, options) {
     if (!options.eNotation) return str;
     const notation = trimmedStr.match(eNotationRegx);
     if (notation) {
      let sign = notation[1] || "";
      const eChar = -1 === notation[3].indexOf("e") ? "E" : "e", leadingZeros = notation[2], eAdjacentToLeadingZeros = sign ? str[leadingZeros.length + 1] === eChar : str[leadingZeros.length] === eChar;
      return leadingZeros.length > 1 && eAdjacentToLeadingZeros ? str : 1 !== leadingZeros.length || !notation[3].startsWith(`.${eChar}`) && notation[3][0] !== eChar ? options.leadingZeros && !eAdjacentToLeadingZeros ? (trimmedStr = (notation[1] || "") + notation[3], 
      Number(trimmedStr)) : str : Number(trimmedStr);
     }
     return str;
    }(str, trimmedStr, options);
    {
     const match = numRegex.exec(trimmedStr);
     if (match) {
      const sign = match[1] || "", leadingZeros = match[2];
      let numTrimmedByZeros = function(numStr) {
       if (numStr && -1 !== numStr.indexOf(".")) return "." === (numStr = numStr.replace(/0+$/, "")) ? numStr = "0" : "." === numStr[0] ? numStr = "0" + numStr : "." === numStr[numStr.length - 1] && (numStr = numStr.substring(0, numStr.length - 1)), 
       numStr;
       return numStr;
      }(match[3]);
      const decimalAdjacentToLeadingZeros = sign ? "." === str[leadingZeros.length + 1] : "." === str[leadingZeros.length];
      if (!options.leadingZeros && (leadingZeros.length > 1 || 1 === leadingZeros.length && !decimalAdjacentToLeadingZeros)) return str;
      {
       const num = Number(trimmedStr), parsedStr = String(num);
       if (0 === num || -0 === num) return num;
       if (-1 !== parsedStr.search(/[eE]/)) return options.eNotation ? num : str;
       if (-1 !== trimmedStr.indexOf(".")) return "0" === parsedStr || parsedStr === numTrimmedByZeros || parsedStr === `${sign}${numTrimmedByZeros}` ? num : str;
       let n = leadingZeros ? numTrimmedByZeros : trimmedStr;
       return leadingZeros ? n === parsedStr || sign + n === parsedStr ? num : str : n === parsedStr || n === sign + parsedStr ? num : str;
      }
     }
     return str;
    }
   }
   const eNotationRegx = /^([-+])?(0*)(\d*(\.\d*)?[eE][-\+]?\d+)$/;
   class OrderedObjParser {
    constructor(options) {
     this.options = options, this.currentNode = null, this.tagsNodeStack = [], this.docTypeEntities = {}, 
     this.lastEntities = {
      apos: {
       regex: /&(apos|#39|#x27);/g,
       val: "'"
      },
      gt: {
       regex: /&(gt|#62|#x3E);/g,
       val: ">"
      },
      lt: {
       regex: /&(lt|#60|#x3C);/g,
       val: "<"
      },
      quot: {
       regex: /&(quot|#34|#x22);/g,
       val: '"'
      }
     }, this.ampEntity = {
      regex: /&(amp|#38|#x26);/g,
      val: "&"
     }, this.htmlEntities = {
      space: {
       regex: /&(nbsp|#160);/g,
       val: " "
      },
      cent: {
       regex: /&(cent|#162);/g,
       val: "¢"
      },
      pound: {
       regex: /&(pound|#163);/g,
       val: "£"
      },
      yen: {
       regex: /&(yen|#165);/g,
       val: "¥"
      },
      euro: {
       regex: /&(euro|#8364);/g,
       val: "€"
      },
      copyright: {
       regex: /&(copy|#169);/g,
       val: "©"
      },
      reg: {
       regex: /&(reg|#174);/g,
       val: "®"
      },
      inr: {
       regex: /&(inr|#8377);/g,
       val: "₹"
      },
      num_dec: {
       regex: /&#([0-9]{1,7});/g,
       val: (_, str) => String.fromCodePoint(Number.parseInt(str, 10))
      },
      num_hex: {
       regex: /&#x([0-9a-fA-F]{1,6});/g,
       val: (_, str) => String.fromCodePoint(Number.parseInt(str, 16))
      }
     }, this.addExternalEntities = addExternalEntities, this.parseXml = parseXml, this.parseTextData = parseTextData, 
     this.resolveNameSpace = resolveNameSpace, this.buildAttributesMap = buildAttributesMap, 
     this.isItStopNode = isItStopNode, this.replaceEntitiesValue = OrderedObjParser_replaceEntitiesValue, 
     this.readStopNodeData = readStopNodeData, this.saveTextToParentTag = saveTextToParentTag, 
     this.addChild = addChild, this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);
    }
   }
   function addExternalEntities(externalEntities) {
    const entKeys = Object.keys(externalEntities);
    for (let i = 0; i < entKeys.length; i++) {
     const ent = entKeys[i];
     this.lastEntities[ent] = {
      regex: new RegExp("&" + ent + ";", "g"),
      val: externalEntities[ent]
     };
    }
   }
   function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
    if (void 0 !== val && (this.options.trimValues && !dontTrim && (val = val.trim()), 
    val.length > 0)) {
     escapeEntities || (val = this.replaceEntitiesValue(val));
     const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
     if (null == newval) return val;
     if (typeof newval != typeof val || newval !== val) return newval;
     if (this.options.trimValues) return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
     return val.trim() === val ? parseValue(val, this.options.parseTagValue, this.options.numberParseOptions) : val;
    }
   }
   function resolveNameSpace(tagname) {
    if (this.options.removeNSPrefix) {
     const tags = tagname.split(":"), prefix = "/" === tagname.charAt(0) ? "/" : "";
     if ("xmlns" === tags[0]) return "";
     2 === tags.length && (tagname = prefix + tags[1]);
    }
    return tagname;
   }
   const attrsRegx = new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?", "gm");
   function buildAttributesMap(attrStr, jPath, tagName) {
    if (!0 !== this.options.ignoreAttributes && "string" == typeof attrStr) {
     const matches = getAllMatches(attrStr, attrsRegx), len = matches.length, attrs = {};
     for (let i = 0; i < len; i++) {
      const attrName = this.resolveNameSpace(matches[i][1]);
      if (this.ignoreAttributesFn(attrName, jPath)) continue;
      let oldVal = matches[i][4], aName = this.options.attributeNamePrefix + attrName;
      if (attrName.length) if (this.options.transformAttributeName && (aName = this.options.transformAttributeName(aName)), 
      "__proto__" === aName && (aName = "#__proto__"), void 0 !== oldVal) {
       this.options.trimValues && (oldVal = oldVal.trim()), oldVal = this.replaceEntitiesValue(oldVal);
       const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
       attrs[aName] = null == newVal ? oldVal : typeof newVal != typeof oldVal || newVal !== oldVal ? newVal : parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);
      } else this.options.allowBooleanAttributes && (attrs[aName] = !0);
     }
     if (!Object.keys(attrs).length) return;
     if (this.options.attributesGroupName) {
      const attrCollection = {};
      return attrCollection[this.options.attributesGroupName] = attrs, attrCollection;
     }
     return attrs;
    }
   }
   const parseXml = function(xmlData) {
    xmlData = xmlData.replace(/\r\n?/g, "\n");
    const xmlObj = new XmlNode("!xml");
    let currentNode = xmlObj, textData = "", jPath = "";
    for (let i = 0; i < xmlData.length; i++) {
     if ("<" === xmlData[i]) if ("/" === xmlData[i + 1]) {
      const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
      let tagName = xmlData.substring(i + 2, closeIndex).trim();
      if (this.options.removeNSPrefix) {
       const colonIndex = tagName.indexOf(":");
       -1 !== colonIndex && (tagName = tagName.substr(colonIndex + 1));
      }
      this.options.transformTagName && (tagName = this.options.transformTagName(tagName)), 
      currentNode && (textData = this.saveTextToParentTag(textData, currentNode, jPath));
      const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
      if (tagName && -1 !== this.options.unpairedTags.indexOf(tagName)) throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
      let propIndex = 0;
      lastTagName && -1 !== this.options.unpairedTags.indexOf(lastTagName) ? (propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1), 
      this.tagsNodeStack.pop()) : propIndex = jPath.lastIndexOf("."), jPath = jPath.substring(0, propIndex), 
      currentNode = this.tagsNodeStack.pop(), textData = "", i = closeIndex;
     } else if ("?" === xmlData[i + 1]) {
      let tagData = readTagExp(xmlData, i, !1, "?>");
      if (!tagData) throw new Error("Pi Tag is not closed.");
      if (textData = this.saveTextToParentTag(textData, currentNode, jPath), this.options.ignoreDeclaration && "?xml" === tagData.tagName || this.options.ignorePiTags) ; else {
       const childNode = new XmlNode(tagData.tagName);
       childNode.add(this.options.textNodeName, ""), tagData.tagName !== tagData.tagExp && tagData.attrExpPresent && (childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName)), 
       this.addChild(currentNode, childNode, jPath, i);
      }
      i = tagData.closeIndex + 1;
     } else if ("!--" === xmlData.substr(i + 1, 3)) {
      const endIndex = findClosingIndex(xmlData, "--\x3e", i + 4, "Comment is not closed.");
      if (this.options.commentPropName) {
       const comment = xmlData.substring(i + 4, endIndex - 2);
       textData = this.saveTextToParentTag(textData, currentNode, jPath), currentNode.add(this.options.commentPropName, [ {
        [this.options.textNodeName]: comment
       } ]);
      }
      i = endIndex;
     } else if ("!D" === xmlData.substr(i + 1, 2)) {
      const result = readDocType(xmlData, i);
      this.docTypeEntities = result.entities, i = result.i;
     } else if ("![" === xmlData.substr(i + 1, 2)) {
      const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2, tagExp = xmlData.substring(i + 9, closeIndex);
      textData = this.saveTextToParentTag(textData, currentNode, jPath);
      let val = this.parseTextData(tagExp, currentNode.tagname, jPath, !0, !1, !0, !0);
      null == val && (val = ""), this.options.cdataPropName ? currentNode.add(this.options.cdataPropName, [ {
       [this.options.textNodeName]: tagExp
      } ]) : currentNode.add(this.options.textNodeName, val), i = closeIndex + 2;
     } else {
      let result = readTagExp(xmlData, i, this.options.removeNSPrefix), tagName = result.tagName;
      const rawTagName = result.rawTagName;
      let tagExp = result.tagExp, attrExpPresent = result.attrExpPresent, closeIndex = result.closeIndex;
      this.options.transformTagName && (tagName = this.options.transformTagName(tagName)), 
      currentNode && textData && "!xml" !== currentNode.tagname && (textData = this.saveTextToParentTag(textData, currentNode, jPath, !1));
      const lastTag = currentNode;
      lastTag && -1 !== this.options.unpairedTags.indexOf(lastTag.tagname) && (currentNode = this.tagsNodeStack.pop(), 
      jPath = jPath.substring(0, jPath.lastIndexOf("."))), tagName !== xmlObj.tagname && (jPath += jPath ? "." + tagName : tagName);
      const startIndex = i;
      if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
       let tagContent = "";
       if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) "/" === tagName[tagName.length - 1] ? (tagName = tagName.substr(0, tagName.length - 1), 
       jPath = jPath.substr(0, jPath.length - 1), tagExp = tagName) : tagExp = tagExp.substr(0, tagExp.length - 1), 
       i = result.closeIndex; else if (-1 !== this.options.unpairedTags.indexOf(tagName)) i = result.closeIndex; else {
        const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
        if (!result) throw new Error(`Unexpected end of ${rawTagName}`);
        i = result.i, tagContent = result.tagContent;
       }
       const childNode = new XmlNode(tagName);
       tagName !== tagExp && attrExpPresent && (childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName)), 
       tagContent && (tagContent = this.parseTextData(tagContent, tagName, jPath, !0, attrExpPresent, !0, !0)), 
       jPath = jPath.substr(0, jPath.lastIndexOf(".")), childNode.add(this.options.textNodeName, tagContent), 
       this.addChild(currentNode, childNode, jPath, startIndex);
      } else {
       if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
        "/" === tagName[tagName.length - 1] ? (tagName = tagName.substr(0, tagName.length - 1), 
        jPath = jPath.substr(0, jPath.length - 1), tagExp = tagName) : tagExp = tagExp.substr(0, tagExp.length - 1), 
        this.options.transformTagName && (tagName = this.options.transformTagName(tagName));
        const childNode = new XmlNode(tagName);
        tagName !== tagExp && attrExpPresent && (childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName)), 
        this.addChild(currentNode, childNode, jPath, startIndex), jPath = jPath.substr(0, jPath.lastIndexOf("."));
       } else {
        const childNode = new XmlNode(tagName);
        this.tagsNodeStack.push(currentNode), tagName !== tagExp && attrExpPresent && (childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName)), 
        this.addChild(currentNode, childNode, jPath, startIndex), currentNode = childNode;
       }
       textData = "", i = closeIndex;
      }
     } else textData += xmlData[i];
    }
    return xmlObj.child;
   };
   function addChild(currentNode, childNode, jPath, startIndex) {
    this.options.captureMetaData || (startIndex = void 0);
    const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
    !1 === result || ("string" == typeof result ? (childNode.tagname = result, currentNode.addChild(childNode, startIndex)) : currentNode.addChild(childNode, startIndex));
   }
   const OrderedObjParser_replaceEntitiesValue = function(val) {
    if (this.options.processEntities) {
     for (let entityName in this.docTypeEntities) {
      const entity = this.docTypeEntities[entityName];
      val = val.replace(entity.regx, entity.val);
     }
     for (let entityName in this.lastEntities) {
      const entity = this.lastEntities[entityName];
      val = val.replace(entity.regex, entity.val);
     }
     if (this.options.htmlEntities) for (let entityName in this.htmlEntities) {
      const entity = this.htmlEntities[entityName];
      val = val.replace(entity.regex, entity.val);
     }
     val = val.replace(this.ampEntity.regex, this.ampEntity.val);
    }
    return val;
   };
   function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
    return textData && (void 0 === isLeafNode && (isLeafNode = 0 === currentNode.child.length), 
    void 0 !== (textData = this.parseTextData(textData, currentNode.tagname, jPath, !1, !!currentNode[":@"] && 0 !== Object.keys(currentNode[":@"]).length, isLeafNode)) && "" !== textData && currentNode.add(this.options.textNodeName, textData), 
    textData = ""), textData;
   }
   function isItStopNode(stopNodes, jPath, currentTagName) {
    const allNodesExp = "*." + currentTagName;
    for (const stopNodePath in stopNodes) {
     const stopNodeExp = stopNodes[stopNodePath];
     if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return !0;
    }
    return !1;
   }
   function findClosingIndex(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (-1 === closingIndex) throw new Error(errMsg);
    return closingIndex + str.length - 1;
   }
   function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
    const result = function(xmlData, i, closingChar = ">") {
     let attrBoundary, tagExp = "";
     for (let index = i; index < xmlData.length; index++) {
      let ch = xmlData[index];
      if (attrBoundary) ch === attrBoundary && (attrBoundary = ""); else if ('"' === ch || "'" === ch) attrBoundary = ch; else if (ch === closingChar[0]) {
       if (!closingChar[1]) return {
        data: tagExp,
        index
       };
       if (xmlData[index + 1] === closingChar[1]) return {
        data: tagExp,
        index
       };
      } else "\t" === ch && (ch = " ");
      tagExp += ch;
     }
    }(xmlData, i + 1, closingChar);
    if (!result) return;
    let tagExp = result.data;
    const closeIndex = result.index, separatorIndex = tagExp.search(/\s/);
    let tagName = tagExp, attrExpPresent = !0;
    -1 !== separatorIndex && (tagName = tagExp.substring(0, separatorIndex), tagExp = tagExp.substring(separatorIndex + 1).trimStart());
    const rawTagName = tagName;
    if (removeNSPrefix) {
     const colonIndex = tagName.indexOf(":");
     -1 !== colonIndex && (tagName = tagName.substr(colonIndex + 1), attrExpPresent = tagName !== result.data.substr(colonIndex + 1));
    }
    return {
     tagName,
     tagExp,
     closeIndex,
     attrExpPresent,
     rawTagName
    };
   }
   function readStopNodeData(xmlData, tagName, i) {
    const startIndex = i;
    let openTagCount = 1;
    for (;i < xmlData.length; i++) if ("<" === xmlData[i]) if ("/" === xmlData[i + 1]) {
     const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
     if (xmlData.substring(i + 2, closeIndex).trim() === tagName && (openTagCount--, 
     0 === openTagCount)) return {
      tagContent: xmlData.substring(startIndex, i),
      i: closeIndex
     };
     i = closeIndex;
    } else if ("?" === xmlData[i + 1]) {
     i = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
    } else if ("!--" === xmlData.substr(i + 1, 3)) {
     i = findClosingIndex(xmlData, "--\x3e", i + 3, "StopNode is not closed.");
    } else if ("![" === xmlData.substr(i + 1, 2)) {
     i = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
    } else {
     const tagData = readTagExp(xmlData, i, ">");
     if (tagData) {
      (tagData && tagData.tagName) === tagName && "/" !== tagData.tagExp[tagData.tagExp.length - 1] && openTagCount++, 
      i = tagData.closeIndex;
     }
    }
   }
   function parseValue(val, shouldParse, options) {
    if (shouldParse && "string" == typeof val) {
     const newval = val.trim();
     return "true" === newval || "false" !== newval && toNumber(val, options);
    }
    return void 0 !== val ? val : "";
   }
   const node2json_METADATA_SYMBOL = XmlNode.getMetaDataSymbol();
   function prettify(node, options) {
    return compress(node, options);
   }
   function compress(arr, options, jPath) {
    let text;
    const compressedObj = {};
    for (let i = 0; i < arr.length; i++) {
     const tagObj = arr[i], property = node2json_propName(tagObj);
     let newJpath = "";
     if (newJpath = void 0 === jPath ? property : jPath + "." + property, property === options.textNodeName) void 0 === text ? text = tagObj[property] : text += "" + tagObj[property]; else {
      if (void 0 === property) continue;
      if (tagObj[property]) {
       let val = compress(tagObj[property], options, newJpath);
       const isLeaf = isLeafTag(val, options);
       void 0 !== tagObj[node2json_METADATA_SYMBOL] && (val[node2json_METADATA_SYMBOL] = tagObj[node2json_METADATA_SYMBOL]), 
       tagObj[":@"] ? assignAttributes(val, tagObj[":@"], newJpath, options) : 1 !== Object.keys(val).length || void 0 === val[options.textNodeName] || options.alwaysCreateTextNode ? 0 === Object.keys(val).length && (options.alwaysCreateTextNode ? val[options.textNodeName] = "" : val = "") : val = val[options.textNodeName], 
       void 0 !== compressedObj[property] && compressedObj.hasOwnProperty(property) ? (Array.isArray(compressedObj[property]) || (compressedObj[property] = [ compressedObj[property] ]), 
       compressedObj[property].push(val)) : options.isArray(property, newJpath, isLeaf) ? compressedObj[property] = [ val ] : compressedObj[property] = val;
      }
     }
    }
    return "string" == typeof text ? text.length > 0 && (compressedObj[options.textNodeName] = text) : void 0 !== text && (compressedObj[options.textNodeName] = text), 
    compressedObj;
   }
   function node2json_propName(obj) {
    const keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
     const key = keys[i];
     if (":@" !== key) return key;
    }
   }
   function assignAttributes(obj, attrMap, jpath, options) {
    if (attrMap) {
     const keys = Object.keys(attrMap), len = keys.length;
     for (let i = 0; i < len; i++) {
      const atrrName = keys[i];
      options.isArray(atrrName, jpath + "." + atrrName, !0, !0) ? obj[atrrName] = [ attrMap[atrrName] ] : obj[atrrName] = attrMap[atrrName];
     }
    }
   }
   function isLeafTag(obj, options) {
    const {textNodeName} = options, propCount = Object.keys(obj).length;
    return 0 === propCount || !(1 !== propCount || !obj[textNodeName] && "boolean" != typeof obj[textNodeName] && 0 !== obj[textNodeName]);
   }
   class XMLParser {
    constructor(options) {
     this.externalEntities = {}, this.options = function(options) {
      return Object.assign({}, OptionsBuilder_defaultOptions, options);
     }(options);
    }
    parse(xmlData, validationOption) {
     if ("string" == typeof xmlData) ; else {
      if (!xmlData.toString) throw new Error("XML data is accepted in String or Bytes[] form.");
      xmlData = xmlData.toString();
     }
     if (validationOption) {
      !0 === validationOption && (validationOption = {});
      const result = validate(xmlData, validationOption);
      if (!0 !== result) throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
     }
     const orderedObjParser = new OrderedObjParser(this.options);
     orderedObjParser.addExternalEntities(this.externalEntities);
     const orderedResult = orderedObjParser.parseXml(xmlData);
     return this.options.preserveOrder || void 0 === orderedResult ? orderedResult : prettify(orderedResult, this.options);
    }
    addEntity(key, value) {
     if (-1 !== value.indexOf("&")) throw new Error("Entity value can't have '&'");
     if (-1 !== key.indexOf("&") || -1 !== key.indexOf(";")) throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
     if ("&" === value) throw new Error("An entity with value '&' is not permitted");
     this.externalEntities[key] = value;
    }
    static getMetaDataSymbol() {
     return XmlNode.getMetaDataSymbol();
    }
   }
   function getCommonOptions(options) {
    var _a;
    return {
     attributesGroupName: "$",
     textNodeName: null !== (_a = options.xmlCharKey) && void 0 !== _a ? _a : "_",
     ignoreAttributes: !1,
     suppressBooleanAttributes: !1
    };
   }
   function stringifyXML(obj, opts = {}) {
    const parserOptions = function(options = {}) {
     var _a, _b;
     return Object.assign(Object.assign({}, getCommonOptions(options)), {
      attributeNamePrefix: "@_",
      format: !0,
      suppressEmptyNode: !0,
      indentBy: "",
      rootNodeName: null !== (_a = options.rootName) && void 0 !== _a ? _a : "root",
      cdataPropName: null !== (_b = options.cdataPropName) && void 0 !== _b ? _b : "__cdata"
     });
    }(opts), j2x = new Builder(parserOptions), node = {
     [parserOptions.rootNodeName]: obj
    };
    return `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>${j2x.build(node)}`.replace(/\n/g, "");
   }
   async function parseXML(str, opts = {}) {
    if (!str) throw new Error("Document is empty");
    const validation = XMLValidator.validate(str);
    if (!0 !== validation) throw validation;
    const parsedXml = new XMLParser(function(options = {}) {
     return Object.assign(Object.assign({}, getCommonOptions(options)), {
      parseAttributeValue: !1,
      parseTagValue: !1,
      attributeNamePrefix: "",
      stopNodes: options.stopNodes,
      processEntities: !0,
      trimValues: !1
     });
    }(opts)).parse(str);
    if (parsedXml["?xml"] && delete parsedXml["?xml"], !opts.includeRoot) for (const key of Object.keys(parsedXml)) {
     const value = parsedXml[key];
     return "object" == typeof value ? Object.assign({}, value) : value;
    }
    return parsedXml;
   }
   const src_log_logger = esm_createClientLogger("storage-blob");
   class BaseRequestPolicy {
    constructor(_nextPolicy, _options) {
     this._nextPolicy = _nextPolicy, this._options = _options;
    }
    shouldLog(logLevel) {
     return this._options.shouldLog(logLevel);
    }
    log(logLevel, message) {
     this._options.log(logLevel, message);
    }
   }
   const SERVICE_VERSION = "2025-05-05", StorageOAuthScopes = "https://storage.azure.com/.default", constants_URLConstants_Parameters = {
    FORCE_BROWSER_NO_CACHE: "_",
    SIGNATURE: "sig",
    SNAPSHOT: "snapshot",
    VERSIONID: "versionid",
    TIMEOUT: "timeout"
   }, HTTPURLConnection_HTTP_ACCEPTED = 202, constants_HeaderConstants_AUTHORIZATION = "Authorization", constants_HeaderConstants_CONTENT_ENCODING = "Content-Encoding", constants_HeaderConstants_CONTENT_ID = "Content-ID", constants_HeaderConstants_CONTENT_LANGUAGE = "Content-Language", constants_HeaderConstants_CONTENT_LENGTH = "Content-Length", constants_HeaderConstants_CONTENT_MD5 = "Content-Md5", constants_HeaderConstants_CONTENT_TRANSFER_ENCODING = "Content-Transfer-Encoding", constants_HeaderConstants_CONTENT_TYPE = "Content-Type", constants_HeaderConstants_COOKIE = "Cookie", constants_HeaderConstants_DATE = "date", constants_HeaderConstants_IF_MATCH = "if-match", constants_HeaderConstants_IF_MODIFIED_SINCE = "if-modified-since", constants_HeaderConstants_IF_NONE_MATCH = "if-none-match", constants_HeaderConstants_IF_UNMODIFIED_SINCE = "if-unmodified-since", constants_HeaderConstants_PREFIX_FOR_STORAGE = "x-ms-", constants_HeaderConstants_RANGE = "Range", constants_HeaderConstants_X_MS_DATE = "x-ms-date", constants_HeaderConstants_X_MS_ERROR_CODE = "x-ms-error-code", constants_HeaderConstants_X_MS_VERSION = "x-ms-version", StorageBlobLoggingAllowedHeaderNames = [ "Access-Control-Allow-Origin", "Cache-Control", "Content-Length", "Content-Type", "Date", "Request-Id", "traceparent", "Transfer-Encoding", "User-Agent", "x-ms-client-request-id", "x-ms-date", "x-ms-error-code", "x-ms-request-id", "x-ms-return-client-request-id", "x-ms-version", "Accept-Ranges", "Content-Disposition", "Content-Encoding", "Content-Language", "Content-MD5", "Content-Range", "ETag", "Last-Modified", "Server", "Vary", "x-ms-content-crc64", "x-ms-copy-action", "x-ms-copy-completion-time", "x-ms-copy-id", "x-ms-copy-progress", "x-ms-copy-status", "x-ms-has-immutability-policy", "x-ms-has-legal-hold", "x-ms-lease-state", "x-ms-lease-status", "x-ms-range", "x-ms-request-server-encrypted", "x-ms-server-encrypted", "x-ms-snapshot", "x-ms-source-range", "If-Match", "If-Modified-Since", "If-None-Match", "If-Unmodified-Since", "x-ms-access-tier", "x-ms-access-tier-change-time", "x-ms-access-tier-inferred", "x-ms-account-kind", "x-ms-archive-status", "x-ms-blob-append-offset", "x-ms-blob-cache-control", "x-ms-blob-committed-block-count", "x-ms-blob-condition-appendpos", "x-ms-blob-condition-maxsize", "x-ms-blob-content-disposition", "x-ms-blob-content-encoding", "x-ms-blob-content-language", "x-ms-blob-content-length", "x-ms-blob-content-md5", "x-ms-blob-content-type", "x-ms-blob-public-access", "x-ms-blob-sequence-number", "x-ms-blob-type", "x-ms-copy-destination-snapshot", "x-ms-creation-time", "x-ms-default-encryption-scope", "x-ms-delete-snapshots", "x-ms-delete-type-permanent", "x-ms-deny-encryption-scope-override", "x-ms-encryption-algorithm", "x-ms-if-sequence-number-eq", "x-ms-if-sequence-number-le", "x-ms-if-sequence-number-lt", "x-ms-incremental-copy", "x-ms-lease-action", "x-ms-lease-break-period", "x-ms-lease-duration", "x-ms-lease-id", "x-ms-lease-time", "x-ms-page-write", "x-ms-proposed-lease-id", "x-ms-range-get-content-md5", "x-ms-rehydrate-priority", "x-ms-sequence-number-action", "x-ms-sku-name", "x-ms-source-content-md5", "x-ms-source-if-match", "x-ms-source-if-modified-since", "x-ms-source-if-none-match", "x-ms-source-if-unmodified-since", "x-ms-tag-count", "x-ms-encryption-key-sha256", "x-ms-copy-source-error-code", "x-ms-copy-source-status-code", "x-ms-if-tags", "x-ms-source-if-tags" ], StorageBlobLoggingAllowedQueryParameters = [ "comp", "maxresults", "rscc", "rscd", "rsce", "rscl", "rsct", "se", "si", "sip", "sp", "spr", "sr", "srt", "ss", "st", "sv", "include", "marker", "prefix", "copyid", "restype", "blockid", "blocklisttype", "delimiter", "prevsnapshot", "ske", "skoid", "sks", "skt", "sktid", "skv", "snapshot" ], PathStylePorts = [ "10000", "10001", "10002", "10003", "10004", "10100", "10101", "10102", "10103", "10104", "11000", "11001", "11002", "11003", "11004", "11100", "11101", "11102", "11103", "11104" ];
   function escapeURLPath(url) {
    const urlParsed = new URL(url);
    let path = urlParsed.pathname;
    return path = path || "/", path = encodeURIComponent(path).replace(/%2F/g, "/").replace(/'/g, "%27").replace(/\+/g, "%20").replace(/%25/g, "%"), 
    urlParsed.pathname = path, urlParsed.toString();
   }
   function getValueInConnString(connectionString, argument) {
    const elements = connectionString.split(";");
    for (const element of elements) if (element.trim().startsWith(argument)) return element.trim().match(argument + "=(.*)")[1];
    return "";
   }
   function extractConnectionStringParts(connectionString) {
    let proxyUri = "";
    connectionString.startsWith("UseDevelopmentStorage=true") && (proxyUri = function(connectionString) {
     let proxyUri = "";
     if (-1 !== connectionString.search("DevelopmentStorageProxyUri=")) {
      const matchCredentials = connectionString.split(";");
      for (const element of matchCredentials) element.trim().startsWith("DevelopmentStorageProxyUri=") && (proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1]);
     }
     return proxyUri;
    }(connectionString), connectionString = "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;");
    let blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint");
    if (blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint, 
    -1 !== connectionString.search("DefaultEndpointsProtocol=") && -1 !== connectionString.search("AccountKey=")) {
     let defaultEndpointsProtocol = "", accountName = "", accountKey = Buffer.from("accountKey", "base64"), endpointSuffix = "";
     if (accountName = getValueInConnString(connectionString, "AccountName"), accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64"), 
     !blobEndpoint) {
      defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
      const protocol = defaultEndpointsProtocol.toLowerCase();
      if ("https" !== protocol && "http" !== protocol) throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
      if (endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix"), !endpointSuffix) throw new Error("Invalid EndpointSuffix in the provided Connection String");
      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
     }
     if (!accountName) throw new Error("Invalid AccountName in the provided Connection String");
     if (0 === accountKey.length) throw new Error("Invalid AccountKey in the provided Connection String");
     return {
      kind: "AccountConnString",
      url: blobEndpoint,
      accountName,
      accountKey,
      proxyUri
     };
    }
    {
     let accountSas = getValueInConnString(connectionString, "SharedAccessSignature"), accountName = getValueInConnString(connectionString, "AccountName");
     if (accountName || (accountName = getAccountNameFromUrl(blobEndpoint)), !blobEndpoint) throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
     if (!accountSas) throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
     return accountSas.startsWith("?") && (accountSas = accountSas.substring(1)), {
      kind: "SASConnString",
      url: blobEndpoint,
      accountName,
      accountSas
     };
    }
   }
   function appendToURLPath(url, name) {
    const urlParsed = new URL(url);
    let path = urlParsed.pathname;
    return path = path ? path.endsWith("/") ? `${path}${name}` : `${path}/${name}` : name, 
    urlParsed.pathname = path, urlParsed.toString();
   }
   function setURLParameter(url, name, value) {
    const urlParsed = new URL(url), encodedName = encodeURIComponent(name), encodedValue = value ? encodeURIComponent(value) : void 0, searchString = "" === urlParsed.search ? "?" : urlParsed.search, searchPieces = [];
    for (const pair of searchString.slice(1).split("&")) if (pair) {
     const [key] = pair.split("=", 2);
     key !== encodedName && searchPieces.push(pair);
    }
    return encodedValue && searchPieces.push(`${encodedName}=${encodedValue}`), urlParsed.search = searchPieces.length ? `?${searchPieces.join("&")}` : "", 
    urlParsed.toString();
   }
   function getURLParameter(url, name) {
    var _a;
    return null !== (_a = new URL(url).searchParams.get(name)) && void 0 !== _a ? _a : void 0;
   }
   function setURLHost(url, host) {
    const urlParsed = new URL(url);
    return urlParsed.hostname = host, urlParsed.toString();
   }
   function getURLPath(url) {
    try {
     return new URL(url).pathname;
    } catch (e) {
     return;
    }
   }
   function getURLPathAndQuery(url) {
    const urlParsed = new URL(url), pathString = urlParsed.pathname;
    if (!pathString) throw new RangeError("Invalid url without valid path.");
    let queryString = urlParsed.search || "";
    return queryString = queryString.trim(), "" !== queryString && (queryString = queryString.startsWith("?") ? queryString : `?${queryString}`), 
    `${pathString}${queryString}`;
   }
   function getURLQueries(url) {
    let queryString = new URL(url).search;
    if (!queryString) return {};
    queryString = queryString.trim(), queryString = queryString.startsWith("?") ? queryString.substring(1) : queryString;
    let querySubStrings = queryString.split("&");
    querySubStrings = querySubStrings.filter((value => {
     const indexOfEqual = value.indexOf("="), lastIndexOfEqual = value.lastIndexOf("=");
     return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1;
    }));
    const queries = {};
    for (const querySubString of querySubStrings) {
     const splitResults = querySubString.split("="), key = splitResults[0], value = splitResults[1];
     queries[key] = value;
    }
    return queries;
   }
   function appendToURLQuery(url, queryParts) {
    const urlParsed = new URL(url);
    let query = urlParsed.search;
    return query ? query += "&" + queryParts : query = queryParts, urlParsed.search = query, 
    urlParsed.toString();
   }
   function truncatedISO8061Date(date, withMilliseconds = !0) {
    const dateString = date.toISOString();
    return withMilliseconds ? dateString.substring(0, dateString.length - 1) + "0000Z" : dateString.substring(0, dateString.length - 5) + "Z";
   }
   function generateBlockID(blockIDPrefix, blockIndex) {
    blockIDPrefix.length > 42 && (blockIDPrefix = blockIDPrefix.slice(0, 42));
    const res = blockIDPrefix + function(currentString, targetLength, padString = " ") {
     if (String.prototype.padStart) return currentString.padStart(targetLength, padString);
     return padString = padString || " ", currentString.length > targetLength ? currentString : ((targetLength -= currentString.length) > padString.length && (padString += padString.repeat(targetLength / padString.length)), 
     padString.slice(0, targetLength) + currentString);
    }(blockIndex.toString(), 48 - blockIDPrefix.length, "0");
    return content = res, esm_isNode ? Buffer.from(content).toString("base64") : btoa(content);
    var content;
   }
   async function utils_common_delay(timeInMs, aborter, abortError) {
    return new Promise(((resolve, reject) => {
     let timeout;
     const abortHandler = () => {
      void 0 !== timeout && clearTimeout(timeout), reject(abortError);
     };
     timeout = setTimeout((() => {
      void 0 !== aborter && aborter.removeEventListener("abort", abortHandler), resolve();
     }), timeInMs), void 0 !== aborter && aborter.addEventListener("abort", abortHandler);
    }));
   }
   function iEqual(str1, str2) {
    return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
   }
   function getAccountNameFromUrl(url) {
    const parsedUrl = new URL(url);
    let accountName;
    try {
     return accountName = "blob" === parsedUrl.hostname.split(".")[1] ? parsedUrl.hostname.split(".")[0] : isIpEndpointStyle(parsedUrl) ? parsedUrl.pathname.split("/")[1] : "", 
     accountName;
    } catch (error) {
     throw new Error("Unable to extract accountName with provided information.");
    }
   }
   function isIpEndpointStyle(parsedUrl) {
    const host = parsedUrl.host;
    return /^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}(:[0-9]+)?$/.test(host) || Boolean(parsedUrl.port) && PathStylePorts.includes(parsedUrl.port);
   }
   function toBlobTagsString(tags) {
    if (void 0 === tags) return;
    const tagPairs = [];
    for (const key in tags) if (Object.prototype.hasOwnProperty.call(tags, key)) {
     const value = tags[key];
     tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
    }
    return tagPairs.join("&");
   }
   function toBlobTags(tags) {
    if (void 0 === tags) return;
    const res = {
     blobTagSet: []
    };
    for (const key in tags) if (Object.prototype.hasOwnProperty.call(tags, key)) {
     const value = tags[key];
     res.blobTagSet.push({
      key,
      value
     });
    }
    return res;
   }
   function toTags(tags) {
    if (void 0 === tags) return;
    const res = {};
    for (const blobTag of tags.blobTagSet) res[blobTag.key] = blobTag.value;
    return res;
   }
   function toQuerySerialization(textConfiguration) {
    if (void 0 !== textConfiguration) switch (textConfiguration.kind) {
    case "csv":
     return {
      format: {
       type: "delimited",
       delimitedTextConfiguration: {
        columnSeparator: textConfiguration.columnSeparator || ",",
        fieldQuote: textConfiguration.fieldQuote || "",
        recordSeparator: textConfiguration.recordSeparator,
        escapeChar: textConfiguration.escapeCharacter || "",
        headersPresent: textConfiguration.hasHeaders || !1
       }
      }
     };

    case "json":
     return {
      format: {
       type: "json",
       jsonTextConfiguration: {
        recordSeparator: textConfiguration.recordSeparator
       }
      }
     };

    case "arrow":
     return {
      format: {
       type: "arrow",
       arrowConfiguration: {
        schema: textConfiguration.schema
       }
      }
     };

    case "parquet":
     return {
      format: {
       type: "parquet"
      }
     };

    default:
     throw Error("Invalid BlobQueryTextConfiguration.");
    }
   }
   function parseObjectReplicationRecord(objectReplicationRecord) {
    if (!objectReplicationRecord) return;
    if ("policy-id" in objectReplicationRecord) return;
    const orProperties = [];
    for (const key in objectReplicationRecord) {
     const ids = key.split("_"), policyPrefix = "or-";
     ids[0].startsWith(policyPrefix) && (ids[0] = ids[0].substring(policyPrefix.length));
     const rule = {
      ruleId: ids[1],
      replicationStatus: objectReplicationRecord[key]
     }, policyIndex = orProperties.findIndex((policy => policy.policyId === ids[0]));
     policyIndex > -1 ? orProperties[policyIndex].rules.push(rule) : orProperties.push({
      policyId: ids[0],
      rules: [ rule ]
     });
    }
    return orProperties;
   }
   function httpAuthorizationToString(httpAuthorization) {
    return httpAuthorization ? httpAuthorization.scheme + " " + httpAuthorization.value : void 0;
   }
   function BlobNameToString(name) {
    return name.encoded ? decodeURIComponent(name.content) : name.content;
   }
   function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {
    var _a;
    return Object.assign(Object.assign({}, internalResponse), {
     segment: {
      blobPrefixes: null === (_a = internalResponse.segment.blobPrefixes) || void 0 === _a ? void 0 : _a.map((blobPrefixInternal => Object.assign(Object.assign({}, blobPrefixInternal), {
       name: BlobNameToString(blobPrefixInternal.name)
      }))),
      blobItems: internalResponse.segment.blobItems.map((blobItemInteral => Object.assign(Object.assign({}, blobItemInteral), {
       name: BlobNameToString(blobItemInteral.name)
      })))
     }
    });
   }
   function* ExtractPageRangeInfoItems(getPageRangesSegment) {
    let pageRange = [], clearRange = [];
    getPageRangesSegment.pageRange && (pageRange = getPageRangesSegment.pageRange), 
    getPageRangesSegment.clearRange && (clearRange = getPageRangesSegment.clearRange);
    let pageRangeIndex = 0, clearRangeIndex = 0;
    for (;pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length; ) pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start ? (yield {
     start: pageRange[pageRangeIndex].start,
     end: pageRange[pageRangeIndex].end,
     isClear: !1
    }, ++pageRangeIndex) : (yield {
     start: clearRange[clearRangeIndex].start,
     end: clearRange[clearRangeIndex].end,
     isClear: !0
    }, ++clearRangeIndex);
    for (;pageRangeIndex < pageRange.length; ++pageRangeIndex) yield {
     start: pageRange[pageRangeIndex].start,
     end: pageRange[pageRangeIndex].end,
     isClear: !1
    };
    for (;clearRangeIndex < clearRange.length; ++clearRangeIndex) yield {
     start: clearRange[clearRangeIndex].start,
     end: clearRange[clearRangeIndex].end,
     isClear: !0
    };
   }
   function EscapePath(blobName) {
    const split = blobName.split("/");
    for (let i = 0; i < split.length; i++) split[i] = encodeURIComponent(split[i]);
    return split.join("/");
   }
   function assertResponse(response) {
    if ("_response" in response) return response;
    throw new TypeError(`Unexpected response object ${response}`);
   }
   var StorageRetryPolicyType;
   !function(StorageRetryPolicyType) {
    StorageRetryPolicyType[StorageRetryPolicyType.EXPONENTIAL = 0] = "EXPONENTIAL", 
    StorageRetryPolicyType[StorageRetryPolicyType.FIXED = 1] = "FIXED";
   }(StorageRetryPolicyType || (StorageRetryPolicyType = {}));
   const DEFAULT_RETRY_OPTIONS = {
    maxRetryDelayInMs: 12e4,
    maxTries: 4,
    retryDelayInMs: 4e3,
    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
    secondaryHost: "",
    tryTimeoutInMs: void 0
   }, RETRY_ABORT_ERROR = new AbortError_AbortError("The operation was aborted.");
   class StorageRetryPolicy extends BaseRequestPolicy {
    constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {
     super(nextPolicy, options), this.retryOptions = {
      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,
      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,
      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,
      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,
      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,
      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost
     };
    }
    async sendRequest(request) {
     return this.attemptSendRequest(request, !1, 1);
    }
    async attemptSendRequest(request, secondaryHas404, attempt) {
     const newRequest = request.clone(), isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !("GET" === request.method || "HEAD" === request.method || "OPTIONS" === request.method) || attempt % 2 == 1;
     let response;
     isPrimaryRetry || (newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost)), 
     this.retryOptions.tryTimeoutInMs && (newRequest.url = setURLParameter(newRequest.url, constants_URLConstants_Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1e3).toString()));
     try {
      if (src_log_logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? "Primary" : "Secondary"}`), 
      response = await this._nextPolicy.sendRequest(newRequest), !this.shouldRetry(isPrimaryRetry, attempt, response)) return response;
      secondaryHas404 = secondaryHas404 || !isPrimaryRetry && 404 === response.status;
     } catch (err) {
      if (src_log_logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`), 
      !this.shouldRetry(isPrimaryRetry, attempt, response, err)) throw err;
     }
     return await this.delay(isPrimaryRetry, attempt, request.abortSignal), this.attemptSendRequest(request, secondaryHas404, ++attempt);
    }
    shouldRetry(isPrimaryRetry, attempt, response, err) {
     if (attempt >= this.retryOptions.maxTries) return src_log_logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`), 
     !1;
     const retriableErrors = [ "ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET", "ENOENT", "ENOTFOUND", "TIMEOUT", "EPIPE", "REQUEST_SEND_ERROR" ];
     if (err) for (const retriableError of retriableErrors) if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) return src_log_logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`), 
     !0;
     if (response || err) {
      const statusCode = response ? response.status : err ? err.statusCode : 0;
      if (!isPrimaryRetry && 404 === statusCode) return src_log_logger.info("RetryPolicy: Secondary access with 404, will retry."), 
      !0;
      if (503 === statusCode || 500 === statusCode) return src_log_logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`), 
      !0;
     }
     return !("PARSE_ERROR" !== (null == err ? void 0 : err.code) || !(null == err ? void 0 : err.message.startsWith('Error "Error: Unclosed root tag'))) && (src_log_logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry."), 
     !0);
    }
    async delay(isPrimaryRetry, attempt, abortSignal) {
     let delayTimeInMs = 0;
     if (isPrimaryRetry) switch (this.retryOptions.retryPolicyType) {
     case StorageRetryPolicyType.EXPONENTIAL:
      delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
      break;

     case StorageRetryPolicyType.FIXED:
      delayTimeInMs = this.retryOptions.retryDelayInMs;
     } else delayTimeInMs = 1e3 * Math.random();
     return src_log_logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`), utils_common_delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);
    }
   }
   class StorageRetryPolicyFactory {
    constructor(retryOptions) {
     this.retryOptions = retryOptions;
    }
    create(nextPolicy, options) {
     return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);
    }
   }
   var external_crypto_ = __webpack_require__(6982);
   class CredentialPolicy extends BaseRequestPolicy {
    sendRequest(request) {
     return this._nextPolicy.sendRequest(this.signRequest(request));
    }
    signRequest(request) {
     return request;
    }
   }
   const table_lv0 = new Uint32Array([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1820, 0, 1823, 1825, 1827, 1829, 0, 0, 0, 1837, 2051, 0, 0, 1843, 0, 3331, 3354, 3356, 3358, 3360, 3362, 3364, 3366, 3368, 3370, 0, 0, 0, 0, 0, 0, 0, 3586, 3593, 3594, 3610, 3617, 3619, 3621, 3628, 3634, 3637, 3638, 3656, 3665, 3696, 3708, 3710, 3721, 3722, 3729, 3737, 3743, 3746, 3748, 3750, 3751, 3753, 0, 0, 0, 1859, 1860, 1864, 3586, 3593, 3594, 3610, 3617, 3619, 3621, 3628, 3634, 3637, 3638, 3656, 3665, 3696, 3708, 3710, 3721, 3722, 3729, 3737, 3743, 3746, 3748, 3750, 3751, 3753, 0, 1868, 0, 1872, 0 ]), table_lv2 = new Uint32Array([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), table_lv4 = new Uint32Array([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32786, 0, 0, 0, 0, 0, 33298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
   function compareHeader(lhs, rhs) {
    return function(lhs, rhs) {
     const tables = [ table_lv0, table_lv2, table_lv4 ];
     let curr_level = 0, i = 0, j = 0;
     for (;curr_level < tables.length; ) {
      if (curr_level === tables.length - 1 && i !== j) return i > j;
      const weight1 = i < lhs.length ? tables[curr_level][lhs[i].charCodeAt(0)] : 1, weight2 = j < rhs.length ? tables[curr_level][rhs[j].charCodeAt(0)] : 1;
      if (1 === weight1 && 1 === weight2) i = 0, j = 0, ++curr_level; else if (weight1 === weight2) ++i, 
      ++j; else if (0 === weight1) ++i; else {
       if (0 !== weight2) return weight1 < weight2;
       ++j;
      }
     }
     return !1;
    }(lhs, rhs) ? -1 : 1;
   }
   class StorageSharedKeyCredentialPolicy extends CredentialPolicy {
    constructor(nextPolicy, options, factory) {
     super(nextPolicy, options), this.factory = factory;
    }
    signRequest(request) {
     request.headers.set(constants_HeaderConstants_X_MS_DATE, (new Date).toUTCString()), 
     request.body && ("string" == typeof request.body || void 0 !== request.body) && request.body.length > 0 && request.headers.set(constants_HeaderConstants_CONTENT_LENGTH, Buffer.byteLength(request.body));
     const stringToSign = [ request.method.toUpperCase(), this.getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_LANGUAGE), this.getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_ENCODING), this.getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_LENGTH), this.getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_MD5), this.getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_TYPE), this.getHeaderValueToSign(request, constants_HeaderConstants_DATE), this.getHeaderValueToSign(request, constants_HeaderConstants_IF_MODIFIED_SINCE), this.getHeaderValueToSign(request, constants_HeaderConstants_IF_MATCH), this.getHeaderValueToSign(request, constants_HeaderConstants_IF_NONE_MATCH), this.getHeaderValueToSign(request, constants_HeaderConstants_IF_UNMODIFIED_SINCE), this.getHeaderValueToSign(request, constants_HeaderConstants_RANGE) ].join("\n") + "\n" + this.getCanonicalizedHeadersString(request) + this.getCanonicalizedResourceString(request), signature = this.factory.computeHMACSHA256(stringToSign);
     return request.headers.set(constants_HeaderConstants_AUTHORIZATION, `SharedKey ${this.factory.accountName}:${signature}`), 
     request;
    }
    getHeaderValueToSign(request, headerName) {
     const value = request.headers.get(headerName);
     return value ? headerName === constants_HeaderConstants_CONTENT_LENGTH && "0" === value ? "" : value : "";
    }
    getCanonicalizedHeadersString(request) {
     let headersArray = request.headers.headersArray().filter((value => value.name.toLowerCase().startsWith(constants_HeaderConstants_PREFIX_FOR_STORAGE)));
     headersArray.sort(((a, b) => compareHeader(a.name.toLowerCase(), b.name.toLowerCase()))), 
     headersArray = headersArray.filter(((value, index, array) => !(index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase())));
     let canonicalizedHeadersStringToSign = "";
     return headersArray.forEach((header => {
      canonicalizedHeadersStringToSign += `${header.name.toLowerCase().trimRight()}:${header.value.trimLeft()}\n`;
     })), canonicalizedHeadersStringToSign;
    }
    getCanonicalizedResourceString(request) {
     const path = getURLPath(request.url) || "/";
     let canonicalizedResourceString = "";
     canonicalizedResourceString += `/${this.factory.accountName}${path}`;
     const queries = getURLQueries(request.url), lowercaseQueries = {};
     if (queries) {
      const queryKeys = [];
      for (const key in queries) if (Object.prototype.hasOwnProperty.call(queries, key)) {
       const lowercaseKey = key.toLowerCase();
       lowercaseQueries[lowercaseKey] = queries[key], queryKeys.push(lowercaseKey);
      }
      queryKeys.sort();
      for (const key of queryKeys) canonicalizedResourceString += `\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;
     }
     return canonicalizedResourceString;
    }
   }
   class Credential {
    create(_nextPolicy, _options) {
     throw new Error("Method should be implemented in children classes.");
    }
   }
   class StorageSharedKeyCredential extends Credential {
    constructor(accountName, accountKey) {
     super(), this.accountName = accountName, this.accountKey = Buffer.from(accountKey, "base64");
    }
    create(nextPolicy, options) {
     return new StorageSharedKeyCredentialPolicy(nextPolicy, options, this);
    }
    computeHMACSHA256(stringToSign) {
     return (0, external_crypto_.createHmac)("sha256", this.accountKey).update(stringToSign, "utf8").digest("base64");
    }
   }
   class AnonymousCredentialPolicy extends CredentialPolicy {
    constructor(nextPolicy, options) {
     super(nextPolicy, options);
    }
   }
   class AnonymousCredential extends Credential {
    create(nextPolicy, options) {
     return new AnonymousCredentialPolicy(nextPolicy, options);
    }
   }
   let _defaultHttpClient;
   var StorageRetryPolicyV2_StorageRetryPolicyType;
   !function(StorageRetryPolicyType) {
    StorageRetryPolicyType[StorageRetryPolicyType.EXPONENTIAL = 0] = "EXPONENTIAL", 
    StorageRetryPolicyType[StorageRetryPolicyType.FIXED = 1] = "FIXED";
   }(StorageRetryPolicyV2_StorageRetryPolicyType || (StorageRetryPolicyV2_StorageRetryPolicyType = {}));
   const StorageRetryPolicyV2_DEFAULT_RETRY_OPTIONS = {
    maxRetryDelayInMs: 12e4,
    maxTries: 4,
    retryDelayInMs: 4e3,
    retryPolicyType: StorageRetryPolicyV2_StorageRetryPolicyType.EXPONENTIAL,
    secondaryHost: "",
    tryTimeoutInMs: void 0
   }, retriableErrors = [ "ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET", "ENOENT", "ENOTFOUND", "TIMEOUT", "EPIPE", "REQUEST_SEND_ERROR" ], StorageRetryPolicyV2_RETRY_ABORT_ERROR = new AbortError_AbortError("The operation was aborted.");
   function storageSharedKeyCredentialPolicy(options) {
    function signRequest(request) {
     request.headers.set(constants_HeaderConstants_X_MS_DATE, (new Date).toUTCString()), 
     request.body && ("string" == typeof request.body || Buffer.isBuffer(request.body)) && request.body.length > 0 && request.headers.set(constants_HeaderConstants_CONTENT_LENGTH, Buffer.byteLength(request.body));
     const stringToSign = [ request.method.toUpperCase(), getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_LANGUAGE), getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_ENCODING), getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_LENGTH), getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_MD5), getHeaderValueToSign(request, constants_HeaderConstants_CONTENT_TYPE), getHeaderValueToSign(request, constants_HeaderConstants_DATE), getHeaderValueToSign(request, constants_HeaderConstants_IF_MODIFIED_SINCE), getHeaderValueToSign(request, constants_HeaderConstants_IF_MATCH), getHeaderValueToSign(request, constants_HeaderConstants_IF_NONE_MATCH), getHeaderValueToSign(request, constants_HeaderConstants_IF_UNMODIFIED_SINCE), getHeaderValueToSign(request, constants_HeaderConstants_RANGE) ].join("\n") + "\n" + function(request) {
      let headersArray = [];
      for (const [name, value] of request.headers) name.toLowerCase().startsWith(constants_HeaderConstants_PREFIX_FOR_STORAGE) && headersArray.push({
       name,
       value
      });
      headersArray.sort(((a, b) => compareHeader(a.name.toLowerCase(), b.name.toLowerCase()))), 
      headersArray = headersArray.filter(((value, index, array) => !(index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase())));
      let canonicalizedHeadersStringToSign = "";
      return headersArray.forEach((header => {
       canonicalizedHeadersStringToSign += `${header.name.toLowerCase().trimRight()}:${header.value.trimLeft()}\n`;
      })), canonicalizedHeadersStringToSign;
     }(request) + function(request) {
      const path = getURLPath(request.url) || "/";
      let canonicalizedResourceString = "";
      canonicalizedResourceString += `/${options.accountName}${path}`;
      const queries = getURLQueries(request.url), lowercaseQueries = {};
      if (queries) {
       const queryKeys = [];
       for (const key in queries) if (Object.prototype.hasOwnProperty.call(queries, key)) {
        const lowercaseKey = key.toLowerCase();
        lowercaseQueries[lowercaseKey] = queries[key], queryKeys.push(lowercaseKey);
       }
       queryKeys.sort();
       for (const key of queryKeys) canonicalizedResourceString += `\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;
      }
      return canonicalizedResourceString;
     }(request), signature = (0, external_crypto_.createHmac)("sha256", options.accountKey).update(stringToSign, "utf8").digest("base64");
     request.headers.set(constants_HeaderConstants_AUTHORIZATION, `SharedKey ${options.accountName}:${signature}`);
    }
    function getHeaderValueToSign(request, headerName) {
     const value = request.headers.get(headerName);
     return value ? headerName === constants_HeaderConstants_CONTENT_LENGTH && "0" === value ? "" : value : "";
    }
    return {
     name: "storageSharedKeyCredentialPolicy",
     sendRequest: async (request, next) => (signRequest(request), next(request))
    };
   }
   class StorageBrowserPolicy extends BaseRequestPolicy {
    constructor(nextPolicy, options) {
     super(nextPolicy, options);
    }
    async sendRequest(request) {
     return esm_isNode || ("GET" !== request.method.toUpperCase() && "HEAD" !== request.method.toUpperCase() || (request.url = setURLParameter(request.url, constants_URLConstants_Parameters.FORCE_BROWSER_NO_CACHE, (new Date).getTime().toString())), 
     request.headers.remove(constants_HeaderConstants_COOKIE), request.headers.remove(constants_HeaderConstants_CONTENT_LENGTH)), 
     this._nextPolicy.sendRequest(request);
    }
   }
   class StorageBrowserPolicyFactory {
    create(nextPolicy, options) {
     return new StorageBrowserPolicy(nextPolicy, options);
    }
   }
   function storageCorrectContentLengthPolicy() {
    return {
     name: "StorageCorrectContentLengthPolicy",
     sendRequest: async (request, next) => (function(request) {
      request.body && ("string" == typeof request.body || Buffer.isBuffer(request.body)) && request.body.length > 0 && request.headers.set(constants_HeaderConstants_CONTENT_LENGTH, Buffer.byteLength(request.body));
     }(request), next(request))
    };
   }
   function isPipelineLike(pipeline) {
    if (!pipeline || "object" != typeof pipeline) return !1;
    const castPipeline = pipeline;
    return Array.isArray(castPipeline.factories) && "object" == typeof castPipeline.options && "function" == typeof castPipeline.toServiceClientOptions;
   }
   class Pipeline {
    constructor(factories, options = {}) {
     this.factories = factories, this.options = options;
    }
    toServiceClientOptions() {
     return {
      httpClient: this.options.httpClient,
      requestPolicyFactories: this.factories
     };
    }
   }
   function newPipeline(credential, pipelineOptions = {}) {
    credential || (credential = new AnonymousCredential);
    const pipeline = new Pipeline([], pipelineOptions);
    return pipeline._credential = credential, pipeline;
   }
   function getCoreClientOptions(pipeline) {
    var _a;
    const _b = pipeline.options, {httpClient: v1Client} = _b, restOptions = __rest(_b, [ "httpClient" ]);
    let httpClient = pipeline._coreHttpClient;
    var requestPolicyClient;
    httpClient || (httpClient = v1Client ? (requestPolicyClient = v1Client, {
     sendRequest: async request => response_toPipelineResponse(await requestPolicyClient.sendRequest(toWebResourceLike(request, {
      createProxy: !0
     })))
    }) : (_defaultHttpClient || (_defaultHttpClient = esm_defaultHttpClient_createDefaultHttpClient()), 
    _defaultHttpClient), pipeline._coreHttpClient = httpClient);
    let corePipeline = pipeline._corePipeline;
    if (!corePipeline) {
     const packageDetails = "azsdk-js-azure-storage-blob/12.27.0", userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix ? `${restOptions.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
     corePipeline = createClientPipeline(Object.assign(Object.assign({}, restOptions), {
      loggingOptions: {
       additionalAllowedHeaderNames: StorageBlobLoggingAllowedHeaderNames,
       additionalAllowedQueryParameters: StorageBlobLoggingAllowedQueryParameters,
       logger: src_log_logger.info
      },
      userAgentOptions: {
       userAgentPrefix
      },
      serializationOptions: {
       stringifyXML,
       serializerOptions: {
        xml: {
         xmlCharKey: "#"
        }
       }
      },
      deserializationOptions: {
       parseXML,
       serializerOptions: {
        xml: {
         xmlCharKey: "#"
        }
       }
      }
     })), corePipeline.removePolicy({
      phase: "Retry"
     }), corePipeline.removePolicy({
      name: "decompressResponsePolicy"
     }), corePipeline.addPolicy(storageCorrectContentLengthPolicy()), corePipeline.addPolicy(function(options = {}) {
      var _a, _b, _c, _d, _e, _f;
      const retryPolicyType = null !== (_a = options.retryPolicyType) && void 0 !== _a ? _a : StorageRetryPolicyV2_DEFAULT_RETRY_OPTIONS.retryPolicyType, maxTries = null !== (_b = options.maxTries) && void 0 !== _b ? _b : StorageRetryPolicyV2_DEFAULT_RETRY_OPTIONS.maxTries, retryDelayInMs = null !== (_c = options.retryDelayInMs) && void 0 !== _c ? _c : StorageRetryPolicyV2_DEFAULT_RETRY_OPTIONS.retryDelayInMs, maxRetryDelayInMs = null !== (_d = options.maxRetryDelayInMs) && void 0 !== _d ? _d : StorageRetryPolicyV2_DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs, secondaryHost = null !== (_e = options.secondaryHost) && void 0 !== _e ? _e : StorageRetryPolicyV2_DEFAULT_RETRY_OPTIONS.secondaryHost, tryTimeoutInMs = null !== (_f = options.tryTimeoutInMs) && void 0 !== _f ? _f : StorageRetryPolicyV2_DEFAULT_RETRY_OPTIONS.tryTimeoutInMs;
      function shouldRetry({isPrimaryRetry, attempt, response, error}) {
       var _a, _b;
       if (attempt >= maxTries) return src_log_logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${maxTries}, no further try.`), 
       !1;
       if (error) {
        for (const retriableError of retriableErrors) if (error.name.toUpperCase().includes(retriableError) || error.message.toUpperCase().includes(retriableError) || error.code && error.code.toString().toUpperCase() === retriableError) return src_log_logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`), 
        !0;
        if ("PARSE_ERROR" === (null == error ? void 0 : error.code) && (null == error ? void 0 : error.message.startsWith('Error "Error: Unclosed root tag'))) return src_log_logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry."), 
        !0;
       }
       if (response || error) {
        const statusCode = null !== (_b = null !== (_a = null == response ? void 0 : response.status) && void 0 !== _a ? _a : null == error ? void 0 : error.statusCode) && void 0 !== _b ? _b : 0;
        if (!isPrimaryRetry && 404 === statusCode) return src_log_logger.info("RetryPolicy: Secondary access with 404, will retry."), 
        !0;
        if (503 === statusCode || 500 === statusCode) return src_log_logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`), 
        !0;
       }
       return !1;
      }
      function calculateDelay(isPrimaryRetry, attempt) {
       let delayTimeInMs = 0;
       if (isPrimaryRetry) switch (retryPolicyType) {
       case StorageRetryPolicyV2_StorageRetryPolicyType.EXPONENTIAL:
        delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);
        break;

       case StorageRetryPolicyV2_StorageRetryPolicyType.FIXED:
        delayTimeInMs = retryDelayInMs;
       } else delayTimeInMs = 1e3 * Math.random();
       return src_log_logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`), delayTimeInMs;
      }
      return {
       name: "storageRetryPolicy",
       async sendRequest(request, next) {
        tryTimeoutInMs && (request.url = setURLParameter(request.url, constants_URLConstants_Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1e3))));
        const primaryUrl = request.url, secondaryUrl = secondaryHost ? setURLHost(request.url, secondaryHost) : void 0;
        let response, error, secondaryHas404 = !1, attempt = 1, retryAgain = !0;
        for (;retryAgain; ) {
         const isPrimaryRetry = secondaryHas404 || !secondaryUrl || ![ "GET", "HEAD", "OPTIONS" ].includes(request.method) || attempt % 2 == 1;
         request.url = isPrimaryRetry ? primaryUrl : secondaryUrl, response = void 0, error = void 0;
         try {
          src_log_logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? "Primary" : "Secondary"}`), 
          response = await next(request), secondaryHas404 = secondaryHas404 || !isPrimaryRetry && 404 === response.status;
         } catch (e) {
          if (!esm_restError_isRestError(e)) throw src_log_logger.error(`RetryPolicy: Caught error, message: ${getErrorMessage(e)}`), 
          e;
          src_log_logger.error(`RetryPolicy: Caught error, message: ${e.message}, code: ${e.code}`), 
          error = e;
         }
         retryAgain = shouldRetry({
          isPrimaryRetry,
          attempt,
          response,
          error
         }), retryAgain && await utils_common_delay(calculateDelay(isPrimaryRetry, attempt), request.abortSignal, StorageRetryPolicyV2_RETRY_ABORT_ERROR), 
         attempt++;
        }
        if (response) return response;
        throw null != error ? error : new esm_restError_RestError("RetryPolicy failed without known error.");
       }
      };
     }(restOptions.retryOptions), {
      phase: "Retry"
     }), corePipeline.addPolicy({
      name: "storageBrowserPolicy",
      sendRequest: async (request, next) => (esm_isNode || ("GET" !== request.method && "HEAD" !== request.method || (request.url = setURLParameter(request.url, constants_URLConstants_Parameters.FORCE_BROWSER_NO_CACHE, (new Date).getTime().toString())), 
      request.headers.delete(constants_HeaderConstants_COOKIE), request.headers.delete(constants_HeaderConstants_CONTENT_LENGTH)), 
      next(request))
     });
     const downlevelResults = function(pipeline) {
      const knownFactoryFunctions = [ isAnonymousCredential, isStorageSharedKeyCredential, isCoreHttpBearerTokenFactory, isStorageBrowserPolicyFactory, isStorageRetryPolicyFactory, isStorageTelemetryPolicyFactory, isCoreHttpPolicyFactory ];
      if (pipeline.factories.length) {
       const novelFactories = pipeline.factories.filter((factory => !knownFactoryFunctions.some((knownFactory => knownFactory(factory)))));
       if (novelFactories.length) {
        const hasInjector = novelFactories.some((factory => function(factory) {
         return "InjectorPolicyFactory" === factory.constructor.name;
        }(factory)));
        return {
         wrappedPolicies: createRequestPolicyFactoryPolicy(novelFactories),
         afterRetry: hasInjector
        };
       }
      }
     }(pipeline);
     downlevelResults && corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? {
      afterPhase: "Retry"
     } : void 0);
     const credential = getCredentialFromPipeline(pipeline);
     isTokenCredential(credential) ? corePipeline.addPolicy(bearerTokenAuthenticationPolicy({
      credential,
      scopes: null !== (_a = restOptions.audience) && void 0 !== _a ? _a : StorageOAuthScopes,
      challengeCallbacks: {
       authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge
      }
     }), {
      phase: "Sign"
     }) : credential instanceof StorageSharedKeyCredential && corePipeline.addPolicy(storageSharedKeyCredentialPolicy({
      accountName: credential.accountName,
      accountKey: credential.accountKey
     }), {
      phase: "Sign"
     }), pipeline._corePipeline = corePipeline;
    }
    return Object.assign(Object.assign({}, restOptions), {
     allowInsecureConnection: !0,
     httpClient,
     pipeline: corePipeline
    });
   }
   function getCredentialFromPipeline(pipeline) {
    if (pipeline._credential) return pipeline._credential;
    let credential = new AnonymousCredential;
    for (const factory of pipeline.factories) if (isTokenCredential(factory.credential)) credential = factory.credential; else if (isStorageSharedKeyCredential(factory)) return factory;
    return credential;
   }
   function isStorageSharedKeyCredential(factory) {
    return factory instanceof StorageSharedKeyCredential || "StorageSharedKeyCredential" === factory.constructor.name;
   }
   function isAnonymousCredential(factory) {
    return factory instanceof AnonymousCredential || "AnonymousCredential" === factory.constructor.name;
   }
   function isCoreHttpBearerTokenFactory(factory) {
    return isTokenCredential(factory.credential);
   }
   function isStorageBrowserPolicyFactory(factory) {
    return factory instanceof StorageBrowserPolicyFactory || "StorageBrowserPolicyFactory" === factory.constructor.name;
   }
   function isStorageRetryPolicyFactory(factory) {
    return factory instanceof StorageRetryPolicyFactory || "StorageRetryPolicyFactory" === factory.constructor.name;
   }
   function isStorageTelemetryPolicyFactory(factory) {
    return "TelemetryPolicyFactory" === factory.constructor.name;
   }
   function isCoreHttpPolicyFactory(factory) {
    const mockRequestPolicyOptions = {
     log(_logLevel, _message) {},
     shouldLog: _logLevel => !1
    }, policyName = factory.create({
     sendRequest: async request => ({
      request,
      headers: request.headers.clone(),
      status: 500
     })
    }, mockRequestPolicyOptions).constructor.name;
    return [ "GenerateClientRequestIdPolicy", "TracingPolicy", "LogPolicy", "ProxyPolicy", "DisableResponseDecompressionPolicy", "KeepAlivePolicy", "DeserializationPolicy" ].some((knownPolicyName => policyName.startsWith(knownPolicyName)));
   }
   const BlobServiceProperties = {
    serializedName: "BlobServiceProperties",
    xmlName: "StorageServiceProperties",
    type: {
     name: "Composite",
     className: "BlobServiceProperties",
     modelProperties: {
      blobAnalyticsLogging: {
       serializedName: "Logging",
       xmlName: "Logging",
       type: {
        name: "Composite",
        className: "Logging"
       }
      },
      hourMetrics: {
       serializedName: "HourMetrics",
       xmlName: "HourMetrics",
       type: {
        name: "Composite",
        className: "Metrics"
       }
      },
      minuteMetrics: {
       serializedName: "MinuteMetrics",
       xmlName: "MinuteMetrics",
       type: {
        name: "Composite",
        className: "Metrics"
       }
      },
      cors: {
       serializedName: "Cors",
       xmlName: "Cors",
       xmlIsWrapped: !0,
       xmlElementName: "CorsRule",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "CorsRule"
         }
        }
       }
      },
      defaultServiceVersion: {
       serializedName: "DefaultServiceVersion",
       xmlName: "DefaultServiceVersion",
       type: {
        name: "String"
       }
      },
      deleteRetentionPolicy: {
       serializedName: "DeleteRetentionPolicy",
       xmlName: "DeleteRetentionPolicy",
       type: {
        name: "Composite",
        className: "RetentionPolicy"
       }
      },
      staticWebsite: {
       serializedName: "StaticWebsite",
       xmlName: "StaticWebsite",
       type: {
        name: "Composite",
        className: "StaticWebsite"
       }
      }
     }
    }
   }, Logging = {
    serializedName: "Logging",
    type: {
     name: "Composite",
     className: "Logging",
     modelProperties: {
      version: {
       serializedName: "Version",
       required: !0,
       xmlName: "Version",
       type: {
        name: "String"
       }
      },
      deleteProperty: {
       serializedName: "Delete",
       required: !0,
       xmlName: "Delete",
       type: {
        name: "Boolean"
       }
      },
      read: {
       serializedName: "Read",
       required: !0,
       xmlName: "Read",
       type: {
        name: "Boolean"
       }
      },
      write: {
       serializedName: "Write",
       required: !0,
       xmlName: "Write",
       type: {
        name: "Boolean"
       }
      },
      retentionPolicy: {
       serializedName: "RetentionPolicy",
       xmlName: "RetentionPolicy",
       type: {
        name: "Composite",
        className: "RetentionPolicy"
       }
      }
     }
    }
   }, RetentionPolicy = {
    serializedName: "RetentionPolicy",
    type: {
     name: "Composite",
     className: "RetentionPolicy",
     modelProperties: {
      enabled: {
       serializedName: "Enabled",
       required: !0,
       xmlName: "Enabled",
       type: {
        name: "Boolean"
       }
      },
      days: {
       constraints: {
        InclusiveMinimum: 1
       },
       serializedName: "Days",
       xmlName: "Days",
       type: {
        name: "Number"
       }
      }
     }
    }
   }, Metrics = {
    serializedName: "Metrics",
    type: {
     name: "Composite",
     className: "Metrics",
     modelProperties: {
      version: {
       serializedName: "Version",
       xmlName: "Version",
       type: {
        name: "String"
       }
      },
      enabled: {
       serializedName: "Enabled",
       required: !0,
       xmlName: "Enabled",
       type: {
        name: "Boolean"
       }
      },
      includeAPIs: {
       serializedName: "IncludeAPIs",
       xmlName: "IncludeAPIs",
       type: {
        name: "Boolean"
       }
      },
      retentionPolicy: {
       serializedName: "RetentionPolicy",
       xmlName: "RetentionPolicy",
       type: {
        name: "Composite",
        className: "RetentionPolicy"
       }
      }
     }
    }
   }, CorsRule = {
    serializedName: "CorsRule",
    type: {
     name: "Composite",
     className: "CorsRule",
     modelProperties: {
      allowedOrigins: {
       serializedName: "AllowedOrigins",
       required: !0,
       xmlName: "AllowedOrigins",
       type: {
        name: "String"
       }
      },
      allowedMethods: {
       serializedName: "AllowedMethods",
       required: !0,
       xmlName: "AllowedMethods",
       type: {
        name: "String"
       }
      },
      allowedHeaders: {
       serializedName: "AllowedHeaders",
       required: !0,
       xmlName: "AllowedHeaders",
       type: {
        name: "String"
       }
      },
      exposedHeaders: {
       serializedName: "ExposedHeaders",
       required: !0,
       xmlName: "ExposedHeaders",
       type: {
        name: "String"
       }
      },
      maxAgeInSeconds: {
       constraints: {
        InclusiveMinimum: 0
       },
       serializedName: "MaxAgeInSeconds",
       required: !0,
       xmlName: "MaxAgeInSeconds",
       type: {
        name: "Number"
       }
      }
     }
    }
   }, StaticWebsite = {
    serializedName: "StaticWebsite",
    type: {
     name: "Composite",
     className: "StaticWebsite",
     modelProperties: {
      enabled: {
       serializedName: "Enabled",
       required: !0,
       xmlName: "Enabled",
       type: {
        name: "Boolean"
       }
      },
      indexDocument: {
       serializedName: "IndexDocument",
       xmlName: "IndexDocument",
       type: {
        name: "String"
       }
      },
      errorDocument404Path: {
       serializedName: "ErrorDocument404Path",
       xmlName: "ErrorDocument404Path",
       type: {
        name: "String"
       }
      },
      defaultIndexDocumentPath: {
       serializedName: "DefaultIndexDocumentPath",
       xmlName: "DefaultIndexDocumentPath",
       type: {
        name: "String"
       }
      }
     }
    }
   }, StorageError = {
    serializedName: "StorageError",
    type: {
     name: "Composite",
     className: "StorageError",
     modelProperties: {
      message: {
       serializedName: "Message",
       xmlName: "Message",
       type: {
        name: "String"
       }
      },
      code: {
       serializedName: "Code",
       xmlName: "Code",
       type: {
        name: "String"
       }
      },
      authenticationErrorDetail: {
       serializedName: "AuthenticationErrorDetail",
       xmlName: "AuthenticationErrorDetail",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobServiceStatistics = {
    serializedName: "BlobServiceStatistics",
    xmlName: "StorageServiceStats",
    type: {
     name: "Composite",
     className: "BlobServiceStatistics",
     modelProperties: {
      geoReplication: {
       serializedName: "GeoReplication",
       xmlName: "GeoReplication",
       type: {
        name: "Composite",
        className: "GeoReplication"
       }
      }
     }
    }
   }, GeoReplication = {
    serializedName: "GeoReplication",
    type: {
     name: "Composite",
     className: "GeoReplication",
     modelProperties: {
      status: {
       serializedName: "Status",
       required: !0,
       xmlName: "Status",
       type: {
        name: "Enum",
        allowedValues: [ "live", "bootstrap", "unavailable" ]
       }
      },
      lastSyncOn: {
       serializedName: "LastSyncTime",
       required: !0,
       xmlName: "LastSyncTime",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, ListContainersSegmentResponse = {
    serializedName: "ListContainersSegmentResponse",
    xmlName: "EnumerationResults",
    type: {
     name: "Composite",
     className: "ListContainersSegmentResponse",
     modelProperties: {
      serviceEndpoint: {
       serializedName: "ServiceEndpoint",
       required: !0,
       xmlName: "ServiceEndpoint",
       xmlIsAttribute: !0,
       type: {
        name: "String"
       }
      },
      prefix: {
       serializedName: "Prefix",
       xmlName: "Prefix",
       type: {
        name: "String"
       }
      },
      marker: {
       serializedName: "Marker",
       xmlName: "Marker",
       type: {
        name: "String"
       }
      },
      maxPageSize: {
       serializedName: "MaxResults",
       xmlName: "MaxResults",
       type: {
        name: "Number"
       }
      },
      containerItems: {
       serializedName: "ContainerItems",
       required: !0,
       xmlName: "Containers",
       xmlIsWrapped: !0,
       xmlElementName: "Container",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "ContainerItem"
         }
        }
       }
      },
      continuationToken: {
       serializedName: "NextMarker",
       xmlName: "NextMarker",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerItem = {
    serializedName: "ContainerItem",
    xmlName: "Container",
    type: {
     name: "Composite",
     className: "ContainerItem",
     modelProperties: {
      name: {
       serializedName: "Name",
       required: !0,
       xmlName: "Name",
       type: {
        name: "String"
       }
      },
      deleted: {
       serializedName: "Deleted",
       xmlName: "Deleted",
       type: {
        name: "Boolean"
       }
      },
      version: {
       serializedName: "Version",
       xmlName: "Version",
       type: {
        name: "String"
       }
      },
      properties: {
       serializedName: "Properties",
       xmlName: "Properties",
       type: {
        name: "Composite",
        className: "ContainerProperties"
       }
      },
      metadata: {
       serializedName: "Metadata",
       xmlName: "Metadata",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      }
     }
    }
   }, ContainerProperties = {
    serializedName: "ContainerProperties",
    type: {
     name: "Composite",
     className: "ContainerProperties",
     modelProperties: {
      lastModified: {
       serializedName: "Last-Modified",
       required: !0,
       xmlName: "Last-Modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      etag: {
       serializedName: "Etag",
       required: !0,
       xmlName: "Etag",
       type: {
        name: "String"
       }
      },
      leaseStatus: {
       serializedName: "LeaseStatus",
       xmlName: "LeaseStatus",
       type: {
        name: "Enum",
        allowedValues: [ "locked", "unlocked" ]
       }
      },
      leaseState: {
       serializedName: "LeaseState",
       xmlName: "LeaseState",
       type: {
        name: "Enum",
        allowedValues: [ "available", "leased", "expired", "breaking", "broken" ]
       }
      },
      leaseDuration: {
       serializedName: "LeaseDuration",
       xmlName: "LeaseDuration",
       type: {
        name: "Enum",
        allowedValues: [ "infinite", "fixed" ]
       }
      },
      publicAccess: {
       serializedName: "PublicAccess",
       xmlName: "PublicAccess",
       type: {
        name: "Enum",
        allowedValues: [ "container", "blob" ]
       }
      },
      hasImmutabilityPolicy: {
       serializedName: "HasImmutabilityPolicy",
       xmlName: "HasImmutabilityPolicy",
       type: {
        name: "Boolean"
       }
      },
      hasLegalHold: {
       serializedName: "HasLegalHold",
       xmlName: "HasLegalHold",
       type: {
        name: "Boolean"
       }
      },
      defaultEncryptionScope: {
       serializedName: "DefaultEncryptionScope",
       xmlName: "DefaultEncryptionScope",
       type: {
        name: "String"
       }
      },
      preventEncryptionScopeOverride: {
       serializedName: "DenyEncryptionScopeOverride",
       xmlName: "DenyEncryptionScopeOverride",
       type: {
        name: "Boolean"
       }
      },
      deletedOn: {
       serializedName: "DeletedTime",
       xmlName: "DeletedTime",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      remainingRetentionDays: {
       serializedName: "RemainingRetentionDays",
       xmlName: "RemainingRetentionDays",
       type: {
        name: "Number"
       }
      },
      isImmutableStorageWithVersioningEnabled: {
       serializedName: "ImmutableStorageWithVersioningEnabled",
       xmlName: "ImmutableStorageWithVersioningEnabled",
       type: {
        name: "Boolean"
       }
      }
     }
    }
   }, KeyInfo = {
    serializedName: "KeyInfo",
    type: {
     name: "Composite",
     className: "KeyInfo",
     modelProperties: {
      startsOn: {
       serializedName: "Start",
       required: !0,
       xmlName: "Start",
       type: {
        name: "String"
       }
      },
      expiresOn: {
       serializedName: "Expiry",
       required: !0,
       xmlName: "Expiry",
       type: {
        name: "String"
       }
      }
     }
    }
   }, UserDelegationKey = {
    serializedName: "UserDelegationKey",
    type: {
     name: "Composite",
     className: "UserDelegationKey",
     modelProperties: {
      signedObjectId: {
       serializedName: "SignedOid",
       required: !0,
       xmlName: "SignedOid",
       type: {
        name: "String"
       }
      },
      signedTenantId: {
       serializedName: "SignedTid",
       required: !0,
       xmlName: "SignedTid",
       type: {
        name: "String"
       }
      },
      signedStartsOn: {
       serializedName: "SignedStart",
       required: !0,
       xmlName: "SignedStart",
       type: {
        name: "String"
       }
      },
      signedExpiresOn: {
       serializedName: "SignedExpiry",
       required: !0,
       xmlName: "SignedExpiry",
       type: {
        name: "String"
       }
      },
      signedService: {
       serializedName: "SignedService",
       required: !0,
       xmlName: "SignedService",
       type: {
        name: "String"
       }
      },
      signedVersion: {
       serializedName: "SignedVersion",
       required: !0,
       xmlName: "SignedVersion",
       type: {
        name: "String"
       }
      },
      value: {
       serializedName: "Value",
       required: !0,
       xmlName: "Value",
       type: {
        name: "String"
       }
      }
     }
    }
   }, FilterBlobSegment = {
    serializedName: "FilterBlobSegment",
    xmlName: "EnumerationResults",
    type: {
     name: "Composite",
     className: "FilterBlobSegment",
     modelProperties: {
      serviceEndpoint: {
       serializedName: "ServiceEndpoint",
       required: !0,
       xmlName: "ServiceEndpoint",
       xmlIsAttribute: !0,
       type: {
        name: "String"
       }
      },
      where: {
       serializedName: "Where",
       required: !0,
       xmlName: "Where",
       type: {
        name: "String"
       }
      },
      blobs: {
       serializedName: "Blobs",
       required: !0,
       xmlName: "Blobs",
       xmlIsWrapped: !0,
       xmlElementName: "Blob",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "FilterBlobItem"
         }
        }
       }
      },
      continuationToken: {
       serializedName: "NextMarker",
       xmlName: "NextMarker",
       type: {
        name: "String"
       }
      }
     }
    }
   }, FilterBlobItem = {
    serializedName: "FilterBlobItem",
    xmlName: "Blob",
    type: {
     name: "Composite",
     className: "FilterBlobItem",
     modelProperties: {
      name: {
       serializedName: "Name",
       required: !0,
       xmlName: "Name",
       type: {
        name: "String"
       }
      },
      containerName: {
       serializedName: "ContainerName",
       required: !0,
       xmlName: "ContainerName",
       type: {
        name: "String"
       }
      },
      tags: {
       serializedName: "Tags",
       xmlName: "Tags",
       type: {
        name: "Composite",
        className: "BlobTags"
       }
      }
     }
    }
   }, BlobTags = {
    serializedName: "BlobTags",
    xmlName: "Tags",
    type: {
     name: "Composite",
     className: "BlobTags",
     modelProperties: {
      blobTagSet: {
       serializedName: "BlobTagSet",
       required: !0,
       xmlName: "TagSet",
       xmlIsWrapped: !0,
       xmlElementName: "Tag",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "BlobTag"
         }
        }
       }
      }
     }
    }
   }, BlobTag = {
    serializedName: "BlobTag",
    xmlName: "Tag",
    type: {
     name: "Composite",
     className: "BlobTag",
     modelProperties: {
      key: {
       serializedName: "Key",
       required: !0,
       xmlName: "Key",
       type: {
        name: "String"
       }
      },
      value: {
       serializedName: "Value",
       required: !0,
       xmlName: "Value",
       type: {
        name: "String"
       }
      }
     }
    }
   }, SignedIdentifier = {
    serializedName: "SignedIdentifier",
    xmlName: "SignedIdentifier",
    type: {
     name: "Composite",
     className: "SignedIdentifier",
     modelProperties: {
      id: {
       serializedName: "Id",
       required: !0,
       xmlName: "Id",
       type: {
        name: "String"
       }
      },
      accessPolicy: {
       serializedName: "AccessPolicy",
       xmlName: "AccessPolicy",
       type: {
        name: "Composite",
        className: "AccessPolicy"
       }
      }
     }
    }
   }, AccessPolicy = {
    serializedName: "AccessPolicy",
    type: {
     name: "Composite",
     className: "AccessPolicy",
     modelProperties: {
      startsOn: {
       serializedName: "Start",
       xmlName: "Start",
       type: {
        name: "String"
       }
      },
      expiresOn: {
       serializedName: "Expiry",
       xmlName: "Expiry",
       type: {
        name: "String"
       }
      },
      permissions: {
       serializedName: "Permission",
       xmlName: "Permission",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ListBlobsFlatSegmentResponse = {
    serializedName: "ListBlobsFlatSegmentResponse",
    xmlName: "EnumerationResults",
    type: {
     name: "Composite",
     className: "ListBlobsFlatSegmentResponse",
     modelProperties: {
      serviceEndpoint: {
       serializedName: "ServiceEndpoint",
       required: !0,
       xmlName: "ServiceEndpoint",
       xmlIsAttribute: !0,
       type: {
        name: "String"
       }
      },
      containerName: {
       serializedName: "ContainerName",
       required: !0,
       xmlName: "ContainerName",
       xmlIsAttribute: !0,
       type: {
        name: "String"
       }
      },
      prefix: {
       serializedName: "Prefix",
       xmlName: "Prefix",
       type: {
        name: "String"
       }
      },
      marker: {
       serializedName: "Marker",
       xmlName: "Marker",
       type: {
        name: "String"
       }
      },
      maxPageSize: {
       serializedName: "MaxResults",
       xmlName: "MaxResults",
       type: {
        name: "Number"
       }
      },
      segment: {
       serializedName: "Segment",
       xmlName: "Blobs",
       type: {
        name: "Composite",
        className: "BlobFlatListSegment"
       }
      },
      continuationToken: {
       serializedName: "NextMarker",
       xmlName: "NextMarker",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobFlatListSegment = {
    serializedName: "BlobFlatListSegment",
    xmlName: "Blobs",
    type: {
     name: "Composite",
     className: "BlobFlatListSegment",
     modelProperties: {
      blobItems: {
       serializedName: "BlobItems",
       required: !0,
       xmlName: "BlobItems",
       xmlElementName: "Blob",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "BlobItemInternal"
         }
        }
       }
      }
     }
    }
   }, BlobItemInternal = {
    serializedName: "BlobItemInternal",
    xmlName: "Blob",
    type: {
     name: "Composite",
     className: "BlobItemInternal",
     modelProperties: {
      name: {
       serializedName: "Name",
       xmlName: "Name",
       type: {
        name: "Composite",
        className: "BlobName"
       }
      },
      deleted: {
       serializedName: "Deleted",
       required: !0,
       xmlName: "Deleted",
       type: {
        name: "Boolean"
       }
      },
      snapshot: {
       serializedName: "Snapshot",
       required: !0,
       xmlName: "Snapshot",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "VersionId",
       xmlName: "VersionId",
       type: {
        name: "String"
       }
      },
      isCurrentVersion: {
       serializedName: "IsCurrentVersion",
       xmlName: "IsCurrentVersion",
       type: {
        name: "Boolean"
       }
      },
      properties: {
       serializedName: "Properties",
       xmlName: "Properties",
       type: {
        name: "Composite",
        className: "BlobPropertiesInternal"
       }
      },
      metadata: {
       serializedName: "Metadata",
       xmlName: "Metadata",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      },
      blobTags: {
       serializedName: "BlobTags",
       xmlName: "Tags",
       type: {
        name: "Composite",
        className: "BlobTags"
       }
      },
      objectReplicationMetadata: {
       serializedName: "ObjectReplicationMetadata",
       xmlName: "OrMetadata",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      },
      hasVersionsOnly: {
       serializedName: "HasVersionsOnly",
       xmlName: "HasVersionsOnly",
       type: {
        name: "Boolean"
       }
      }
     }
    }
   }, BlobName = {
    serializedName: "BlobName",
    type: {
     name: "Composite",
     className: "BlobName",
     modelProperties: {
      encoded: {
       serializedName: "Encoded",
       xmlName: "Encoded",
       xmlIsAttribute: !0,
       type: {
        name: "Boolean"
       }
      },
      content: {
       serializedName: "content",
       xmlName: "content",
       xmlIsMsText: !0,
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobPropertiesInternal = {
    serializedName: "BlobPropertiesInternal",
    xmlName: "Properties",
    type: {
     name: "Composite",
     className: "BlobPropertiesInternal",
     modelProperties: {
      createdOn: {
       serializedName: "Creation-Time",
       xmlName: "Creation-Time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      lastModified: {
       serializedName: "Last-Modified",
       required: !0,
       xmlName: "Last-Modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      etag: {
       serializedName: "Etag",
       required: !0,
       xmlName: "Etag",
       type: {
        name: "String"
       }
      },
      contentLength: {
       serializedName: "Content-Length",
       xmlName: "Content-Length",
       type: {
        name: "Number"
       }
      },
      contentType: {
       serializedName: "Content-Type",
       xmlName: "Content-Type",
       type: {
        name: "String"
       }
      },
      contentEncoding: {
       serializedName: "Content-Encoding",
       xmlName: "Content-Encoding",
       type: {
        name: "String"
       }
      },
      contentLanguage: {
       serializedName: "Content-Language",
       xmlName: "Content-Language",
       type: {
        name: "String"
       }
      },
      contentMD5: {
       serializedName: "Content-MD5",
       xmlName: "Content-MD5",
       type: {
        name: "ByteArray"
       }
      },
      contentDisposition: {
       serializedName: "Content-Disposition",
       xmlName: "Content-Disposition",
       type: {
        name: "String"
       }
      },
      cacheControl: {
       serializedName: "Cache-Control",
       xmlName: "Cache-Control",
       type: {
        name: "String"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      blobType: {
       serializedName: "BlobType",
       xmlName: "BlobType",
       type: {
        name: "Enum",
        allowedValues: [ "BlockBlob", "PageBlob", "AppendBlob" ]
       }
      },
      leaseStatus: {
       serializedName: "LeaseStatus",
       xmlName: "LeaseStatus",
       type: {
        name: "Enum",
        allowedValues: [ "locked", "unlocked" ]
       }
      },
      leaseState: {
       serializedName: "LeaseState",
       xmlName: "LeaseState",
       type: {
        name: "Enum",
        allowedValues: [ "available", "leased", "expired", "breaking", "broken" ]
       }
      },
      leaseDuration: {
       serializedName: "LeaseDuration",
       xmlName: "LeaseDuration",
       type: {
        name: "Enum",
        allowedValues: [ "infinite", "fixed" ]
       }
      },
      copyId: {
       serializedName: "CopyId",
       xmlName: "CopyId",
       type: {
        name: "String"
       }
      },
      copyStatus: {
       serializedName: "CopyStatus",
       xmlName: "CopyStatus",
       type: {
        name: "Enum",
        allowedValues: [ "pending", "success", "aborted", "failed" ]
       }
      },
      copySource: {
       serializedName: "CopySource",
       xmlName: "CopySource",
       type: {
        name: "String"
       }
      },
      copyProgress: {
       serializedName: "CopyProgress",
       xmlName: "CopyProgress",
       type: {
        name: "String"
       }
      },
      copyCompletedOn: {
       serializedName: "CopyCompletionTime",
       xmlName: "CopyCompletionTime",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      copyStatusDescription: {
       serializedName: "CopyStatusDescription",
       xmlName: "CopyStatusDescription",
       type: {
        name: "String"
       }
      },
      serverEncrypted: {
       serializedName: "ServerEncrypted",
       xmlName: "ServerEncrypted",
       type: {
        name: "Boolean"
       }
      },
      incrementalCopy: {
       serializedName: "IncrementalCopy",
       xmlName: "IncrementalCopy",
       type: {
        name: "Boolean"
       }
      },
      destinationSnapshot: {
       serializedName: "DestinationSnapshot",
       xmlName: "DestinationSnapshot",
       type: {
        name: "String"
       }
      },
      deletedOn: {
       serializedName: "DeletedTime",
       xmlName: "DeletedTime",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      remainingRetentionDays: {
       serializedName: "RemainingRetentionDays",
       xmlName: "RemainingRetentionDays",
       type: {
        name: "Number"
       }
      },
      accessTier: {
       serializedName: "AccessTier",
       xmlName: "AccessTier",
       type: {
        name: "Enum",
        allowedValues: [ "P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Cold" ]
       }
      },
      accessTierInferred: {
       serializedName: "AccessTierInferred",
       xmlName: "AccessTierInferred",
       type: {
        name: "Boolean"
       }
      },
      archiveStatus: {
       serializedName: "ArchiveStatus",
       xmlName: "ArchiveStatus",
       type: {
        name: "Enum",
        allowedValues: [ "rehydrate-pending-to-hot", "rehydrate-pending-to-cool", "rehydrate-pending-to-cold" ]
       }
      },
      customerProvidedKeySha256: {
       serializedName: "CustomerProvidedKeySha256",
       xmlName: "CustomerProvidedKeySha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "EncryptionScope",
       xmlName: "EncryptionScope",
       type: {
        name: "String"
       }
      },
      accessTierChangedOn: {
       serializedName: "AccessTierChangeTime",
       xmlName: "AccessTierChangeTime",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      tagCount: {
       serializedName: "TagCount",
       xmlName: "TagCount",
       type: {
        name: "Number"
       }
      },
      expiresOn: {
       serializedName: "Expiry-Time",
       xmlName: "Expiry-Time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isSealed: {
       serializedName: "Sealed",
       xmlName: "Sealed",
       type: {
        name: "Boolean"
       }
      },
      rehydratePriority: {
       serializedName: "RehydratePriority",
       xmlName: "RehydratePriority",
       type: {
        name: "Enum",
        allowedValues: [ "High", "Standard" ]
       }
      },
      lastAccessedOn: {
       serializedName: "LastAccessTime",
       xmlName: "LastAccessTime",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      immutabilityPolicyExpiresOn: {
       serializedName: "ImmutabilityPolicyUntilDate",
       xmlName: "ImmutabilityPolicyUntilDate",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      immutabilityPolicyMode: {
       serializedName: "ImmutabilityPolicyMode",
       xmlName: "ImmutabilityPolicyMode",
       type: {
        name: "Enum",
        allowedValues: [ "Mutable", "Unlocked", "Locked" ]
       }
      },
      legalHold: {
       serializedName: "LegalHold",
       xmlName: "LegalHold",
       type: {
        name: "Boolean"
       }
      }
     }
    }
   }, ListBlobsHierarchySegmentResponse = {
    serializedName: "ListBlobsHierarchySegmentResponse",
    xmlName: "EnumerationResults",
    type: {
     name: "Composite",
     className: "ListBlobsHierarchySegmentResponse",
     modelProperties: {
      serviceEndpoint: {
       serializedName: "ServiceEndpoint",
       required: !0,
       xmlName: "ServiceEndpoint",
       xmlIsAttribute: !0,
       type: {
        name: "String"
       }
      },
      containerName: {
       serializedName: "ContainerName",
       required: !0,
       xmlName: "ContainerName",
       xmlIsAttribute: !0,
       type: {
        name: "String"
       }
      },
      prefix: {
       serializedName: "Prefix",
       xmlName: "Prefix",
       type: {
        name: "String"
       }
      },
      marker: {
       serializedName: "Marker",
       xmlName: "Marker",
       type: {
        name: "String"
       }
      },
      maxPageSize: {
       serializedName: "MaxResults",
       xmlName: "MaxResults",
       type: {
        name: "Number"
       }
      },
      delimiter: {
       serializedName: "Delimiter",
       xmlName: "Delimiter",
       type: {
        name: "String"
       }
      },
      segment: {
       serializedName: "Segment",
       xmlName: "Blobs",
       type: {
        name: "Composite",
        className: "BlobHierarchyListSegment"
       }
      },
      continuationToken: {
       serializedName: "NextMarker",
       xmlName: "NextMarker",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobHierarchyListSegment = {
    serializedName: "BlobHierarchyListSegment",
    xmlName: "Blobs",
    type: {
     name: "Composite",
     className: "BlobHierarchyListSegment",
     modelProperties: {
      blobPrefixes: {
       serializedName: "BlobPrefixes",
       xmlName: "BlobPrefixes",
       xmlElementName: "BlobPrefix",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "BlobPrefix"
         }
        }
       }
      },
      blobItems: {
       serializedName: "BlobItems",
       required: !0,
       xmlName: "BlobItems",
       xmlElementName: "Blob",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "BlobItemInternal"
         }
        }
       }
      }
     }
    }
   }, BlobPrefix = {
    serializedName: "BlobPrefix",
    type: {
     name: "Composite",
     className: "BlobPrefix",
     modelProperties: {
      name: {
       serializedName: "Name",
       xmlName: "Name",
       type: {
        name: "Composite",
        className: "BlobName"
       }
      }
     }
    }
   }, BlockLookupList = {
    serializedName: "BlockLookupList",
    xmlName: "BlockList",
    type: {
     name: "Composite",
     className: "BlockLookupList",
     modelProperties: {
      committed: {
       serializedName: "Committed",
       xmlName: "Committed",
       xmlElementName: "Committed",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "String"
         }
        }
       }
      },
      uncommitted: {
       serializedName: "Uncommitted",
       xmlName: "Uncommitted",
       xmlElementName: "Uncommitted",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "String"
         }
        }
       }
      },
      latest: {
       serializedName: "Latest",
       xmlName: "Latest",
       xmlElementName: "Latest",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "String"
         }
        }
       }
      }
     }
    }
   }, BlockList = {
    serializedName: "BlockList",
    type: {
     name: "Composite",
     className: "BlockList",
     modelProperties: {
      committedBlocks: {
       serializedName: "CommittedBlocks",
       xmlName: "CommittedBlocks",
       xmlIsWrapped: !0,
       xmlElementName: "Block",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "Block"
         }
        }
       }
      },
      uncommittedBlocks: {
       serializedName: "UncommittedBlocks",
       xmlName: "UncommittedBlocks",
       xmlIsWrapped: !0,
       xmlElementName: "Block",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "Block"
         }
        }
       }
      }
     }
    }
   }, Block = {
    serializedName: "Block",
    type: {
     name: "Composite",
     className: "Block",
     modelProperties: {
      name: {
       serializedName: "Name",
       required: !0,
       xmlName: "Name",
       type: {
        name: "String"
       }
      },
      size: {
       serializedName: "Size",
       required: !0,
       xmlName: "Size",
       type: {
        name: "Number"
       }
      }
     }
    }
   }, PageList = {
    serializedName: "PageList",
    type: {
     name: "Composite",
     className: "PageList",
     modelProperties: {
      pageRange: {
       serializedName: "PageRange",
       xmlName: "PageRange",
       xmlElementName: "PageRange",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "PageRange"
         }
        }
       }
      },
      clearRange: {
       serializedName: "ClearRange",
       xmlName: "ClearRange",
       xmlElementName: "ClearRange",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "ClearRange"
         }
        }
       }
      },
      continuationToken: {
       serializedName: "NextMarker",
       xmlName: "NextMarker",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageRange = {
    serializedName: "PageRange",
    xmlName: "PageRange",
    type: {
     name: "Composite",
     className: "PageRange",
     modelProperties: {
      start: {
       serializedName: "Start",
       required: !0,
       xmlName: "Start",
       type: {
        name: "Number"
       }
      },
      end: {
       serializedName: "End",
       required: !0,
       xmlName: "End",
       type: {
        name: "Number"
       }
      }
     }
    }
   }, ClearRange = {
    serializedName: "ClearRange",
    xmlName: "ClearRange",
    type: {
     name: "Composite",
     className: "ClearRange",
     modelProperties: {
      start: {
       serializedName: "Start",
       required: !0,
       xmlName: "Start",
       type: {
        name: "Number"
       }
      },
      end: {
       serializedName: "End",
       required: !0,
       xmlName: "End",
       type: {
        name: "Number"
       }
      }
     }
    }
   }, QueryRequest = {
    serializedName: "QueryRequest",
    xmlName: "QueryRequest",
    type: {
     name: "Composite",
     className: "QueryRequest",
     modelProperties: {
      queryType: {
       serializedName: "QueryType",
       required: !0,
       xmlName: "QueryType",
       type: {
        name: "String"
       }
      },
      expression: {
       serializedName: "Expression",
       required: !0,
       xmlName: "Expression",
       type: {
        name: "String"
       }
      },
      inputSerialization: {
       serializedName: "InputSerialization",
       xmlName: "InputSerialization",
       type: {
        name: "Composite",
        className: "QuerySerialization"
       }
      },
      outputSerialization: {
       serializedName: "OutputSerialization",
       xmlName: "OutputSerialization",
       type: {
        name: "Composite",
        className: "QuerySerialization"
       }
      }
     }
    }
   }, QuerySerialization = {
    serializedName: "QuerySerialization",
    type: {
     name: "Composite",
     className: "QuerySerialization",
     modelProperties: {
      format: {
       serializedName: "Format",
       xmlName: "Format",
       type: {
        name: "Composite",
        className: "QueryFormat"
       }
      }
     }
    }
   }, QueryFormat = {
    serializedName: "QueryFormat",
    type: {
     name: "Composite",
     className: "QueryFormat",
     modelProperties: {
      type: {
       serializedName: "Type",
       required: !0,
       xmlName: "Type",
       type: {
        name: "Enum",
        allowedValues: [ "delimited", "json", "arrow", "parquet" ]
       }
      },
      delimitedTextConfiguration: {
       serializedName: "DelimitedTextConfiguration",
       xmlName: "DelimitedTextConfiguration",
       type: {
        name: "Composite",
        className: "DelimitedTextConfiguration"
       }
      },
      jsonTextConfiguration: {
       serializedName: "JsonTextConfiguration",
       xmlName: "JsonTextConfiguration",
       type: {
        name: "Composite",
        className: "JsonTextConfiguration"
       }
      },
      arrowConfiguration: {
       serializedName: "ArrowConfiguration",
       xmlName: "ArrowConfiguration",
       type: {
        name: "Composite",
        className: "ArrowConfiguration"
       }
      },
      parquetTextConfiguration: {
       serializedName: "ParquetTextConfiguration",
       xmlName: "ParquetTextConfiguration",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "any"
         }
        }
       }
      }
     }
    }
   }, DelimitedTextConfiguration = {
    serializedName: "DelimitedTextConfiguration",
    xmlName: "DelimitedTextConfiguration",
    type: {
     name: "Composite",
     className: "DelimitedTextConfiguration",
     modelProperties: {
      columnSeparator: {
       serializedName: "ColumnSeparator",
       xmlName: "ColumnSeparator",
       type: {
        name: "String"
       }
      },
      fieldQuote: {
       serializedName: "FieldQuote",
       xmlName: "FieldQuote",
       type: {
        name: "String"
       }
      },
      recordSeparator: {
       serializedName: "RecordSeparator",
       xmlName: "RecordSeparator",
       type: {
        name: "String"
       }
      },
      escapeChar: {
       serializedName: "EscapeChar",
       xmlName: "EscapeChar",
       type: {
        name: "String"
       }
      },
      headersPresent: {
       serializedName: "HeadersPresent",
       xmlName: "HasHeaders",
       type: {
        name: "Boolean"
       }
      }
     }
    }
   }, JsonTextConfiguration = {
    serializedName: "JsonTextConfiguration",
    xmlName: "JsonTextConfiguration",
    type: {
     name: "Composite",
     className: "JsonTextConfiguration",
     modelProperties: {
      recordSeparator: {
       serializedName: "RecordSeparator",
       xmlName: "RecordSeparator",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ArrowConfiguration = {
    serializedName: "ArrowConfiguration",
    xmlName: "ArrowConfiguration",
    type: {
     name: "Composite",
     className: "ArrowConfiguration",
     modelProperties: {
      schema: {
       serializedName: "Schema",
       required: !0,
       xmlName: "Schema",
       xmlIsWrapped: !0,
       xmlElementName: "Field",
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "ArrowField"
         }
        }
       }
      }
     }
    }
   }, ArrowField = {
    serializedName: "ArrowField",
    xmlName: "Field",
    type: {
     name: "Composite",
     className: "ArrowField",
     modelProperties: {
      type: {
       serializedName: "Type",
       required: !0,
       xmlName: "Type",
       type: {
        name: "String"
       }
      },
      name: {
       serializedName: "Name",
       xmlName: "Name",
       type: {
        name: "String"
       }
      },
      precision: {
       serializedName: "Precision",
       xmlName: "Precision",
       type: {
        name: "Number"
       }
      },
      scale: {
       serializedName: "Scale",
       xmlName: "Scale",
       type: {
        name: "Number"
       }
      }
     }
    }
   }, ServiceSetPropertiesHeaders = {
    serializedName: "Service_setPropertiesHeaders",
    type: {
     name: "Composite",
     className: "ServiceSetPropertiesHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceSetPropertiesExceptionHeaders = {
    serializedName: "Service_setPropertiesExceptionHeaders",
    type: {
     name: "Composite",
     className: "ServiceSetPropertiesExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceGetPropertiesHeaders = {
    serializedName: "Service_getPropertiesHeaders",
    type: {
     name: "Composite",
     className: "ServiceGetPropertiesHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceGetPropertiesExceptionHeaders = {
    serializedName: "Service_getPropertiesExceptionHeaders",
    type: {
     name: "Composite",
     className: "ServiceGetPropertiesExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceGetStatisticsHeaders = {
    serializedName: "Service_getStatisticsHeaders",
    type: {
     name: "Composite",
     className: "ServiceGetStatisticsHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceGetStatisticsExceptionHeaders = {
    serializedName: "Service_getStatisticsExceptionHeaders",
    type: {
     name: "Composite",
     className: "ServiceGetStatisticsExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceListContainersSegmentHeaders = {
    serializedName: "Service_listContainersSegmentHeaders",
    type: {
     name: "Composite",
     className: "ServiceListContainersSegmentHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceListContainersSegmentExceptionHeaders = {
    serializedName: "Service_listContainersSegmentExceptionHeaders",
    type: {
     name: "Composite",
     className: "ServiceListContainersSegmentExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceGetUserDelegationKeyHeaders = {
    serializedName: "Service_getUserDelegationKeyHeaders",
    type: {
     name: "Composite",
     className: "ServiceGetUserDelegationKeyHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceGetUserDelegationKeyExceptionHeaders = {
    serializedName: "Service_getUserDelegationKeyExceptionHeaders",
    type: {
     name: "Composite",
     className: "ServiceGetUserDelegationKeyExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceGetAccountInfoHeaders = {
    serializedName: "Service_getAccountInfoHeaders",
    type: {
     name: "Composite",
     className: "ServiceGetAccountInfoHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      skuName: {
       serializedName: "x-ms-sku-name",
       xmlName: "x-ms-sku-name",
       type: {
        name: "Enum",
        allowedValues: [ "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS" ]
       }
      },
      accountKind: {
       serializedName: "x-ms-account-kind",
       xmlName: "x-ms-account-kind",
       type: {
        name: "Enum",
        allowedValues: [ "Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage" ]
       }
      },
      isHierarchicalNamespaceEnabled: {
       serializedName: "x-ms-is-hns-enabled",
       xmlName: "x-ms-is-hns-enabled",
       type: {
        name: "Boolean"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceGetAccountInfoExceptionHeaders = {
    serializedName: "Service_getAccountInfoExceptionHeaders",
    type: {
     name: "Composite",
     className: "ServiceGetAccountInfoExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceSubmitBatchHeaders = {
    serializedName: "Service_submitBatchHeaders",
    type: {
     name: "Composite",
     className: "ServiceSubmitBatchHeaders",
     modelProperties: {
      contentType: {
       serializedName: "content-type",
       xmlName: "content-type",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceSubmitBatchExceptionHeaders = {
    serializedName: "Service_submitBatchExceptionHeaders",
    type: {
     name: "Composite",
     className: "ServiceSubmitBatchExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceFilterBlobsHeaders = {
    serializedName: "Service_filterBlobsHeaders",
    type: {
     name: "Composite",
     className: "ServiceFilterBlobsHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ServiceFilterBlobsExceptionHeaders = {
    serializedName: "Service_filterBlobsExceptionHeaders",
    type: {
     name: "Composite",
     className: "ServiceFilterBlobsExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerCreateHeaders = {
    serializedName: "Container_createHeaders",
    type: {
     name: "Composite",
     className: "ContainerCreateHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerCreateExceptionHeaders = {
    serializedName: "Container_createExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerCreateExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerGetPropertiesHeaders = {
    serializedName: "Container_getPropertiesHeaders",
    type: {
     name: "Composite",
     className: "ContainerGetPropertiesHeaders",
     modelProperties: {
      metadata: {
       serializedName: "x-ms-meta",
       headerCollectionPrefix: "x-ms-meta-",
       xmlName: "x-ms-meta",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      leaseDuration: {
       serializedName: "x-ms-lease-duration",
       xmlName: "x-ms-lease-duration",
       type: {
        name: "Enum",
        allowedValues: [ "infinite", "fixed" ]
       }
      },
      leaseState: {
       serializedName: "x-ms-lease-state",
       xmlName: "x-ms-lease-state",
       type: {
        name: "Enum",
        allowedValues: [ "available", "leased", "expired", "breaking", "broken" ]
       }
      },
      leaseStatus: {
       serializedName: "x-ms-lease-status",
       xmlName: "x-ms-lease-status",
       type: {
        name: "Enum",
        allowedValues: [ "locked", "unlocked" ]
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      blobPublicAccess: {
       serializedName: "x-ms-blob-public-access",
       xmlName: "x-ms-blob-public-access",
       type: {
        name: "Enum",
        allowedValues: [ "container", "blob" ]
       }
      },
      hasImmutabilityPolicy: {
       serializedName: "x-ms-has-immutability-policy",
       xmlName: "x-ms-has-immutability-policy",
       type: {
        name: "Boolean"
       }
      },
      hasLegalHold: {
       serializedName: "x-ms-has-legal-hold",
       xmlName: "x-ms-has-legal-hold",
       type: {
        name: "Boolean"
       }
      },
      defaultEncryptionScope: {
       serializedName: "x-ms-default-encryption-scope",
       xmlName: "x-ms-default-encryption-scope",
       type: {
        name: "String"
       }
      },
      denyEncryptionScopeOverride: {
       serializedName: "x-ms-deny-encryption-scope-override",
       xmlName: "x-ms-deny-encryption-scope-override",
       type: {
        name: "Boolean"
       }
      },
      isImmutableStorageWithVersioningEnabled: {
       serializedName: "x-ms-immutable-storage-with-versioning-enabled",
       xmlName: "x-ms-immutable-storage-with-versioning-enabled",
       type: {
        name: "Boolean"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerGetPropertiesExceptionHeaders = {
    serializedName: "Container_getPropertiesExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerGetPropertiesExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerDeleteHeaders = {
    serializedName: "Container_deleteHeaders",
    type: {
     name: "Composite",
     className: "ContainerDeleteHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerDeleteExceptionHeaders = {
    serializedName: "Container_deleteExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerDeleteExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerSetMetadataHeaders = {
    serializedName: "Container_setMetadataHeaders",
    type: {
     name: "Composite",
     className: "ContainerSetMetadataHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerSetMetadataExceptionHeaders = {
    serializedName: "Container_setMetadataExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerSetMetadataExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerGetAccessPolicyHeaders = {
    serializedName: "Container_getAccessPolicyHeaders",
    type: {
     name: "Composite",
     className: "ContainerGetAccessPolicyHeaders",
     modelProperties: {
      blobPublicAccess: {
       serializedName: "x-ms-blob-public-access",
       xmlName: "x-ms-blob-public-access",
       type: {
        name: "Enum",
        allowedValues: [ "container", "blob" ]
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerGetAccessPolicyExceptionHeaders = {
    serializedName: "Container_getAccessPolicyExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerGetAccessPolicyExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerSetAccessPolicyHeaders = {
    serializedName: "Container_setAccessPolicyHeaders",
    type: {
     name: "Composite",
     className: "ContainerSetAccessPolicyHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerSetAccessPolicyExceptionHeaders = {
    serializedName: "Container_setAccessPolicyExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerSetAccessPolicyExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerRestoreHeaders = {
    serializedName: "Container_restoreHeaders",
    type: {
     name: "Composite",
     className: "ContainerRestoreHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerRestoreExceptionHeaders = {
    serializedName: "Container_restoreExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerRestoreExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerRenameHeaders = {
    serializedName: "Container_renameHeaders",
    type: {
     name: "Composite",
     className: "ContainerRenameHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerRenameExceptionHeaders = {
    serializedName: "Container_renameExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerRenameExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerSubmitBatchHeaders = {
    serializedName: "Container_submitBatchHeaders",
    type: {
     name: "Composite",
     className: "ContainerSubmitBatchHeaders",
     modelProperties: {
      contentType: {
       serializedName: "content-type",
       xmlName: "content-type",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerSubmitBatchExceptionHeaders = {
    serializedName: "Container_submitBatchExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerSubmitBatchExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerFilterBlobsHeaders = {
    serializedName: "Container_filterBlobsHeaders",
    type: {
     name: "Composite",
     className: "ContainerFilterBlobsHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, ContainerFilterBlobsExceptionHeaders = {
    serializedName: "Container_filterBlobsExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerFilterBlobsExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerAcquireLeaseHeaders = {
    serializedName: "Container_acquireLeaseHeaders",
    type: {
     name: "Composite",
     className: "ContainerAcquireLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      leaseId: {
       serializedName: "x-ms-lease-id",
       xmlName: "x-ms-lease-id",
       type: {
        name: "String"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, ContainerAcquireLeaseExceptionHeaders = {
    serializedName: "Container_acquireLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerAcquireLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerReleaseLeaseHeaders = {
    serializedName: "Container_releaseLeaseHeaders",
    type: {
     name: "Composite",
     className: "ContainerReleaseLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, ContainerReleaseLeaseExceptionHeaders = {
    serializedName: "Container_releaseLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerReleaseLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerRenewLeaseHeaders = {
    serializedName: "Container_renewLeaseHeaders",
    type: {
     name: "Composite",
     className: "ContainerRenewLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      leaseId: {
       serializedName: "x-ms-lease-id",
       xmlName: "x-ms-lease-id",
       type: {
        name: "String"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, ContainerRenewLeaseExceptionHeaders = {
    serializedName: "Container_renewLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerRenewLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerBreakLeaseHeaders = {
    serializedName: "Container_breakLeaseHeaders",
    type: {
     name: "Composite",
     className: "ContainerBreakLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      leaseTime: {
       serializedName: "x-ms-lease-time",
       xmlName: "x-ms-lease-time",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, ContainerBreakLeaseExceptionHeaders = {
    serializedName: "Container_breakLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerBreakLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerChangeLeaseHeaders = {
    serializedName: "Container_changeLeaseHeaders",
    type: {
     name: "Composite",
     className: "ContainerChangeLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      leaseId: {
       serializedName: "x-ms-lease-id",
       xmlName: "x-ms-lease-id",
       type: {
        name: "String"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, ContainerChangeLeaseExceptionHeaders = {
    serializedName: "Container_changeLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerChangeLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerListBlobFlatSegmentHeaders = {
    serializedName: "Container_listBlobFlatSegmentHeaders",
    type: {
     name: "Composite",
     className: "ContainerListBlobFlatSegmentHeaders",
     modelProperties: {
      contentType: {
       serializedName: "content-type",
       xmlName: "content-type",
       type: {
        name: "String"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerListBlobFlatSegmentExceptionHeaders = {
    serializedName: "Container_listBlobFlatSegmentExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerListBlobFlatSegmentExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerListBlobHierarchySegmentHeaders = {
    serializedName: "Container_listBlobHierarchySegmentHeaders",
    type: {
     name: "Composite",
     className: "ContainerListBlobHierarchySegmentHeaders",
     modelProperties: {
      contentType: {
       serializedName: "content-type",
       xmlName: "content-type",
       type: {
        name: "String"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerListBlobHierarchySegmentExceptionHeaders = {
    serializedName: "Container_listBlobHierarchySegmentExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerListBlobHierarchySegmentExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, ContainerGetAccountInfoHeaders = {
    serializedName: "Container_getAccountInfoHeaders",
    type: {
     name: "Composite",
     className: "ContainerGetAccountInfoHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      skuName: {
       serializedName: "x-ms-sku-name",
       xmlName: "x-ms-sku-name",
       type: {
        name: "Enum",
        allowedValues: [ "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS" ]
       }
      },
      accountKind: {
       serializedName: "x-ms-account-kind",
       xmlName: "x-ms-account-kind",
       type: {
        name: "Enum",
        allowedValues: [ "Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage" ]
       }
      },
      isHierarchicalNamespaceEnabled: {
       serializedName: "x-ms-is-hns-enabled",
       xmlName: "x-ms-is-hns-enabled",
       type: {
        name: "Boolean"
       }
      }
     }
    }
   }, ContainerGetAccountInfoExceptionHeaders = {
    serializedName: "Container_getAccountInfoExceptionHeaders",
    type: {
     name: "Composite",
     className: "ContainerGetAccountInfoExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobDownloadHeaders = {
    serializedName: "Blob_downloadHeaders",
    type: {
     name: "Composite",
     className: "BlobDownloadHeaders",
     modelProperties: {
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      createdOn: {
       serializedName: "x-ms-creation-time",
       xmlName: "x-ms-creation-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      metadata: {
       serializedName: "x-ms-meta",
       headerCollectionPrefix: "x-ms-meta-",
       xmlName: "x-ms-meta",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      },
      objectReplicationPolicyId: {
       serializedName: "x-ms-or-policy-id",
       xmlName: "x-ms-or-policy-id",
       type: {
        name: "String"
       }
      },
      objectReplicationRules: {
       serializedName: "x-ms-or",
       headerCollectionPrefix: "x-ms-or-",
       xmlName: "x-ms-or",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      },
      contentLength: {
       serializedName: "content-length",
       xmlName: "content-length",
       type: {
        name: "Number"
       }
      },
      contentType: {
       serializedName: "content-type",
       xmlName: "content-type",
       type: {
        name: "String"
       }
      },
      contentRange: {
       serializedName: "content-range",
       xmlName: "content-range",
       type: {
        name: "String"
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      contentEncoding: {
       serializedName: "content-encoding",
       xmlName: "content-encoding",
       type: {
        name: "String"
       }
      },
      cacheControl: {
       serializedName: "cache-control",
       xmlName: "cache-control",
       type: {
        name: "String"
       }
      },
      contentDisposition: {
       serializedName: "content-disposition",
       xmlName: "content-disposition",
       type: {
        name: "String"
       }
      },
      contentLanguage: {
       serializedName: "content-language",
       xmlName: "content-language",
       type: {
        name: "String"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      blobType: {
       serializedName: "x-ms-blob-type",
       xmlName: "x-ms-blob-type",
       type: {
        name: "Enum",
        allowedValues: [ "BlockBlob", "PageBlob", "AppendBlob" ]
       }
      },
      copyCompletedOn: {
       serializedName: "x-ms-copy-completion-time",
       xmlName: "x-ms-copy-completion-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      copyStatusDescription: {
       serializedName: "x-ms-copy-status-description",
       xmlName: "x-ms-copy-status-description",
       type: {
        name: "String"
       }
      },
      copyId: {
       serializedName: "x-ms-copy-id",
       xmlName: "x-ms-copy-id",
       type: {
        name: "String"
       }
      },
      copyProgress: {
       serializedName: "x-ms-copy-progress",
       xmlName: "x-ms-copy-progress",
       type: {
        name: "String"
       }
      },
      copySource: {
       serializedName: "x-ms-copy-source",
       xmlName: "x-ms-copy-source",
       type: {
        name: "String"
       }
      },
      copyStatus: {
       serializedName: "x-ms-copy-status",
       xmlName: "x-ms-copy-status",
       type: {
        name: "Enum",
        allowedValues: [ "pending", "success", "aborted", "failed" ]
       }
      },
      leaseDuration: {
       serializedName: "x-ms-lease-duration",
       xmlName: "x-ms-lease-duration",
       type: {
        name: "Enum",
        allowedValues: [ "infinite", "fixed" ]
       }
      },
      leaseState: {
       serializedName: "x-ms-lease-state",
       xmlName: "x-ms-lease-state",
       type: {
        name: "Enum",
        allowedValues: [ "available", "leased", "expired", "breaking", "broken" ]
       }
      },
      leaseStatus: {
       serializedName: "x-ms-lease-status",
       xmlName: "x-ms-lease-status",
       type: {
        name: "Enum",
        allowedValues: [ "locked", "unlocked" ]
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      isCurrentVersion: {
       serializedName: "x-ms-is-current-version",
       xmlName: "x-ms-is-current-version",
       type: {
        name: "Boolean"
       }
      },
      acceptRanges: {
       serializedName: "accept-ranges",
       xmlName: "accept-ranges",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      blobCommittedBlockCount: {
       serializedName: "x-ms-blob-committed-block-count",
       xmlName: "x-ms-blob-committed-block-count",
       type: {
        name: "Number"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-server-encrypted",
       xmlName: "x-ms-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      blobContentMD5: {
       serializedName: "x-ms-blob-content-md5",
       xmlName: "x-ms-blob-content-md5",
       type: {
        name: "ByteArray"
       }
      },
      tagCount: {
       serializedName: "x-ms-tag-count",
       xmlName: "x-ms-tag-count",
       type: {
        name: "Number"
       }
      },
      isSealed: {
       serializedName: "x-ms-blob-sealed",
       xmlName: "x-ms-blob-sealed",
       type: {
        name: "Boolean"
       }
      },
      lastAccessed: {
       serializedName: "x-ms-last-access-time",
       xmlName: "x-ms-last-access-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      immutabilityPolicyExpiresOn: {
       serializedName: "x-ms-immutability-policy-until-date",
       xmlName: "x-ms-immutability-policy-until-date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      immutabilityPolicyMode: {
       serializedName: "x-ms-immutability-policy-mode",
       xmlName: "x-ms-immutability-policy-mode",
       type: {
        name: "Enum",
        allowedValues: [ "Mutable", "Unlocked", "Locked" ]
       }
      },
      legalHold: {
       serializedName: "x-ms-legal-hold",
       xmlName: "x-ms-legal-hold",
       type: {
        name: "Boolean"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      },
      contentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      }
     }
    }
   }, BlobDownloadExceptionHeaders = {
    serializedName: "Blob_downloadExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobDownloadExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobGetPropertiesHeaders = {
    serializedName: "Blob_getPropertiesHeaders",
    type: {
     name: "Composite",
     className: "BlobGetPropertiesHeaders",
     modelProperties: {
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      createdOn: {
       serializedName: "x-ms-creation-time",
       xmlName: "x-ms-creation-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      metadata: {
       serializedName: "x-ms-meta",
       headerCollectionPrefix: "x-ms-meta-",
       xmlName: "x-ms-meta",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      },
      objectReplicationPolicyId: {
       serializedName: "x-ms-or-policy-id",
       xmlName: "x-ms-or-policy-id",
       type: {
        name: "String"
       }
      },
      objectReplicationRules: {
       serializedName: "x-ms-or",
       headerCollectionPrefix: "x-ms-or-",
       xmlName: "x-ms-or",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      },
      blobType: {
       serializedName: "x-ms-blob-type",
       xmlName: "x-ms-blob-type",
       type: {
        name: "Enum",
        allowedValues: [ "BlockBlob", "PageBlob", "AppendBlob" ]
       }
      },
      copyCompletedOn: {
       serializedName: "x-ms-copy-completion-time",
       xmlName: "x-ms-copy-completion-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      copyStatusDescription: {
       serializedName: "x-ms-copy-status-description",
       xmlName: "x-ms-copy-status-description",
       type: {
        name: "String"
       }
      },
      copyId: {
       serializedName: "x-ms-copy-id",
       xmlName: "x-ms-copy-id",
       type: {
        name: "String"
       }
      },
      copyProgress: {
       serializedName: "x-ms-copy-progress",
       xmlName: "x-ms-copy-progress",
       type: {
        name: "String"
       }
      },
      copySource: {
       serializedName: "x-ms-copy-source",
       xmlName: "x-ms-copy-source",
       type: {
        name: "String"
       }
      },
      copyStatus: {
       serializedName: "x-ms-copy-status",
       xmlName: "x-ms-copy-status",
       type: {
        name: "Enum",
        allowedValues: [ "pending", "success", "aborted", "failed" ]
       }
      },
      isIncrementalCopy: {
       serializedName: "x-ms-incremental-copy",
       xmlName: "x-ms-incremental-copy",
       type: {
        name: "Boolean"
       }
      },
      destinationSnapshot: {
       serializedName: "x-ms-copy-destination-snapshot",
       xmlName: "x-ms-copy-destination-snapshot",
       type: {
        name: "String"
       }
      },
      leaseDuration: {
       serializedName: "x-ms-lease-duration",
       xmlName: "x-ms-lease-duration",
       type: {
        name: "Enum",
        allowedValues: [ "infinite", "fixed" ]
       }
      },
      leaseState: {
       serializedName: "x-ms-lease-state",
       xmlName: "x-ms-lease-state",
       type: {
        name: "Enum",
        allowedValues: [ "available", "leased", "expired", "breaking", "broken" ]
       }
      },
      leaseStatus: {
       serializedName: "x-ms-lease-status",
       xmlName: "x-ms-lease-status",
       type: {
        name: "Enum",
        allowedValues: [ "locked", "unlocked" ]
       }
      },
      contentLength: {
       serializedName: "content-length",
       xmlName: "content-length",
       type: {
        name: "Number"
       }
      },
      contentType: {
       serializedName: "content-type",
       xmlName: "content-type",
       type: {
        name: "String"
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      contentEncoding: {
       serializedName: "content-encoding",
       xmlName: "content-encoding",
       type: {
        name: "String"
       }
      },
      contentDisposition: {
       serializedName: "content-disposition",
       xmlName: "content-disposition",
       type: {
        name: "String"
       }
      },
      contentLanguage: {
       serializedName: "content-language",
       xmlName: "content-language",
       type: {
        name: "String"
       }
      },
      cacheControl: {
       serializedName: "cache-control",
       xmlName: "cache-control",
       type: {
        name: "String"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      acceptRanges: {
       serializedName: "accept-ranges",
       xmlName: "accept-ranges",
       type: {
        name: "String"
       }
      },
      blobCommittedBlockCount: {
       serializedName: "x-ms-blob-committed-block-count",
       xmlName: "x-ms-blob-committed-block-count",
       type: {
        name: "Number"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-server-encrypted",
       xmlName: "x-ms-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      accessTier: {
       serializedName: "x-ms-access-tier",
       xmlName: "x-ms-access-tier",
       type: {
        name: "String"
       }
      },
      accessTierInferred: {
       serializedName: "x-ms-access-tier-inferred",
       xmlName: "x-ms-access-tier-inferred",
       type: {
        name: "Boolean"
       }
      },
      archiveStatus: {
       serializedName: "x-ms-archive-status",
       xmlName: "x-ms-archive-status",
       type: {
        name: "String"
       }
      },
      accessTierChangedOn: {
       serializedName: "x-ms-access-tier-change-time",
       xmlName: "x-ms-access-tier-change-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      isCurrentVersion: {
       serializedName: "x-ms-is-current-version",
       xmlName: "x-ms-is-current-version",
       type: {
        name: "Boolean"
       }
      },
      tagCount: {
       serializedName: "x-ms-tag-count",
       xmlName: "x-ms-tag-count",
       type: {
        name: "Number"
       }
      },
      expiresOn: {
       serializedName: "x-ms-expiry-time",
       xmlName: "x-ms-expiry-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isSealed: {
       serializedName: "x-ms-blob-sealed",
       xmlName: "x-ms-blob-sealed",
       type: {
        name: "Boolean"
       }
      },
      rehydratePriority: {
       serializedName: "x-ms-rehydrate-priority",
       xmlName: "x-ms-rehydrate-priority",
       type: {
        name: "Enum",
        allowedValues: [ "High", "Standard" ]
       }
      },
      lastAccessed: {
       serializedName: "x-ms-last-access-time",
       xmlName: "x-ms-last-access-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      immutabilityPolicyExpiresOn: {
       serializedName: "x-ms-immutability-policy-until-date",
       xmlName: "x-ms-immutability-policy-until-date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      immutabilityPolicyMode: {
       serializedName: "x-ms-immutability-policy-mode",
       xmlName: "x-ms-immutability-policy-mode",
       type: {
        name: "Enum",
        allowedValues: [ "Mutable", "Unlocked", "Locked" ]
       }
      },
      legalHold: {
       serializedName: "x-ms-legal-hold",
       xmlName: "x-ms-legal-hold",
       type: {
        name: "Boolean"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobGetPropertiesExceptionHeaders = {
    serializedName: "Blob_getPropertiesExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobGetPropertiesExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobDeleteHeaders = {
    serializedName: "Blob_deleteHeaders",
    type: {
     name: "Composite",
     className: "BlobDeleteHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobDeleteExceptionHeaders = {
    serializedName: "Blob_deleteExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobDeleteExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobUndeleteHeaders = {
    serializedName: "Blob_undeleteHeaders",
    type: {
     name: "Composite",
     className: "BlobUndeleteHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobUndeleteExceptionHeaders = {
    serializedName: "Blob_undeleteExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobUndeleteExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetExpiryHeaders = {
    serializedName: "Blob_setExpiryHeaders",
    type: {
     name: "Composite",
     className: "BlobSetExpiryHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, BlobSetExpiryExceptionHeaders = {
    serializedName: "Blob_setExpiryExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobSetExpiryExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetHttpHeadersHeaders = {
    serializedName: "Blob_setHttpHeadersHeaders",
    type: {
     name: "Composite",
     className: "BlobSetHttpHeadersHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetHttpHeadersExceptionHeaders = {
    serializedName: "Blob_setHttpHeadersExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobSetHttpHeadersExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetImmutabilityPolicyHeaders = {
    serializedName: "Blob_setImmutabilityPolicyHeaders",
    type: {
     name: "Composite",
     className: "BlobSetImmutabilityPolicyHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      immutabilityPolicyExpiry: {
       serializedName: "x-ms-immutability-policy-until-date",
       xmlName: "x-ms-immutability-policy-until-date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      immutabilityPolicyMode: {
       serializedName: "x-ms-immutability-policy-mode",
       xmlName: "x-ms-immutability-policy-mode",
       type: {
        name: "Enum",
        allowedValues: [ "Mutable", "Unlocked", "Locked" ]
       }
      }
     }
    }
   }, BlobSetImmutabilityPolicyExceptionHeaders = {
    serializedName: "Blob_setImmutabilityPolicyExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobSetImmutabilityPolicyExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobDeleteImmutabilityPolicyHeaders = {
    serializedName: "Blob_deleteImmutabilityPolicyHeaders",
    type: {
     name: "Composite",
     className: "BlobDeleteImmutabilityPolicyHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, BlobDeleteImmutabilityPolicyExceptionHeaders = {
    serializedName: "Blob_deleteImmutabilityPolicyExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobDeleteImmutabilityPolicyExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetLegalHoldHeaders = {
    serializedName: "Blob_setLegalHoldHeaders",
    type: {
     name: "Composite",
     className: "BlobSetLegalHoldHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      legalHold: {
       serializedName: "x-ms-legal-hold",
       xmlName: "x-ms-legal-hold",
       type: {
        name: "Boolean"
       }
      }
     }
    }
   }, BlobSetLegalHoldExceptionHeaders = {
    serializedName: "Blob_setLegalHoldExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobSetLegalHoldExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetMetadataHeaders = {
    serializedName: "Blob_setMetadataHeaders",
    type: {
     name: "Composite",
     className: "BlobSetMetadataHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetMetadataExceptionHeaders = {
    serializedName: "Blob_setMetadataExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobSetMetadataExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobAcquireLeaseHeaders = {
    serializedName: "Blob_acquireLeaseHeaders",
    type: {
     name: "Composite",
     className: "BlobAcquireLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      leaseId: {
       serializedName: "x-ms-lease-id",
       xmlName: "x-ms-lease-id",
       type: {
        name: "String"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, BlobAcquireLeaseExceptionHeaders = {
    serializedName: "Blob_acquireLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobAcquireLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobReleaseLeaseHeaders = {
    serializedName: "Blob_releaseLeaseHeaders",
    type: {
     name: "Composite",
     className: "BlobReleaseLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, BlobReleaseLeaseExceptionHeaders = {
    serializedName: "Blob_releaseLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobReleaseLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobRenewLeaseHeaders = {
    serializedName: "Blob_renewLeaseHeaders",
    type: {
     name: "Composite",
     className: "BlobRenewLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      leaseId: {
       serializedName: "x-ms-lease-id",
       xmlName: "x-ms-lease-id",
       type: {
        name: "String"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, BlobRenewLeaseExceptionHeaders = {
    serializedName: "Blob_renewLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobRenewLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobChangeLeaseHeaders = {
    serializedName: "Blob_changeLeaseHeaders",
    type: {
     name: "Composite",
     className: "BlobChangeLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      leaseId: {
       serializedName: "x-ms-lease-id",
       xmlName: "x-ms-lease-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, BlobChangeLeaseExceptionHeaders = {
    serializedName: "Blob_changeLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobChangeLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobBreakLeaseHeaders = {
    serializedName: "Blob_breakLeaseHeaders",
    type: {
     name: "Composite",
     className: "BlobBreakLeaseHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      leaseTime: {
       serializedName: "x-ms-lease-time",
       xmlName: "x-ms-lease-time",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      }
     }
    }
   }, BlobBreakLeaseExceptionHeaders = {
    serializedName: "Blob_breakLeaseExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobBreakLeaseExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobCreateSnapshotHeaders = {
    serializedName: "Blob_createSnapshotHeaders",
    type: {
     name: "Composite",
     className: "BlobCreateSnapshotHeaders",
     modelProperties: {
      snapshot: {
       serializedName: "x-ms-snapshot",
       xmlName: "x-ms-snapshot",
       type: {
        name: "String"
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobCreateSnapshotExceptionHeaders = {
    serializedName: "Blob_createSnapshotExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobCreateSnapshotExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobStartCopyFromURLHeaders = {
    serializedName: "Blob_startCopyFromURLHeaders",
    type: {
     name: "Composite",
     className: "BlobStartCopyFromURLHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      copyId: {
       serializedName: "x-ms-copy-id",
       xmlName: "x-ms-copy-id",
       type: {
        name: "String"
       }
      },
      copyStatus: {
       serializedName: "x-ms-copy-status",
       xmlName: "x-ms-copy-status",
       type: {
        name: "Enum",
        allowedValues: [ "pending", "success", "aborted", "failed" ]
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobStartCopyFromURLExceptionHeaders = {
    serializedName: "Blob_startCopyFromURLExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobStartCopyFromURLExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobCopyFromURLHeaders = {
    serializedName: "Blob_copyFromURLHeaders",
    type: {
     name: "Composite",
     className: "BlobCopyFromURLHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      copyId: {
       serializedName: "x-ms-copy-id",
       xmlName: "x-ms-copy-id",
       type: {
        name: "String"
       }
      },
      copyStatus: {
       defaultValue: "success",
       isConstant: !0,
       serializedName: "x-ms-copy-status",
       type: {
        name: "String"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobCopyFromURLExceptionHeaders = {
    serializedName: "Blob_copyFromURLExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobCopyFromURLExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobAbortCopyFromURLHeaders = {
    serializedName: "Blob_abortCopyFromURLHeaders",
    type: {
     name: "Composite",
     className: "BlobAbortCopyFromURLHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobAbortCopyFromURLExceptionHeaders = {
    serializedName: "Blob_abortCopyFromURLExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobAbortCopyFromURLExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetTierHeaders = {
    serializedName: "Blob_setTierHeaders",
    type: {
     name: "Composite",
     className: "BlobSetTierHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetTierExceptionHeaders = {
    serializedName: "Blob_setTierExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobSetTierExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobGetAccountInfoHeaders = {
    serializedName: "Blob_getAccountInfoHeaders",
    type: {
     name: "Composite",
     className: "BlobGetAccountInfoHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      skuName: {
       serializedName: "x-ms-sku-name",
       xmlName: "x-ms-sku-name",
       type: {
        name: "Enum",
        allowedValues: [ "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS" ]
       }
      },
      accountKind: {
       serializedName: "x-ms-account-kind",
       xmlName: "x-ms-account-kind",
       type: {
        name: "Enum",
        allowedValues: [ "Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage" ]
       }
      },
      isHierarchicalNamespaceEnabled: {
       serializedName: "x-ms-is-hns-enabled",
       xmlName: "x-ms-is-hns-enabled",
       type: {
        name: "Boolean"
       }
      }
     }
    }
   }, BlobGetAccountInfoExceptionHeaders = {
    serializedName: "Blob_getAccountInfoExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobGetAccountInfoExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobQueryHeaders = {
    serializedName: "Blob_queryHeaders",
    type: {
     name: "Composite",
     className: "BlobQueryHeaders",
     modelProperties: {
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      metadata: {
       serializedName: "x-ms-meta",
       headerCollectionPrefix: "x-ms-meta-",
       xmlName: "x-ms-meta",
       type: {
        name: "Dictionary",
        value: {
         type: {
          name: "String"
         }
        }
       }
      },
      contentLength: {
       serializedName: "content-length",
       xmlName: "content-length",
       type: {
        name: "Number"
       }
      },
      contentType: {
       serializedName: "content-type",
       xmlName: "content-type",
       type: {
        name: "String"
       }
      },
      contentRange: {
       serializedName: "content-range",
       xmlName: "content-range",
       type: {
        name: "String"
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      contentEncoding: {
       serializedName: "content-encoding",
       xmlName: "content-encoding",
       type: {
        name: "String"
       }
      },
      cacheControl: {
       serializedName: "cache-control",
       xmlName: "cache-control",
       type: {
        name: "String"
       }
      },
      contentDisposition: {
       serializedName: "content-disposition",
       xmlName: "content-disposition",
       type: {
        name: "String"
       }
      },
      contentLanguage: {
       serializedName: "content-language",
       xmlName: "content-language",
       type: {
        name: "String"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      blobType: {
       serializedName: "x-ms-blob-type",
       xmlName: "x-ms-blob-type",
       type: {
        name: "Enum",
        allowedValues: [ "BlockBlob", "PageBlob", "AppendBlob" ]
       }
      },
      copyCompletionTime: {
       serializedName: "x-ms-copy-completion-time",
       xmlName: "x-ms-copy-completion-time",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      copyStatusDescription: {
       serializedName: "x-ms-copy-status-description",
       xmlName: "x-ms-copy-status-description",
       type: {
        name: "String"
       }
      },
      copyId: {
       serializedName: "x-ms-copy-id",
       xmlName: "x-ms-copy-id",
       type: {
        name: "String"
       }
      },
      copyProgress: {
       serializedName: "x-ms-copy-progress",
       xmlName: "x-ms-copy-progress",
       type: {
        name: "String"
       }
      },
      copySource: {
       serializedName: "x-ms-copy-source",
       xmlName: "x-ms-copy-source",
       type: {
        name: "String"
       }
      },
      copyStatus: {
       serializedName: "x-ms-copy-status",
       xmlName: "x-ms-copy-status",
       type: {
        name: "Enum",
        allowedValues: [ "pending", "success", "aborted", "failed" ]
       }
      },
      leaseDuration: {
       serializedName: "x-ms-lease-duration",
       xmlName: "x-ms-lease-duration",
       type: {
        name: "Enum",
        allowedValues: [ "infinite", "fixed" ]
       }
      },
      leaseState: {
       serializedName: "x-ms-lease-state",
       xmlName: "x-ms-lease-state",
       type: {
        name: "Enum",
        allowedValues: [ "available", "leased", "expired", "breaking", "broken" ]
       }
      },
      leaseStatus: {
       serializedName: "x-ms-lease-status",
       xmlName: "x-ms-lease-status",
       type: {
        name: "Enum",
        allowedValues: [ "locked", "unlocked" ]
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      acceptRanges: {
       serializedName: "accept-ranges",
       xmlName: "accept-ranges",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      blobCommittedBlockCount: {
       serializedName: "x-ms-blob-committed-block-count",
       xmlName: "x-ms-blob-committed-block-count",
       type: {
        name: "Number"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-server-encrypted",
       xmlName: "x-ms-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      blobContentMD5: {
       serializedName: "x-ms-blob-content-md5",
       xmlName: "x-ms-blob-content-md5",
       type: {
        name: "ByteArray"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      },
      contentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      }
     }
    }
   }, BlobQueryExceptionHeaders = {
    serializedName: "Blob_queryExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobQueryExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobGetTagsHeaders = {
    serializedName: "Blob_getTagsHeaders",
    type: {
     name: "Composite",
     className: "BlobGetTagsHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobGetTagsExceptionHeaders = {
    serializedName: "Blob_getTagsExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobGetTagsExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetTagsHeaders = {
    serializedName: "Blob_setTagsHeaders",
    type: {
     name: "Composite",
     className: "BlobSetTagsHeaders",
     modelProperties: {
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlobSetTagsExceptionHeaders = {
    serializedName: "Blob_setTagsExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlobSetTagsExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobCreateHeaders = {
    serializedName: "PageBlob_createHeaders",
    type: {
     name: "Composite",
     className: "PageBlobCreateHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobCreateExceptionHeaders = {
    serializedName: "PageBlob_createExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobCreateExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobUploadPagesHeaders = {
    serializedName: "PageBlob_uploadPagesHeaders",
    type: {
     name: "Composite",
     className: "PageBlobUploadPagesHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobUploadPagesExceptionHeaders = {
    serializedName: "PageBlob_uploadPagesExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobUploadPagesExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobClearPagesHeaders = {
    serializedName: "PageBlob_clearPagesHeaders",
    type: {
     name: "Composite",
     className: "PageBlobClearPagesHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobClearPagesExceptionHeaders = {
    serializedName: "PageBlob_clearPagesExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobClearPagesExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobUploadPagesFromURLHeaders = {
    serializedName: "PageBlob_uploadPagesFromURLHeaders",
    type: {
     name: "Composite",
     className: "PageBlobUploadPagesFromURLHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobUploadPagesFromURLExceptionHeaders = {
    serializedName: "PageBlob_uploadPagesFromURLExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobUploadPagesFromURLExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobGetPageRangesHeaders = {
    serializedName: "PageBlob_getPageRangesHeaders",
    type: {
     name: "Composite",
     className: "PageBlobGetPageRangesHeaders",
     modelProperties: {
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      blobContentLength: {
       serializedName: "x-ms-blob-content-length",
       xmlName: "x-ms-blob-content-length",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobGetPageRangesExceptionHeaders = {
    serializedName: "PageBlob_getPageRangesExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobGetPageRangesExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobGetPageRangesDiffHeaders = {
    serializedName: "PageBlob_getPageRangesDiffHeaders",
    type: {
     name: "Composite",
     className: "PageBlobGetPageRangesDiffHeaders",
     modelProperties: {
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      blobContentLength: {
       serializedName: "x-ms-blob-content-length",
       xmlName: "x-ms-blob-content-length",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobGetPageRangesDiffExceptionHeaders = {
    serializedName: "PageBlob_getPageRangesDiffExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobGetPageRangesDiffExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobResizeHeaders = {
    serializedName: "PageBlob_resizeHeaders",
    type: {
     name: "Composite",
     className: "PageBlobResizeHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobResizeExceptionHeaders = {
    serializedName: "PageBlob_resizeExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobResizeExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobUpdateSequenceNumberHeaders = {
    serializedName: "PageBlob_updateSequenceNumberHeaders",
    type: {
     name: "Composite",
     className: "PageBlobUpdateSequenceNumberHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      blobSequenceNumber: {
       serializedName: "x-ms-blob-sequence-number",
       xmlName: "x-ms-blob-sequence-number",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobUpdateSequenceNumberExceptionHeaders = {
    serializedName: "PageBlob_updateSequenceNumberExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobUpdateSequenceNumberExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobCopyIncrementalHeaders = {
    serializedName: "PageBlob_copyIncrementalHeaders",
    type: {
     name: "Composite",
     className: "PageBlobCopyIncrementalHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      copyId: {
       serializedName: "x-ms-copy-id",
       xmlName: "x-ms-copy-id",
       type: {
        name: "String"
       }
      },
      copyStatus: {
       serializedName: "x-ms-copy-status",
       xmlName: "x-ms-copy-status",
       type: {
        name: "Enum",
        allowedValues: [ "pending", "success", "aborted", "failed" ]
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, PageBlobCopyIncrementalExceptionHeaders = {
    serializedName: "PageBlob_copyIncrementalExceptionHeaders",
    type: {
     name: "Composite",
     className: "PageBlobCopyIncrementalExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, AppendBlobCreateHeaders = {
    serializedName: "AppendBlob_createHeaders",
    type: {
     name: "Composite",
     className: "AppendBlobCreateHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, AppendBlobCreateExceptionHeaders = {
    serializedName: "AppendBlob_createExceptionHeaders",
    type: {
     name: "Composite",
     className: "AppendBlobCreateExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, AppendBlobAppendBlockHeaders = {
    serializedName: "AppendBlob_appendBlockHeaders",
    type: {
     name: "Composite",
     className: "AppendBlobAppendBlockHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      blobAppendOffset: {
       serializedName: "x-ms-blob-append-offset",
       xmlName: "x-ms-blob-append-offset",
       type: {
        name: "String"
       }
      },
      blobCommittedBlockCount: {
       serializedName: "x-ms-blob-committed-block-count",
       xmlName: "x-ms-blob-committed-block-count",
       type: {
        name: "Number"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, AppendBlobAppendBlockExceptionHeaders = {
    serializedName: "AppendBlob_appendBlockExceptionHeaders",
    type: {
     name: "Composite",
     className: "AppendBlobAppendBlockExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, AppendBlobAppendBlockFromUrlHeaders = {
    serializedName: "AppendBlob_appendBlockFromUrlHeaders",
    type: {
     name: "Composite",
     className: "AppendBlobAppendBlockFromUrlHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      blobAppendOffset: {
       serializedName: "x-ms-blob-append-offset",
       xmlName: "x-ms-blob-append-offset",
       type: {
        name: "String"
       }
      },
      blobCommittedBlockCount: {
       serializedName: "x-ms-blob-committed-block-count",
       xmlName: "x-ms-blob-committed-block-count",
       type: {
        name: "Number"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, AppendBlobAppendBlockFromUrlExceptionHeaders = {
    serializedName: "AppendBlob_appendBlockFromUrlExceptionHeaders",
    type: {
     name: "Composite",
     className: "AppendBlobAppendBlockFromUrlExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, AppendBlobSealHeaders = {
    serializedName: "AppendBlob_sealHeaders",
    type: {
     name: "Composite",
     className: "AppendBlobSealHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isSealed: {
       serializedName: "x-ms-blob-sealed",
       xmlName: "x-ms-blob-sealed",
       type: {
        name: "Boolean"
       }
      }
     }
    }
   }, AppendBlobSealExceptionHeaders = {
    serializedName: "AppendBlob_sealExceptionHeaders",
    type: {
     name: "Composite",
     className: "AppendBlobSealExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobUploadHeaders = {
    serializedName: "BlockBlob_uploadHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobUploadHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobUploadExceptionHeaders = {
    serializedName: "BlockBlob_uploadExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobUploadExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobPutBlobFromUrlHeaders = {
    serializedName: "BlockBlob_putBlobFromUrlHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobPutBlobFromUrlHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobPutBlobFromUrlExceptionHeaders = {
    serializedName: "BlockBlob_putBlobFromUrlExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobPutBlobFromUrlExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobStageBlockHeaders = {
    serializedName: "BlockBlob_stageBlockHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobStageBlockHeaders",
     modelProperties: {
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobStageBlockExceptionHeaders = {
    serializedName: "BlockBlob_stageBlockExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobStageBlockExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobStageBlockFromURLHeaders = {
    serializedName: "BlockBlob_stageBlockFromURLHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobStageBlockFromURLHeaders",
     modelProperties: {
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobStageBlockFromURLExceptionHeaders = {
    serializedName: "BlockBlob_stageBlockFromURLExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobStageBlockFromURLExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobCommitBlockListHeaders = {
    serializedName: "BlockBlob_commitBlockListHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobCommitBlockListHeaders",
     modelProperties: {
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      contentMD5: {
       serializedName: "content-md5",
       xmlName: "content-md5",
       type: {
        name: "ByteArray"
       }
      },
      xMsContentCrc64: {
       serializedName: "x-ms-content-crc64",
       xmlName: "x-ms-content-crc64",
       type: {
        name: "ByteArray"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      versionId: {
       serializedName: "x-ms-version-id",
       xmlName: "x-ms-version-id",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      isServerEncrypted: {
       serializedName: "x-ms-request-server-encrypted",
       xmlName: "x-ms-request-server-encrypted",
       type: {
        name: "Boolean"
       }
      },
      encryptionKeySha256: {
       serializedName: "x-ms-encryption-key-sha256",
       xmlName: "x-ms-encryption-key-sha256",
       type: {
        name: "String"
       }
      },
      encryptionScope: {
       serializedName: "x-ms-encryption-scope",
       xmlName: "x-ms-encryption-scope",
       type: {
        name: "String"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobCommitBlockListExceptionHeaders = {
    serializedName: "BlockBlob_commitBlockListExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobCommitBlockListExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobGetBlockListHeaders = {
    serializedName: "BlockBlob_getBlockListHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobGetBlockListHeaders",
     modelProperties: {
      lastModified: {
       serializedName: "last-modified",
       xmlName: "last-modified",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      etag: {
       serializedName: "etag",
       xmlName: "etag",
       type: {
        name: "String"
       }
      },
      contentType: {
       serializedName: "content-type",
       xmlName: "content-type",
       type: {
        name: "String"
       }
      },
      blobContentLength: {
       serializedName: "x-ms-blob-content-length",
       xmlName: "x-ms-blob-content-length",
       type: {
        name: "Number"
       }
      },
      clientRequestId: {
       serializedName: "x-ms-client-request-id",
       xmlName: "x-ms-client-request-id",
       type: {
        name: "String"
       }
      },
      requestId: {
       serializedName: "x-ms-request-id",
       xmlName: "x-ms-request-id",
       type: {
        name: "String"
       }
      },
      version: {
       serializedName: "x-ms-version",
       xmlName: "x-ms-version",
       type: {
        name: "String"
       }
      },
      date: {
       serializedName: "date",
       xmlName: "date",
       type: {
        name: "DateTimeRfc1123"
       }
      },
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, BlockBlobGetBlockListExceptionHeaders = {
    serializedName: "BlockBlob_getBlockListExceptionHeaders",
    type: {
     name: "Composite",
     className: "BlockBlobGetBlockListExceptionHeaders",
     modelProperties: {
      errorCode: {
       serializedName: "x-ms-error-code",
       xmlName: "x-ms-error-code",
       type: {
        name: "String"
       }
      }
     }
    }
   }, contentType = {
    parameterPath: [ "options", "contentType" ],
    mapper: {
     defaultValue: "application/xml",
     isConstant: !0,
     serializedName: "Content-Type",
     type: {
      name: "String"
     }
    }
   }, blobServiceProperties = {
    parameterPath: "blobServiceProperties",
    mapper: BlobServiceProperties
   }, accept = {
    parameterPath: "accept",
    mapper: {
     defaultValue: "application/xml",
     isConstant: !0,
     serializedName: "Accept",
     type: {
      name: "String"
     }
    }
   }, url = {
    parameterPath: "url",
    mapper: {
     serializedName: "url",
     required: !0,
     xmlName: "url",
     type: {
      name: "String"
     }
    },
    skipEncoding: !0
   }, restype = {
    parameterPath: "restype",
    mapper: {
     defaultValue: "service",
     isConstant: !0,
     serializedName: "restype",
     type: {
      name: "String"
     }
    }
   }, comp = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "properties",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, timeoutInSeconds = {
    parameterPath: [ "options", "timeoutInSeconds" ],
    mapper: {
     constraints: {
      InclusiveMinimum: 0
     },
     serializedName: "timeout",
     xmlName: "timeout",
     type: {
      name: "Number"
     }
    }
   }, version = {
    parameterPath: "version",
    mapper: {
     defaultValue: "2025-05-05",
     isConstant: !0,
     serializedName: "x-ms-version",
     type: {
      name: "String"
     }
    }
   }, requestId = {
    parameterPath: [ "options", "requestId" ],
    mapper: {
     serializedName: "x-ms-client-request-id",
     xmlName: "x-ms-client-request-id",
     type: {
      name: "String"
     }
    }
   }, accept1 = {
    parameterPath: "accept",
    mapper: {
     defaultValue: "application/xml",
     isConstant: !0,
     serializedName: "Accept",
     type: {
      name: "String"
     }
    }
   }, comp2 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "list",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, prefix = {
    parameterPath: [ "options", "prefix" ],
    mapper: {
     serializedName: "prefix",
     xmlName: "prefix",
     type: {
      name: "String"
     }
    }
   }, marker = {
    parameterPath: [ "options", "marker" ],
    mapper: {
     serializedName: "marker",
     xmlName: "marker",
     type: {
      name: "String"
     }
    }
   }, maxPageSize = {
    parameterPath: [ "options", "maxPageSize" ],
    mapper: {
     constraints: {
      InclusiveMinimum: 1
     },
     serializedName: "maxresults",
     xmlName: "maxresults",
     type: {
      name: "Number"
     }
    }
   }, keyInfo = {
    parameterPath: "keyInfo",
    mapper: KeyInfo
   }, restype1 = {
    parameterPath: "restype",
    mapper: {
     defaultValue: "account",
     isConstant: !0,
     serializedName: "restype",
     type: {
      name: "String"
     }
    }
   }, body = {
    parameterPath: "body",
    mapper: {
     serializedName: "body",
     required: !0,
     xmlName: "body",
     type: {
      name: "Stream"
     }
    }
   }, comp4 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "batch",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, contentLength = {
    parameterPath: "contentLength",
    mapper: {
     serializedName: "Content-Length",
     required: !0,
     xmlName: "Content-Length",
     type: {
      name: "Number"
     }
    }
   }, multipartContentType = {
    parameterPath: "multipartContentType",
    mapper: {
     serializedName: "Content-Type",
     required: !0,
     xmlName: "Content-Type",
     type: {
      name: "String"
     }
    }
   }, comp5 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "blobs",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, where = {
    parameterPath: [ "options", "where" ],
    mapper: {
     serializedName: "where",
     xmlName: "where",
     type: {
      name: "String"
     }
    }
   }, restype2 = {
    parameterPath: "restype",
    mapper: {
     defaultValue: "container",
     isConstant: !0,
     serializedName: "restype",
     type: {
      name: "String"
     }
    }
   }, metadata = {
    parameterPath: [ "options", "metadata" ],
    mapper: {
     serializedName: "x-ms-meta",
     xmlName: "x-ms-meta",
     headerCollectionPrefix: "x-ms-meta-",
     type: {
      name: "Dictionary",
      value: {
       type: {
        name: "String"
       }
      }
     }
    }
   }, access = {
    parameterPath: [ "options", "access" ],
    mapper: {
     serializedName: "x-ms-blob-public-access",
     xmlName: "x-ms-blob-public-access",
     type: {
      name: "Enum",
      allowedValues: [ "container", "blob" ]
     }
    }
   }, leaseId = {
    parameterPath: [ "options", "leaseAccessConditions", "leaseId" ],
    mapper: {
     serializedName: "x-ms-lease-id",
     xmlName: "x-ms-lease-id",
     type: {
      name: "String"
     }
    }
   }, ifModifiedSince = {
    parameterPath: [ "options", "modifiedAccessConditions", "ifModifiedSince" ],
    mapper: {
     serializedName: "If-Modified-Since",
     xmlName: "If-Modified-Since",
     type: {
      name: "DateTimeRfc1123"
     }
    }
   }, ifUnmodifiedSince = {
    parameterPath: [ "options", "modifiedAccessConditions", "ifUnmodifiedSince" ],
    mapper: {
     serializedName: "If-Unmodified-Since",
     xmlName: "If-Unmodified-Since",
     type: {
      name: "DateTimeRfc1123"
     }
    }
   }, comp6 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "metadata",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, comp7 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "acl",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, comp8 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "undelete",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, comp10 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "lease",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, action = {
    parameterPath: "action",
    mapper: {
     defaultValue: "acquire",
     isConstant: !0,
     serializedName: "x-ms-lease-action",
     type: {
      name: "String"
     }
    }
   }, duration = {
    parameterPath: [ "options", "duration" ],
    mapper: {
     serializedName: "x-ms-lease-duration",
     xmlName: "x-ms-lease-duration",
     type: {
      name: "Number"
     }
    }
   }, proposedLeaseId = {
    parameterPath: [ "options", "proposedLeaseId" ],
    mapper: {
     serializedName: "x-ms-proposed-lease-id",
     xmlName: "x-ms-proposed-lease-id",
     type: {
      name: "String"
     }
    }
   }, action1 = {
    parameterPath: "action",
    mapper: {
     defaultValue: "release",
     isConstant: !0,
     serializedName: "x-ms-lease-action",
     type: {
      name: "String"
     }
    }
   }, leaseId1 = {
    parameterPath: "leaseId",
    mapper: {
     serializedName: "x-ms-lease-id",
     required: !0,
     xmlName: "x-ms-lease-id",
     type: {
      name: "String"
     }
    }
   }, action2 = {
    parameterPath: "action",
    mapper: {
     defaultValue: "renew",
     isConstant: !0,
     serializedName: "x-ms-lease-action",
     type: {
      name: "String"
     }
    }
   }, action3 = {
    parameterPath: "action",
    mapper: {
     defaultValue: "break",
     isConstant: !0,
     serializedName: "x-ms-lease-action",
     type: {
      name: "String"
     }
    }
   }, breakPeriod = {
    parameterPath: [ "options", "breakPeriod" ],
    mapper: {
     serializedName: "x-ms-lease-break-period",
     xmlName: "x-ms-lease-break-period",
     type: {
      name: "Number"
     }
    }
   }, action4 = {
    parameterPath: "action",
    mapper: {
     defaultValue: "change",
     isConstant: !0,
     serializedName: "x-ms-lease-action",
     type: {
      name: "String"
     }
    }
   }, proposedLeaseId1 = {
    parameterPath: "proposedLeaseId",
    mapper: {
     serializedName: "x-ms-proposed-lease-id",
     required: !0,
     xmlName: "x-ms-proposed-lease-id",
     type: {
      name: "String"
     }
    }
   }, include1 = {
    parameterPath: [ "options", "include" ],
    mapper: {
     serializedName: "include",
     xmlName: "include",
     xmlElementName: "ListBlobsIncludeItem",
     type: {
      name: "Sequence",
      element: {
       type: {
        name: "Enum",
        allowedValues: [ "copy", "deleted", "metadata", "snapshots", "uncommittedblobs", "versions", "tags", "immutabilitypolicy", "legalhold", "deletedwithversions" ]
       }
      }
     }
    },
    collectionFormat: "CSV"
   }, snapshot = {
    parameterPath: [ "options", "snapshot" ],
    mapper: {
     serializedName: "snapshot",
     xmlName: "snapshot",
     type: {
      name: "String"
     }
    }
   }, versionId = {
    parameterPath: [ "options", "versionId" ],
    mapper: {
     serializedName: "versionid",
     xmlName: "versionid",
     type: {
      name: "String"
     }
    }
   }, range = {
    parameterPath: [ "options", "range" ],
    mapper: {
     serializedName: "x-ms-range",
     xmlName: "x-ms-range",
     type: {
      name: "String"
     }
    }
   }, encryptionKey = {
    parameterPath: [ "options", "cpkInfo", "encryptionKey" ],
    mapper: {
     serializedName: "x-ms-encryption-key",
     xmlName: "x-ms-encryption-key",
     type: {
      name: "String"
     }
    }
   }, encryptionKeySha256 = {
    parameterPath: [ "options", "cpkInfo", "encryptionKeySha256" ],
    mapper: {
     serializedName: "x-ms-encryption-key-sha256",
     xmlName: "x-ms-encryption-key-sha256",
     type: {
      name: "String"
     }
    }
   }, encryptionAlgorithm = {
    parameterPath: [ "options", "cpkInfo", "encryptionAlgorithm" ],
    mapper: {
     serializedName: "x-ms-encryption-algorithm",
     xmlName: "x-ms-encryption-algorithm",
     type: {
      name: "String"
     }
    }
   }, ifMatch = {
    parameterPath: [ "options", "modifiedAccessConditions", "ifMatch" ],
    mapper: {
     serializedName: "If-Match",
     xmlName: "If-Match",
     type: {
      name: "String"
     }
    }
   }, ifNoneMatch = {
    parameterPath: [ "options", "modifiedAccessConditions", "ifNoneMatch" ],
    mapper: {
     serializedName: "If-None-Match",
     xmlName: "If-None-Match",
     type: {
      name: "String"
     }
    }
   }, ifTags = {
    parameterPath: [ "options", "modifiedAccessConditions", "ifTags" ],
    mapper: {
     serializedName: "x-ms-if-tags",
     xmlName: "x-ms-if-tags",
     type: {
      name: "String"
     }
    }
   }, blobCacheControl = {
    parameterPath: [ "options", "blobHttpHeaders", "blobCacheControl" ],
    mapper: {
     serializedName: "x-ms-blob-cache-control",
     xmlName: "x-ms-blob-cache-control",
     type: {
      name: "String"
     }
    }
   }, blobContentType = {
    parameterPath: [ "options", "blobHttpHeaders", "blobContentType" ],
    mapper: {
     serializedName: "x-ms-blob-content-type",
     xmlName: "x-ms-blob-content-type",
     type: {
      name: "String"
     }
    }
   }, blobContentMD5 = {
    parameterPath: [ "options", "blobHttpHeaders", "blobContentMD5" ],
    mapper: {
     serializedName: "x-ms-blob-content-md5",
     xmlName: "x-ms-blob-content-md5",
     type: {
      name: "ByteArray"
     }
    }
   }, blobContentEncoding = {
    parameterPath: [ "options", "blobHttpHeaders", "blobContentEncoding" ],
    mapper: {
     serializedName: "x-ms-blob-content-encoding",
     xmlName: "x-ms-blob-content-encoding",
     type: {
      name: "String"
     }
    }
   }, blobContentLanguage = {
    parameterPath: [ "options", "blobHttpHeaders", "blobContentLanguage" ],
    mapper: {
     serializedName: "x-ms-blob-content-language",
     xmlName: "x-ms-blob-content-language",
     type: {
      name: "String"
     }
    }
   }, blobContentDisposition = {
    parameterPath: [ "options", "blobHttpHeaders", "blobContentDisposition" ],
    mapper: {
     serializedName: "x-ms-blob-content-disposition",
     xmlName: "x-ms-blob-content-disposition",
     type: {
      name: "String"
     }
    }
   }, comp12 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "immutabilityPolicies",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, immutabilityPolicyExpiry = {
    parameterPath: [ "options", "immutabilityPolicyExpiry" ],
    mapper: {
     serializedName: "x-ms-immutability-policy-until-date",
     xmlName: "x-ms-immutability-policy-until-date",
     type: {
      name: "DateTimeRfc1123"
     }
    }
   }, immutabilityPolicyMode = {
    parameterPath: [ "options", "immutabilityPolicyMode" ],
    mapper: {
     serializedName: "x-ms-immutability-policy-mode",
     xmlName: "x-ms-immutability-policy-mode",
     type: {
      name: "Enum",
      allowedValues: [ "Mutable", "Unlocked", "Locked" ]
     }
    }
   }, encryptionScope = {
    parameterPath: [ "options", "encryptionScope" ],
    mapper: {
     serializedName: "x-ms-encryption-scope",
     xmlName: "x-ms-encryption-scope",
     type: {
      name: "String"
     }
    }
   }, tier = {
    parameterPath: [ "options", "tier" ],
    mapper: {
     serializedName: "x-ms-access-tier",
     xmlName: "x-ms-access-tier",
     type: {
      name: "Enum",
      allowedValues: [ "P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Cold" ]
     }
    }
   }, rehydratePriority = {
    parameterPath: [ "options", "rehydratePriority" ],
    mapper: {
     serializedName: "x-ms-rehydrate-priority",
     xmlName: "x-ms-rehydrate-priority",
     type: {
      name: "Enum",
      allowedValues: [ "High", "Standard" ]
     }
    }
   }, sourceIfModifiedSince = {
    parameterPath: [ "options", "sourceModifiedAccessConditions", "sourceIfModifiedSince" ],
    mapper: {
     serializedName: "x-ms-source-if-modified-since",
     xmlName: "x-ms-source-if-modified-since",
     type: {
      name: "DateTimeRfc1123"
     }
    }
   }, sourceIfUnmodifiedSince = {
    parameterPath: [ "options", "sourceModifiedAccessConditions", "sourceIfUnmodifiedSince" ],
    mapper: {
     serializedName: "x-ms-source-if-unmodified-since",
     xmlName: "x-ms-source-if-unmodified-since",
     type: {
      name: "DateTimeRfc1123"
     }
    }
   }, sourceIfMatch = {
    parameterPath: [ "options", "sourceModifiedAccessConditions", "sourceIfMatch" ],
    mapper: {
     serializedName: "x-ms-source-if-match",
     xmlName: "x-ms-source-if-match",
     type: {
      name: "String"
     }
    }
   }, sourceIfNoneMatch = {
    parameterPath: [ "options", "sourceModifiedAccessConditions", "sourceIfNoneMatch" ],
    mapper: {
     serializedName: "x-ms-source-if-none-match",
     xmlName: "x-ms-source-if-none-match",
     type: {
      name: "String"
     }
    }
   }, sourceIfTags = {
    parameterPath: [ "options", "sourceModifiedAccessConditions", "sourceIfTags" ],
    mapper: {
     serializedName: "x-ms-source-if-tags",
     xmlName: "x-ms-source-if-tags",
     type: {
      name: "String"
     }
    }
   }, copySource = {
    parameterPath: "copySource",
    mapper: {
     serializedName: "x-ms-copy-source",
     required: !0,
     xmlName: "x-ms-copy-source",
     type: {
      name: "String"
     }
    }
   }, blobTagsString = {
    parameterPath: [ "options", "blobTagsString" ],
    mapper: {
     serializedName: "x-ms-tags",
     xmlName: "x-ms-tags",
     type: {
      name: "String"
     }
    }
   }, legalHold1 = {
    parameterPath: [ "options", "legalHold" ],
    mapper: {
     serializedName: "x-ms-legal-hold",
     xmlName: "x-ms-legal-hold",
     type: {
      name: "Boolean"
     }
    }
   }, sourceContentMD5 = {
    parameterPath: [ "options", "sourceContentMD5" ],
    mapper: {
     serializedName: "x-ms-source-content-md5",
     xmlName: "x-ms-source-content-md5",
     type: {
      name: "ByteArray"
     }
    }
   }, copySourceAuthorization = {
    parameterPath: [ "options", "copySourceAuthorization" ],
    mapper: {
     serializedName: "x-ms-copy-source-authorization",
     xmlName: "x-ms-copy-source-authorization",
     type: {
      name: "String"
     }
    }
   }, copySourceTags = {
    parameterPath: [ "options", "copySourceTags" ],
    mapper: {
     serializedName: "x-ms-copy-source-tag-option",
     xmlName: "x-ms-copy-source-tag-option",
     type: {
      name: "Enum",
      allowedValues: [ "REPLACE", "COPY" ]
     }
    }
   }, queryRequest = {
    parameterPath: [ "options", "queryRequest" ],
    mapper: QueryRequest
   }, comp18 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "tags",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, tags = {
    parameterPath: [ "options", "tags" ],
    mapper: BlobTags
   }, transactionalContentMD5 = {
    parameterPath: [ "options", "transactionalContentMD5" ],
    mapper: {
     serializedName: "Content-MD5",
     xmlName: "Content-MD5",
     type: {
      name: "ByteArray"
     }
    }
   }, transactionalContentCrc64 = {
    parameterPath: [ "options", "transactionalContentCrc64" ],
    mapper: {
     serializedName: "x-ms-content-crc64",
     xmlName: "x-ms-content-crc64",
     type: {
      name: "ByteArray"
     }
    }
   }, blobContentLength = {
    parameterPath: "blobContentLength",
    mapper: {
     serializedName: "x-ms-blob-content-length",
     required: !0,
     xmlName: "x-ms-blob-content-length",
     type: {
      name: "Number"
     }
    }
   }, blobSequenceNumber = {
    parameterPath: [ "options", "blobSequenceNumber" ],
    mapper: {
     defaultValue: 0,
     serializedName: "x-ms-blob-sequence-number",
     xmlName: "x-ms-blob-sequence-number",
     type: {
      name: "Number"
     }
    }
   }, contentType1 = {
    parameterPath: [ "options", "contentType" ],
    mapper: {
     defaultValue: "application/octet-stream",
     isConstant: !0,
     serializedName: "Content-Type",
     type: {
      name: "String"
     }
    }
   }, body1 = {
    parameterPath: "body",
    mapper: {
     serializedName: "body",
     required: !0,
     xmlName: "body",
     type: {
      name: "Stream"
     }
    }
   }, accept2 = {
    parameterPath: "accept",
    mapper: {
     defaultValue: "application/xml",
     isConstant: !0,
     serializedName: "Accept",
     type: {
      name: "String"
     }
    }
   }, comp19 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "page",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, pageWrite = {
    parameterPath: "pageWrite",
    mapper: {
     defaultValue: "update",
     isConstant: !0,
     serializedName: "x-ms-page-write",
     type: {
      name: "String"
     }
    }
   }, ifSequenceNumberLessThanOrEqualTo = {
    parameterPath: [ "options", "sequenceNumberAccessConditions", "ifSequenceNumberLessThanOrEqualTo" ],
    mapper: {
     serializedName: "x-ms-if-sequence-number-le",
     xmlName: "x-ms-if-sequence-number-le",
     type: {
      name: "Number"
     }
    }
   }, ifSequenceNumberLessThan = {
    parameterPath: [ "options", "sequenceNumberAccessConditions", "ifSequenceNumberLessThan" ],
    mapper: {
     serializedName: "x-ms-if-sequence-number-lt",
     xmlName: "x-ms-if-sequence-number-lt",
     type: {
      name: "Number"
     }
    }
   }, ifSequenceNumberEqualTo = {
    parameterPath: [ "options", "sequenceNumberAccessConditions", "ifSequenceNumberEqualTo" ],
    mapper: {
     serializedName: "x-ms-if-sequence-number-eq",
     xmlName: "x-ms-if-sequence-number-eq",
     type: {
      name: "Number"
     }
    }
   }, sourceUrl = {
    parameterPath: "sourceUrl",
    mapper: {
     serializedName: "x-ms-copy-source",
     required: !0,
     xmlName: "x-ms-copy-source",
     type: {
      name: "String"
     }
    }
   }, sourceContentCrc64 = {
    parameterPath: [ "options", "sourceContentCrc64" ],
    mapper: {
     serializedName: "x-ms-source-content-crc64",
     xmlName: "x-ms-source-content-crc64",
     type: {
      name: "ByteArray"
     }
    }
   }, comp20 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "pagelist",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, comp22 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "appendblock",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, maxSize = {
    parameterPath: [ "options", "appendPositionAccessConditions", "maxSize" ],
    mapper: {
     serializedName: "x-ms-blob-condition-maxsize",
     xmlName: "x-ms-blob-condition-maxsize",
     type: {
      name: "Number"
     }
    }
   }, appendPosition = {
    parameterPath: [ "options", "appendPositionAccessConditions", "appendPosition" ],
    mapper: {
     serializedName: "x-ms-blob-condition-appendpos",
     xmlName: "x-ms-blob-condition-appendpos",
     type: {
      name: "Number"
     }
    }
   }, sourceRange1 = {
    parameterPath: [ "options", "sourceRange" ],
    mapper: {
     serializedName: "x-ms-source-range",
     xmlName: "x-ms-source-range",
     type: {
      name: "String"
     }
    }
   }, blobType2 = {
    parameterPath: "blobType",
    mapper: {
     defaultValue: "BlockBlob",
     isConstant: !0,
     serializedName: "x-ms-blob-type",
     type: {
      name: "String"
     }
    }
   }, comp24 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "block",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   }, blockId = {
    parameterPath: "blockId",
    mapper: {
     serializedName: "blockid",
     required: !0,
     xmlName: "blockid",
     type: {
      name: "String"
     }
    }
   }, blocks = {
    parameterPath: "blocks",
    mapper: BlockLookupList
   }, comp25 = {
    parameterPath: "comp",
    mapper: {
     defaultValue: "blocklist",
     isConstant: !0,
     serializedName: "comp",
     type: {
      name: "String"
     }
    }
   };
   class ServiceImpl {
    constructor(client) {
     this.client = client;
    }
    setProperties(blobServiceProperties, options) {
     return this.client.sendOperationRequest({
      blobServiceProperties,
      options
     }, setPropertiesOperationSpec);
    }
    getProperties(options) {
     return this.client.sendOperationRequest({
      options
     }, getPropertiesOperationSpec);
    }
    getStatistics(options) {
     return this.client.sendOperationRequest({
      options
     }, getStatisticsOperationSpec);
    }
    listContainersSegment(options) {
     return this.client.sendOperationRequest({
      options
     }, listContainersSegmentOperationSpec);
    }
    getUserDelegationKey(keyInfo, options) {
     return this.client.sendOperationRequest({
      keyInfo,
      options
     }, getUserDelegationKeyOperationSpec);
    }
    getAccountInfo(options) {
     return this.client.sendOperationRequest({
      options
     }, getAccountInfoOperationSpec);
    }
    submitBatch(contentLength, multipartContentType, body, options) {
     return this.client.sendOperationRequest({
      contentLength,
      multipartContentType,
      body,
      options
     }, submitBatchOperationSpec);
    }
    filterBlobs(options) {
     return this.client.sendOperationRequest({
      options
     }, filterBlobsOperationSpec);
    }
   }
   const xmlSerializer = createSerializer(mappers_namespaceObject, !0), setPropertiesOperationSpec = {
    path: "/",
    httpMethod: "PUT",
    responses: {
     202: {
      headersMapper: ServiceSetPropertiesHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ServiceSetPropertiesExceptionHeaders
     }
    },
    requestBody: blobServiceProperties,
    queryParameters: [ restype, comp, timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ contentType, accept, version, requestId ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
   }, getPropertiesOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: BlobServiceProperties,
      headersMapper: ServiceGetPropertiesHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetPropertiesExceptionHeaders
     }
    },
    queryParameters: [ restype, comp, timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: xmlSerializer
   }, getStatisticsOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: BlobServiceStatistics,
      headersMapper: ServiceGetStatisticsHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetStatisticsExceptionHeaders
     }
    },
    queryParameters: [ restype, timeoutInSeconds, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "stats",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: xmlSerializer
   }, listContainersSegmentOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: ListContainersSegmentResponse,
      headersMapper: ServiceListContainersSegmentHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ServiceListContainersSegmentExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp2, prefix, marker, maxPageSize, {
     parameterPath: [ "options", "include" ],
     mapper: {
      serializedName: "include",
      xmlName: "include",
      xmlElementName: "ListContainersIncludeType",
      type: {
       name: "Sequence",
       element: {
        type: {
         name: "Enum",
         allowedValues: [ "metadata", "deleted", "system" ]
        }
       }
      }
     },
     collectionFormat: "CSV"
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: xmlSerializer
   }, getUserDelegationKeyOperationSpec = {
    path: "/",
    httpMethod: "POST",
    responses: {
     200: {
      bodyMapper: UserDelegationKey,
      headersMapper: ServiceGetUserDelegationKeyHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetUserDelegationKeyExceptionHeaders
     }
    },
    requestBody: keyInfo,
    queryParameters: [ restype, timeoutInSeconds, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "userdelegationkey",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ contentType, accept, version, requestId ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
   }, getAccountInfoOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
     200: {
      headersMapper: ServiceGetAccountInfoHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetAccountInfoExceptionHeaders
     }
    },
    queryParameters: [ comp, timeoutInSeconds, restype1 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: xmlSerializer
   }, submitBatchOperationSpec = {
    path: "/",
    httpMethod: "POST",
    responses: {
     202: {
      bodyMapper: {
       type: {
        name: "Stream"
       },
       serializedName: "parsedResponse"
      },
      headersMapper: ServiceSubmitBatchHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ServiceSubmitBatchExceptionHeaders
     }
    },
    requestBody: body,
    queryParameters: [ timeoutInSeconds, comp4 ],
    urlParameters: [ url ],
    headerParameters: [ accept, version, requestId, contentLength, multipartContentType ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: xmlSerializer
   }, filterBlobsOperationSpec = {
    path: "/",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: FilterBlobSegment,
      headersMapper: ServiceFilterBlobsHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ServiceFilterBlobsExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, marker, maxPageSize, comp5, where ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: xmlSerializer
   };
   class ContainerImpl {
    constructor(client) {
     this.client = client;
    }
    create(options) {
     return this.client.sendOperationRequest({
      options
     }, createOperationSpec);
    }
    getProperties(options) {
     return this.client.sendOperationRequest({
      options
     }, container_getPropertiesOperationSpec);
    }
    delete(options) {
     return this.client.sendOperationRequest({
      options
     }, deleteOperationSpec);
    }
    setMetadata(options) {
     return this.client.sendOperationRequest({
      options
     }, setMetadataOperationSpec);
    }
    getAccessPolicy(options) {
     return this.client.sendOperationRequest({
      options
     }, getAccessPolicyOperationSpec);
    }
    setAccessPolicy(options) {
     return this.client.sendOperationRequest({
      options
     }, setAccessPolicyOperationSpec);
    }
    restore(options) {
     return this.client.sendOperationRequest({
      options
     }, restoreOperationSpec);
    }
    rename(sourceContainerName, options) {
     return this.client.sendOperationRequest({
      sourceContainerName,
      options
     }, renameOperationSpec);
    }
    submitBatch(contentLength, multipartContentType, body, options) {
     return this.client.sendOperationRequest({
      contentLength,
      multipartContentType,
      body,
      options
     }, container_submitBatchOperationSpec);
    }
    filterBlobs(options) {
     return this.client.sendOperationRequest({
      options
     }, container_filterBlobsOperationSpec);
    }
    acquireLease(options) {
     return this.client.sendOperationRequest({
      options
     }, acquireLeaseOperationSpec);
    }
    releaseLease(leaseId, options) {
     return this.client.sendOperationRequest({
      leaseId,
      options
     }, releaseLeaseOperationSpec);
    }
    renewLease(leaseId, options) {
     return this.client.sendOperationRequest({
      leaseId,
      options
     }, renewLeaseOperationSpec);
    }
    breakLease(options) {
     return this.client.sendOperationRequest({
      options
     }, breakLeaseOperationSpec);
    }
    changeLease(leaseId, proposedLeaseId, options) {
     return this.client.sendOperationRequest({
      leaseId,
      proposedLeaseId,
      options
     }, changeLeaseOperationSpec);
    }
    listBlobFlatSegment(options) {
     return this.client.sendOperationRequest({
      options
     }, listBlobFlatSegmentOperationSpec);
    }
    listBlobHierarchySegment(delimiter, options) {
     return this.client.sendOperationRequest({
      delimiter,
      options
     }, listBlobHierarchySegmentOperationSpec);
    }
    getAccountInfo(options) {
     return this.client.sendOperationRequest({
      options
     }, container_getAccountInfoOperationSpec);
    }
   }
   const container_xmlSerializer = createSerializer(mappers_namespaceObject, !0), createOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: ContainerCreateHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerCreateExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, metadata, access, {
     parameterPath: [ "options", "containerEncryptionScope", "defaultEncryptionScope" ],
     mapper: {
      serializedName: "x-ms-default-encryption-scope",
      xmlName: "x-ms-default-encryption-scope",
      type: {
       name: "String"
      }
     }
    }, {
     parameterPath: [ "options", "containerEncryptionScope", "preventEncryptionScopeOverride" ],
     mapper: {
      serializedName: "x-ms-deny-encryption-scope-override",
      xmlName: "x-ms-deny-encryption-scope-override",
      type: {
       name: "Boolean"
      }
     }
    } ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, container_getPropertiesOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
     200: {
      headersMapper: ContainerGetPropertiesHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetPropertiesExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, deleteOperationSpec = {
    path: "/{containerName}",
    httpMethod: "DELETE",
    responses: {
     202: {
      headersMapper: ContainerDeleteHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerDeleteExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, setMetadataOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: ContainerSetMetadataHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSetMetadataExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp6 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, metadata, leaseId, ifModifiedSince ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, getAccessPolicyOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: {
       type: {
        name: "Sequence",
        element: {
         type: {
          name: "Composite",
          className: "SignedIdentifier"
         }
        }
       },
       serializedName: "SignedIdentifiers",
       xmlName: "SignedIdentifiers",
       xmlIsWrapped: !0,
       xmlElementName: "SignedIdentifier"
      },
      headersMapper: ContainerGetAccessPolicyHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetAccessPolicyExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp7 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, setAccessPolicyOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: ContainerSetAccessPolicyHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSetAccessPolicyExceptionHeaders
     }
    },
    requestBody: {
     parameterPath: [ "options", "containerAcl" ],
     mapper: {
      serializedName: "containerAcl",
      xmlName: "SignedIdentifiers",
      xmlIsWrapped: !0,
      xmlElementName: "SignedIdentifier",
      type: {
       name: "Sequence",
       element: {
        type: {
         name: "Composite",
         className: "SignedIdentifier"
        }
       }
      }
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp7 ],
    urlParameters: [ url ],
    headerParameters: [ contentType, accept, version, requestId, access, leaseId, ifModifiedSince, ifUnmodifiedSince ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: container_xmlSerializer
   }, restoreOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: ContainerRestoreHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRestoreExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp8 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, {
     parameterPath: [ "options", "deletedContainerName" ],
     mapper: {
      serializedName: "x-ms-deleted-container-name",
      xmlName: "x-ms-deleted-container-name",
      type: {
       name: "String"
      }
     }
    }, {
     parameterPath: [ "options", "deletedContainerVersion" ],
     mapper: {
      serializedName: "x-ms-deleted-container-version",
      xmlName: "x-ms-deleted-container-version",
      type: {
       name: "String"
      }
     }
    } ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, renameOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: ContainerRenameHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRenameExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "rename",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, {
     parameterPath: "sourceContainerName",
     mapper: {
      serializedName: "x-ms-source-container-name",
      required: !0,
      xmlName: "x-ms-source-container-name",
      type: {
       name: "String"
      }
     }
    }, {
     parameterPath: [ "options", "sourceLeaseId" ],
     mapper: {
      serializedName: "x-ms-source-lease-id",
      xmlName: "x-ms-source-lease-id",
      type: {
       name: "String"
      }
     }
    } ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, container_submitBatchOperationSpec = {
    path: "/{containerName}",
    httpMethod: "POST",
    responses: {
     202: {
      bodyMapper: {
       type: {
        name: "Stream"
       },
       serializedName: "parsedResponse"
      },
      headersMapper: ContainerSubmitBatchHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSubmitBatchExceptionHeaders
     }
    },
    requestBody: body,
    queryParameters: [ timeoutInSeconds, comp4, restype2 ],
    urlParameters: [ url ],
    headerParameters: [ accept, version, requestId, contentLength, multipartContentType ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: container_xmlSerializer
   }, container_filterBlobsOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: FilterBlobSegment,
      headersMapper: ContainerFilterBlobsHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerFilterBlobsExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, marker, maxPageSize, comp5, where, restype2 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, acquireLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: ContainerAcquireLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerAcquireLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, action, duration, proposedLeaseId ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, releaseLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: ContainerReleaseLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerReleaseLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, action1, leaseId1 ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, renewLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: ContainerRenewLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRenewLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, leaseId1, action2 ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, breakLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     202: {
      headersMapper: ContainerBreakLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerBreakLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, action3, breakPeriod ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, changeLeaseOperationSpec = {
    path: "/{containerName}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: ContainerChangeLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerChangeLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, restype2, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, leaseId1, action4, proposedLeaseId1 ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, listBlobFlatSegmentOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: ListBlobsFlatSegmentResponse,
      headersMapper: ContainerListBlobFlatSegmentHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerListBlobFlatSegmentExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp2, prefix, marker, maxPageSize, restype2, include1 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, listBlobHierarchySegmentOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: ListBlobsHierarchySegmentResponse,
      headersMapper: ContainerListBlobHierarchySegmentHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerListBlobHierarchySegmentExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp2, prefix, marker, maxPageSize, restype2, include1, {
     parameterPath: "delimiter",
     mapper: {
      serializedName: "delimiter",
      required: !0,
      xmlName: "delimiter",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: container_xmlSerializer
   }, container_getAccountInfoOperationSpec = {
    path: "/{containerName}",
    httpMethod: "GET",
    responses: {
     200: {
      headersMapper: ContainerGetAccountInfoHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetAccountInfoExceptionHeaders
     }
    },
    queryParameters: [ comp, timeoutInSeconds, restype1 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: container_xmlSerializer
   };
   class BlobImpl {
    constructor(client) {
     this.client = client;
    }
    download(options) {
     return this.client.sendOperationRequest({
      options
     }, downloadOperationSpec);
    }
    getProperties(options) {
     return this.client.sendOperationRequest({
      options
     }, blob_getPropertiesOperationSpec);
    }
    delete(options) {
     return this.client.sendOperationRequest({
      options
     }, blob_deleteOperationSpec);
    }
    undelete(options) {
     return this.client.sendOperationRequest({
      options
     }, undeleteOperationSpec);
    }
    setExpiry(expiryOptions, options) {
     return this.client.sendOperationRequest({
      expiryOptions,
      options
     }, setExpiryOperationSpec);
    }
    setHttpHeaders(options) {
     return this.client.sendOperationRequest({
      options
     }, setHttpHeadersOperationSpec);
    }
    setImmutabilityPolicy(options) {
     return this.client.sendOperationRequest({
      options
     }, setImmutabilityPolicyOperationSpec);
    }
    deleteImmutabilityPolicy(options) {
     return this.client.sendOperationRequest({
      options
     }, deleteImmutabilityPolicyOperationSpec);
    }
    setLegalHold(legalHold, options) {
     return this.client.sendOperationRequest({
      legalHold,
      options
     }, setLegalHoldOperationSpec);
    }
    setMetadata(options) {
     return this.client.sendOperationRequest({
      options
     }, blob_setMetadataOperationSpec);
    }
    acquireLease(options) {
     return this.client.sendOperationRequest({
      options
     }, blob_acquireLeaseOperationSpec);
    }
    releaseLease(leaseId, options) {
     return this.client.sendOperationRequest({
      leaseId,
      options
     }, blob_releaseLeaseOperationSpec);
    }
    renewLease(leaseId, options) {
     return this.client.sendOperationRequest({
      leaseId,
      options
     }, blob_renewLeaseOperationSpec);
    }
    changeLease(leaseId, proposedLeaseId, options) {
     return this.client.sendOperationRequest({
      leaseId,
      proposedLeaseId,
      options
     }, blob_changeLeaseOperationSpec);
    }
    breakLease(options) {
     return this.client.sendOperationRequest({
      options
     }, blob_breakLeaseOperationSpec);
    }
    createSnapshot(options) {
     return this.client.sendOperationRequest({
      options
     }, createSnapshotOperationSpec);
    }
    startCopyFromURL(copySource, options) {
     return this.client.sendOperationRequest({
      copySource,
      options
     }, startCopyFromURLOperationSpec);
    }
    copyFromURL(copySource, options) {
     return this.client.sendOperationRequest({
      copySource,
      options
     }, copyFromURLOperationSpec);
    }
    abortCopyFromURL(copyId, options) {
     return this.client.sendOperationRequest({
      copyId,
      options
     }, abortCopyFromURLOperationSpec);
    }
    setTier(tier, options) {
     return this.client.sendOperationRequest({
      tier,
      options
     }, setTierOperationSpec);
    }
    getAccountInfo(options) {
     return this.client.sendOperationRequest({
      options
     }, blob_getAccountInfoOperationSpec);
    }
    query(options) {
     return this.client.sendOperationRequest({
      options
     }, queryOperationSpec);
    }
    getTags(options) {
     return this.client.sendOperationRequest({
      options
     }, getTagsOperationSpec);
    }
    setTags(options) {
     return this.client.sendOperationRequest({
      options
     }, setTagsOperationSpec);
    }
   }
   const blob_xmlSerializer = createSerializer(mappers_namespaceObject, !0), downloadOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: {
       type: {
        name: "Stream"
       },
       serializedName: "parsedResponse"
      },
      headersMapper: BlobDownloadHeaders
     },
     206: {
      bodyMapper: {
       type: {
        name: "Stream"
       },
       serializedName: "parsedResponse"
      },
      headersMapper: BlobDownloadHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobDownloadExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, versionId ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, range, {
     parameterPath: [ "options", "rangeGetContentMD5" ],
     mapper: {
      serializedName: "x-ms-range-get-content-md5",
      xmlName: "x-ms-range-get-content-md5",
      type: {
       name: "Boolean"
      }
     }
    }, {
     parameterPath: [ "options", "rangeGetContentCRC64" ],
     mapper: {
      serializedName: "x-ms-range-get-content-crc64",
      xmlName: "x-ms-range-get-content-crc64",
      type: {
       name: "Boolean"
      }
     }
    }, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_getPropertiesOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "HEAD",
    responses: {
     200: {
      headersMapper: BlobGetPropertiesHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetPropertiesExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, versionId ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_deleteOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "DELETE",
    responses: {
     202: {
      headersMapper: BlobDeleteHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobDeleteExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, versionId, {
     parameterPath: [ "options", "blobDeleteType" ],
     mapper: {
      serializedName: "deletetype",
      xmlName: "deletetype",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, ifTags, {
     parameterPath: [ "options", "deleteSnapshots" ],
     mapper: {
      serializedName: "x-ms-delete-snapshots",
      xmlName: "x-ms-delete-snapshots",
      type: {
       name: "Enum",
       allowedValues: [ "include", "only" ]
      }
     }
    } ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, undeleteOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobUndeleteHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobUndeleteExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp8 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, setExpiryOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobSetExpiryHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetExpiryExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "expiry",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, {
     parameterPath: "expiryOptions",
     mapper: {
      serializedName: "x-ms-expiry-option",
      required: !0,
      xmlName: "x-ms-expiry-option",
      type: {
       name: "String"
      }
     }
    }, {
     parameterPath: [ "options", "expiresOn" ],
     mapper: {
      serializedName: "x-ms-expiry-time",
      xmlName: "x-ms-expiry-time",
      type: {
       name: "String"
      }
     }
    } ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, setHttpHeadersOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobSetHttpHeadersHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetHttpHeadersExceptionHeaders
     }
    },
    queryParameters: [ comp, timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, ifTags, blobCacheControl, blobContentType, blobContentMD5, blobContentEncoding, blobContentLanguage, blobContentDisposition ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, setImmutabilityPolicyOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobSetImmutabilityPolicyHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetImmutabilityPolicyExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, versionId, comp12 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifUnmodifiedSince, immutabilityPolicyExpiry, immutabilityPolicyMode ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, deleteImmutabilityPolicyOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "DELETE",
    responses: {
     200: {
      headersMapper: BlobDeleteImmutabilityPolicyHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobDeleteImmutabilityPolicyExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, versionId, comp12 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, setLegalHoldOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobSetLegalHoldHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetLegalHoldExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, versionId, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "legalhold",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, {
     parameterPath: "legalHold",
     mapper: {
      serializedName: "x-ms-legal-hold",
      required: !0,
      xmlName: "x-ms-legal-hold",
      type: {
       name: "Boolean"
      }
     }
    } ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_setMetadataOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobSetMetadataHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetMetadataExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp6 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, encryptionScope ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_acquireLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: BlobAcquireLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobAcquireLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, action, duration, proposedLeaseId, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_releaseLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobReleaseLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobReleaseLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, action1, leaseId1, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_renewLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobRenewLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobRenewLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, leaseId1, action2, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_changeLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobChangeLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobChangeLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, leaseId1, action4, proposedLeaseId1, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_breakLeaseOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     202: {
      headersMapper: BlobBreakLeaseHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobBreakLeaseExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp10 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, action3, breakPeriod, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, createSnapshotOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: BlobCreateSnapshotHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobCreateSnapshotExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "snapshot",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, encryptionScope ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, startCopyFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     202: {
      headersMapper: BlobStartCopyFromURLHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobStartCopyFromURLExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, ifTags, immutabilityPolicyExpiry, immutabilityPolicyMode, tier, rehydratePriority, sourceIfModifiedSince, sourceIfUnmodifiedSince, sourceIfMatch, sourceIfNoneMatch, sourceIfTags, copySource, blobTagsString, {
     parameterPath: [ "options", "sealBlob" ],
     mapper: {
      serializedName: "x-ms-seal-blob",
      xmlName: "x-ms-seal-blob",
      type: {
       name: "Boolean"
      }
     }
    }, legalHold1 ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, copyFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     202: {
      headersMapper: BlobCopyFromURLHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobCopyFromURLExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, ifTags, immutabilityPolicyExpiry, immutabilityPolicyMode, encryptionScope, tier, sourceIfModifiedSince, sourceIfUnmodifiedSince, sourceIfMatch, sourceIfNoneMatch, copySource, blobTagsString, legalHold1, {
     parameterPath: "xMsRequiresSync",
     mapper: {
      defaultValue: "true",
      isConstant: !0,
      serializedName: "x-ms-requires-sync",
      type: {
       name: "String"
      }
     }
    }, sourceContentMD5, copySourceAuthorization, copySourceTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, abortCopyFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     204: {
      headersMapper: BlobAbortCopyFromURLHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobAbortCopyFromURLExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "copy",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    }, {
     parameterPath: "copyId",
     mapper: {
      serializedName: "copyid",
      required: !0,
      xmlName: "copyid",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, {
     parameterPath: "copyActionAbortConstant",
     mapper: {
      defaultValue: "abort",
      isConstant: !0,
      serializedName: "x-ms-copy-action",
      type: {
       name: "String"
      }
     }
    } ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, setTierOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: BlobSetTierHeaders
     },
     202: {
      headersMapper: BlobSetTierHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetTierExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, versionId, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "tier",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifTags, rehydratePriority, {
     parameterPath: "tier",
     mapper: {
      serializedName: "x-ms-access-tier",
      required: !0,
      xmlName: "x-ms-access-tier",
      type: {
       name: "Enum",
       allowedValues: [ "P4", "P6", "P10", "P15", "P20", "P30", "P40", "P50", "P60", "P70", "P80", "Hot", "Cool", "Archive", "Cold" ]
      }
     }
    } ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, blob_getAccountInfoOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
     200: {
      headersMapper: BlobGetAccountInfoHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetAccountInfoExceptionHeaders
     }
    },
    queryParameters: [ comp, timeoutInSeconds, restype1 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1 ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, queryOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "POST",
    responses: {
     200: {
      bodyMapper: {
       type: {
        name: "Stream"
       },
       serializedName: "parsedResponse"
      },
      headersMapper: BlobQueryHeaders
     },
     206: {
      bodyMapper: {
       type: {
        name: "Stream"
       },
       serializedName: "parsedResponse"
      },
      headersMapper: BlobQueryHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobQueryExceptionHeaders
     }
    },
    requestBody: queryRequest,
    queryParameters: [ timeoutInSeconds, snapshot, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "query",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ contentType, accept, version, requestId, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: blob_xmlSerializer
   }, getTagsOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: BlobTags,
      headersMapper: BlobGetTagsHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetTagsExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, versionId, comp18 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifTags ],
    isXML: !0,
    serializer: blob_xmlSerializer
   }, setTagsOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     204: {
      headersMapper: BlobSetTagsHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetTagsExceptionHeaders
     }
    },
    requestBody: tags,
    queryParameters: [ timeoutInSeconds, versionId, comp18 ],
    urlParameters: [ url ],
    headerParameters: [ contentType, accept, version, requestId, leaseId, ifTags, transactionalContentMD5, transactionalContentCrc64 ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: blob_xmlSerializer
   };
   class PageBlobImpl {
    constructor(client) {
     this.client = client;
    }
    create(contentLength, blobContentLength, options) {
     return this.client.sendOperationRequest({
      contentLength,
      blobContentLength,
      options
     }, pageBlob_createOperationSpec);
    }
    uploadPages(contentLength, body, options) {
     return this.client.sendOperationRequest({
      contentLength,
      body,
      options
     }, uploadPagesOperationSpec);
    }
    clearPages(contentLength, options) {
     return this.client.sendOperationRequest({
      contentLength,
      options
     }, clearPagesOperationSpec);
    }
    uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {
     return this.client.sendOperationRequest({
      sourceUrl,
      sourceRange,
      contentLength,
      range,
      options
     }, uploadPagesFromURLOperationSpec);
    }
    getPageRanges(options) {
     return this.client.sendOperationRequest({
      options
     }, getPageRangesOperationSpec);
    }
    getPageRangesDiff(options) {
     return this.client.sendOperationRequest({
      options
     }, getPageRangesDiffOperationSpec);
    }
    resize(blobContentLength, options) {
     return this.client.sendOperationRequest({
      blobContentLength,
      options
     }, resizeOperationSpec);
    }
    updateSequenceNumber(sequenceNumberAction, options) {
     return this.client.sendOperationRequest({
      sequenceNumberAction,
      options
     }, updateSequenceNumberOperationSpec);
    }
    copyIncremental(copySource, options) {
     return this.client.sendOperationRequest({
      copySource,
      options
     }, copyIncrementalOperationSpec);
    }
   }
   const pageBlob_xmlSerializer = createSerializer(mappers_namespaceObject, !0), pageBlob_createOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: PageBlobCreateHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobCreateExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, contentLength, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, blobCacheControl, blobContentType, blobContentMD5, blobContentEncoding, blobContentLanguage, blobContentDisposition, immutabilityPolicyExpiry, immutabilityPolicyMode, encryptionScope, tier, blobTagsString, legalHold1, {
     parameterPath: "blobType",
     mapper: {
      defaultValue: "PageBlob",
      isConstant: !0,
      serializedName: "x-ms-blob-type",
      type: {
       name: "String"
      }
     }
    }, blobContentLength, blobSequenceNumber ],
    isXML: !0,
    serializer: pageBlob_xmlSerializer
   }, uploadPagesOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: PageBlobUploadPagesHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUploadPagesExceptionHeaders
     }
    },
    requestBody: body1,
    queryParameters: [ timeoutInSeconds, comp19 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, contentLength, leaseId, ifModifiedSince, ifUnmodifiedSince, range, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, encryptionScope, transactionalContentMD5, transactionalContentCrc64, contentType1, accept2, pageWrite, ifSequenceNumberLessThanOrEqualTo, ifSequenceNumberLessThan, ifSequenceNumberEqualTo ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "binary",
    serializer: pageBlob_xmlSerializer
   }, clearPagesOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: PageBlobClearPagesHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobClearPagesExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp19 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, contentLength, leaseId, ifModifiedSince, ifUnmodifiedSince, range, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, encryptionScope, ifSequenceNumberLessThanOrEqualTo, ifSequenceNumberLessThan, ifSequenceNumberEqualTo, {
     parameterPath: "pageWrite",
     mapper: {
      defaultValue: "clear",
      isConstant: !0,
      serializedName: "x-ms-page-write",
      type: {
       name: "String"
      }
     }
    } ],
    isXML: !0,
    serializer: pageBlob_xmlSerializer
   }, uploadPagesFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: PageBlobUploadPagesFromURLHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUploadPagesFromURLExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp19 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, contentLength, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, encryptionScope, sourceIfModifiedSince, sourceIfUnmodifiedSince, sourceIfMatch, sourceIfNoneMatch, sourceContentMD5, copySourceAuthorization, pageWrite, ifSequenceNumberLessThanOrEqualTo, ifSequenceNumberLessThan, ifSequenceNumberEqualTo, sourceUrl, {
     parameterPath: "sourceRange",
     mapper: {
      serializedName: "x-ms-source-range",
      required: !0,
      xmlName: "x-ms-source-range",
      type: {
       name: "String"
      }
     }
    }, sourceContentCrc64, {
     parameterPath: "range",
     mapper: {
      serializedName: "x-ms-range",
      required: !0,
      xmlName: "x-ms-range",
      type: {
       name: "String"
      }
     }
    } ],
    isXML: !0,
    serializer: pageBlob_xmlSerializer
   }, getPageRangesOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: PageList,
      headersMapper: PageBlobGetPageRangesHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobGetPageRangesExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, marker, maxPageSize, snapshot, comp20 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, range, ifMatch, ifNoneMatch, ifTags ],
    isXML: !0,
    serializer: pageBlob_xmlSerializer
   }, getPageRangesDiffOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: PageList,
      headersMapper: PageBlobGetPageRangesDiffHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobGetPageRangesDiffExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, marker, maxPageSize, snapshot, comp20, {
     parameterPath: [ "options", "prevsnapshot" ],
     mapper: {
      serializedName: "prevsnapshot",
      xmlName: "prevsnapshot",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, range, ifMatch, ifNoneMatch, ifTags, {
     parameterPath: [ "options", "prevSnapshotUrl" ],
     mapper: {
      serializedName: "x-ms-previous-snapshot-url",
      xmlName: "x-ms-previous-snapshot-url",
      type: {
       name: "String"
      }
     }
    } ],
    isXML: !0,
    serializer: pageBlob_xmlSerializer
   }, resizeOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: PageBlobResizeHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobResizeExceptionHeaders
     }
    },
    queryParameters: [ comp, timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, encryptionScope, blobContentLength ],
    isXML: !0,
    serializer: pageBlob_xmlSerializer
   }, updateSequenceNumberOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: PageBlobUpdateSequenceNumberHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUpdateSequenceNumberExceptionHeaders
     }
    },
    queryParameters: [ comp, timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, ifTags, blobSequenceNumber, {
     parameterPath: "sequenceNumberAction",
     mapper: {
      serializedName: "x-ms-sequence-number-action",
      required: !0,
      xmlName: "x-ms-sequence-number-action",
      type: {
       name: "Enum",
       allowedValues: [ "max", "update", "increment" ]
      }
     }
    } ],
    isXML: !0,
    serializer: pageBlob_xmlSerializer
   }, copyIncrementalOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     202: {
      headersMapper: PageBlobCopyIncrementalHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobCopyIncrementalExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "incrementalcopy",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, ifTags, copySource ],
    isXML: !0,
    serializer: pageBlob_xmlSerializer
   };
   class AppendBlobImpl {
    constructor(client) {
     this.client = client;
    }
    create(contentLength, options) {
     return this.client.sendOperationRequest({
      contentLength,
      options
     }, appendBlob_createOperationSpec);
    }
    appendBlock(contentLength, body, options) {
     return this.client.sendOperationRequest({
      contentLength,
      body,
      options
     }, appendBlockOperationSpec);
    }
    appendBlockFromUrl(sourceUrl, contentLength, options) {
     return this.client.sendOperationRequest({
      sourceUrl,
      contentLength,
      options
     }, appendBlockFromUrlOperationSpec);
    }
    seal(options) {
     return this.client.sendOperationRequest({
      options
     }, sealOperationSpec);
    }
   }
   const appendBlob_xmlSerializer = createSerializer(mappers_namespaceObject, !0), appendBlob_createOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: AppendBlobCreateHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobCreateExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, contentLength, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, blobCacheControl, blobContentType, blobContentMD5, blobContentEncoding, blobContentLanguage, blobContentDisposition, immutabilityPolicyExpiry, immutabilityPolicyMode, encryptionScope, blobTagsString, legalHold1, {
     parameterPath: "blobType",
     mapper: {
      defaultValue: "AppendBlob",
      isConstant: !0,
      serializedName: "x-ms-blob-type",
      type: {
       name: "String"
      }
     }
    } ],
    isXML: !0,
    serializer: appendBlob_xmlSerializer
   }, appendBlockOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: AppendBlobAppendBlockHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobAppendBlockExceptionHeaders
     }
    },
    requestBody: body1,
    queryParameters: [ timeoutInSeconds, comp22 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, contentLength, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, encryptionScope, transactionalContentMD5, transactionalContentCrc64, contentType1, accept2, maxSize, appendPosition ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "binary",
    serializer: appendBlob_xmlSerializer
   }, appendBlockFromUrlOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: AppendBlobAppendBlockFromUrlHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobAppendBlockFromUrlExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp22 ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, contentLength, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, encryptionScope, sourceIfModifiedSince, sourceIfUnmodifiedSince, sourceIfMatch, sourceIfNoneMatch, sourceContentMD5, copySourceAuthorization, transactionalContentMD5, sourceUrl, sourceContentCrc64, maxSize, appendPosition, sourceRange1 ],
    isXML: !0,
    serializer: appendBlob_xmlSerializer
   }, sealOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     200: {
      headersMapper: AppendBlobSealHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobSealExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, {
     parameterPath: "comp",
     mapper: {
      defaultValue: "seal",
      isConstant: !0,
      serializedName: "comp",
      type: {
       name: "String"
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, appendPosition ],
    isXML: !0,
    serializer: appendBlob_xmlSerializer
   };
   class BlockBlobImpl {
    constructor(client) {
     this.client = client;
    }
    upload(contentLength, body, options) {
     return this.client.sendOperationRequest({
      contentLength,
      body,
      options
     }, uploadOperationSpec);
    }
    putBlobFromUrl(contentLength, copySource, options) {
     return this.client.sendOperationRequest({
      contentLength,
      copySource,
      options
     }, putBlobFromUrlOperationSpec);
    }
    stageBlock(blockId, contentLength, body, options) {
     return this.client.sendOperationRequest({
      blockId,
      contentLength,
      body,
      options
     }, stageBlockOperationSpec);
    }
    stageBlockFromURL(blockId, contentLength, sourceUrl, options) {
     return this.client.sendOperationRequest({
      blockId,
      contentLength,
      sourceUrl,
      options
     }, stageBlockFromURLOperationSpec);
    }
    commitBlockList(blocks, options) {
     return this.client.sendOperationRequest({
      blocks,
      options
     }, commitBlockListOperationSpec);
    }
    getBlockList(listType, options) {
     return this.client.sendOperationRequest({
      listType,
      options
     }, getBlockListOperationSpec);
    }
   }
   const blockBlob_xmlSerializer = createSerializer(mappers_namespaceObject, !0), uploadOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: BlockBlobUploadHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobUploadExceptionHeaders
     }
    },
    requestBody: body1,
    queryParameters: [ timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, contentLength, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, blobCacheControl, blobContentType, blobContentMD5, blobContentEncoding, blobContentLanguage, blobContentDisposition, immutabilityPolicyExpiry, immutabilityPolicyMode, encryptionScope, tier, blobTagsString, legalHold1, transactionalContentMD5, transactionalContentCrc64, contentType1, accept2, blobType2 ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "binary",
    serializer: blockBlob_xmlSerializer
   }, putBlobFromUrlOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: BlockBlobPutBlobFromUrlHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobPutBlobFromUrlExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, contentLength, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, blobCacheControl, blobContentType, blobContentMD5, blobContentEncoding, blobContentLanguage, blobContentDisposition, encryptionScope, tier, sourceIfModifiedSince, sourceIfUnmodifiedSince, sourceIfMatch, sourceIfNoneMatch, sourceIfTags, copySource, blobTagsString, sourceContentMD5, copySourceAuthorization, copySourceTags, transactionalContentMD5, blobType2, {
     parameterPath: [ "options", "copySourceBlobProperties" ],
     mapper: {
      serializedName: "x-ms-copy-source-blob-properties",
      xmlName: "x-ms-copy-source-blob-properties",
      type: {
       name: "Boolean"
      }
     }
    } ],
    isXML: !0,
    serializer: blockBlob_xmlSerializer
   }, stageBlockOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: BlockBlobStageBlockHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobStageBlockExceptionHeaders
     }
    },
    requestBody: body1,
    queryParameters: [ timeoutInSeconds, comp24, blockId ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, contentLength, leaseId, encryptionKey, encryptionKeySha256, encryptionAlgorithm, encryptionScope, transactionalContentMD5, transactionalContentCrc64, contentType1, accept2 ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "binary",
    serializer: blockBlob_xmlSerializer
   }, stageBlockFromURLOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: BlockBlobStageBlockFromURLHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobStageBlockFromURLExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, comp24, blockId ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, contentLength, leaseId, encryptionKey, encryptionKeySha256, encryptionAlgorithm, encryptionScope, sourceIfModifiedSince, sourceIfUnmodifiedSince, sourceIfMatch, sourceIfNoneMatch, sourceContentMD5, copySourceAuthorization, sourceUrl, sourceContentCrc64, sourceRange1 ],
    isXML: !0,
    serializer: blockBlob_xmlSerializer
   }, commitBlockListOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "PUT",
    responses: {
     201: {
      headersMapper: BlockBlobCommitBlockListHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobCommitBlockListExceptionHeaders
     }
    },
    requestBody: blocks,
    queryParameters: [ timeoutInSeconds, comp25 ],
    urlParameters: [ url ],
    headerParameters: [ contentType, accept, version, requestId, metadata, leaseId, ifModifiedSince, ifUnmodifiedSince, encryptionKey, encryptionKeySha256, encryptionAlgorithm, ifMatch, ifNoneMatch, ifTags, blobCacheControl, blobContentType, blobContentMD5, blobContentEncoding, blobContentLanguage, blobContentDisposition, immutabilityPolicyExpiry, immutabilityPolicyMode, encryptionScope, tier, blobTagsString, legalHold1, transactionalContentMD5, transactionalContentCrc64 ],
    isXML: !0,
    contentType: "application/xml; charset=utf-8",
    mediaType: "xml",
    serializer: blockBlob_xmlSerializer
   }, getBlockListOperationSpec = {
    path: "/{containerName}/{blob}",
    httpMethod: "GET",
    responses: {
     200: {
      bodyMapper: BlockList,
      headersMapper: BlockBlobGetBlockListHeaders
     },
     default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobGetBlockListExceptionHeaders
     }
    },
    queryParameters: [ timeoutInSeconds, snapshot, comp25, {
     parameterPath: "listType",
     mapper: {
      defaultValue: "committed",
      serializedName: "blocklisttype",
      required: !0,
      xmlName: "blocklisttype",
      type: {
       name: "Enum",
       allowedValues: [ "committed", "uncommitted", "all" ]
      }
     }
    } ],
    urlParameters: [ url ],
    headerParameters: [ version, requestId, accept1, leaseId, ifTags ],
    isXML: !0,
    serializer: blockBlob_xmlSerializer
   };
   class StorageClient extends ExtendedServiceClient {
    constructor(url, options) {
     var _a, _b;
     if (void 0 === url) throw new Error("'url' cannot be null");
     options || (options = {});
     const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} azsdk-js-azure-storage-blob/12.27.0` : "azsdk-js-azure-storage-blob/12.27.0";
     super(Object.assign(Object.assign(Object.assign({}, {
      requestContentType: "application/json; charset=utf-8"
     }), options), {
      userAgentOptions: {
       userAgentPrefix
      },
      endpoint: null !== (_b = null !== (_a = options.endpoint) && void 0 !== _a ? _a : options.baseUri) && void 0 !== _b ? _b : "{url}"
     })), this.url = url, this.version = options.version || "2025-05-05", this.service = new ServiceImpl(this), 
     this.container = new ContainerImpl(this), this.blob = new BlobImpl(this), this.pageBlob = new PageBlobImpl(this), 
     this.appendBlob = new AppendBlobImpl(this), this.blockBlob = new BlockBlobImpl(this);
    }
   }
   class StorageContextClient extends StorageClient {
    async sendOperationRequest(operationArguments, operationSpec) {
     const operationSpecToSend = Object.assign({}, operationSpec);
     return "/{containerName}" !== operationSpecToSend.path && "/{containerName}/{blob}" !== operationSpecToSend.path || (operationSpecToSend.path = ""), 
     super.sendOperationRequest(operationArguments, operationSpecToSend);
    }
   }
   class StorageClient_StorageClient {
    constructor(url, pipeline) {
     this.url = escapeURLPath(url), this.accountName = getAccountNameFromUrl(url), this.pipeline = pipeline, 
     this.storageClientContext = new StorageContextClient(this.url, getCoreClientOptions(pipeline)), 
     this.isHttps = iEqual(function(url) {
      try {
       const urlParsed = new URL(url);
       return urlParsed.protocol.endsWith(":") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;
      } catch (e) {
       return;
      }
     }(this.url) || "", "https"), this.credential = getCredentialFromPipeline(pipeline);
     this.storageClientContext.requestContentType = void 0;
    }
   }
   const tracingClient = createTracingClient({
    packageName: "@azure/storage-blob",
    packageVersion: "12.27.0",
    namespace: "Microsoft.Storage"
   });
   class BlobSASPermissions {
    constructor() {
     this.read = !1, this.add = !1, this.create = !1, this.write = !1, this.delete = !1, 
     this.deleteVersion = !1, this.tag = !1, this.move = !1, this.execute = !1, this.setImmutabilityPolicy = !1, 
     this.permanentDelete = !1;
    }
    static parse(permissions) {
     const blobSASPermissions = new BlobSASPermissions;
     for (const char of permissions) switch (char) {
     case "r":
      blobSASPermissions.read = !0;
      break;

     case "a":
      blobSASPermissions.add = !0;
      break;

     case "c":
      blobSASPermissions.create = !0;
      break;

     case "w":
      blobSASPermissions.write = !0;
      break;

     case "d":
      blobSASPermissions.delete = !0;
      break;

     case "x":
      blobSASPermissions.deleteVersion = !0;
      break;

     case "t":
      blobSASPermissions.tag = !0;
      break;

     case "m":
      blobSASPermissions.move = !0;
      break;

     case "e":
      blobSASPermissions.execute = !0;
      break;

     case "i":
      blobSASPermissions.setImmutabilityPolicy = !0;
      break;

     case "y":
      blobSASPermissions.permanentDelete = !0;
      break;

     default:
      throw new RangeError(`Invalid permission: ${char}`);
     }
     return blobSASPermissions;
    }
    static from(permissionLike) {
     const blobSASPermissions = new BlobSASPermissions;
     return permissionLike.read && (blobSASPermissions.read = !0), permissionLike.add && (blobSASPermissions.add = !0), 
     permissionLike.create && (blobSASPermissions.create = !0), permissionLike.write && (blobSASPermissions.write = !0), 
     permissionLike.delete && (blobSASPermissions.delete = !0), permissionLike.deleteVersion && (blobSASPermissions.deleteVersion = !0), 
     permissionLike.tag && (blobSASPermissions.tag = !0), permissionLike.move && (blobSASPermissions.move = !0), 
     permissionLike.execute && (blobSASPermissions.execute = !0), permissionLike.setImmutabilityPolicy && (blobSASPermissions.setImmutabilityPolicy = !0), 
     permissionLike.permanentDelete && (blobSASPermissions.permanentDelete = !0), blobSASPermissions;
    }
    toString() {
     const permissions = [];
     return this.read && permissions.push("r"), this.add && permissions.push("a"), this.create && permissions.push("c"), 
     this.write && permissions.push("w"), this.delete && permissions.push("d"), this.deleteVersion && permissions.push("x"), 
     this.tag && permissions.push("t"), this.move && permissions.push("m"), this.execute && permissions.push("e"), 
     this.setImmutabilityPolicy && permissions.push("i"), this.permanentDelete && permissions.push("y"), 
     permissions.join("");
    }
   }
   class ContainerSASPermissions {
    constructor() {
     this.read = !1, this.add = !1, this.create = !1, this.write = !1, this.delete = !1, 
     this.deleteVersion = !1, this.list = !1, this.tag = !1, this.move = !1, this.execute = !1, 
     this.setImmutabilityPolicy = !1, this.permanentDelete = !1, this.filterByTags = !1;
    }
    static parse(permissions) {
     const containerSASPermissions = new ContainerSASPermissions;
     for (const char of permissions) switch (char) {
     case "r":
      containerSASPermissions.read = !0;
      break;

     case "a":
      containerSASPermissions.add = !0;
      break;

     case "c":
      containerSASPermissions.create = !0;
      break;

     case "w":
      containerSASPermissions.write = !0;
      break;

     case "d":
      containerSASPermissions.delete = !0;
      break;

     case "l":
      containerSASPermissions.list = !0;
      break;

     case "t":
      containerSASPermissions.tag = !0;
      break;

     case "x":
      containerSASPermissions.deleteVersion = !0;
      break;

     case "m":
      containerSASPermissions.move = !0;
      break;

     case "e":
      containerSASPermissions.execute = !0;
      break;

     case "i":
      containerSASPermissions.setImmutabilityPolicy = !0;
      break;

     case "y":
      containerSASPermissions.permanentDelete = !0;
      break;

     case "f":
      containerSASPermissions.filterByTags = !0;
      break;

     default:
      throw new RangeError(`Invalid permission ${char}`);
     }
     return containerSASPermissions;
    }
    static from(permissionLike) {
     const containerSASPermissions = new ContainerSASPermissions;
     return permissionLike.read && (containerSASPermissions.read = !0), permissionLike.add && (containerSASPermissions.add = !0), 
     permissionLike.create && (containerSASPermissions.create = !0), permissionLike.write && (containerSASPermissions.write = !0), 
     permissionLike.delete && (containerSASPermissions.delete = !0), permissionLike.list && (containerSASPermissions.list = !0), 
     permissionLike.deleteVersion && (containerSASPermissions.deleteVersion = !0), permissionLike.tag && (containerSASPermissions.tag = !0), 
     permissionLike.move && (containerSASPermissions.move = !0), permissionLike.execute && (containerSASPermissions.execute = !0), 
     permissionLike.setImmutabilityPolicy && (containerSASPermissions.setImmutabilityPolicy = !0), 
     permissionLike.permanentDelete && (containerSASPermissions.permanentDelete = !0), 
     permissionLike.filterByTags && (containerSASPermissions.filterByTags = !0), containerSASPermissions;
    }
    toString() {
     const permissions = [];
     return this.read && permissions.push("r"), this.add && permissions.push("a"), this.create && permissions.push("c"), 
     this.write && permissions.push("w"), this.delete && permissions.push("d"), this.deleteVersion && permissions.push("x"), 
     this.list && permissions.push("l"), this.tag && permissions.push("t"), this.move && permissions.push("m"), 
     this.execute && permissions.push("e"), this.setImmutabilityPolicy && permissions.push("i"), 
     this.permanentDelete && permissions.push("y"), this.filterByTags && permissions.push("f"), 
     permissions.join("");
    }
   }
   class UserDelegationKeyCredential {
    constructor(accountName, userDelegationKey) {
     this.accountName = accountName, this.userDelegationKey = userDelegationKey, this.key = Buffer.from(userDelegationKey.value, "base64");
    }
    computeHMACSHA256(stringToSign) {
     return (0, external_crypto_.createHmac)("sha256", this.key).update(stringToSign, "utf8").digest("base64");
    }
   }
   function ipRangeToString(ipRange) {
    return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;
   }
   var SASProtocol;
   !function(SASProtocol) {
    SASProtocol.Https = "https", SASProtocol.HttpsAndHttp = "https,http";
   }(SASProtocol || (SASProtocol = {}));
   class SASQueryParameters {
    get ipRange() {
     if (this.ipRangeInner) return {
      end: this.ipRangeInner.end,
      start: this.ipRangeInner.start
     };
    }
    constructor(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {
     this.version = version, this.signature = signature, void 0 !== permissionsOrOptions && "string" != typeof permissionsOrOptions ? (this.permissions = permissionsOrOptions.permissions, 
     this.services = permissionsOrOptions.services, this.resourceTypes = permissionsOrOptions.resourceTypes, 
     this.protocol = permissionsOrOptions.protocol, this.startsOn = permissionsOrOptions.startsOn, 
     this.expiresOn = permissionsOrOptions.expiresOn, this.ipRangeInner = permissionsOrOptions.ipRange, 
     this.identifier = permissionsOrOptions.identifier, this.encryptionScope = permissionsOrOptions.encryptionScope, 
     this.resource = permissionsOrOptions.resource, this.cacheControl = permissionsOrOptions.cacheControl, 
     this.contentDisposition = permissionsOrOptions.contentDisposition, this.contentEncoding = permissionsOrOptions.contentEncoding, 
     this.contentLanguage = permissionsOrOptions.contentLanguage, this.contentType = permissionsOrOptions.contentType, 
     permissionsOrOptions.userDelegationKey && (this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId, 
     this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId, this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn, 
     this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn, this.signedService = permissionsOrOptions.userDelegationKey.signedService, 
     this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion, this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId, 
     this.correlationId = permissionsOrOptions.correlationId)) : (this.services = services, 
     this.resourceTypes = resourceTypes, this.expiresOn = expiresOn, this.permissions = permissionsOrOptions, 
     this.protocol = protocol, this.startsOn = startsOn, this.ipRangeInner = ipRange, 
     this.encryptionScope = encryptionScope, this.identifier = identifier, this.resource = resource, 
     this.cacheControl = cacheControl, this.contentDisposition = contentDisposition, 
     this.contentEncoding = contentEncoding, this.contentLanguage = contentLanguage, 
     this.contentType = contentType, userDelegationKey && (this.signedOid = userDelegationKey.signedObjectId, 
     this.signedTenantId = userDelegationKey.signedTenantId, this.signedStartsOn = userDelegationKey.signedStartsOn, 
     this.signedExpiresOn = userDelegationKey.signedExpiresOn, this.signedService = userDelegationKey.signedService, 
     this.signedVersion = userDelegationKey.signedVersion, this.preauthorizedAgentObjectId = preauthorizedAgentObjectId, 
     this.correlationId = correlationId));
    }
    toString() {
     const params = [ "sv", "ss", "srt", "spr", "st", "se", "sip", "si", "ses", "skoid", "sktid", "skt", "ske", "sks", "skv", "sr", "sp", "sig", "rscc", "rscd", "rsce", "rscl", "rsct", "saoid", "scid" ], queries = [];
     for (const param of params) switch (param) {
     case "sv":
      this.tryAppendQueryParameter(queries, param, this.version);
      break;

     case "ss":
      this.tryAppendQueryParameter(queries, param, this.services);
      break;

     case "srt":
      this.tryAppendQueryParameter(queries, param, this.resourceTypes);
      break;

     case "spr":
      this.tryAppendQueryParameter(queries, param, this.protocol);
      break;

     case "st":
      this.tryAppendQueryParameter(queries, param, this.startsOn ? truncatedISO8061Date(this.startsOn, !1) : void 0);
      break;

     case "se":
      this.tryAppendQueryParameter(queries, param, this.expiresOn ? truncatedISO8061Date(this.expiresOn, !1) : void 0);
      break;

     case "sip":
      this.tryAppendQueryParameter(queries, param, this.ipRange ? ipRangeToString(this.ipRange) : void 0);
      break;

     case "si":
      this.tryAppendQueryParameter(queries, param, this.identifier);
      break;

     case "ses":
      this.tryAppendQueryParameter(queries, param, this.encryptionScope);
      break;

     case "skoid":
      this.tryAppendQueryParameter(queries, param, this.signedOid);
      break;

     case "sktid":
      this.tryAppendQueryParameter(queries, param, this.signedTenantId);
      break;

     case "skt":
      this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, !1) : void 0);
      break;

     case "ske":
      this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, !1) : void 0);
      break;

     case "sks":
      this.tryAppendQueryParameter(queries, param, this.signedService);
      break;

     case "skv":
      this.tryAppendQueryParameter(queries, param, this.signedVersion);
      break;

     case "sr":
      this.tryAppendQueryParameter(queries, param, this.resource);
      break;

     case "sp":
      this.tryAppendQueryParameter(queries, param, this.permissions);
      break;

     case "sig":
      this.tryAppendQueryParameter(queries, param, this.signature);
      break;

     case "rscc":
      this.tryAppendQueryParameter(queries, param, this.cacheControl);
      break;

     case "rscd":
      this.tryAppendQueryParameter(queries, param, this.contentDisposition);
      break;

     case "rsce":
      this.tryAppendQueryParameter(queries, param, this.contentEncoding);
      break;

     case "rscl":
      this.tryAppendQueryParameter(queries, param, this.contentLanguage);
      break;

     case "rsct":
      this.tryAppendQueryParameter(queries, param, this.contentType);
      break;

     case "saoid":
      this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);
      break;

     case "scid":
      this.tryAppendQueryParameter(queries, param, this.correlationId);
     }
     return queries.join("&");
    }
    tryAppendQueryParameter(queries, key, value) {
     value && (key = encodeURIComponent(key), value = encodeURIComponent(value), key.length > 0 && value.length > 0 && queries.push(`${key}=${value}`));
    }
   }
   function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
    return generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName).sasQueryParameters;
   }
   function generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION, sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : void 0;
    let userDelegationKeyCredential;
    if (void 0 === sharedKeyCredential && void 0 !== accountName && (userDelegationKeyCredential = new UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey)), 
    void 0 === sharedKeyCredential && void 0 === userDelegationKeyCredential) throw TypeError("Invalid sharedKeyCredential, userDelegationKey or accountName.");
    if (version >= "2020-12-06") return void 0 !== sharedKeyCredential ? function(blobSASSignatureValues, sharedKeyCredential) {
     if (blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues), 
     !(blobSASSignatureValues.identifier || blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
     let verifiedPermissions, resource = "c", timestamp = blobSASSignatureValues.snapshotTime;
     blobSASSignatureValues.blobName && (resource = "b", blobSASSignatureValues.snapshotTime ? resource = "bs" : blobSASSignatureValues.versionId && (resource = "bv", 
     timestamp = blobSASSignatureValues.versionId));
     blobSASSignatureValues.permissions && (verifiedPermissions = blobSASSignatureValues.blobName ? BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString() : ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString());
     const stringToSign = [ verifiedPermissions || "", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, !1) : "", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, !1) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.encryptionScope, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : "" ].join("\n"), signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
     return {
      sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, void 0, void 0, void 0, blobSASSignatureValues.encryptionScope),
      stringToSign
     };
    }(blobSASSignatureValues, sharedKeyCredential) : function(blobSASSignatureValues, userDelegationKeyCredential) {
     if (blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues), 
     !blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
     let verifiedPermissions, resource = "c", timestamp = blobSASSignatureValues.snapshotTime;
     blobSASSignatureValues.blobName && (resource = "b", blobSASSignatureValues.snapshotTime ? resource = "bs" : blobSASSignatureValues.versionId && (resource = "bv", 
     timestamp = blobSASSignatureValues.versionId));
     blobSASSignatureValues.permissions && (verifiedPermissions = blobSASSignatureValues.blobName ? BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString() : ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString());
     const stringToSign = [ verifiedPermissions || "", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, !1) : "", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, !1) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, !1) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, !1) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, void 0, blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.encryptionScope, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType ].join("\n"), signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
     return {
      sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope),
      stringToSign
     };
    }(blobSASSignatureValues, userDelegationKeyCredential);
    if (version >= "2018-11-09") return void 0 !== sharedKeyCredential ? function(blobSASSignatureValues, sharedKeyCredential) {
     if (blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues), 
     !(blobSASSignatureValues.identifier || blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
     let verifiedPermissions, resource = "c", timestamp = blobSASSignatureValues.snapshotTime;
     blobSASSignatureValues.blobName && (resource = "b", blobSASSignatureValues.snapshotTime ? resource = "bs" : blobSASSignatureValues.versionId && (resource = "bv", 
     timestamp = blobSASSignatureValues.versionId));
     blobSASSignatureValues.permissions && (verifiedPermissions = blobSASSignatureValues.blobName ? BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString() : ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString());
     const stringToSign = [ verifiedPermissions || "", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, !1) : "", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, !1) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : "" ].join("\n"), signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
     return {
      sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),
      stringToSign
     };
    }(blobSASSignatureValues, sharedKeyCredential) : version >= "2020-02-10" ? function(blobSASSignatureValues, userDelegationKeyCredential) {
     if (blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues), 
     !blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
     let verifiedPermissions, resource = "c", timestamp = blobSASSignatureValues.snapshotTime;
     blobSASSignatureValues.blobName && (resource = "b", blobSASSignatureValues.snapshotTime ? resource = "bs" : blobSASSignatureValues.versionId && (resource = "bv", 
     timestamp = blobSASSignatureValues.versionId));
     blobSASSignatureValues.permissions && (verifiedPermissions = blobSASSignatureValues.blobName ? BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString() : ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString());
     const stringToSign = [ verifiedPermissions || "", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, !1) : "", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, !1) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, !1) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, !1) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, void 0, blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType ].join("\n"), signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
     return {
      sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId),
      stringToSign
     };
    }(blobSASSignatureValues, userDelegationKeyCredential) : function(blobSASSignatureValues, userDelegationKeyCredential) {
     if (blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues), 
     !blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
     let verifiedPermissions, resource = "c", timestamp = blobSASSignatureValues.snapshotTime;
     blobSASSignatureValues.blobName && (resource = "b", blobSASSignatureValues.snapshotTime ? resource = "bs" : blobSASSignatureValues.versionId && (resource = "bv", 
     timestamp = blobSASSignatureValues.versionId));
     blobSASSignatureValues.permissions && (verifiedPermissions = blobSASSignatureValues.blobName ? BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString() : ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString());
     const stringToSign = [ verifiedPermissions || "", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, !1) : "", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, !1) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, !1) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, !1) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType ].join("\n"), signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
     return {
      sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey),
      stringToSign
     };
    }(blobSASSignatureValues, userDelegationKeyCredential);
    if (version >= "2015-04-05") {
     if (void 0 !== sharedKeyCredential) return function(blobSASSignatureValues, sharedKeyCredential) {
      if (blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues), 
      !(blobSASSignatureValues.identifier || blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
      let verifiedPermissions, resource = "c";
      blobSASSignatureValues.blobName && (resource = "b");
      blobSASSignatureValues.permissions && (verifiedPermissions = blobSASSignatureValues.blobName ? BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString() : ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString());
      const stringToSign = [ verifiedPermissions || "", blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, !1) : "", blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, !1) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : "" ].join("\n"), signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
      return {
       sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),
       stringToSign
      };
     }(blobSASSignatureValues, sharedKeyCredential);
     throw new RangeError("'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.");
    }
    throw new RangeError("'version' must be >= '2015-04-05'.");
   }
   function getCanonicalName(accountName, containerName, blobName) {
    const elements = [ `/blob/${accountName}/${containerName}` ];
    return blobName && elements.push(`/${blobName}`), elements.join("");
   }
   function SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {
    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;
    if (blobSASSignatureValues.snapshotTime && version < "2018-11-09") throw RangeError("'version' must be >= '2018-11-09' when providing 'snapshotTime'.");
    if (void 0 === blobSASSignatureValues.blobName && blobSASSignatureValues.snapshotTime) throw RangeError("Must provide 'blobName' when providing 'snapshotTime'.");
    if (blobSASSignatureValues.versionId && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when providing 'versionId'.");
    if (void 0 === blobSASSignatureValues.blobName && blobSASSignatureValues.versionId) throw RangeError("Must provide 'blobName' when providing 'versionId'.");
    if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.setImmutabilityPolicy && version < "2020-08-04") throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
    if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when providing 'x' permission.");
    if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.permanentDelete && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when providing 'y' permission.");
    if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version < "2019-12-12") throw RangeError("'version' must be >= '2019-12-12' when providing 't' permission.");
    if (version < "2020-02-10" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) throw RangeError("'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.");
    if (version < "2021-04-10" && blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.filterByTags) throw RangeError("'version' must be >= '2021-04-10' when providing the 'f' permission.");
    if (version < "2020-02-10" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) throw RangeError("'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.");
    if (blobSASSignatureValues.encryptionScope && version < "2020-12-06") throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
    return blobSASSignatureValues.version = version, blobSASSignatureValues;
   }
   class BlobLeaseClient {
    get leaseId() {
     return this._leaseId;
    }
    get url() {
     return this._url;
    }
    constructor(client, leaseId) {
     const clientContext = client.storageClientContext;
     this._url = client.url, void 0 === client.name ? (this._isContainer = !0, this._containerOrBlobOperation = clientContext.container) : (this._isContainer = !1, 
     this._containerOrBlobOperation = clientContext.blob), leaseId || (leaseId = esm_randomUUID()), 
     this._leaseId = leaseId;
    }
    async acquireLease(duration, options = {}) {
     var _a, _b, _c, _d, _e;
     if (this._isContainer && ((null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.ifMatch) && "" !== (null === (_b = options.conditions) || void 0 === _b ? void 0 : _b.ifMatch) || (null === (_c = options.conditions) || void 0 === _c ? void 0 : _c.ifNoneMatch) && "" !== (null === (_d = options.conditions) || void 0 === _d ? void 0 : _d.ifNoneMatch) || (null === (_e = options.conditions) || void 0 === _e ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
     return tracingClient.withSpan("BlobLeaseClient-acquireLease", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this._containerOrBlobOperation.acquireLease({
       abortSignal: options.abortSignal,
       duration,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       proposedLeaseId: this._leaseId,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async changeLease(proposedLeaseId, options = {}) {
     var _a, _b, _c, _d, _e;
     if (this._isContainer && ((null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.ifMatch) && "" !== (null === (_b = options.conditions) || void 0 === _b ? void 0 : _b.ifMatch) || (null === (_c = options.conditions) || void 0 === _c ? void 0 : _c.ifNoneMatch) && "" !== (null === (_d = options.conditions) || void 0 === _d ? void 0 : _d.ifNoneMatch) || (null === (_e = options.conditions) || void 0 === _e ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
     return tracingClient.withSpan("BlobLeaseClient-changeLease", options, (async updatedOptions => {
      var _a;
      const response = assertResponse(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {
       abortSignal: options.abortSignal,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
      return this._leaseId = proposedLeaseId, response;
     }));
    }
    async releaseLease(options = {}) {
     var _a, _b, _c, _d, _e;
     if (this._isContainer && ((null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.ifMatch) && "" !== (null === (_b = options.conditions) || void 0 === _b ? void 0 : _b.ifMatch) || (null === (_c = options.conditions) || void 0 === _c ? void 0 : _c.ifNoneMatch) && "" !== (null === (_d = options.conditions) || void 0 === _d ? void 0 : _d.ifNoneMatch) || (null === (_e = options.conditions) || void 0 === _e ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
     return tracingClient.withSpan("BlobLeaseClient-releaseLease", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this._containerOrBlobOperation.releaseLease(this._leaseId, {
       abortSignal: options.abortSignal,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async renewLease(options = {}) {
     var _a, _b, _c, _d, _e;
     if (this._isContainer && ((null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.ifMatch) && "" !== (null === (_b = options.conditions) || void 0 === _b ? void 0 : _b.ifMatch) || (null === (_c = options.conditions) || void 0 === _c ? void 0 : _c.ifNoneMatch) && "" !== (null === (_d = options.conditions) || void 0 === _d ? void 0 : _d.ifNoneMatch) || (null === (_e = options.conditions) || void 0 === _e ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
     return tracingClient.withSpan("BlobLeaseClient-renewLease", options, (async updatedOptions => {
      var _a;
      return this._containerOrBlobOperation.renewLease(this._leaseId, {
       abortSignal: options.abortSignal,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      });
     }));
    }
    async breakLease(breakPeriod, options = {}) {
     var _a, _b, _c, _d, _e;
     if (this._isContainer && ((null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.ifMatch) && "" !== (null === (_b = options.conditions) || void 0 === _b ? void 0 : _b.ifMatch) || (null === (_c = options.conditions) || void 0 === _c ? void 0 : _c.ifNoneMatch) && "" !== (null === (_d = options.conditions) || void 0 === _d ? void 0 : _d.ifNoneMatch) || (null === (_e = options.conditions) || void 0 === _e ? void 0 : _e.tagConditions))) throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
     return tracingClient.withSpan("BlobLeaseClient-breakLease", options, (async updatedOptions => {
      var _a;
      const operationOptions = {
       abortSignal: options.abortSignal,
       breakPeriod,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      };
      return assertResponse(await this._containerOrBlobOperation.breakLease(operationOptions));
     }));
    }
   }
   class RetriableReadableStream extends external_stream_.Readable {
    constructor(source, getter, offset, count, options = {}) {
     super({
      highWaterMark: options.highWaterMark
     }), this.retries = 0, this.sourceDataHandler = data => {
      if (this.options.doInjectErrorOnce) return this.options.doInjectErrorOnce = void 0, 
      this.source.pause(), this.sourceErrorOrEndHandler(), void this.source.destroy();
      this.offset += data.length, this.onProgress && this.onProgress({
       loadedBytes: this.offset - this.start
      }), this.push(data) || this.source.pause();
     }, this.sourceAbortedHandler = () => {
      const abortError = new AbortError_AbortError("The operation was aborted.");
      this.destroy(abortError);
     }, this.sourceErrorOrEndHandler = err => {
      err && "AbortError" === err.name ? this.destroy(err) : (this.removeSourceEventHandlers(), 
      this.offset - 1 === this.end ? this.push(null) : this.offset <= this.end ? this.retries < this.maxRetryRequests ? (this.retries += 1, 
      this.getter(this.offset).then((newSource => {
       this.source = newSource, this.setSourceEventHandlers();
      })).catch((error => {
       this.destroy(error);
      }))) : this.destroy(new Error(`Data corruption failure: received less data than required and reached maxRetires limitation. Received data offset: ${this.offset - 1}, data needed offset: ${this.end}, retries: ${this.retries}, max retries: ${this.maxRetryRequests}`)) : this.destroy(new Error(`Data corruption failure: Received more data than original request, data needed offset is ${this.end}, received offset: ${this.offset - 1}`)));
     }, this.getter = getter, this.source = source, this.start = offset, this.offset = offset, 
     this.end = offset + count - 1, this.maxRetryRequests = options.maxRetryRequests && options.maxRetryRequests >= 0 ? options.maxRetryRequests : 0, 
     this.onProgress = options.onProgress, this.options = options, this.setSourceEventHandlers();
    }
    _read() {
     this.source.resume();
    }
    setSourceEventHandlers() {
     this.source.on("data", this.sourceDataHandler), this.source.on("end", this.sourceErrorOrEndHandler), 
     this.source.on("error", this.sourceErrorOrEndHandler), this.source.on("aborted", this.sourceAbortedHandler);
    }
    removeSourceEventHandlers() {
     this.source.removeListener("data", this.sourceDataHandler), this.source.removeListener("end", this.sourceErrorOrEndHandler), 
     this.source.removeListener("error", this.sourceErrorOrEndHandler), this.source.removeListener("aborted", this.sourceAbortedHandler);
    }
    _destroy(error, callback) {
     this.removeSourceEventHandlers(), this.source.destroy(), callback(null === error ? void 0 : error);
    }
   }
   class BlobDownloadResponse {
    get acceptRanges() {
     return this.originalResponse.acceptRanges;
    }
    get cacheControl() {
     return this.originalResponse.cacheControl;
    }
    get contentDisposition() {
     return this.originalResponse.contentDisposition;
    }
    get contentEncoding() {
     return this.originalResponse.contentEncoding;
    }
    get contentLanguage() {
     return this.originalResponse.contentLanguage;
    }
    get blobSequenceNumber() {
     return this.originalResponse.blobSequenceNumber;
    }
    get blobType() {
     return this.originalResponse.blobType;
    }
    get contentLength() {
     return this.originalResponse.contentLength;
    }
    get contentMD5() {
     return this.originalResponse.contentMD5;
    }
    get contentRange() {
     return this.originalResponse.contentRange;
    }
    get contentType() {
     return this.originalResponse.contentType;
    }
    get copyCompletedOn() {
     return this.originalResponse.copyCompletedOn;
    }
    get copyId() {
     return this.originalResponse.copyId;
    }
    get copyProgress() {
     return this.originalResponse.copyProgress;
    }
    get copySource() {
     return this.originalResponse.copySource;
    }
    get copyStatus() {
     return this.originalResponse.copyStatus;
    }
    get copyStatusDescription() {
     return this.originalResponse.copyStatusDescription;
    }
    get leaseDuration() {
     return this.originalResponse.leaseDuration;
    }
    get leaseState() {
     return this.originalResponse.leaseState;
    }
    get leaseStatus() {
     return this.originalResponse.leaseStatus;
    }
    get date() {
     return this.originalResponse.date;
    }
    get blobCommittedBlockCount() {
     return this.originalResponse.blobCommittedBlockCount;
    }
    get etag() {
     return this.originalResponse.etag;
    }
    get tagCount() {
     return this.originalResponse.tagCount;
    }
    get errorCode() {
     return this.originalResponse.errorCode;
    }
    get isServerEncrypted() {
     return this.originalResponse.isServerEncrypted;
    }
    get blobContentMD5() {
     return this.originalResponse.blobContentMD5;
    }
    get lastModified() {
     return this.originalResponse.lastModified;
    }
    get lastAccessed() {
     return this.originalResponse.lastAccessed;
    }
    get createdOn() {
     return this.originalResponse.createdOn;
    }
    get metadata() {
     return this.originalResponse.metadata;
    }
    get requestId() {
     return this.originalResponse.requestId;
    }
    get clientRequestId() {
     return this.originalResponse.clientRequestId;
    }
    get version() {
     return this.originalResponse.version;
    }
    get versionId() {
     return this.originalResponse.versionId;
    }
    get isCurrentVersion() {
     return this.originalResponse.isCurrentVersion;
    }
    get encryptionKeySha256() {
     return this.originalResponse.encryptionKeySha256;
    }
    get contentCrc64() {
     return this.originalResponse.contentCrc64;
    }
    get objectReplicationDestinationPolicyId() {
     return this.originalResponse.objectReplicationDestinationPolicyId;
    }
    get objectReplicationSourceProperties() {
     return this.originalResponse.objectReplicationSourceProperties;
    }
    get isSealed() {
     return this.originalResponse.isSealed;
    }
    get immutabilityPolicyExpiresOn() {
     return this.originalResponse.immutabilityPolicyExpiresOn;
    }
    get immutabilityPolicyMode() {
     return this.originalResponse.immutabilityPolicyMode;
    }
    get legalHold() {
     return this.originalResponse.legalHold;
    }
    get contentAsBlob() {
     return this.originalResponse.blobBody;
    }
    get readableStreamBody() {
     return esm_isNode ? this.blobDownloadStream : void 0;
    }
    get _response() {
     return this.originalResponse._response;
    }
    constructor(originalResponse, getter, offset, count, options = {}) {
     this.originalResponse = originalResponse, this.blobDownloadStream = new RetriableReadableStream(this.originalResponse.readableStreamBody, getter, offset, count, options);
    }
   }
   const AVRO_INIT_BYTES = new Uint8Array([ 79, 98, 106, 1 ]);
   class AvroParser {
    static async readFixedBytes(stream, length, options = {}) {
     const bytes = await stream.read(length, {
      abortSignal: options.abortSignal
     });
     if (bytes.length !== length) throw new Error("Hit stream end.");
     return bytes;
    }
    static async readByte(stream, options = {}) {
     return (await AvroParser.readFixedBytes(stream, 1, options))[0];
    }
    static async readZigZagLong(stream, options = {}) {
     let byte, haveMoreByte, significanceInFloat, zigZagEncoded = 0, significanceInBit = 0;
     do {
      byte = await AvroParser.readByte(stream, options), haveMoreByte = 128 & byte, zigZagEncoded |= (127 & byte) << significanceInBit, 
      significanceInBit += 7;
     } while (haveMoreByte && significanceInBit < 28);
     if (haveMoreByte) {
      significanceInFloat = 268435456;
      do {
       byte = await AvroParser.readByte(stream, options), zigZagEncoded += (127 & byte) * significanceInFloat, 
       significanceInFloat *= 128;
      } while (128 & byte);
      const res = (zigZagEncoded % 2 ? -(zigZagEncoded + 1) : zigZagEncoded) / 2;
      if (res < Number.MIN_SAFE_INTEGER || res > Number.MAX_SAFE_INTEGER) throw new Error("Integer overflow.");
      return res;
     }
     return zigZagEncoded >> 1 ^ -(1 & zigZagEncoded);
    }
    static async readLong(stream, options = {}) {
     return AvroParser.readZigZagLong(stream, options);
    }
    static async readInt(stream, options = {}) {
     return AvroParser.readZigZagLong(stream, options);
    }
    static async readNull() {
     return null;
    }
    static async readBoolean(stream, options = {}) {
     const b = await AvroParser.readByte(stream, options);
     if (1 === b) return !0;
     if (0 === b) return !1;
     throw new Error("Byte was not a boolean.");
    }
    static async readFloat(stream, options = {}) {
     const u8arr = await AvroParser.readFixedBytes(stream, 4, options);
     return new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength).getFloat32(0, !0);
    }
    static async readDouble(stream, options = {}) {
     const u8arr = await AvroParser.readFixedBytes(stream, 8, options);
     return new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength).getFloat64(0, !0);
    }
    static async readBytes(stream, options = {}) {
     const size = await AvroParser.readLong(stream, options);
     if (size < 0) throw new Error("Bytes size was negative.");
     return stream.read(size, {
      abortSignal: options.abortSignal
     });
    }
    static async readString(stream, options = {}) {
     const u8arr = await AvroParser.readBytes(stream, options);
     return (new TextDecoder).decode(u8arr);
    }
    static async readMapPair(stream, readItemMethod, options = {}) {
     return {
      key: await AvroParser.readString(stream, options),
      value: await readItemMethod(stream, options)
     };
    }
    static async readMap(stream, readItemMethod, options = {}) {
     const pairs = await AvroParser.readArray(stream, ((s, opts = {}) => AvroParser.readMapPair(s, readItemMethod, opts)), options), dict = {};
     for (const pair of pairs) dict[pair.key] = pair.value;
     return dict;
    }
    static async readArray(stream, readItemMethod, options = {}) {
     const items = [];
     for (let count = await AvroParser.readLong(stream, options); 0 !== count; count = await AvroParser.readLong(stream, options)) for (count < 0 && (await AvroParser.readLong(stream, options), 
     count = -count); count--; ) {
      const item = await readItemMethod(stream, options);
      items.push(item);
     }
     return items;
    }
   }
   var AvroComplex, AvroPrimitive;
   !function(AvroComplex) {
    AvroComplex.RECORD = "record", AvroComplex.ENUM = "enum", AvroComplex.ARRAY = "array", 
    AvroComplex.MAP = "map", AvroComplex.UNION = "union", AvroComplex.FIXED = "fixed";
   }(AvroComplex || (AvroComplex = {})), function(AvroPrimitive) {
    AvroPrimitive.NULL = "null", AvroPrimitive.BOOLEAN = "boolean", AvroPrimitive.INT = "int", 
    AvroPrimitive.LONG = "long", AvroPrimitive.FLOAT = "float", AvroPrimitive.DOUBLE = "double", 
    AvroPrimitive.BYTES = "bytes", AvroPrimitive.STRING = "string";
   }(AvroPrimitive || (AvroPrimitive = {}));
   class AvroType {
    static fromSchema(schema) {
     return "string" == typeof schema ? AvroType.fromStringSchema(schema) : Array.isArray(schema) ? AvroType.fromArraySchema(schema) : AvroType.fromObjectSchema(schema);
    }
    static fromStringSchema(schema) {
     switch (schema) {
     case AvroPrimitive.NULL:
     case AvroPrimitive.BOOLEAN:
     case AvroPrimitive.INT:
     case AvroPrimitive.LONG:
     case AvroPrimitive.FLOAT:
     case AvroPrimitive.DOUBLE:
     case AvroPrimitive.BYTES:
     case AvroPrimitive.STRING:
      return new AvroPrimitiveType(schema);

     default:
      throw new Error(`Unexpected Avro type ${schema}`);
     }
    }
    static fromArraySchema(schema) {
     return new AvroUnionType(schema.map(AvroType.fromSchema));
    }
    static fromObjectSchema(schema) {
     const type = schema.type;
     try {
      return AvroType.fromStringSchema(type);
     } catch (_a) {}
     switch (type) {
     case AvroComplex.RECORD:
      if (schema.aliases) throw new Error(`aliases currently is not supported, schema: ${schema}`);
      if (!schema.name) throw new Error(`Required attribute 'name' doesn't exist on schema: ${schema}`);
      const fields = {};
      if (!schema.fields) throw new Error(`Required attribute 'fields' doesn't exist on schema: ${schema}`);
      for (const field of schema.fields) fields[field.name] = AvroType.fromSchema(field.type);
      return new AvroRecordType(fields, schema.name);

     case AvroComplex.ENUM:
      if (schema.aliases) throw new Error(`aliases currently is not supported, schema: ${schema}`);
      if (!schema.symbols) throw new Error(`Required attribute 'symbols' doesn't exist on schema: ${schema}`);
      return new AvroEnumType(schema.symbols);

     case AvroComplex.MAP:
      if (!schema.values) throw new Error(`Required attribute 'values' doesn't exist on schema: ${schema}`);
      return new AvroMapType(AvroType.fromSchema(schema.values));

     case AvroComplex.ARRAY:
     case AvroComplex.FIXED:
     default:
      throw new Error(`Unexpected Avro type ${type} in ${schema}`);
     }
    }
   }
   class AvroPrimitiveType extends AvroType {
    constructor(primitive) {
     super(), this._primitive = primitive;
    }
    read(stream, options = {}) {
     switch (this._primitive) {
     case AvroPrimitive.NULL:
      return AvroParser.readNull();

     case AvroPrimitive.BOOLEAN:
      return AvroParser.readBoolean(stream, options);

     case AvroPrimitive.INT:
      return AvroParser.readInt(stream, options);

     case AvroPrimitive.LONG:
      return AvroParser.readLong(stream, options);

     case AvroPrimitive.FLOAT:
      return AvroParser.readFloat(stream, options);

     case AvroPrimitive.DOUBLE:
      return AvroParser.readDouble(stream, options);

     case AvroPrimitive.BYTES:
      return AvroParser.readBytes(stream, options);

     case AvroPrimitive.STRING:
      return AvroParser.readString(stream, options);

     default:
      throw new Error("Unknown Avro Primitive");
     }
    }
   }
   class AvroEnumType extends AvroType {
    constructor(symbols) {
     super(), this._symbols = symbols;
    }
    async read(stream, options = {}) {
     const value = await AvroParser.readInt(stream, options);
     return this._symbols[value];
    }
   }
   class AvroUnionType extends AvroType {
    constructor(types) {
     super(), this._types = types;
    }
    async read(stream, options = {}) {
     const typeIndex = await AvroParser.readInt(stream, options);
     return this._types[typeIndex].read(stream, options);
    }
   }
   class AvroMapType extends AvroType {
    constructor(itemType) {
     super(), this._itemType = itemType;
    }
    read(stream, options = {}) {
     return AvroParser.readMap(stream, ((s, opts) => this._itemType.read(s, opts)), options);
    }
   }
   class AvroRecordType extends AvroType {
    constructor(fields, name) {
     super(), this._fields = fields, this._name = name;
    }
    async read(stream, options = {}) {
     const record = {};
     record.$schema = this._name;
     for (const key in this._fields) Object.prototype.hasOwnProperty.call(this._fields, key) && (record[key] = await this._fields[key].read(stream, options));
     return record;
    }
   }
   function arraysEqual(a, b) {
    if (a === b) return !0;
    if (null == a || null == b) return !1;
    if (a.length !== b.length) return !1;
    for (let i = 0; i < a.length; ++i) if (a[i] !== b[i]) return !1;
    return !0;
   }
   class AvroReader {
    get blockOffset() {
     return this._blockOffset;
    }
    get objectIndex() {
     return this._objectIndex;
    }
    constructor(dataStream, headerStream, currentBlockOffset, indexWithinCurrentBlock) {
     this._dataStream = dataStream, this._headerStream = headerStream || dataStream, 
     this._initialized = !1, this._blockOffset = currentBlockOffset || 0, this._objectIndex = indexWithinCurrentBlock || 0, 
     this._initialBlockOffset = currentBlockOffset || 0;
    }
    async initialize(options = {}) {
     if (!arraysEqual(await AvroParser.readFixedBytes(this._headerStream, AVRO_INIT_BYTES.length, {
      abortSignal: options.abortSignal
     }), AVRO_INIT_BYTES)) throw new Error("Stream is not an Avro file.");
     this._metadata = await AvroParser.readMap(this._headerStream, AvroParser.readString, {
      abortSignal: options.abortSignal
     });
     const codec = this._metadata["avro.codec"];
     if (null != codec && "null" !== codec) throw new Error("Codecs are not supported");
     this._syncMarker = await AvroParser.readFixedBytes(this._headerStream, 16, {
      abortSignal: options.abortSignal
     });
     const schema = JSON.parse(this._metadata["avro.schema"]);
     if (this._itemType = AvroType.fromSchema(schema), 0 === this._blockOffset && (this._blockOffset = this._initialBlockOffset + this._dataStream.position), 
     this._itemsRemainingInBlock = await AvroParser.readLong(this._dataStream, {
      abortSignal: options.abortSignal
     }), await AvroParser.readLong(this._dataStream, {
      abortSignal: options.abortSignal
     }), this._initialized = !0, this._objectIndex && this._objectIndex > 0) for (let i = 0; i < this._objectIndex; i++) await this._itemType.read(this._dataStream, {
      abortSignal: options.abortSignal
     }), this._itemsRemainingInBlock--;
    }
    hasNext() {
     return !this._initialized || this._itemsRemainingInBlock > 0;
    }
    parseObjects() {
     return __asyncGenerator(this, arguments, (function*(options = {}) {
      for (this._initialized || (yield __await(this.initialize(options))); this.hasNext(); ) {
       const result = yield __await(this._itemType.read(this._dataStream, {
        abortSignal: options.abortSignal
       }));
       if (this._itemsRemainingInBlock--, this._objectIndex++, 0 === this._itemsRemainingInBlock) {
        const marker = yield __await(AvroParser.readFixedBytes(this._dataStream, 16, {
         abortSignal: options.abortSignal
        }));
        if (this._blockOffset = this._initialBlockOffset + this._dataStream.position, this._objectIndex = 0, 
        !arraysEqual(this._syncMarker, marker)) throw new Error("Stream is not a valid Avro file.");
        try {
         this._itemsRemainingInBlock = yield __await(AvroParser.readLong(this._dataStream, {
          abortSignal: options.abortSignal
         }));
        } catch (_a) {
         this._itemsRemainingInBlock = 0;
        }
        this._itemsRemainingInBlock > 0 && (yield __await(AvroParser.readLong(this._dataStream, {
         abortSignal: options.abortSignal
        })));
       }
       yield yield __await(result);
      }
     }));
    }
   }
   class AvroReadable {}
   const ABORT_ERROR = new AbortError_AbortError("Reading from the avro stream was aborted.");
   class AvroReadableFromStream extends AvroReadable {
    toUint8Array(data) {
     return "string" == typeof data ? Buffer.from(data) : data;
    }
    constructor(readable) {
     super(), this._readable = readable, this._position = 0;
    }
    get position() {
     return this._position;
    }
    async read(size, options = {}) {
     var _a;
     if (null === (_a = options.abortSignal) || void 0 === _a ? void 0 : _a.aborted) throw ABORT_ERROR;
     if (size < 0) throw new Error(`size parameter should be positive: ${size}`);
     if (0 === size) return new Uint8Array;
     if (!this._readable.readable) throw new Error("Stream no longer readable.");
     const chunk = this._readable.read(size);
     return chunk ? (this._position += chunk.length, this.toUint8Array(chunk)) : new Promise(((resolve, reject) => {
      const cleanUp = () => {
       this._readable.removeListener("readable", readableCallback), this._readable.removeListener("error", rejectCallback), 
       this._readable.removeListener("end", rejectCallback), this._readable.removeListener("close", rejectCallback), 
       options.abortSignal && options.abortSignal.removeEventListener("abort", abortHandler);
      }, readableCallback = () => {
       const callbackChunk = this._readable.read(size);
       callbackChunk && (this._position += callbackChunk.length, cleanUp(), resolve(this.toUint8Array(callbackChunk)));
      }, rejectCallback = () => {
       cleanUp(), reject();
      }, abortHandler = () => {
       cleanUp(), reject(ABORT_ERROR);
      };
      this._readable.on("readable", readableCallback), this._readable.once("error", rejectCallback), 
      this._readable.once("end", rejectCallback), this._readable.once("close", rejectCallback), 
      options.abortSignal && options.abortSignal.addEventListener("abort", abortHandler);
     }));
    }
   }
   class BlobQuickQueryStream extends external_stream_.Readable {
    constructor(source, options = {}) {
     super(), this.avroPaused = !0, this.source = source, this.onProgress = options.onProgress, 
     this.onError = options.onError, this.avroReader = new AvroReader(new AvroReadableFromStream(this.source)), 
     this.avroIter = this.avroReader.parseObjects({
      abortSignal: options.abortSignal
     });
    }
    _read() {
     this.avroPaused && this.readInternal().catch((err => {
      this.emit("error", err);
     }));
    }
    async readInternal() {
     let avroNext;
     this.avroPaused = !1;
     do {
      if (avroNext = await this.avroIter.next(), avroNext.done) break;
      const obj = avroNext.value, schema = obj.$schema;
      if ("string" != typeof schema) throw Error("Missing schema in avro record.");
      switch (schema) {
      case "com.microsoft.azure.storage.queryBlobContents.resultData":
       {
        const data = obj.data;
        if (data instanceof Uint8Array == !1) throw Error("Invalid data in avro result record.");
        this.push(Buffer.from(data)) || (this.avroPaused = !0);
       }
       break;

      case "com.microsoft.azure.storage.queryBlobContents.progress":
       {
        const bytesScanned = obj.bytesScanned;
        if ("number" != typeof bytesScanned) throw Error("Invalid bytesScanned in avro progress record.");
        this.onProgress && this.onProgress({
         loadedBytes: bytesScanned
        });
       }
       break;

      case "com.microsoft.azure.storage.queryBlobContents.end":
       if (this.onProgress) {
        const totalBytes = obj.totalBytes;
        if ("number" != typeof totalBytes) throw Error("Invalid totalBytes in avro end record.");
        this.onProgress({
         loadedBytes: totalBytes
        });
       }
       this.push(null);
       break;

      case "com.microsoft.azure.storage.queryBlobContents.error":
       if (this.onError) {
        const fatal = obj.fatal;
        if ("boolean" != typeof fatal) throw Error("Invalid fatal in avro error record.");
        const name = obj.name;
        if ("string" != typeof name) throw Error("Invalid name in avro error record.");
        const description = obj.description;
        if ("string" != typeof description) throw Error("Invalid description in avro error record.");
        const position = obj.position;
        if ("number" != typeof position) throw Error("Invalid position in avro error record.");
        this.onError({
         position,
         name,
         isFatal: fatal,
         description
        });
       }
       break;

      default:
       throw Error(`Unknown schema ${schema} in avro progress record.`);
      }
     } while (!avroNext.done && !this.avroPaused);
    }
   }
   class BlobQueryResponse {
    get acceptRanges() {
     return this.originalResponse.acceptRanges;
    }
    get cacheControl() {
     return this.originalResponse.cacheControl;
    }
    get contentDisposition() {
     return this.originalResponse.contentDisposition;
    }
    get contentEncoding() {
     return this.originalResponse.contentEncoding;
    }
    get contentLanguage() {
     return this.originalResponse.contentLanguage;
    }
    get blobSequenceNumber() {
     return this.originalResponse.blobSequenceNumber;
    }
    get blobType() {
     return this.originalResponse.blobType;
    }
    get contentLength() {
     return this.originalResponse.contentLength;
    }
    get contentMD5() {
     return this.originalResponse.contentMD5;
    }
    get contentRange() {
     return this.originalResponse.contentRange;
    }
    get contentType() {
     return this.originalResponse.contentType;
    }
    get copyCompletedOn() {}
    get copyId() {
     return this.originalResponse.copyId;
    }
    get copyProgress() {
     return this.originalResponse.copyProgress;
    }
    get copySource() {
     return this.originalResponse.copySource;
    }
    get copyStatus() {
     return this.originalResponse.copyStatus;
    }
    get copyStatusDescription() {
     return this.originalResponse.copyStatusDescription;
    }
    get leaseDuration() {
     return this.originalResponse.leaseDuration;
    }
    get leaseState() {
     return this.originalResponse.leaseState;
    }
    get leaseStatus() {
     return this.originalResponse.leaseStatus;
    }
    get date() {
     return this.originalResponse.date;
    }
    get blobCommittedBlockCount() {
     return this.originalResponse.blobCommittedBlockCount;
    }
    get etag() {
     return this.originalResponse.etag;
    }
    get errorCode() {
     return this.originalResponse.errorCode;
    }
    get isServerEncrypted() {
     return this.originalResponse.isServerEncrypted;
    }
    get blobContentMD5() {
     return this.originalResponse.blobContentMD5;
    }
    get lastModified() {
     return this.originalResponse.lastModified;
    }
    get metadata() {
     return this.originalResponse.metadata;
    }
    get requestId() {
     return this.originalResponse.requestId;
    }
    get clientRequestId() {
     return this.originalResponse.clientRequestId;
    }
    get version() {
     return this.originalResponse.version;
    }
    get encryptionKeySha256() {
     return this.originalResponse.encryptionKeySha256;
    }
    get contentCrc64() {
     return this.originalResponse.contentCrc64;
    }
    get blobBody() {}
    get readableStreamBody() {
     return esm_isNode ? this.blobDownloadStream : void 0;
    }
    get _response() {
     return this.originalResponse._response;
    }
    constructor(originalResponse, options = {}) {
     this.originalResponse = originalResponse, this.blobDownloadStream = new BlobQuickQueryStream(this.originalResponse.readableStreamBody, options);
    }
   }
   var BlockBlobTier, PremiumPageBlobTier, StorageBlobAudience;
   function toAccessTier(tier) {
    if (void 0 !== tier) return tier;
   }
   function ensureCpkIfSpecified(cpk, isHttps) {
    if (cpk && !isHttps) throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
    cpk && !cpk.encryptionAlgorithm && (cpk.encryptionAlgorithm = "AES256");
   }
   function getBlobServiceAccountAudience(storageAccountName) {
    return `https://${storageAccountName}.blob.core.windows.net/.default`;
   }
   function rangeResponseFromModel(response) {
    const pageRange = (response._response.parsedBody.pageRange || []).map((x => ({
     offset: x.start,
     count: x.end - x.start
    }))), clearRange = (response._response.parsedBody.clearRange || []).map((x => ({
     offset: x.start,
     count: x.end - x.start
    })));
    return Object.assign(Object.assign({}, response), {
     pageRange,
     clearRange,
     _response: Object.assign(Object.assign({}, response._response), {
      parsedBody: {
       pageRange,
       clearRange
      }
     })
    });
   }
   !function(BlockBlobTier) {
    BlockBlobTier.Hot = "Hot", BlockBlobTier.Cool = "Cool", BlockBlobTier.Cold = "Cold", 
    BlockBlobTier.Archive = "Archive";
   }(BlockBlobTier || (BlockBlobTier = {})), function(PremiumPageBlobTier) {
    PremiumPageBlobTier.P4 = "P4", PremiumPageBlobTier.P6 = "P6", PremiumPageBlobTier.P10 = "P10", 
    PremiumPageBlobTier.P15 = "P15", PremiumPageBlobTier.P20 = "P20", PremiumPageBlobTier.P30 = "P30", 
    PremiumPageBlobTier.P40 = "P40", PremiumPageBlobTier.P50 = "P50", PremiumPageBlobTier.P60 = "P60", 
    PremiumPageBlobTier.P70 = "P70", PremiumPageBlobTier.P80 = "P80";
   }(PremiumPageBlobTier || (PremiumPageBlobTier = {})), function(StorageBlobAudience) {
    StorageBlobAudience.StorageOAuthScopes = "https://storage.azure.com/.default", StorageBlobAudience.DiskComputeOAuthScopes = "https://disk.compute.azure.com/.default";
   }(StorageBlobAudience || (StorageBlobAudience = {}));
   esm_createClientLogger("core-lro");
   class PollerStoppedError extends Error {
    constructor(message) {
     super(message), this.name = "PollerStoppedError", Object.setPrototypeOf(this, PollerStoppedError.prototype);
    }
   }
   class PollerCancelledError extends Error {
    constructor(message) {
     super(message), this.name = "PollerCancelledError", Object.setPrototypeOf(this, PollerCancelledError.prototype);
    }
   }
   class Poller {
    constructor(operation) {
     this.resolveOnUnsuccessful = !1, this.stopped = !0, this.pollProgressCallbacks = [], 
     this.operation = operation, this.promise = new Promise(((resolve, reject) => {
      this.resolve = resolve, this.reject = reject;
     })), this.promise.catch((() => {}));
    }
    async startPolling(pollOptions = {}) {
     for (this.stopped && (this.stopped = !1); !this.isStopped() && !this.isDone(); ) await this.poll(pollOptions), 
     await this.delay();
    }
    async pollOnce(options = {}) {
     this.isDone() || (this.operation = await this.operation.update({
      abortSignal: options.abortSignal,
      fireProgress: this.fireProgress.bind(this)
     })), this.processUpdatedState();
    }
    fireProgress(state) {
     for (const callback of this.pollProgressCallbacks) callback(state);
    }
    async cancelOnce(options = {}) {
     this.operation = await this.operation.cancel(options);
    }
    poll(options = {}) {
     if (!this.pollOncePromise) {
      this.pollOncePromise = this.pollOnce(options);
      const clearPollOncePromise = () => {
       this.pollOncePromise = void 0;
      };
      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
     }
     return this.pollOncePromise;
    }
    processUpdatedState() {
     if (this.operation.state.error && (this.stopped = !0, !this.resolveOnUnsuccessful)) throw this.reject(this.operation.state.error), 
     this.operation.state.error;
     if (this.operation.state.isCancelled && (this.stopped = !0, !this.resolveOnUnsuccessful)) {
      const error = new PollerCancelledError("Operation was canceled");
      throw this.reject(error), error;
     }
     this.isDone() && this.resolve && this.resolve(this.getResult());
    }
    async pollUntilDone(pollOptions = {}) {
     return this.stopped && this.startPolling(pollOptions).catch(this.reject), this.processUpdatedState(), 
     this.promise;
    }
    onProgress(callback) {
     return this.pollProgressCallbacks.push(callback), () => {
      this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c => c !== callback));
     };
    }
    isDone() {
     const state = this.operation.state;
     return Boolean(state.isCompleted || state.isCancelled || state.error);
    }
    stopPolling() {
     this.stopped || (this.stopped = !0, this.reject && this.reject(new PollerStoppedError("This poller is already stopped")));
    }
    isStopped() {
     return this.stopped;
    }
    cancelOperation(options = {}) {
     if (this.cancelPromise) {
      if (options.abortSignal) throw new Error("A cancel request is currently pending");
     } else this.cancelPromise = this.cancelOnce(options);
     return this.cancelPromise;
    }
    getOperationState() {
     return this.operation.state;
    }
    getResult() {
     return this.operation.state.result;
    }
    toString() {
     return this.operation.toString();
    }
   }
   class BlobBeginCopyFromUrlPoller extends Poller {
    constructor(options) {
     const {blobClient, copySource, intervalInMs = 15e3, onProgress, resumeFrom, startCopyFromURLOptions} = options;
     let state;
     resumeFrom && (state = JSON.parse(resumeFrom).state);
     super(makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), {
      blobClient,
      copySource,
      startCopyFromURLOptions
     }))), "function" == typeof onProgress && this.onProgress(onProgress), this.intervalInMs = intervalInMs;
    }
    delay() {
     return delay_delay(this.intervalInMs);
    }
   }
   const cancel = async function(options = {}) {
    const state = this.state, {copyId} = state;
    return state.isCompleted ? makeBlobBeginCopyFromURLPollOperation(state) : copyId ? (await state.blobClient.abortCopyFromURL(copyId, {
     abortSignal: options.abortSignal
    }), state.isCancelled = !0, makeBlobBeginCopyFromURLPollOperation(state)) : (state.isCancelled = !0, 
    makeBlobBeginCopyFromURLPollOperation(state));
   }, update = async function(options = {}) {
    const state = this.state, {blobClient, copySource, startCopyFromURLOptions} = state;
    if (state.isStarted) {
     if (!state.isCompleted) try {
      const result = await state.blobClient.getProperties({
       abortSignal: options.abortSignal
      }), {copyStatus, copyProgress} = result, prevCopyProgress = state.copyProgress;
      copyProgress && (state.copyProgress = copyProgress), "pending" === copyStatus && copyProgress !== prevCopyProgress && "function" == typeof options.fireProgress ? options.fireProgress(state) : "success" === copyStatus ? (state.result = result, 
      state.isCompleted = !0) : "failed" === copyStatus && (state.error = new Error(`Blob copy failed with reason: "${result.copyStatusDescription || "unknown"}"`), 
      state.isCompleted = !0);
     } catch (err) {
      state.error = err, state.isCompleted = !0;
     }
    } else {
     state.isStarted = !0;
     const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);
     state.copyId = result.copyId, "success" === result.copyStatus && (state.result = result, 
     state.isCompleted = !0);
    }
    return makeBlobBeginCopyFromURLPollOperation(state);
   }, BlobStartCopyFromUrlPoller_toString = function() {
    return JSON.stringify({
     state: this.state
    }, ((key, value) => {
     if ("blobClient" !== key) return value;
    }));
   };
   function makeBlobBeginCopyFromURLPollOperation(state) {
    return {
     state: Object.assign({}, state),
     cancel,
     toString: BlobStartCopyFromUrlPoller_toString,
     update
    };
   }
   function rangeToString(iRange) {
    if (iRange.offset < 0) throw new RangeError("Range.offset cannot be smaller than 0.");
    if (iRange.count && iRange.count <= 0) throw new RangeError("Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.");
    return iRange.count ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}` : `bytes=${iRange.offset}-`;
   }
   var BatchStates, external_events_ = __webpack_require__(4434);
   !function(BatchStates) {
    BatchStates[BatchStates.Good = 0] = "Good", BatchStates[BatchStates.Error = 1] = "Error";
   }(BatchStates || (BatchStates = {}));
   class Batch {
    constructor(concurrency = 5) {
     if (this.actives = 0, this.completed = 0, this.offset = 0, this.operations = [], 
     this.state = BatchStates.Good, concurrency < 1) throw new RangeError("concurrency must be larger than 0");
     this.concurrency = concurrency, this.emitter = new external_events_.EventEmitter;
    }
    addOperation(operation) {
     this.operations.push((async () => {
      try {
       this.actives++, await operation(), this.actives--, this.completed++, this.parallelExecute();
      } catch (error) {
       this.emitter.emit("error", error);
      }
     }));
    }
    async do() {
     return 0 === this.operations.length ? Promise.resolve() : (this.parallelExecute(), 
     new Promise(((resolve, reject) => {
      this.emitter.on("finish", resolve), this.emitter.on("error", (error => {
       this.state = BatchStates.Error, reject(error);
      }));
     })));
    }
    nextOperation() {
     return this.offset < this.operations.length ? this.operations[this.offset++] : null;
    }
    parallelExecute() {
     if (this.state !== BatchStates.Error) if (this.completed >= this.operations.length) this.emitter.emit("finish"); else for (;this.actives < this.concurrency; ) {
      const operation = this.nextOperation();
      if (!operation) return;
      operation();
     }
    }
   }
   class BuffersStream extends external_stream_.Readable {
    constructor(buffers, byteLength, options) {
     super(options), this.buffers = buffers, this.byteLength = byteLength, this.byteOffsetInCurrentBuffer = 0, 
     this.bufferIndex = 0, this.pushedBytesLength = 0;
     let buffersLength = 0;
     for (const buf of this.buffers) buffersLength += buf.byteLength;
     if (buffersLength < this.byteLength) throw new Error("Data size shouldn't be larger than the total length of buffers.");
    }
    _read(size) {
     this.pushedBytesLength >= this.byteLength && this.push(null), size || (size = this.readableHighWaterMark);
     const outBuffers = [];
     let i = 0;
     for (;i < size && this.pushedBytesLength < this.byteLength; ) {
      const remainingDataInAllBuffers = this.byteLength - this.pushedBytesLength, remainingCapacityInThisBuffer = this.buffers[this.bufferIndex].byteLength - this.byteOffsetInCurrentBuffer, remaining = Math.min(remainingCapacityInThisBuffer, remainingDataInAllBuffers);
      if (remaining > size - i) {
       const end = this.byteOffsetInCurrentBuffer + size - i;
       outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end)), 
       this.pushedBytesLength += size - i, this.byteOffsetInCurrentBuffer = end, i = size;
       break;
      }
      {
       const end = this.byteOffsetInCurrentBuffer + remaining;
       outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end)), 
       remaining === remainingCapacityInThisBuffer ? (this.byteOffsetInCurrentBuffer = 0, 
       this.bufferIndex++) : this.byteOffsetInCurrentBuffer = end, this.pushedBytesLength += remaining, 
       i += remaining;
      }
     }
     outBuffers.length > 1 ? this.push(Buffer.concat(outBuffers)) : 1 === outBuffers.length && this.push(outBuffers[0]);
    }
   }
   var external_buffer_ = __webpack_require__(181);
   const maxBufferLength = __webpack_require__.n(external_buffer_)().constants.MAX_LENGTH;
   class PooledBuffer {
    get size() {
     return this._size;
    }
    constructor(capacity, buffers, totalLength) {
     this.buffers = [], this.capacity = capacity, this._size = 0;
     const bufferNum = Math.ceil(capacity / maxBufferLength);
     for (let i = 0; i < bufferNum; i++) {
      let len = i === bufferNum - 1 ? capacity % maxBufferLength : maxBufferLength;
      0 === len && (len = maxBufferLength), this.buffers.push(Buffer.allocUnsafe(len));
     }
     buffers && this.fill(buffers, totalLength);
    }
    fill(buffers, totalLength) {
     this._size = Math.min(this.capacity, totalLength);
     let i = 0, j = 0, targetOffset = 0, sourceOffset = 0, totalCopiedNum = 0;
     for (;totalCopiedNum < this._size; ) {
      const source = buffers[i], target = this.buffers[j], copiedNum = source.copy(target, targetOffset, sourceOffset);
      totalCopiedNum += copiedNum, sourceOffset += copiedNum, targetOffset += copiedNum, 
      sourceOffset === source.length && (i++, sourceOffset = 0), targetOffset === target.length && (j++, 
      targetOffset = 0);
     }
     buffers.splice(0, i), buffers.length > 0 && (buffers[0] = buffers[0].slice(sourceOffset));
    }
    getReadableStream() {
     return new BuffersStream(this.buffers, this.size);
    }
   }
   class BufferScheduler {
    constructor(readable, bufferSize, maxBuffers, outgoingHandler, concurrency, encoding) {
     if (this.emitter = new external_events_.EventEmitter, this.offset = 0, this.isStreamEnd = !1, 
     this.isError = !1, this.executingOutgoingHandlers = 0, this.numBuffers = 0, this.unresolvedDataArray = [], 
     this.unresolvedLength = 0, this.incoming = [], this.outgoing = [], bufferSize <= 0) throw new RangeError(`bufferSize must be larger than 0, current is ${bufferSize}`);
     if (maxBuffers <= 0) throw new RangeError(`maxBuffers must be larger than 0, current is ${maxBuffers}`);
     if (concurrency <= 0) throw new RangeError(`concurrency must be larger than 0, current is ${concurrency}`);
     this.bufferSize = bufferSize, this.maxBuffers = maxBuffers, this.readable = readable, 
     this.outgoingHandler = outgoingHandler, this.concurrency = concurrency, this.encoding = encoding;
    }
    async do() {
     return new Promise(((resolve, reject) => {
      this.readable.on("data", (data => {
       data = "string" == typeof data ? Buffer.from(data, this.encoding) : data, this.appendUnresolvedData(data), 
       this.resolveData() || this.readable.pause();
      })), this.readable.on("error", (err => {
       this.emitter.emit("error", err);
      })), this.readable.on("end", (() => {
       this.isStreamEnd = !0, this.emitter.emit("checkEnd");
      })), this.emitter.on("error", (err => {
       this.isError = !0, this.readable.pause(), reject(err);
      })), this.emitter.on("checkEnd", (() => {
       if (this.outgoing.length > 0) this.triggerOutgoingHandlers(); else if (this.isStreamEnd && 0 === this.executingOutgoingHandlers) if (this.unresolvedLength > 0 && this.unresolvedLength < this.bufferSize) {
        const buffer = this.shiftBufferFromUnresolvedDataArray();
        this.outgoingHandler((() => buffer.getReadableStream()), buffer.size, this.offset).then(resolve).catch(reject);
       } else {
        if (this.unresolvedLength >= this.bufferSize) return;
        resolve();
       }
      }));
     }));
    }
    appendUnresolvedData(data) {
     this.unresolvedDataArray.push(data), this.unresolvedLength += data.length;
    }
    shiftBufferFromUnresolvedDataArray(buffer) {
     return buffer ? buffer.fill(this.unresolvedDataArray, this.unresolvedLength) : buffer = new PooledBuffer(this.bufferSize, this.unresolvedDataArray, this.unresolvedLength), 
     this.unresolvedLength -= buffer.size, buffer;
    }
    resolveData() {
     for (;this.unresolvedLength >= this.bufferSize; ) {
      let buffer;
      if (this.incoming.length > 0) buffer = this.incoming.shift(), this.shiftBufferFromUnresolvedDataArray(buffer); else {
       if (!(this.numBuffers < this.maxBuffers)) return !1;
       buffer = this.shiftBufferFromUnresolvedDataArray(), this.numBuffers++;
      }
      this.outgoing.push(buffer), this.triggerOutgoingHandlers();
     }
     return !0;
    }
    async triggerOutgoingHandlers() {
     let buffer;
     do {
      if (this.executingOutgoingHandlers >= this.concurrency) return;
      buffer = this.outgoing.shift(), buffer && this.triggerOutgoingHandler(buffer);
     } while (buffer);
    }
    async triggerOutgoingHandler(buffer) {
     const bufferLength = buffer.size;
     this.executingOutgoingHandlers++, this.offset += bufferLength;
     try {
      await this.outgoingHandler((() => buffer.getReadableStream()), bufferLength, this.offset - bufferLength);
     } catch (err) {
      return void this.emitter.emit("error", err);
     }
     this.executingOutgoingHandlers--, this.reuseBuffer(buffer), this.emitter.emit("checkEnd");
    }
    reuseBuffer(buffer) {
     this.incoming.push(buffer), this.isError || !this.resolveData() || this.isStreamEnd || this.readable.resume();
    }
   }
   var external_fs_ = __webpack_require__(9896);
   async function streamToBuffer(stream, buffer, offset, end, encoding) {
    let pos = 0;
    const count = end - offset;
    return new Promise(((resolve, reject) => {
     const timeout = setTimeout((() => reject(new Error("The operation cannot be completed in timeout."))), 1e5);
     stream.on("readable", (() => {
      if (pos >= count) return clearTimeout(timeout), void resolve();
      let chunk = stream.read();
      if (!chunk) return;
      "string" == typeof chunk && (chunk = Buffer.from(chunk, encoding));
      const chunkLength = pos + chunk.length > count ? count - pos : chunk.length;
      buffer.fill(chunk.slice(0, chunkLength), offset + pos, offset + pos + chunkLength), 
      pos += chunkLength;
     })), stream.on("end", (() => {
      clearTimeout(timeout), pos < count && reject(new Error(`Stream drains before getting enough data needed. Data read: ${pos}, data need: ${count}`)), 
      resolve();
     })), stream.on("error", (msg => {
      clearTimeout(timeout), reject(msg);
     }));
    }));
   }
   const fsStat = __webpack_require__(9023).promisify(external_fs_.stat), fsCreateReadStream = external_fs_.createReadStream;
   class BlobClient extends StorageClient_StorageClient {
    get name() {
     return this._name;
    }
    get containerName() {
     return this._containerName;
    }
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
     let pipeline, url;
     if (options = options || {}, isPipelineLike(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = credentialOrPipelineOrContainerName; else if (esm_isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = newPipeline(credentialOrPipelineOrContainerName, options = blobNameOrOptions); else if (credentialOrPipelineOrContainerName || "string" == typeof credentialOrPipelineOrContainerName) {
      if (!credentialOrPipelineOrContainerName || "string" != typeof credentialOrPipelineOrContainerName || !blobNameOrOptions || "string" != typeof blobNameOrOptions) throw new Error("Expecting non-empty strings for containerName and blobName parameters");
      {
       const containerName = credentialOrPipelineOrContainerName, blobName = blobNameOrOptions, extractedCreds = extractConnectionStringParts(urlOrConnectionString);
       if ("AccountConnString" === extractedCreds.kind) {
        if (!esm_isNode) throw new Error("Account connection string is only supported in Node.js environment");
        {
         const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
         url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)), 
         options.proxyOptions || (options.proxyOptions = proxyPolicy_getDefaultProxySettings(extractedCreds.proxyUri)), 
         pipeline = newPipeline(sharedKeyCredential, options);
        }
       } else {
        if ("SASConnString" !== extractedCreds.kind) throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas, 
        pipeline = newPipeline(new AnonymousCredential, options);
       }
      }
     } else url = urlOrConnectionString, blobNameOrOptions && "string" != typeof blobNameOrOptions && (options = blobNameOrOptions), 
     pipeline = newPipeline(new AnonymousCredential, options);
     super(url, pipeline), ({blobName: this._name, containerName: this._containerName} = this.getBlobAndContainerNamesFromUrl()), 
     this.blobContext = this.storageClientContext.blob, this._snapshot = getURLParameter(this.url, constants_URLConstants_Parameters.SNAPSHOT), 
     this._versionId = getURLParameter(this.url, constants_URLConstants_Parameters.VERSIONID);
    }
    withSnapshot(snapshot) {
     return new BlobClient(setURLParameter(this.url, constants_URLConstants_Parameters.SNAPSHOT, 0 === snapshot.length ? void 0 : snapshot), this.pipeline);
    }
    withVersion(versionId) {
     return new BlobClient(setURLParameter(this.url, constants_URLConstants_Parameters.VERSIONID, 0 === versionId.length ? void 0 : versionId), this.pipeline);
    }
    getAppendBlobClient() {
     return new AppendBlobClient(this.url, this.pipeline);
    }
    getBlockBlobClient() {
     return new BlockBlobClient(this.url, this.pipeline);
    }
    getPageBlobClient() {
     return new PageBlobClient(this.url, this.pipeline);
    }
    async download(offset = 0, count, options = {}) {
     return options.conditions = options.conditions || {}, options.conditions = options.conditions || {}, 
     ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), tracingClient.withSpan("BlobClient-download", options, (async updatedOptions => {
      var _a;
      const res = assertResponse(await this.blobContext.download({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       requestOptions: {
        onDownloadProgress: esm_isNode ? void 0 : options.onProgress
       },
       range: 0 !== offset || count ? rangeToString({
        offset,
        count
       }) : void 0,
       rangeGetContentMD5: options.rangeGetContentMD5,
       rangeGetContentCRC64: options.rangeGetContentCrc64,
       snapshot: options.snapshot,
       cpkInfo: options.customerProvidedKey,
       tracingOptions: updatedOptions.tracingOptions
      })), wrappedRes = Object.assign(Object.assign({}, res), {
       _response: res._response,
       objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
       objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules)
      });
      if (!esm_isNode) return wrappedRes;
      if ((void 0 === options.maxRetryRequests || options.maxRetryRequests < 0) && (options.maxRetryRequests = 5), 
      void 0 === res.contentLength) throw new RangeError("File download response doesn't contain valid content length header");
      if (!res.etag) throw new RangeError("File download response doesn't contain valid etag header");
      return new BlobDownloadResponse(wrappedRes, (async start => {
       var _a;
       const updatedDownloadOptions = {
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: {
         ifMatch: options.conditions.ifMatch || res.etag,
         ifModifiedSince: options.conditions.ifModifiedSince,
         ifNoneMatch: options.conditions.ifNoneMatch,
         ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,
         ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
        },
        range: rangeToString({
         count: offset + res.contentLength - start,
         offset: start
        }),
        rangeGetContentMD5: options.rangeGetContentMD5,
        rangeGetContentCRC64: options.rangeGetContentCrc64,
        snapshot: options.snapshot,
        cpkInfo: options.customerProvidedKey
       };
       return (await this.blobContext.download(Object.assign({
        abortSignal: options.abortSignal
       }, updatedDownloadOptions))).readableStreamBody;
      }), offset, res.contentLength, {
       maxRetryRequests: options.maxRetryRequests,
       onProgress: options.onProgress
      });
     }));
    }
    async exists(options = {}) {
     return tracingClient.withSpan("BlobClient-exists", options, (async updatedOptions => {
      try {
       return ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), await this.getProperties({
        abortSignal: options.abortSignal,
        customerProvidedKey: options.customerProvidedKey,
        conditions: options.conditions,
        tracingOptions: updatedOptions.tracingOptions
       }), !0;
      } catch (e) {
       if (404 === e.statusCode) return !1;
       if (409 === e.statusCode && ("BlobUsesCustomerSpecifiedEncryption" === e.details.errorCode || "BlobDoesNotUseCustomerSpecifiedEncryption" === e.details.errorCode)) return !0;
       throw e;
      }
     }));
    }
    async getProperties(options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("BlobClient-getProperties", options, (async updatedOptions => {
      var _a;
      const res = assertResponse(await this.blobContext.getProperties({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       cpkInfo: options.customerProvidedKey,
       tracingOptions: updatedOptions.tracingOptions
      }));
      return Object.assign(Object.assign({}, res), {
       _response: res._response,
       objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
       objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules)
      });
     }));
    }
    async delete(options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("BlobClient-delete", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.blobContext.delete({
       abortSignal: options.abortSignal,
       deleteSnapshots: options.deleteSnapshots,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async deleteIfExists(options = {}) {
     return tracingClient.withSpan("BlobClient-deleteIfExists", options, (async updatedOptions => {
      var _a, _b;
      try {
       const res = assertResponse(await this.delete(updatedOptions));
       return Object.assign(Object.assign({
        succeeded: !0
       }, res), {
        _response: res._response
       });
      } catch (e) {
       if ("BlobNotFound" === (null === (_a = e.details) || void 0 === _a ? void 0 : _a.errorCode)) return Object.assign(Object.assign({
        succeeded: !1
       }, null === (_b = e.response) || void 0 === _b ? void 0 : _b.parsedHeaders), {
        _response: e.response
       });
       throw e;
      }
     }));
    }
    async undelete(options = {}) {
     return tracingClient.withSpan("BlobClient-undelete", options, (async updatedOptions => assertResponse(await this.blobContext.undelete({
      abortSignal: options.abortSignal,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async setHTTPHeaders(blobHTTPHeaders, options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("BlobClient-setHTTPHeaders", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.blobContext.setHttpHeaders({
       abortSignal: options.abortSignal,
       blobHttpHeaders: blobHTTPHeaders,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async setMetadata(metadata, options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("BlobClient-setMetadata", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.blobContext.setMetadata({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       metadata,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async setTags(tags, options = {}) {
     return tracingClient.withSpan("BlobClient-setTags", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.blobContext.setTags({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions,
       tags: toBlobTags(tags)
      }));
     }));
    }
    async getTags(options = {}) {
     return tracingClient.withSpan("BlobClient-getTags", options, (async updatedOptions => {
      var _a;
      const response = assertResponse(await this.blobContext.getTags({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
      return Object.assign(Object.assign({}, response), {
       _response: response._response,
       tags: toTags({
        blobTagSet: response.blobTagSet
       }) || {}
      });
     }));
    }
    getBlobLeaseClient(proposeLeaseId) {
     return new BlobLeaseClient(this, proposeLeaseId);
    }
    async createSnapshot(options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("BlobClient-createSnapshot", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.blobContext.createSnapshot({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       metadata: options.metadata,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async beginCopyFromURL(copySource, options = {}) {
     const poller = new BlobBeginCopyFromUrlPoller({
      blobClient: {
       abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),
       getProperties: (...args) => this.getProperties(...args),
       startCopyFromURL: (...args) => this.startCopyFromURL(...args)
      },
      copySource,
      intervalInMs: options.intervalInMs,
      onProgress: options.onProgress,
      resumeFrom: options.resumeFrom,
      startCopyFromURLOptions: options
     });
     return await poller.poll(), poller;
    }
    async abortCopyFromURL(copyId, options = {}) {
     return tracingClient.withSpan("BlobClient-abortCopyFromURL", options, (async updatedOptions => assertResponse(await this.blobContext.abortCopyFromURL(copyId, {
      abortSignal: options.abortSignal,
      leaseAccessConditions: options.conditions,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async syncCopyFromURL(copySource, options = {}) {
     return options.conditions = options.conditions || {}, options.sourceConditions = options.sourceConditions || {}, 
     tracingClient.withSpan("BlobClient-syncCopyFromURL", options, (async updatedOptions => {
      var _a, _b, _c, _d, _e, _f, _g;
      return assertResponse(await this.blobContext.copyFromURL(copySource, {
       abortSignal: options.abortSignal,
       metadata: options.metadata,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       sourceModifiedAccessConditions: {
        sourceIfMatch: null === (_b = options.sourceConditions) || void 0 === _b ? void 0 : _b.ifMatch,
        sourceIfModifiedSince: null === (_c = options.sourceConditions) || void 0 === _c ? void 0 : _c.ifModifiedSince,
        sourceIfNoneMatch: null === (_d = options.sourceConditions) || void 0 === _d ? void 0 : _d.ifNoneMatch,
        sourceIfUnmodifiedSince: null === (_e = options.sourceConditions) || void 0 === _e ? void 0 : _e.ifUnmodifiedSince
       },
       sourceContentMD5: options.sourceContentMD5,
       copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
       tier: toAccessTier(options.tier),
       blobTagsString: toBlobTagsString(options.tags),
       immutabilityPolicyExpiry: null === (_f = options.immutabilityPolicy) || void 0 === _f ? void 0 : _f.expiriesOn,
       immutabilityPolicyMode: null === (_g = options.immutabilityPolicy) || void 0 === _g ? void 0 : _g.policyMode,
       legalHold: options.legalHold,
       encryptionScope: options.encryptionScope,
       copySourceTags: options.copySourceTags,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async setAccessTier(tier, options = {}) {
     return tracingClient.withSpan("BlobClient-setAccessTier", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.blobContext.setTier(toAccessTier(tier), {
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       rehydratePriority: options.rehydratePriority,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async downloadToBuffer(param1, param2, param3, param4 = {}) {
     var _a;
     let buffer, offset = 0, count = 0, options = param4;
     param1 instanceof Buffer ? (buffer = param1, offset = param2 || 0, count = "number" == typeof param3 ? param3 : 0) : (offset = "number" == typeof param1 ? param1 : 0, 
     count = "number" == typeof param2 ? param2 : 0, options = param3 || {});
     let blockSize = null !== (_a = options.blockSize) && void 0 !== _a ? _a : 0;
     if (blockSize < 0) throw new RangeError("blockSize option must be >= 0");
     if (0 === blockSize && (blockSize = 4194304), offset < 0) throw new RangeError("offset option must be >= 0");
     if (count && count <= 0) throw new RangeError("count option must be greater than 0");
     return options.conditions || (options.conditions = {}), tracingClient.withSpan("BlobClient-downloadToBuffer", options, (async updatedOptions => {
      if (!count) {
       const response = await this.getProperties(Object.assign(Object.assign({}, options), {
        tracingOptions: updatedOptions.tracingOptions
       }));
       if (count = response.contentLength - offset, count < 0) throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);
      }
      if (!buffer) try {
       buffer = Buffer.alloc(count);
      } catch (error) {
       throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the "downloadToBuffer" method or try using other methods like "download" or "downloadToFile".\t ${error.message}`);
      }
      if (buffer.length < count) throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);
      let transferProgress = 0;
      const batch = new Batch(options.concurrency);
      for (let off = offset; off < offset + count; off += blockSize) batch.addOperation((async () => {
       let chunkEnd = offset + count;
       off + blockSize < chunkEnd && (chunkEnd = off + blockSize);
       const stream = (await this.download(off, chunkEnd - off, {
        abortSignal: options.abortSignal,
        conditions: options.conditions,
        maxRetryRequests: options.maxRetryRequestsPerBlock,
        customerProvidedKey: options.customerProvidedKey,
        tracingOptions: updatedOptions.tracingOptions
       })).readableStreamBody;
       await streamToBuffer(stream, buffer, off - offset, chunkEnd - offset), transferProgress += chunkEnd - off, 
       options.onProgress && options.onProgress({
        loadedBytes: transferProgress
       });
      }));
      return await batch.do(), buffer;
     }));
    }
    async downloadToFile(filePath, offset = 0, count, options = {}) {
     return tracingClient.withSpan("BlobClient-downloadToFile", options, (async updatedOptions => {
      const response = await this.download(offset, count, Object.assign(Object.assign({}, options), {
       tracingOptions: updatedOptions.tracingOptions
      }));
      return response.readableStreamBody && await async function(rs, file) {
       return new Promise(((resolve, reject) => {
        const ws = external_fs_.createWriteStream(file);
        rs.on("error", (err => {
         reject(err);
        })), ws.on("error", (err => {
         reject(err);
        })), ws.on("close", resolve), rs.pipe(ws);
       }));
      }(response.readableStreamBody, filePath), response.blobDownloadStream = void 0, 
      response;
     }));
    }
    getBlobAndContainerNamesFromUrl() {
     let containerName, blobName;
     try {
      const parsedUrl = new URL(this.url);
      if ("blob" === parsedUrl.host.split(".")[1]) {
       const pathComponents = parsedUrl.pathname.match("/([^/]*)(/(.*))?");
       containerName = pathComponents[1], blobName = pathComponents[3];
      } else if (isIpEndpointStyle(parsedUrl)) {
       const pathComponents = parsedUrl.pathname.match("/([^/]*)/([^/]*)(/(.*))?");
       containerName = pathComponents[2], blobName = pathComponents[4];
      } else {
       const pathComponents = parsedUrl.pathname.match("/([^/]*)(/(.*))?");
       containerName = pathComponents[1], blobName = pathComponents[3];
      }
      if (containerName = decodeURIComponent(containerName), blobName = decodeURIComponent(blobName), 
      blobName = blobName.replace(/\\/g, "/"), !containerName) throw new Error("Provided containerName is invalid.");
      return {
       blobName,
       containerName
      };
     } catch (error) {
      throw new Error("Unable to extract blobName and containerName with provided information.");
     }
    }
    async startCopyFromURL(copySource, options = {}) {
     return tracingClient.withSpan("BlobClient-startCopyFromURL", options, (async updatedOptions => {
      var _a, _b, _c;
      return options.conditions = options.conditions || {}, options.sourceConditions = options.sourceConditions || {}, 
      assertResponse(await this.blobContext.startCopyFromURL(copySource, {
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       metadata: options.metadata,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       sourceModifiedAccessConditions: {
        sourceIfMatch: options.sourceConditions.ifMatch,
        sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
        sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
        sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,
        sourceIfTags: options.sourceConditions.tagConditions
       },
       immutabilityPolicyExpiry: null === (_b = options.immutabilityPolicy) || void 0 === _b ? void 0 : _b.expiriesOn,
       immutabilityPolicyMode: null === (_c = options.immutabilityPolicy) || void 0 === _c ? void 0 : _c.policyMode,
       legalHold: options.legalHold,
       rehydratePriority: options.rehydratePriority,
       tier: toAccessTier(options.tier),
       blobTagsString: toBlobTagsString(options.tags),
       sealBlob: options.sealBlob,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    generateSasUrl(options) {
     return new Promise((resolve => {
      if (!(this.credential instanceof StorageSharedKeyCredential)) throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
      const sas = generateBlobSASQueryParameters(Object.assign({
       containerName: this._containerName,
       blobName: this._name,
       snapshotTime: this._snapshot,
       versionId: this._versionId
      }, options), this.credential).toString();
      resolve(appendToURLQuery(this.url, sas));
     }));
    }
    generateSasStringToSign(options) {
     if (!(this.credential instanceof StorageSharedKeyCredential)) throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
     return generateBlobSASQueryParametersInternal(Object.assign({
      containerName: this._containerName,
      blobName: this._name,
      snapshotTime: this._snapshot,
      versionId: this._versionId
     }, options), this.credential).stringToSign;
    }
    generateUserDelegationSasUrl(options, userDelegationKey) {
     return new Promise((resolve => {
      const sas = generateBlobSASQueryParameters(Object.assign({
       containerName: this._containerName,
       blobName: this._name,
       snapshotTime: this._snapshot,
       versionId: this._versionId
      }, options), userDelegationKey, this.accountName).toString();
      resolve(appendToURLQuery(this.url, sas));
     }));
    }
    generateUserDelegationSasStringToSign(options, userDelegationKey) {
     return generateBlobSASQueryParametersInternal(Object.assign({
      containerName: this._containerName,
      blobName: this._name,
      snapshotTime: this._snapshot,
      versionId: this._versionId
     }, options), userDelegationKey, this.accountName).stringToSign;
    }
    async deleteImmutabilityPolicy(options = {}) {
     return tracingClient.withSpan("BlobClient-deleteImmutabilityPolicy", options, (async updatedOptions => assertResponse(await this.blobContext.deleteImmutabilityPolicy({
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async setImmutabilityPolicy(immutabilityPolicy, options = {}) {
     return tracingClient.withSpan("BlobClient-setImmutabilityPolicy", options, (async updatedOptions => assertResponse(await this.blobContext.setImmutabilityPolicy({
      immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,
      immutabilityPolicyMode: immutabilityPolicy.policyMode,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async setLegalHold(legalHoldEnabled, options = {}) {
     return tracingClient.withSpan("BlobClient-setLegalHold", options, (async updatedOptions => assertResponse(await this.blobContext.setLegalHold(legalHoldEnabled, {
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async getAccountInfo(options = {}) {
     return tracingClient.withSpan("BlobClient-getAccountInfo", options, (async updatedOptions => assertResponse(await this.blobContext.getAccountInfo({
      abortSignal: options.abortSignal,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
   }
   class AppendBlobClient extends BlobClient {
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
     let pipeline, url;
     if (options = options || {}, isPipelineLike(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = credentialOrPipelineOrContainerName; else if (esm_isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = newPipeline(credentialOrPipelineOrContainerName, options = blobNameOrOptions); else if (credentialOrPipelineOrContainerName || "string" == typeof credentialOrPipelineOrContainerName) {
      if (!credentialOrPipelineOrContainerName || "string" != typeof credentialOrPipelineOrContainerName || !blobNameOrOptions || "string" != typeof blobNameOrOptions) throw new Error("Expecting non-empty strings for containerName and blobName parameters");
      {
       const containerName = credentialOrPipelineOrContainerName, blobName = blobNameOrOptions, extractedCreds = extractConnectionStringParts(urlOrConnectionString);
       if ("AccountConnString" === extractedCreds.kind) {
        if (!esm_isNode) throw new Error("Account connection string is only supported in Node.js environment");
        {
         const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
         url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)), 
         options.proxyOptions || (options.proxyOptions = proxyPolicy_getDefaultProxySettings(extractedCreds.proxyUri)), 
         pipeline = newPipeline(sharedKeyCredential, options);
        }
       } else {
        if ("SASConnString" !== extractedCreds.kind) throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas, 
        pipeline = newPipeline(new AnonymousCredential, options);
       }
      }
     } else url = urlOrConnectionString, pipeline = newPipeline(new AnonymousCredential, options);
     super(url, pipeline), this.appendBlobContext = this.storageClientContext.appendBlob;
    }
    withSnapshot(snapshot) {
     return new AppendBlobClient(setURLParameter(this.url, constants_URLConstants_Parameters.SNAPSHOT, 0 === snapshot.length ? void 0 : snapshot), this.pipeline);
    }
    async create(options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("AppendBlobClient-create", options, (async updatedOptions => {
      var _a, _b, _c;
      return assertResponse(await this.appendBlobContext.create(0, {
       abortSignal: options.abortSignal,
       blobHttpHeaders: options.blobHTTPHeaders,
       leaseAccessConditions: options.conditions,
       metadata: options.metadata,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       immutabilityPolicyExpiry: null === (_b = options.immutabilityPolicy) || void 0 === _b ? void 0 : _b.expiriesOn,
       immutabilityPolicyMode: null === (_c = options.immutabilityPolicy) || void 0 === _c ? void 0 : _c.policyMode,
       legalHold: options.legalHold,
       blobTagsString: toBlobTagsString(options.tags),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async createIfNotExists(options = {}) {
     const conditions = {
      ifNoneMatch: "*"
     };
     return tracingClient.withSpan("AppendBlobClient-createIfNotExists", options, (async updatedOptions => {
      var _a, _b;
      try {
       const res = assertResponse(await this.create(Object.assign(Object.assign({}, updatedOptions), {
        conditions
       })));
       return Object.assign(Object.assign({
        succeeded: !0
       }, res), {
        _response: res._response
       });
      } catch (e) {
       if ("BlobAlreadyExists" === (null === (_a = e.details) || void 0 === _a ? void 0 : _a.errorCode)) return Object.assign(Object.assign({
        succeeded: !1
       }, null === (_b = e.response) || void 0 === _b ? void 0 : _b.parsedHeaders), {
        _response: e.response
       });
       throw e;
      }
     }));
    }
    async seal(options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("AppendBlobClient-seal", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.appendBlobContext.seal({
       abortSignal: options.abortSignal,
       appendPositionAccessConditions: options.conditions,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async appendBlock(body, contentLength, options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("AppendBlobClient-appendBlock", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.appendBlobContext.appendBlock(contentLength, body, {
       abortSignal: options.abortSignal,
       appendPositionAccessConditions: options.conditions,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       requestOptions: {
        onUploadProgress: options.onProgress
       },
       transactionalContentMD5: options.transactionalContentMD5,
       transactionalContentCrc64: options.transactionalContentCrc64,
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {
     return options.conditions = options.conditions || {}, options.sourceConditions = options.sourceConditions || {}, 
     ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), tracingClient.withSpan("AppendBlobClient-appendBlockFromURL", options, (async updatedOptions => {
      var _a, _b, _c, _d, _e;
      return assertResponse(await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {
       abortSignal: options.abortSignal,
       sourceRange: rangeToString({
        offset: sourceOffset,
        count
       }),
       sourceContentMD5: options.sourceContentMD5,
       sourceContentCrc64: options.sourceContentCrc64,
       leaseAccessConditions: options.conditions,
       appendPositionAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       sourceModifiedAccessConditions: {
        sourceIfMatch: null === (_b = options.sourceConditions) || void 0 === _b ? void 0 : _b.ifMatch,
        sourceIfModifiedSince: null === (_c = options.sourceConditions) || void 0 === _c ? void 0 : _c.ifModifiedSince,
        sourceIfNoneMatch: null === (_d = options.sourceConditions) || void 0 === _d ? void 0 : _d.ifNoneMatch,
        sourceIfUnmodifiedSince: null === (_e = options.sourceConditions) || void 0 === _e ? void 0 : _e.ifUnmodifiedSince
       },
       copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
   }
   class BlockBlobClient extends BlobClient {
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
     let pipeline, url;
     if (options = options || {}, isPipelineLike(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = credentialOrPipelineOrContainerName; else if (esm_isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = newPipeline(credentialOrPipelineOrContainerName, options = blobNameOrOptions); else if (credentialOrPipelineOrContainerName || "string" == typeof credentialOrPipelineOrContainerName) {
      if (!credentialOrPipelineOrContainerName || "string" != typeof credentialOrPipelineOrContainerName || !blobNameOrOptions || "string" != typeof blobNameOrOptions) throw new Error("Expecting non-empty strings for containerName and blobName parameters");
      {
       const containerName = credentialOrPipelineOrContainerName, blobName = blobNameOrOptions, extractedCreds = extractConnectionStringParts(urlOrConnectionString);
       if ("AccountConnString" === extractedCreds.kind) {
        if (!esm_isNode) throw new Error("Account connection string is only supported in Node.js environment");
        {
         const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
         url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)), 
         options.proxyOptions || (options.proxyOptions = proxyPolicy_getDefaultProxySettings(extractedCreds.proxyUri)), 
         pipeline = newPipeline(sharedKeyCredential, options);
        }
       } else {
        if ("SASConnString" !== extractedCreds.kind) throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas, 
        pipeline = newPipeline(new AnonymousCredential, options);
       }
      }
     } else url = urlOrConnectionString, blobNameOrOptions && "string" != typeof blobNameOrOptions && (options = blobNameOrOptions), 
     pipeline = newPipeline(new AnonymousCredential, options);
     super(url, pipeline), this.blockBlobContext = this.storageClientContext.blockBlob, 
     this._blobContext = this.storageClientContext.blob;
    }
    withSnapshot(snapshot) {
     return new BlockBlobClient(setURLParameter(this.url, constants_URLConstants_Parameters.SNAPSHOT, 0 === snapshot.length ? void 0 : snapshot), this.pipeline);
    }
    async query(query, options = {}) {
     if (ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), !esm_isNode) throw new Error("This operation currently is only supported in Node.js.");
     return tracingClient.withSpan("BlockBlobClient-query", options, (async updatedOptions => {
      var _a;
      const response = assertResponse(await this._blobContext.query({
       abortSignal: options.abortSignal,
       queryRequest: {
        queryType: "SQL",
        expression: query,
        inputSerialization: toQuerySerialization(options.inputTextConfiguration),
        outputSerialization: toQuerySerialization(options.outputTextConfiguration)
       },
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       cpkInfo: options.customerProvidedKey,
       tracingOptions: updatedOptions.tracingOptions
      }));
      return new BlobQueryResponse(response, {
       abortSignal: options.abortSignal,
       onProgress: options.onProgress,
       onError: options.onError
      });
     }));
    }
    async upload(body, contentLength, options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("BlockBlobClient-upload", options, (async updatedOptions => {
      var _a, _b, _c;
      return assertResponse(await this.blockBlobContext.upload(contentLength, body, {
       abortSignal: options.abortSignal,
       blobHttpHeaders: options.blobHTTPHeaders,
       leaseAccessConditions: options.conditions,
       metadata: options.metadata,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       requestOptions: {
        onUploadProgress: options.onProgress
       },
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       immutabilityPolicyExpiry: null === (_b = options.immutabilityPolicy) || void 0 === _b ? void 0 : _b.expiriesOn,
       immutabilityPolicyMode: null === (_c = options.immutabilityPolicy) || void 0 === _c ? void 0 : _c.policyMode,
       legalHold: options.legalHold,
       tier: toAccessTier(options.tier),
       blobTagsString: toBlobTagsString(options.tags),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async syncUploadFromURL(sourceURL, options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("BlockBlobClient-syncUploadFromURL", options, (async updatedOptions => {
      var _a, _b, _c, _d, _e, _f;
      return assertResponse(await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), {
       blobHttpHeaders: options.blobHTTPHeaders,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       sourceModifiedAccessConditions: {
        sourceIfMatch: null === (_b = options.sourceConditions) || void 0 === _b ? void 0 : _b.ifMatch,
        sourceIfModifiedSince: null === (_c = options.sourceConditions) || void 0 === _c ? void 0 : _c.ifModifiedSince,
        sourceIfNoneMatch: null === (_d = options.sourceConditions) || void 0 === _d ? void 0 : _d.ifNoneMatch,
        sourceIfUnmodifiedSince: null === (_e = options.sourceConditions) || void 0 === _e ? void 0 : _e.ifUnmodifiedSince,
        sourceIfTags: null === (_f = options.sourceConditions) || void 0 === _f ? void 0 : _f.tagConditions
       },
       cpkInfo: options.customerProvidedKey,
       copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
       tier: toAccessTier(options.tier),
       blobTagsString: toBlobTagsString(options.tags),
       copySourceTags: options.copySourceTags,
       tracingOptions: updatedOptions.tracingOptions
      })));
     }));
    }
    async stageBlock(blockId, body, contentLength, options = {}) {
     return ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), tracingClient.withSpan("BlockBlobClient-stageBlock", options, (async updatedOptions => assertResponse(await this.blockBlobContext.stageBlock(blockId, contentLength, body, {
      abortSignal: options.abortSignal,
      leaseAccessConditions: options.conditions,
      requestOptions: {
       onUploadProgress: options.onProgress
      },
      transactionalContentMD5: options.transactionalContentMD5,
      transactionalContentCrc64: options.transactionalContentCrc64,
      cpkInfo: options.customerProvidedKey,
      encryptionScope: options.encryptionScope,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async stageBlockFromURL(blockId, sourceURL, offset = 0, count, options = {}) {
     return ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), tracingClient.withSpan("BlockBlobClient-stageBlockFromURL", options, (async updatedOptions => assertResponse(await this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {
      abortSignal: options.abortSignal,
      leaseAccessConditions: options.conditions,
      sourceContentMD5: options.sourceContentMD5,
      sourceContentCrc64: options.sourceContentCrc64,
      sourceRange: 0 !== offset || count ? rangeToString({
       offset,
       count
      }) : void 0,
      cpkInfo: options.customerProvidedKey,
      encryptionScope: options.encryptionScope,
      copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async commitBlockList(blocks, options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("BlockBlobClient-commitBlockList", options, (async updatedOptions => {
      var _a, _b, _c;
      return assertResponse(await this.blockBlobContext.commitBlockList({
       latest: blocks
      }, {
       abortSignal: options.abortSignal,
       blobHttpHeaders: options.blobHTTPHeaders,
       leaseAccessConditions: options.conditions,
       metadata: options.metadata,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       immutabilityPolicyExpiry: null === (_b = options.immutabilityPolicy) || void 0 === _b ? void 0 : _b.expiriesOn,
       immutabilityPolicyMode: null === (_c = options.immutabilityPolicy) || void 0 === _c ? void 0 : _c.policyMode,
       legalHold: options.legalHold,
       tier: toAccessTier(options.tier),
       blobTagsString: toBlobTagsString(options.tags),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async getBlockList(listType, options = {}) {
     return tracingClient.withSpan("BlockBlobClient-getBlockList", options, (async updatedOptions => {
      var _a;
      const res = assertResponse(await this.blockBlobContext.getBlockList(listType, {
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
      return res.committedBlocks || (res.committedBlocks = []), res.uncommittedBlocks || (res.uncommittedBlocks = []), 
      res;
     }));
    }
    async uploadData(data, options = {}) {
     return tracingClient.withSpan("BlockBlobClient-uploadData", options, (async updatedOptions => {
      if (esm_isNode) {
       let buffer;
       return buffer = data instanceof Buffer ? data : data instanceof ArrayBuffer ? Buffer.from(data) : Buffer.from(data.buffer, data.byteOffset, data.byteLength), 
       this.uploadSeekableInternal(((offset, size) => buffer.slice(offset, offset + size)), buffer.byteLength, updatedOptions);
      }
      {
       const browserBlob = new Blob([ data ]);
       return this.uploadSeekableInternal(((offset, size) => browserBlob.slice(offset, offset + size)), browserBlob.size, updatedOptions);
      }
     }));
    }
    async uploadBrowserData(browserData, options = {}) {
     return tracingClient.withSpan("BlockBlobClient-uploadBrowserData", options, (async updatedOptions => {
      const browserBlob = new Blob([ browserData ]);
      return this.uploadSeekableInternal(((offset, size) => browserBlob.slice(offset, offset + size)), browserBlob.size, updatedOptions);
     }));
    }
    async uploadSeekableInternal(bodyFactory, size, options = {}) {
     var _a, _b;
     let blockSize = null !== (_a = options.blockSize) && void 0 !== _a ? _a : 0;
     if (blockSize < 0 || blockSize > 4194304e3) throw new RangeError("blockSize option must be >= 0 and <= 4194304000");
     const maxSingleShotSize = null !== (_b = options.maxSingleShotSize) && void 0 !== _b ? _b : 268435456;
     if (maxSingleShotSize < 0 || maxSingleShotSize > 268435456) throw new RangeError("maxSingleShotSize option must be >= 0 and <= 268435456");
     if (0 === blockSize) {
      if (size > 2097152e8) throw new RangeError(`${size} is too larger to upload to a block blob.`);
      size > maxSingleShotSize && (blockSize = Math.ceil(size / 5e4), blockSize < 4194304 && (blockSize = 4194304));
     }
     return options.blobHTTPHeaders || (options.blobHTTPHeaders = {}), options.conditions || (options.conditions = {}), 
     tracingClient.withSpan("BlockBlobClient-uploadSeekableInternal", options, (async updatedOptions => {
      if (size <= maxSingleShotSize) return assertResponse(await this.upload(bodyFactory(0, size), size, updatedOptions));
      const numBlocks = Math.floor((size - 1) / blockSize) + 1;
      if (numBlocks > 5e4) throw new RangeError("The buffer's size is too big or the BlockSize is too small;the number of blocks must be <= 50000");
      const blockList = [], blockIDPrefix = esm_randomUUID();
      let transferProgress = 0;
      const batch = new Batch(options.concurrency);
      for (let i = 0; i < numBlocks; i++) batch.addOperation((async () => {
       const blockID = generateBlockID(blockIDPrefix, i), start = blockSize * i, contentLength = (i === numBlocks - 1 ? size : start + blockSize) - start;
       blockList.push(blockID), await this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {
        abortSignal: options.abortSignal,
        conditions: options.conditions,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
       }), transferProgress += contentLength, options.onProgress && options.onProgress({
        loadedBytes: transferProgress
       });
      }));
      return await batch.do(), this.commitBlockList(blockList, updatedOptions);
     }));
    }
    async uploadFile(filePath, options = {}) {
     return tracingClient.withSpan("BlockBlobClient-uploadFile", options, (async updatedOptions => {
      const size = (await fsStat(filePath)).size;
      return this.uploadSeekableInternal(((offset, count) => () => fsCreateReadStream(filePath, {
       autoClose: !0,
       end: count ? offset + count - 1 : 1 / 0,
       start: offset
      })), size, Object.assign(Object.assign({}, options), {
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async uploadStream(stream, bufferSize = 8388608, maxConcurrency = 5, options = {}) {
     return options.blobHTTPHeaders || (options.blobHTTPHeaders = {}), options.conditions || (options.conditions = {}), 
     tracingClient.withSpan("BlockBlobClient-uploadStream", options, (async updatedOptions => {
      let blockNum = 0;
      const blockIDPrefix = esm_randomUUID();
      let transferProgress = 0;
      const blockList = [], scheduler = new BufferScheduler(stream, bufferSize, maxConcurrency, (async (body, length) => {
       const blockID = generateBlockID(blockIDPrefix, blockNum);
       blockList.push(blockID), blockNum++, await this.stageBlock(blockID, body, length, {
        customerProvidedKey: options.customerProvidedKey,
        conditions: options.conditions,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
       }), transferProgress += length, options.onProgress && options.onProgress({
        loadedBytes: transferProgress
       });
      }), Math.ceil(maxConcurrency / 4 * 3));
      return await scheduler.do(), assertResponse(await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), {
       tracingOptions: updatedOptions.tracingOptions
      })));
     }));
    }
   }
   class PageBlobClient extends BlobClient {
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
     let pipeline, url;
     if (options = options || {}, isPipelineLike(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = credentialOrPipelineOrContainerName; else if (esm_isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = newPipeline(credentialOrPipelineOrContainerName, options = blobNameOrOptions); else if (credentialOrPipelineOrContainerName || "string" == typeof credentialOrPipelineOrContainerName) {
      if (!credentialOrPipelineOrContainerName || "string" != typeof credentialOrPipelineOrContainerName || !blobNameOrOptions || "string" != typeof blobNameOrOptions) throw new Error("Expecting non-empty strings for containerName and blobName parameters");
      {
       const containerName = credentialOrPipelineOrContainerName, blobName = blobNameOrOptions, extractedCreds = extractConnectionStringParts(urlOrConnectionString);
       if ("AccountConnString" === extractedCreds.kind) {
        if (!esm_isNode) throw new Error("Account connection string is only supported in Node.js environment");
        {
         const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
         url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)), 
         options.proxyOptions || (options.proxyOptions = proxyPolicy_getDefaultProxySettings(extractedCreds.proxyUri)), 
         pipeline = newPipeline(sharedKeyCredential, options);
        }
       } else {
        if ("SASConnString" !== extractedCreds.kind) throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas, 
        pipeline = newPipeline(new AnonymousCredential, options);
       }
      }
     } else url = urlOrConnectionString, pipeline = newPipeline(new AnonymousCredential, options);
     super(url, pipeline), this.pageBlobContext = this.storageClientContext.pageBlob;
    }
    withSnapshot(snapshot) {
     return new PageBlobClient(setURLParameter(this.url, constants_URLConstants_Parameters.SNAPSHOT, 0 === snapshot.length ? void 0 : snapshot), this.pipeline);
    }
    async create(size, options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("PageBlobClient-create", options, (async updatedOptions => {
      var _a, _b, _c;
      return assertResponse(await this.pageBlobContext.create(0, size, {
       abortSignal: options.abortSignal,
       blobHttpHeaders: options.blobHTTPHeaders,
       blobSequenceNumber: options.blobSequenceNumber,
       leaseAccessConditions: options.conditions,
       metadata: options.metadata,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       immutabilityPolicyExpiry: null === (_b = options.immutabilityPolicy) || void 0 === _b ? void 0 : _b.expiriesOn,
       immutabilityPolicyMode: null === (_c = options.immutabilityPolicy) || void 0 === _c ? void 0 : _c.policyMode,
       legalHold: options.legalHold,
       tier: toAccessTier(options.tier),
       blobTagsString: toBlobTagsString(options.tags),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async createIfNotExists(size, options = {}) {
     return tracingClient.withSpan("PageBlobClient-createIfNotExists", options, (async updatedOptions => {
      var _a, _b;
      try {
       const conditions = {
        ifNoneMatch: "*"
       }, res = assertResponse(await this.create(size, Object.assign(Object.assign({}, options), {
        conditions,
        tracingOptions: updatedOptions.tracingOptions
       })));
       return Object.assign(Object.assign({
        succeeded: !0
       }, res), {
        _response: res._response
       });
      } catch (e) {
       if ("BlobAlreadyExists" === (null === (_a = e.details) || void 0 === _a ? void 0 : _a.errorCode)) return Object.assign(Object.assign({
        succeeded: !1
       }, null === (_b = e.response) || void 0 === _b ? void 0 : _b.parsedHeaders), {
        _response: e.response
       });
       throw e;
      }
     }));
    }
    async uploadPages(body, offset, count, options = {}) {
     return options.conditions = options.conditions || {}, ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), 
     tracingClient.withSpan("PageBlobClient-uploadPages", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.pageBlobContext.uploadPages(count, body, {
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       requestOptions: {
        onUploadProgress: options.onProgress
       },
       range: rangeToString({
        offset,
        count
       }),
       sequenceNumberAccessConditions: options.conditions,
       transactionalContentMD5: options.transactionalContentMD5,
       transactionalContentCrc64: options.transactionalContentCrc64,
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {
     return options.conditions = options.conditions || {}, options.sourceConditions = options.sourceConditions || {}, 
     ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps), tracingClient.withSpan("PageBlobClient-uploadPagesFromURL", options, (async updatedOptions => {
      var _a, _b, _c, _d, _e;
      return assertResponse(await this.pageBlobContext.uploadPagesFromURL(sourceURL, rangeToString({
       offset: sourceOffset,
       count
      }), 0, rangeToString({
       offset: destOffset,
       count
      }), {
       abortSignal: options.abortSignal,
       sourceContentMD5: options.sourceContentMD5,
       sourceContentCrc64: options.sourceContentCrc64,
       leaseAccessConditions: options.conditions,
       sequenceNumberAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       sourceModifiedAccessConditions: {
        sourceIfMatch: null === (_b = options.sourceConditions) || void 0 === _b ? void 0 : _b.ifMatch,
        sourceIfModifiedSince: null === (_c = options.sourceConditions) || void 0 === _c ? void 0 : _c.ifModifiedSince,
        sourceIfNoneMatch: null === (_d = options.sourceConditions) || void 0 === _d ? void 0 : _d.ifNoneMatch,
        sourceIfUnmodifiedSince: null === (_e = options.sourceConditions) || void 0 === _e ? void 0 : _e.ifUnmodifiedSince
       },
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async clearPages(offset = 0, count, options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("PageBlobClient-clearPages", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.pageBlobContext.clearPages(0, {
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       range: rangeToString({
        offset,
        count
       }),
       sequenceNumberAccessConditions: options.conditions,
       cpkInfo: options.customerProvidedKey,
       encryptionScope: options.encryptionScope,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async getPageRanges(offset = 0, count, options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("PageBlobClient-getPageRanges", options, (async updatedOptions => {
      var _a;
      return rangeResponseFromModel(assertResponse(await this.pageBlobContext.getPageRanges({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       range: rangeToString({
        offset,
        count
       }),
       tracingOptions: updatedOptions.tracingOptions
      })));
     }));
    }
    async listPageRangesSegment(offset = 0, count, marker, options = {}) {
     return tracingClient.withSpan("PageBlobClient-getPageRangesSegment", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.pageBlobContext.getPageRanges({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       range: rangeToString({
        offset,
        count
       }),
       marker,
       maxPageSize: options.maxPageSize,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    listPageRangeItemSegments() {
     return __asyncGenerator(this, arguments, (function*(offset = 0, count, marker, options = {}) {
      let getPageRangeItemSegmentsResponse;
      if (marker || void 0 === marker) do {
       getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesSegment(offset, count, marker, options)), 
       marker = getPageRangeItemSegmentsResponse.continuationToken, yield yield __await(yield __await(getPageRangeItemSegmentsResponse));
      } while (marker);
     }));
    }
    listPageRangeItems() {
     return __asyncGenerator(this, arguments, (function*(offset = 0, count, options = {}) {
      var _a, e_1, _b, _c;
      try {
       for (var _f, _d = !0, _e = __asyncValues(this.listPageRangeItemSegments(offset, count, undefined, options)); !(_a = (_f = yield __await(_e.next())).done); _d = !0) {
        _c = _f.value, _d = !1;
        const getPageRangesSegment = _c;
        yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));
       }
      } catch (e_1_1) {
       e_1 = {
        error: e_1_1
       };
      } finally {
       try {
        _d || _a || !(_b = _e.return) || (yield __await(_b.call(_e)));
       } finally {
        if (e_1) throw e_1.error;
       }
      }
     }));
    }
    listPageRanges(offset = 0, count, options = {}) {
     options.conditions = options.conditions || {};
     const iter = this.listPageRangeItems(offset, count, options);
     return {
      next: () => iter.next(),
      [Symbol.asyncIterator]() {
       return this;
      },
      byPage: (settings = {}) => this.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({
       maxPageSize: settings.maxPageSize
      }, options))
     };
    }
    async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("PageBlobClient-getPageRangesDiff", options, (async updatedOptions => {
      var _a;
      return rangeResponseFromModel(assertResponse(await this.pageBlobContext.getPageRangesDiff({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       prevsnapshot: prevSnapshot,
       range: rangeToString({
        offset,
        count
       }),
       tracingOptions: updatedOptions.tracingOptions
      })));
     }));
    }
    async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options = {}) {
     return tracingClient.withSpan("PageBlobClient-getPageRangesDiffSegment", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.pageBlobContext.getPageRangesDiff({
       abortSignal: null == options ? void 0 : options.abortSignal,
       leaseAccessConditions: null == options ? void 0 : options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, null == options ? void 0 : options.conditions), {
        ifTags: null === (_a = null == options ? void 0 : options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       prevsnapshot: prevSnapshotOrUrl,
       range: rangeToString({
        offset,
        count
       }),
       marker,
       maxPageSize: null == options ? void 0 : options.maxPageSize,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options) {
     return __asyncGenerator(this, arguments, (function*() {
      let getPageRangeItemSegmentsResponse;
      if (marker || void 0 === marker) do {
       getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options)), 
       marker = getPageRangeItemSegmentsResponse.continuationToken, yield yield __await(yield __await(getPageRangeItemSegmentsResponse));
      } while (marker);
     }));
    }
    listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {
     return __asyncGenerator(this, arguments, (function*() {
      var _a, e_2, _b, _c;
      try {
       for (var _f, _d = !0, _e = __asyncValues(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, undefined, options)); !(_a = (_f = yield __await(_e.next())).done); _d = !0) {
        _c = _f.value, _d = !1;
        const getPageRangesSegment = _c;
        yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));
       }
      } catch (e_2_1) {
       e_2 = {
        error: e_2_1
       };
      } finally {
       try {
        _d || _a || !(_b = _e.return) || (yield __await(_b.call(_e)));
       } finally {
        if (e_2) throw e_2.error;
       }
      }
     }));
    }
    listPageRangesDiff(offset, count, prevSnapshot, options = {}) {
     options.conditions = options.conditions || {};
     const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));
     return {
      next: () => iter.next(),
      [Symbol.asyncIterator]() {
       return this;
      },
      byPage: (settings = {}) => this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({
       maxPageSize: settings.maxPageSize
      }, options))
     };
    }
    async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl, options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("PageBlobClient-GetPageRangesDiffForManagedDisks", options, (async updatedOptions => {
      var _a;
      return rangeResponseFromModel(assertResponse(await this.pageBlobContext.getPageRangesDiff({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       prevSnapshotUrl,
       range: rangeToString({
        offset,
        count
       }),
       tracingOptions: updatedOptions.tracingOptions
      })));
     }));
    }
    async resize(size, options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("PageBlobClient-resize", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.pageBlobContext.resize(size, {
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       encryptionScope: options.encryptionScope,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async updateSequenceNumber(sequenceNumberAction, sequenceNumber, options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("PageBlobClient-updateSequenceNumber", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {
       abortSignal: options.abortSignal,
       blobSequenceNumber: sequenceNumber,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    async startCopyIncremental(copySource, options = {}) {
     return tracingClient.withSpan("PageBlobClient-startCopyIncremental", options, (async updatedOptions => {
      var _a;
      return assertResponse(await this.pageBlobContext.copyIncremental(copySource, {
       abortSignal: options.abortSignal,
       modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {
        ifTags: null === (_a = options.conditions) || void 0 === _a ? void 0 : _a.tagConditions
       }),
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
   }
   async function getBodyAsText(batchResponse) {
    let buffer = Buffer.alloc(4194304);
    const responseLength = await async function(stream, buffer, encoding) {
     let pos = 0;
     const bufferSize = buffer.length;
     return new Promise(((resolve, reject) => {
      stream.on("readable", (() => {
       let chunk = stream.read();
       chunk && ("string" == typeof chunk && (chunk = Buffer.from(chunk, encoding)), pos + chunk.length > bufferSize ? reject(new Error(`Stream exceeds buffer size. Buffer size: ${bufferSize}`)) : (buffer.fill(chunk, pos, pos + chunk.length), 
       pos += chunk.length));
      })), stream.on("end", (() => {
       resolve(pos);
      })), stream.on("error", reject);
     }));
    }(batchResponse.readableStreamBody, buffer);
    return buffer = buffer.slice(0, responseLength), buffer.toString();
   }
   class BatchResponseParser {
    constructor(batchResponse, subRequests) {
     if (!batchResponse || !batchResponse.contentType) throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
     if (!subRequests || 0 === subRequests.size) throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
     this.batchResponse = batchResponse, this.subRequests = subRequests, this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1], 
     this.perResponsePrefix = `--${this.responseBatchBoundary}\r\n`, this.batchResponseEnding = `--${this.responseBatchBoundary}--`;
    }
    async parseBatchResponse() {
     if (this.batchResponse._response.status !== HTTPURLConnection_HTTP_ACCEPTED) throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);
     const subResponses = (await getBodyAsText(this.batchResponse)).split(this.batchResponseEnding)[0].split(this.perResponsePrefix).slice(1), subResponseCount = subResponses.length;
     if (subResponseCount !== this.subRequests.size && 1 !== subResponseCount) throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");
     const deserializedSubResponses = new Array(subResponseCount);
     let subResponsesSucceededCount = 0, subResponsesFailedCount = 0;
     for (let index = 0; index < subResponseCount; index++) {
      const subResponse = subResponses[index], deserializedSubResponse = {};
      deserializedSubResponse.headers = toHttpHeadersLike(esm_httpHeaders_createHttpHeaders());
      const responseLines = subResponse.split("\r\n");
      let subRespHeaderStartFound = !1, subRespHeaderEndFound = !1, subRespFailed = !1, contentId = -1;
      for (const responseLine of responseLines) if (subRespHeaderStartFound) if ("" !== responseLine.trim()) if (subRespHeaderEndFound) deserializedSubResponse.bodyAsText || (deserializedSubResponse.bodyAsText = ""), 
      deserializedSubResponse.bodyAsText += responseLine; else {
       if (-1 === responseLine.indexOf(": ")) throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter ': '.`);
       const tokens = responseLine.split(": ");
       deserializedSubResponse.headers.set(tokens[0], tokens[1]), tokens[0] === constants_HeaderConstants_X_MS_ERROR_CODE && (deserializedSubResponse.errorCode = tokens[1], 
       subRespFailed = !0);
      } else subRespHeaderEndFound || (subRespHeaderEndFound = !0); else if (responseLine.startsWith(constants_HeaderConstants_CONTENT_ID) && (contentId = parseInt(responseLine.split(": ")[1])), 
      responseLine.startsWith("HTTP/1.1")) {
       subRespHeaderStartFound = !0;
       const tokens = responseLine.split(" ");
       deserializedSubResponse.status = parseInt(tokens[1]), deserializedSubResponse.statusMessage = tokens.slice(2).join(" ");
      }
      -1 !== contentId && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && void 0 === deserializedSubResponses[contentId] ? (deserializedSubResponse._request = this.subRequests.get(contentId), 
      deserializedSubResponses[contentId] = deserializedSubResponse) : src_log_logger.error(`subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`), 
      subRespFailed ? subResponsesFailedCount++ : subResponsesSucceededCount++;
     }
     return {
      subResponses: deserializedSubResponses,
      subResponsesSucceededCount,
      subResponsesFailedCount
     };
    }
   }
   var MutexLockStatus, KnownEncryptionAlgorithmType;
   !function(MutexLockStatus) {
    MutexLockStatus[MutexLockStatus.LOCKED = 0] = "LOCKED", MutexLockStatus[MutexLockStatus.UNLOCKED = 1] = "UNLOCKED";
   }(MutexLockStatus || (MutexLockStatus = {}));
   class Mutex {
    static async lock(key) {
     return new Promise((resolve => {
      void 0 === this.keys[key] || this.keys[key] === MutexLockStatus.UNLOCKED ? (this.keys[key] = MutexLockStatus.LOCKED, 
      resolve()) : this.onUnlockEvent(key, (() => {
       this.keys[key] = MutexLockStatus.LOCKED, resolve();
      }));
     }));
    }
    static async unlock(key) {
     return new Promise((resolve => {
      this.keys[key] === MutexLockStatus.LOCKED && this.emitUnlockEvent(key), delete this.keys[key], 
      resolve();
     }));
    }
    static onUnlockEvent(key, handler) {
     void 0 === this.listeners[key] ? this.listeners[key] = [ handler ] : this.listeners[key].push(handler);
    }
    static emitUnlockEvent(key) {
     if (void 0 !== this.listeners[key] && this.listeners[key].length > 0) {
      const handler = this.listeners[key].shift();
      setImmediate((() => {
       handler.call(this);
      }));
     }
    }
   }
   Mutex.keys = {}, Mutex.listeners = {};
   class BlobBatch {
    constructor() {
     this.batch = "batch", this.batchRequest = new InnerBatchRequest;
    }
    getMultiPartContentType() {
     return this.batchRequest.getMultipartContentType();
    }
    getHttpRequestBody() {
     return this.batchRequest.getHttpRequestBody();
    }
    getSubRequests() {
     return this.batchRequest.getSubRequests();
    }
    async addSubRequestInternal(subRequest, assembleSubRequestFunc) {
     await Mutex.lock(this.batch);
     try {
      this.batchRequest.preAddSubRequest(subRequest), await assembleSubRequestFunc(), 
      this.batchRequest.postAddSubRequest(subRequest);
     } finally {
      await Mutex.unlock(this.batch);
     }
    }
    setBatchType(batchType) {
     if (this.batchType || (this.batchType = batchType), this.batchType !== batchType) throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);
    }
    async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {
     let url, credential;
     if ("string" == typeof urlOrBlobClient && (esm_isNode && credentialOrOptions instanceof StorageSharedKeyCredential || credentialOrOptions instanceof AnonymousCredential || isTokenCredential(credentialOrOptions))) url = urlOrBlobClient, 
     credential = credentialOrOptions; else {
      if (!(urlOrBlobClient instanceof BlobClient)) throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
      url = urlOrBlobClient.url, credential = urlOrBlobClient.credential, options = credentialOrOptions;
     }
     return options || (options = {}), tracingClient.withSpan("BatchDeleteRequest-addSubRequest", options, (async updatedOptions => {
      this.setBatchType("delete"), await this.addSubRequestInternal({
       url,
       credential
      }, (async () => {
       await new BlobClient(url, this.batchRequest.createPipeline(credential)).delete(updatedOptions);
      }));
     }));
    }
    async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
     let url, credential, tier;
     if ("string" == typeof urlOrBlobClient && (esm_isNode && credentialOrTier instanceof StorageSharedKeyCredential || credentialOrTier instanceof AnonymousCredential || isTokenCredential(credentialOrTier))) url = urlOrBlobClient, 
     credential = credentialOrTier, tier = tierOrOptions; else {
      if (!(urlOrBlobClient instanceof BlobClient)) throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
      url = urlOrBlobClient.url, credential = urlOrBlobClient.credential, tier = credentialOrTier, 
      options = tierOrOptions;
     }
     return options || (options = {}), tracingClient.withSpan("BatchSetTierRequest-addSubRequest", options, (async updatedOptions => {
      this.setBatchType("setAccessTier"), await this.addSubRequestInternal({
       url,
       credential
      }, (async () => {
       await new BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);
      }));
     }));
    }
   }
   class InnerBatchRequest {
    constructor() {
     this.operationCount = 0, this.body = "";
     const tempGuid = esm_randomUUID();
     this.boundary = `batch_${tempGuid}`, this.subRequestPrefix = `--${this.boundary}\r\n${constants_HeaderConstants_CONTENT_TYPE}: application/http\r\n${constants_HeaderConstants_CONTENT_TRANSFER_ENCODING}: binary`, 
     this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`, this.batchRequestEnding = `--${this.boundary}--`, 
     this.subRequests = new Map;
    }
    createPipeline(credential) {
     const corePipeline = esm_pipeline_createEmptyPipeline();
     var batchRequest;
     corePipeline.addPolicy(serializationPolicy({
      stringifyXML,
      serializerOptions: {
       xml: {
        xmlCharKey: "#"
       }
      }
     }), {
      phase: "Serialize"
     }), corePipeline.addPolicy({
      name: "batchHeaderFilterPolicy",
      async sendRequest(request, next) {
       let xMsHeaderName = "";
       for (const [name] of request.headers) iEqual(name, constants_HeaderConstants_X_MS_VERSION) && (xMsHeaderName = name);
       return "" !== xMsHeaderName && request.headers.delete(xMsHeaderName), next(request);
      }
     }), corePipeline.addPolicy((batchRequest = this, {
      name: "batchRequestAssemblePolicy",
      sendRequest: async request => (batchRequest.appendSubRequestToBody(request), {
       request,
       status: 200,
       headers: esm_httpHeaders_createHttpHeaders()
      })
     }), {
      afterPhase: "Sign"
     }), isTokenCredential(credential) ? corePipeline.addPolicy(bearerTokenAuthenticationPolicy({
      credential,
      scopes: StorageOAuthScopes,
      challengeCallbacks: {
       authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge
      }
     }), {
      phase: "Sign"
     }) : credential instanceof StorageSharedKeyCredential && corePipeline.addPolicy(storageSharedKeyCredentialPolicy({
      accountName: credential.accountName,
      accountKey: credential.accountKey
     }), {
      phase: "Sign"
     });
     const pipeline = new Pipeline([]);
     return pipeline._credential = credential, pipeline._corePipeline = corePipeline, 
     pipeline;
    }
    appendSubRequestToBody(request) {
     this.body += [ this.subRequestPrefix, `${constants_HeaderConstants_CONTENT_ID}: ${this.operationCount}`, "", `${request.method.toString()} ${getURLPathAndQuery(request.url)} HTTP/1.1\r\n` ].join("\r\n");
     for (const [name, value] of request.headers) this.body += `${name}: ${value}\r\n`;
     this.body += "\r\n";
    }
    preAddSubRequest(subRequest) {
     if (this.operationCount >= 256) throw new RangeError("Cannot exceed 256 sub requests in a single batch");
     const path = getURLPath(subRequest.url);
     if (!path || "" === path) throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);
    }
    postAddSubRequest(subRequest) {
     this.subRequests.set(this.operationCount, subRequest), this.operationCount++;
    }
    getHttpRequestBody() {
     return `${this.body}${this.batchRequestEnding}\r\n`;
    }
    getMultipartContentType() {
     return this.multipartContentType;
    }
    getSubRequests() {
     return this.subRequests;
    }
   }
   class BlobBatchClient {
    constructor(url, credentialOrPipeline, options) {
     let pipeline;
     pipeline = isPipelineLike(credentialOrPipeline) ? credentialOrPipeline : newPipeline(credentialOrPipeline || new AnonymousCredential, options);
     const storageClientContext = new StorageContextClient(url, getCoreClientOptions(pipeline)), path = getURLPath(url);
     this.serviceOrContainerContext = path && "/" !== path ? storageClientContext.container : storageClientContext.service;
    }
    createBatch() {
     return new BlobBatch;
    }
    async deleteBlobs(urlsOrBlobClients, credentialOrOptions, options) {
     const batch = new BlobBatch;
     for (const urlOrBlobClient of urlsOrBlobClients) "string" == typeof urlOrBlobClient ? await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options) : await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);
     return this.submitBatch(batch);
    }
    async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, options) {
     const batch = new BlobBatch;
     for (const urlOrBlobClient of urlsOrBlobClients) "string" == typeof urlOrBlobClient ? await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) : await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);
     return this.submitBatch(batch);
    }
    async submitBatch(batchRequest, options = {}) {
     if (!batchRequest || 0 === batchRequest.getSubRequests().size) throw new RangeError("Batch request should contain one or more sub requests.");
     return tracingClient.withSpan("BlobBatchClient-submitBatch", options, (async updatedOptions => {
      const batchRequestBody = batchRequest.getHttpRequestBody(), rawBatchResponse = assertResponse(await this.serviceOrContainerContext.submitBatch((str = batchRequestBody, 
      Buffer.byteLength(str)), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign({}, updatedOptions)));
      var str;
      const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests()), responseSummary = await batchResponseParser.parseBatchResponse();
      return {
       _response: rawBatchResponse._response,
       contentType: rawBatchResponse.contentType,
       errorCode: rawBatchResponse.errorCode,
       requestId: rawBatchResponse.requestId,
       clientRequestId: rawBatchResponse.clientRequestId,
       version: rawBatchResponse.version,
       subResponses: responseSummary.subResponses,
       subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
       subResponsesFailedCount: responseSummary.subResponsesFailedCount
      };
     }));
    }
   }
   class ContainerClient extends StorageClient_StorageClient {
    get containerName() {
     return this._containerName;
    }
    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, options) {
     let pipeline, url;
     if (options = options || {}, isPipelineLike(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = credentialOrPipelineOrContainerName; else if (esm_isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) url = urlOrConnectionString, 
     pipeline = newPipeline(credentialOrPipelineOrContainerName, options); else if (credentialOrPipelineOrContainerName || "string" == typeof credentialOrPipelineOrContainerName) {
      if (!credentialOrPipelineOrContainerName || "string" != typeof credentialOrPipelineOrContainerName) throw new Error("Expecting non-empty strings for containerName parameter");
      {
       const containerName = credentialOrPipelineOrContainerName, extractedCreds = extractConnectionStringParts(urlOrConnectionString);
       if ("AccountConnString" === extractedCreds.kind) {
        if (!esm_isNode) throw new Error("Account connection string is only supported in Node.js environment");
        {
         const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
         url = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), options.proxyOptions || (options.proxyOptions = proxyPolicy_getDefaultProxySettings(extractedCreds.proxyUri)), 
         pipeline = newPipeline(sharedKeyCredential, options);
        }
       } else {
        if ("SASConnString" !== extractedCreds.kind) throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        url = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) + "?" + extractedCreds.accountSas, 
        pipeline = newPipeline(new AnonymousCredential, options);
       }
      }
     } else url = urlOrConnectionString, pipeline = newPipeline(new AnonymousCredential, options);
     super(url, pipeline), this._containerName = this.getContainerNameFromUrl(), this.containerContext = this.storageClientContext.container;
    }
    async create(options = {}) {
     return tracingClient.withSpan("ContainerClient-create", options, (async updatedOptions => assertResponse(await this.containerContext.create(updatedOptions))));
    }
    async createIfNotExists(options = {}) {
     return tracingClient.withSpan("ContainerClient-createIfNotExists", options, (async updatedOptions => {
      var _a, _b;
      try {
       const res = await this.create(updatedOptions);
       return Object.assign(Object.assign({
        succeeded: !0
       }, res), {
        _response: res._response
       });
      } catch (e) {
       if ("ContainerAlreadyExists" === (null === (_a = e.details) || void 0 === _a ? void 0 : _a.errorCode)) return Object.assign(Object.assign({
        succeeded: !1
       }, null === (_b = e.response) || void 0 === _b ? void 0 : _b.parsedHeaders), {
        _response: e.response
       });
       throw e;
      }
     }));
    }
    async exists(options = {}) {
     return tracingClient.withSpan("ContainerClient-exists", options, (async updatedOptions => {
      try {
       return await this.getProperties({
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
       }), !0;
      } catch (e) {
       if (404 === e.statusCode) return !1;
       throw e;
      }
     }));
    }
    getBlobClient(blobName) {
     return new BlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
    }
    getAppendBlobClient(blobName) {
     return new AppendBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
    }
    getBlockBlobClient(blobName) {
     return new BlockBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
    }
    getPageBlobClient(blobName) {
     return new PageBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
    }
    async getProperties(options = {}) {
     return options.conditions || (options.conditions = {}), tracingClient.withSpan("ContainerClient-getProperties", options, (async updatedOptions => assertResponse(await this.containerContext.getProperties(Object.assign(Object.assign({
      abortSignal: options.abortSignal
     }, options.conditions), {
      tracingOptions: updatedOptions.tracingOptions
     })))));
    }
    async delete(options = {}) {
     return options.conditions || (options.conditions = {}), tracingClient.withSpan("ContainerClient-delete", options, (async updatedOptions => assertResponse(await this.containerContext.delete({
      abortSignal: options.abortSignal,
      leaseAccessConditions: options.conditions,
      modifiedAccessConditions: options.conditions,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async deleteIfExists(options = {}) {
     return tracingClient.withSpan("ContainerClient-deleteIfExists", options, (async updatedOptions => {
      var _a, _b;
      try {
       const res = await this.delete(updatedOptions);
       return Object.assign(Object.assign({
        succeeded: !0
       }, res), {
        _response: res._response
       });
      } catch (e) {
       if ("ContainerNotFound" === (null === (_a = e.details) || void 0 === _a ? void 0 : _a.errorCode)) return Object.assign(Object.assign({
        succeeded: !1
       }, null === (_b = e.response) || void 0 === _b ? void 0 : _b.parsedHeaders), {
        _response: e.response
       });
       throw e;
      }
     }));
    }
    async setMetadata(metadata, options = {}) {
     if (options.conditions || (options.conditions = {}), options.conditions.ifUnmodifiedSince) throw new RangeError("the IfUnmodifiedSince must have their default values because they are ignored by the blob service");
     return tracingClient.withSpan("ContainerClient-setMetadata", options, (async updatedOptions => assertResponse(await this.containerContext.setMetadata({
      abortSignal: options.abortSignal,
      leaseAccessConditions: options.conditions,
      metadata,
      modifiedAccessConditions: options.conditions,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async getAccessPolicy(options = {}) {
     return options.conditions || (options.conditions = {}), tracingClient.withSpan("ContainerClient-getAccessPolicy", options, (async updatedOptions => {
      const response = assertResponse(await this.containerContext.getAccessPolicy({
       abortSignal: options.abortSignal,
       leaseAccessConditions: options.conditions,
       tracingOptions: updatedOptions.tracingOptions
      })), res = {
       _response: response._response,
       blobPublicAccess: response.blobPublicAccess,
       date: response.date,
       etag: response.etag,
       errorCode: response.errorCode,
       lastModified: response.lastModified,
       requestId: response.requestId,
       clientRequestId: response.clientRequestId,
       signedIdentifiers: [],
       version: response.version
      };
      for (const identifier of response) {
       let accessPolicy;
       identifier.accessPolicy && (accessPolicy = {
        permissions: identifier.accessPolicy.permissions
       }, identifier.accessPolicy.expiresOn && (accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn)), 
       identifier.accessPolicy.startsOn && (accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn))), 
       res.signedIdentifiers.push({
        accessPolicy,
        id: identifier.id
       });
      }
      return res;
     }));
    }
    async setAccessPolicy(access, containerAcl, options = {}) {
     return options.conditions = options.conditions || {}, tracingClient.withSpan("ContainerClient-setAccessPolicy", options, (async updatedOptions => {
      const acl = [];
      for (const identifier of containerAcl || []) acl.push({
       accessPolicy: {
        expiresOn: identifier.accessPolicy.expiresOn ? truncatedISO8061Date(identifier.accessPolicy.expiresOn) : "",
        permissions: identifier.accessPolicy.permissions,
        startsOn: identifier.accessPolicy.startsOn ? truncatedISO8061Date(identifier.accessPolicy.startsOn) : ""
       },
       id: identifier.id
      });
      return assertResponse(await this.containerContext.setAccessPolicy({
       abortSignal: options.abortSignal,
       access,
       containerAcl: acl,
       leaseAccessConditions: options.conditions,
       modifiedAccessConditions: options.conditions,
       tracingOptions: updatedOptions.tracingOptions
      }));
     }));
    }
    getBlobLeaseClient(proposeLeaseId) {
     return new BlobLeaseClient(this, proposeLeaseId);
    }
    async uploadBlockBlob(blobName, body, contentLength, options = {}) {
     return tracingClient.withSpan("ContainerClient-uploadBlockBlob", options, (async updatedOptions => {
      const blockBlobClient = this.getBlockBlobClient(blobName), response = await blockBlobClient.upload(body, contentLength, updatedOptions);
      return {
       blockBlobClient,
       response
      };
     }));
    }
    async deleteBlob(blobName, options = {}) {
     return tracingClient.withSpan("ContainerClient-deleteBlob", options, (async updatedOptions => {
      let blobClient = this.getBlobClient(blobName);
      return options.versionId && (blobClient = blobClient.withVersion(options.versionId)), 
      blobClient.delete(updatedOptions);
     }));
    }
    async listBlobFlatSegment(marker, options = {}) {
     return tracingClient.withSpan("ContainerClient-listBlobFlatSegment", options, (async updatedOptions => {
      const response = assertResponse(await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({
       marker
      }, options), {
       tracingOptions: updatedOptions.tracingOptions
      })));
      var internalResponse;
      return Object.assign(Object.assign({}, response), {
       _response: Object.assign(Object.assign({}, response._response), {
        parsedBody: (internalResponse = response._response.parsedBody, Object.assign(Object.assign({}, internalResponse), {
         segment: {
          blobItems: internalResponse.segment.blobItems.map((blobItemInteral => Object.assign(Object.assign({}, blobItemInteral), {
           name: BlobNameToString(blobItemInteral.name)
          })))
         }
        }))
       }),
       segment: Object.assign(Object.assign({}, response.segment), {
        blobItems: response.segment.blobItems.map((blobItemInternal => Object.assign(Object.assign({}, blobItemInternal), {
         name: BlobNameToString(blobItemInternal.name),
         tags: toTags(blobItemInternal.blobTags),
         objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInternal.objectReplicationMetadata)
        })))
       })
      });
     }));
    }
    async listBlobHierarchySegment(delimiter, marker, options = {}) {
     return tracingClient.withSpan("ContainerClient-listBlobHierarchySegment", options, (async updatedOptions => {
      var _a;
      const response = assertResponse(await this.containerContext.listBlobHierarchySegment(delimiter, Object.assign(Object.assign({
       marker
      }, options), {
       tracingOptions: updatedOptions.tracingOptions
      })));
      return Object.assign(Object.assign({}, response), {
       _response: Object.assign(Object.assign({}, response._response), {
        parsedBody: ConvertInternalResponseOfListBlobHierarchy(response._response.parsedBody)
       }),
       segment: Object.assign(Object.assign({}, response.segment), {
        blobItems: response.segment.blobItems.map((blobItemInternal => Object.assign(Object.assign({}, blobItemInternal), {
         name: BlobNameToString(blobItemInternal.name),
         tags: toTags(blobItemInternal.blobTags),
         objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInternal.objectReplicationMetadata)
        }))),
        blobPrefixes: null === (_a = response.segment.blobPrefixes) || void 0 === _a ? void 0 : _a.map((blobPrefixInternal => Object.assign(Object.assign({}, blobPrefixInternal), {
         name: BlobNameToString(blobPrefixInternal.name)
        })))
       })
      });
     }));
    }
    listSegments(marker_1) {
     return __asyncGenerator(this, arguments, (function*(marker, options = {}) {
      let listBlobsFlatSegmentResponse;
      if (marker || void 0 === marker) do {
       listBlobsFlatSegmentResponse = yield __await(this.listBlobFlatSegment(marker, options)), 
       marker = listBlobsFlatSegmentResponse.continuationToken, yield yield __await(yield __await(listBlobsFlatSegmentResponse));
      } while (marker);
     }));
    }
    listItems() {
     return __asyncGenerator(this, arguments, (function*(options = {}) {
      var _a, e_1, _b, _c;
      try {
       for (var _f, _d = !0, _e = __asyncValues(this.listSegments(undefined, options)); !(_a = (_f = yield __await(_e.next())).done); _d = !0) {
        _c = _f.value, _d = !1;
        const listBlobsFlatSegmentResponse = _c;
        yield __await(yield* __asyncDelegator(__asyncValues(listBlobsFlatSegmentResponse.segment.blobItems)));
       }
      } catch (e_1_1) {
       e_1 = {
        error: e_1_1
       };
      } finally {
       try {
        _d || _a || !(_b = _e.return) || (yield __await(_b.call(_e)));
       } finally {
        if (e_1) throw e_1.error;
       }
      }
     }));
    }
    listBlobsFlat(options = {}) {
     const include = [];
     options.includeCopy && include.push("copy"), options.includeDeleted && include.push("deleted"), 
     options.includeMetadata && include.push("metadata"), options.includeSnapshots && include.push("snapshots"), 
     options.includeVersions && include.push("versions"), options.includeUncommitedBlobs && include.push("uncommittedblobs"), 
     options.includeTags && include.push("tags"), options.includeDeletedWithVersions && include.push("deletedwithversions"), 
     options.includeImmutabilityPolicy && include.push("immutabilitypolicy"), options.includeLegalHold && include.push("legalhold"), 
     "" === options.prefix && (options.prefix = void 0);
     const updatedOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
      include
     } : {}), iter = this.listItems(updatedOptions);
     return {
      next: () => iter.next(),
      [Symbol.asyncIterator]() {
       return this;
      },
      byPage: (settings = {}) => this.listSegments(settings.continuationToken, Object.assign({
       maxPageSize: settings.maxPageSize
      }, updatedOptions))
     };
    }
    listHierarchySegments(delimiter_1, marker_1) {
     return __asyncGenerator(this, arguments, (function*(delimiter, marker, options = {}) {
      let listBlobsHierarchySegmentResponse;
      if (marker || void 0 === marker) do {
       listBlobsHierarchySegmentResponse = yield __await(this.listBlobHierarchySegment(delimiter, marker, options)), 
       marker = listBlobsHierarchySegmentResponse.continuationToken, yield yield __await(yield __await(listBlobsHierarchySegmentResponse));
      } while (marker);
     }));
    }
    listItemsByHierarchy(delimiter_1) {
     return __asyncGenerator(this, arguments, (function*(delimiter, options = {}) {
      var _a, e_2, _b, _c;
      try {
       for (var _f, _d = !0, _e = __asyncValues(this.listHierarchySegments(delimiter, undefined, options)); !(_a = (_f = yield __await(_e.next())).done); _d = !0) {
        _c = _f.value, _d = !1;
        const segment = _c.segment;
        if (segment.blobPrefixes) for (const prefix of segment.blobPrefixes) yield yield __await(Object.assign({
         kind: "prefix"
        }, prefix));
        for (const blob of segment.blobItems) yield yield __await(Object.assign({
         kind: "blob"
        }, blob));
       }
      } catch (e_2_1) {
       e_2 = {
        error: e_2_1
       };
      } finally {
       try {
        _d || _a || !(_b = _e.return) || (yield __await(_b.call(_e)));
       } finally {
        if (e_2) throw e_2.error;
       }
      }
     }));
    }
    listBlobsByHierarchy(delimiter, options = {}) {
     if ("" === delimiter) throw new RangeError("delimiter should contain one or more characters");
     const include = [];
     options.includeCopy && include.push("copy"), options.includeDeleted && include.push("deleted"), 
     options.includeMetadata && include.push("metadata"), options.includeSnapshots && include.push("snapshots"), 
     options.includeVersions && include.push("versions"), options.includeUncommitedBlobs && include.push("uncommittedblobs"), 
     options.includeTags && include.push("tags"), options.includeDeletedWithVersions && include.push("deletedwithversions"), 
     options.includeImmutabilityPolicy && include.push("immutabilitypolicy"), options.includeLegalHold && include.push("legalhold"), 
     "" === options.prefix && (options.prefix = void 0);
     const updatedOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
      include
     } : {}), iter = this.listItemsByHierarchy(delimiter, updatedOptions);
     return {
      next: async () => iter.next(),
      [Symbol.asyncIterator]() {
       return this;
      },
      byPage: (settings = {}) => this.listHierarchySegments(delimiter, settings.continuationToken, Object.assign({
       maxPageSize: settings.maxPageSize
      }, updatedOptions))
     };
    }
    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {
     return tracingClient.withSpan("ContainerClient-findBlobsByTagsSegment", options, (async updatedOptions => {
      const response = assertResponse(await this.containerContext.filterBlobs({
       abortSignal: options.abortSignal,
       where: tagFilterSqlExpression,
       marker,
       maxPageSize: options.maxPageSize,
       tracingOptions: updatedOptions.tracingOptions
      })), wrappedResponse = Object.assign(Object.assign({}, response), {
       _response: response._response,
       blobs: response.blobs.map((blob => {
        var _a;
        let tagValue = "";
        return 1 === (null === (_a = blob.tags) || void 0 === _a ? void 0 : _a.blobTagSet.length) && (tagValue = blob.tags.blobTagSet[0].value), 
        Object.assign(Object.assign({}, blob), {
         tags: toTags(blob.tags),
         tagValue
        });
       }))
      });
      return wrappedResponse;
     }));
    }
    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {
     return __asyncGenerator(this, arguments, (function*(tagFilterSqlExpression, marker, options = {}) {
      let response;
      if (marker || void 0 === marker) do {
       response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options)), 
       response.blobs = response.blobs || [], marker = response.continuationToken, yield yield __await(response);
      } while (marker);
     }));
    }
    findBlobsByTagsItems(tagFilterSqlExpression_1) {
     return __asyncGenerator(this, arguments, (function*(tagFilterSqlExpression, options = {}) {
      var _a, e_3, _b, _c;
      try {
       for (var _f, _d = !0, _e = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, undefined, options)); !(_a = (_f = yield __await(_e.next())).done); _d = !0) {
        _c = _f.value, _d = !1;
        const segment = _c;
        yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));
       }
      } catch (e_3_1) {
       e_3 = {
        error: e_3_1
       };
      } finally {
       try {
        _d || _a || !(_b = _e.return) || (yield __await(_b.call(_e)));
       } finally {
        if (e_3) throw e_3.error;
       }
      }
     }));
    }
    findBlobsByTags(tagFilterSqlExpression, options = {}) {
     const listSegmentOptions = Object.assign({}, options), iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
     return {
      next: () => iter.next(),
      [Symbol.asyncIterator]() {
       return this;
      },
      byPage: (settings = {}) => this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({
       maxPageSize: settings.maxPageSize
      }, listSegmentOptions))
     };
    }
    async getAccountInfo(options = {}) {
     return tracingClient.withSpan("ContainerClient-getAccountInfo", options, (async updatedOptions => assertResponse(await this.containerContext.getAccountInfo({
      abortSignal: options.abortSignal,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    getContainerNameFromUrl() {
     let containerName;
     try {
      const parsedUrl = new URL(this.url);
      if (containerName = "blob" === parsedUrl.hostname.split(".")[1] ? parsedUrl.pathname.split("/")[1] : isIpEndpointStyle(parsedUrl) ? parsedUrl.pathname.split("/")[2] : parsedUrl.pathname.split("/")[1], 
      containerName = decodeURIComponent(containerName), !containerName) throw new Error("Provided containerName is invalid.");
      return containerName;
     } catch (error) {
      throw new Error("Unable to extract containerName with provided information.");
     }
    }
    generateSasUrl(options) {
     return new Promise((resolve => {
      if (!(this.credential instanceof StorageSharedKeyCredential)) throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
      const sas = generateBlobSASQueryParameters(Object.assign({
       containerName: this._containerName
      }, options), this.credential).toString();
      resolve(appendToURLQuery(this.url, sas));
     }));
    }
    generateSasStringToSign(options) {
     if (!(this.credential instanceof StorageSharedKeyCredential)) throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
     return generateBlobSASQueryParametersInternal(Object.assign({
      containerName: this._containerName
     }, options), this.credential).stringToSign;
    }
    generateUserDelegationSasUrl(options, userDelegationKey) {
     return new Promise((resolve => {
      const sas = generateBlobSASQueryParameters(Object.assign({
       containerName: this._containerName
      }, options), userDelegationKey, this.accountName).toString();
      resolve(appendToURLQuery(this.url, sas));
     }));
    }
    generateUserDelegationSasStringToSign(options, userDelegationKey) {
     return generateBlobSASQueryParametersInternal(Object.assign({
      containerName: this._containerName
     }, options), userDelegationKey, this.accountName).stringToSign;
    }
    getBlobBatchClient() {
     return new BlobBatchClient(this.url, this.pipeline);
    }
   }
   class AccountSASPermissions {
    constructor() {
     this.read = !1, this.write = !1, this.delete = !1, this.deleteVersion = !1, this.list = !1, 
     this.add = !1, this.create = !1, this.update = !1, this.process = !1, this.tag = !1, 
     this.filter = !1, this.setImmutabilityPolicy = !1, this.permanentDelete = !1;
    }
    static parse(permissions) {
     const accountSASPermissions = new AccountSASPermissions;
     for (const c of permissions) switch (c) {
     case "r":
      accountSASPermissions.read = !0;
      break;

     case "w":
      accountSASPermissions.write = !0;
      break;

     case "d":
      accountSASPermissions.delete = !0;
      break;

     case "x":
      accountSASPermissions.deleteVersion = !0;
      break;

     case "l":
      accountSASPermissions.list = !0;
      break;

     case "a":
      accountSASPermissions.add = !0;
      break;

     case "c":
      accountSASPermissions.create = !0;
      break;

     case "u":
      accountSASPermissions.update = !0;
      break;

     case "p":
      accountSASPermissions.process = !0;
      break;

     case "t":
      accountSASPermissions.tag = !0;
      break;

     case "f":
      accountSASPermissions.filter = !0;
      break;

     case "i":
      accountSASPermissions.setImmutabilityPolicy = !0;
      break;

     case "y":
      accountSASPermissions.permanentDelete = !0;
      break;

     default:
      throw new RangeError(`Invalid permission character: ${c}`);
     }
     return accountSASPermissions;
    }
    static from(permissionLike) {
     const accountSASPermissions = new AccountSASPermissions;
     return permissionLike.read && (accountSASPermissions.read = !0), permissionLike.write && (accountSASPermissions.write = !0), 
     permissionLike.delete && (accountSASPermissions.delete = !0), permissionLike.deleteVersion && (accountSASPermissions.deleteVersion = !0), 
     permissionLike.filter && (accountSASPermissions.filter = !0), permissionLike.tag && (accountSASPermissions.tag = !0), 
     permissionLike.list && (accountSASPermissions.list = !0), permissionLike.add && (accountSASPermissions.add = !0), 
     permissionLike.create && (accountSASPermissions.create = !0), permissionLike.update && (accountSASPermissions.update = !0), 
     permissionLike.process && (accountSASPermissions.process = !0), permissionLike.setImmutabilityPolicy && (accountSASPermissions.setImmutabilityPolicy = !0), 
     permissionLike.permanentDelete && (accountSASPermissions.permanentDelete = !0), 
     accountSASPermissions;
    }
    toString() {
     const permissions = [];
     return this.read && permissions.push("r"), this.write && permissions.push("w"), 
     this.delete && permissions.push("d"), this.deleteVersion && permissions.push("x"), 
     this.filter && permissions.push("f"), this.tag && permissions.push("t"), this.list && permissions.push("l"), 
     this.add && permissions.push("a"), this.create && permissions.push("c"), this.update && permissions.push("u"), 
     this.process && permissions.push("p"), this.setImmutabilityPolicy && permissions.push("i"), 
     this.permanentDelete && permissions.push("y"), permissions.join("");
    }
   }
   class AccountSASResourceTypes {
    constructor() {
     this.service = !1, this.container = !1, this.object = !1;
    }
    static parse(resourceTypes) {
     const accountSASResourceTypes = new AccountSASResourceTypes;
     for (const c of resourceTypes) switch (c) {
     case "s":
      accountSASResourceTypes.service = !0;
      break;

     case "c":
      accountSASResourceTypes.container = !0;
      break;

     case "o":
      accountSASResourceTypes.object = !0;
      break;

     default:
      throw new RangeError(`Invalid resource type: ${c}`);
     }
     return accountSASResourceTypes;
    }
    toString() {
     const resourceTypes = [];
     return this.service && resourceTypes.push("s"), this.container && resourceTypes.push("c"), 
     this.object && resourceTypes.push("o"), resourceTypes.join("");
    }
   }
   class AccountSASServices {
    constructor() {
     this.blob = !1, this.file = !1, this.queue = !1, this.table = !1;
    }
    static parse(services) {
     const accountSASServices = new AccountSASServices;
     for (const c of services) switch (c) {
     case "b":
      accountSASServices.blob = !0;
      break;

     case "f":
      accountSASServices.file = !0;
      break;

     case "q":
      accountSASServices.queue = !0;
      break;

     case "t":
      accountSASServices.table = !0;
      break;

     default:
      throw new RangeError(`Invalid service character: ${c}`);
     }
     return accountSASServices;
    }
    toString() {
     const services = [];
     return this.blob && services.push("b"), this.table && services.push("t"), this.queue && services.push("q"), 
     this.file && services.push("f"), services.join("");
    }
   }
   function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {
    return generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential).sasQueryParameters;
   }
   function generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential) {
    const version = accountSASSignatureValues.version ? accountSASSignatureValues.version : SERVICE_VERSION;
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version < "2020-08-04") throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when provided 'x' permission.");
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version < "2019-10-10") throw RangeError("'version' must be >= '2019-10-10' when provided 'y' permission.");
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version < "2019-12-12") throw RangeError("'version' must be >= '2019-12-12' when provided 't' permission.");
    if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version < "2019-12-12") throw RangeError("'version' must be >= '2019-12-12' when provided 'f' permission.");
    if (accountSASSignatureValues.encryptionScope && version < "2020-12-06") throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
    const parsedPermissions = AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString()), parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString(), parsedResourceTypes = AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();
    let stringToSign;
    stringToSign = version >= "2020-12-06" ? [ sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, !1) : "", truncatedISO8061Date(accountSASSignatureValues.expiresOn, !1), accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : "", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "", version, accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : "", "" ].join("\n") : [ sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, !1) : "", truncatedISO8061Date(accountSASSignatureValues.expiresOn, !1), accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : "", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "", version, "" ].join("\n");
    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
    return {
     sasQueryParameters: new SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, accountSASSignatureValues.encryptionScope),
     stringToSign
    };
   }
   class BlobServiceClient extends StorageClient_StorageClient {
    static fromConnectionString(connectionString, options) {
     options = options || {};
     const extractedCreds = extractConnectionStringParts(connectionString);
     if ("AccountConnString" === extractedCreds.kind) {
      if (esm_isNode) {
       const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
       options.proxyOptions || (options.proxyOptions = proxyPolicy_getDefaultProxySettings(extractedCreds.proxyUri));
       const pipeline = newPipeline(sharedKeyCredential, options);
       return new BlobServiceClient(extractedCreds.url, pipeline);
      }
      throw new Error("Account connection string is only supported in Node.js environment");
     }
     if ("SASConnString" === extractedCreds.kind) {
      const pipeline = newPipeline(new AnonymousCredential, options);
      return new BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, pipeline);
     }
     throw new Error("Connection string must be either an Account connection string or a SAS connection string");
    }
    constructor(url, credentialOrPipeline, options) {
     let pipeline;
     pipeline = isPipelineLike(credentialOrPipeline) ? credentialOrPipeline : esm_isNode && credentialOrPipeline instanceof StorageSharedKeyCredential || credentialOrPipeline instanceof AnonymousCredential || isTokenCredential(credentialOrPipeline) ? newPipeline(credentialOrPipeline, options) : newPipeline(new AnonymousCredential, options), 
     super(url, pipeline), this.serviceContext = this.storageClientContext.service;
    }
    getContainerClient(containerName) {
     return new ContainerClient(appendToURLPath(this.url, encodeURIComponent(containerName)), this.pipeline);
    }
    async createContainer(containerName, options = {}) {
     return tracingClient.withSpan("BlobServiceClient-createContainer", options, (async updatedOptions => {
      const containerClient = this.getContainerClient(containerName), containerCreateResponse = await containerClient.create(updatedOptions);
      return {
       containerClient,
       containerCreateResponse
      };
     }));
    }
    async deleteContainer(containerName, options = {}) {
     return tracingClient.withSpan("BlobServiceClient-deleteContainer", options, (async updatedOptions => this.getContainerClient(containerName).delete(updatedOptions)));
    }
    async undeleteContainer(deletedContainerName, deletedContainerVersion, options = {}) {
     return tracingClient.withSpan("BlobServiceClient-undeleteContainer", options, (async updatedOptions => {
      const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName), containerContext = containerClient.storageClientContext.container;
      return {
       containerClient,
       containerUndeleteResponse: assertResponse(await containerContext.restore({
        deletedContainerName,
        deletedContainerVersion,
        tracingOptions: updatedOptions.tracingOptions
       }))
      };
     }));
    }
    async renameContainer(sourceContainerName, destinationContainerName, options = {}) {
     return tracingClient.withSpan("BlobServiceClient-renameContainer", options, (async updatedOptions => {
      var _a;
      const containerClient = this.getContainerClient(destinationContainerName), containerContext = containerClient.storageClientContext.container;
      return {
       containerClient,
       containerRenameResponse: assertResponse(await containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), {
        sourceLeaseId: null === (_a = options.sourceCondition) || void 0 === _a ? void 0 : _a.leaseId
       })))
      };
     }));
    }
    async getProperties(options = {}) {
     return tracingClient.withSpan("BlobServiceClient-getProperties", options, (async updatedOptions => assertResponse(await this.serviceContext.getProperties({
      abortSignal: options.abortSignal,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async setProperties(properties, options = {}) {
     return tracingClient.withSpan("BlobServiceClient-setProperties", options, (async updatedOptions => assertResponse(await this.serviceContext.setProperties(properties, {
      abortSignal: options.abortSignal,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async getStatistics(options = {}) {
     return tracingClient.withSpan("BlobServiceClient-getStatistics", options, (async updatedOptions => assertResponse(await this.serviceContext.getStatistics({
      abortSignal: options.abortSignal,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async getAccountInfo(options = {}) {
     return tracingClient.withSpan("BlobServiceClient-getAccountInfo", options, (async updatedOptions => assertResponse(await this.serviceContext.getAccountInfo({
      abortSignal: options.abortSignal,
      tracingOptions: updatedOptions.tracingOptions
     }))));
    }
    async listContainersSegment(marker, options = {}) {
     return tracingClient.withSpan("BlobServiceClient-listContainersSegment", options, (async updatedOptions => assertResponse(await this.serviceContext.listContainersSegment(Object.assign(Object.assign({
      abortSignal: options.abortSignal,
      marker
     }, options), {
      include: "string" == typeof options.include ? [ options.include ] : options.include,
      tracingOptions: updatedOptions.tracingOptions
     })))));
    }
    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {
     return tracingClient.withSpan("BlobServiceClient-findBlobsByTagsSegment", options, (async updatedOptions => {
      const response = assertResponse(await this.serviceContext.filterBlobs({
       abortSignal: options.abortSignal,
       where: tagFilterSqlExpression,
       marker,
       maxPageSize: options.maxPageSize,
       tracingOptions: updatedOptions.tracingOptions
      })), wrappedResponse = Object.assign(Object.assign({}, response), {
       _response: response._response,
       blobs: response.blobs.map((blob => {
        var _a;
        let tagValue = "";
        return 1 === (null === (_a = blob.tags) || void 0 === _a ? void 0 : _a.blobTagSet.length) && (tagValue = blob.tags.blobTagSet[0].value), 
        Object.assign(Object.assign({}, blob), {
         tags: toTags(blob.tags),
         tagValue
        });
       }))
      });
      return wrappedResponse;
     }));
    }
    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {
     return __asyncGenerator(this, arguments, (function*(tagFilterSqlExpression, marker, options = {}) {
      let response;
      if (marker || void 0 === marker) do {
       response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options)), 
       response.blobs = response.blobs || [], marker = response.continuationToken, yield yield __await(response);
      } while (marker);
     }));
    }
    findBlobsByTagsItems(tagFilterSqlExpression_1) {
     return __asyncGenerator(this, arguments, (function*(tagFilterSqlExpression, options = {}) {
      var _a, e_1, _b, _c;
      try {
       for (var _f, _d = !0, _e = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, undefined, options)); !(_a = (_f = yield __await(_e.next())).done); _d = !0) {
        _c = _f.value, _d = !1;
        const segment = _c;
        yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));
       }
      } catch (e_1_1) {
       e_1 = {
        error: e_1_1
       };
      } finally {
       try {
        _d || _a || !(_b = _e.return) || (yield __await(_b.call(_e)));
       } finally {
        if (e_1) throw e_1.error;
       }
      }
     }));
    }
    findBlobsByTags(tagFilterSqlExpression, options = {}) {
     const listSegmentOptions = Object.assign({}, options), iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
     return {
      next: () => iter.next(),
      [Symbol.asyncIterator]() {
       return this;
      },
      byPage: (settings = {}) => this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({
       maxPageSize: settings.maxPageSize
      }, listSegmentOptions))
     };
    }
    listSegments(marker_1) {
     return __asyncGenerator(this, arguments, (function*(marker, options = {}) {
      let listContainersSegmentResponse;
      if (marker || void 0 === marker) do {
       listContainersSegmentResponse = yield __await(this.listContainersSegment(marker, options)), 
       listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [], 
       marker = listContainersSegmentResponse.continuationToken, yield yield __await(yield __await(listContainersSegmentResponse));
      } while (marker);
     }));
    }
    listItems() {
     return __asyncGenerator(this, arguments, (function*(options = {}) {
      var _a, e_2, _b, _c;
      try {
       for (var _f, _d = !0, _e = __asyncValues(this.listSegments(undefined, options)); !(_a = (_f = yield __await(_e.next())).done); _d = !0) {
        _c = _f.value, _d = !1;
        const segment = _c;
        yield __await(yield* __asyncDelegator(__asyncValues(segment.containerItems)));
       }
      } catch (e_2_1) {
       e_2 = {
        error: e_2_1
       };
      } finally {
       try {
        _d || _a || !(_b = _e.return) || (yield __await(_b.call(_e)));
       } finally {
        if (e_2) throw e_2.error;
       }
      }
     }));
    }
    listContainers(options = {}) {
     "" === options.prefix && (options.prefix = void 0);
     const include = [];
     options.includeDeleted && include.push("deleted"), options.includeMetadata && include.push("metadata"), 
     options.includeSystem && include.push("system");
     const listSegmentOptions = Object.assign(Object.assign({}, options), include.length > 0 ? {
      include
     } : {}), iter = this.listItems(listSegmentOptions);
     return {
      next: () => iter.next(),
      [Symbol.asyncIterator]() {
       return this;
      },
      byPage: (settings = {}) => this.listSegments(settings.continuationToken, Object.assign({
       maxPageSize: settings.maxPageSize
      }, listSegmentOptions))
     };
    }
    async getUserDelegationKey(startsOn, expiresOn, options = {}) {
     return tracingClient.withSpan("BlobServiceClient-getUserDelegationKey", options, (async updatedOptions => {
      const response = assertResponse(await this.serviceContext.getUserDelegationKey({
       startsOn: truncatedISO8061Date(startsOn, !1),
       expiresOn: truncatedISO8061Date(expiresOn, !1)
      }, {
       abortSignal: options.abortSignal,
       tracingOptions: updatedOptions.tracingOptions
      })), userDelegationKey = {
       signedObjectId: response.signedObjectId,
       signedTenantId: response.signedTenantId,
       signedStartsOn: new Date(response.signedStartsOn),
       signedExpiresOn: new Date(response.signedExpiresOn),
       signedService: response.signedService,
       signedVersion: response.signedVersion,
       value: response.value
      };
      return Object.assign({
       _response: response._response,
       requestId: response.requestId,
       clientRequestId: response.clientRequestId,
       version: response.version,
       date: response.date,
       errorCode: response.errorCode
      }, userDelegationKey);
     }));
    }
    getBlobBatchClient() {
     return new BlobBatchClient(this.url, this.pipeline);
    }
    generateAccountSasUrl(expiresOn, permissions = AccountSASPermissions.parse("r"), resourceTypes = "sco", options = {}) {
     if (!(this.credential instanceof StorageSharedKeyCredential)) throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
     if (void 0 === expiresOn) {
      const now = new Date;
      expiresOn = new Date(now.getTime() + 36e5);
     }
     const sas = generateAccountSASQueryParameters(Object.assign({
      permissions,
      expiresOn,
      resourceTypes,
      services: AccountSASServices.parse("b").toString()
     }, options), this.credential).toString();
     return appendToURLQuery(this.url, sas);
    }
    generateSasStringToSign(expiresOn, permissions = AccountSASPermissions.parse("r"), resourceTypes = "sco", options = {}) {
     if (!(this.credential instanceof StorageSharedKeyCredential)) throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
     if (void 0 === expiresOn) {
      const now = new Date;
      expiresOn = new Date(now.getTime() + 36e5);
     }
     return generateAccountSASQueryParametersInternal(Object.assign({
      permissions,
      expiresOn,
      resourceTypes,
      services: AccountSASServices.parse("b").toString()
     }, options), this.credential).stringToSign;
    }
   }
   !function(KnownEncryptionAlgorithmType) {
    KnownEncryptionAlgorithmType.AES256 = "AES256";
   }(KnownEncryptionAlgorithmType || (KnownEncryptionAlgorithmType = {}));
  },
  165: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
   "use strict";
   __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
    ClientStreamingCall: () => ClientStreamingCall,
    Deferred: () => Deferred,
    DeferredState: () => DeferredState,
    DuplexStreamingCall: () => DuplexStreamingCall,
    RpcError: () => RpcError,
    RpcOutputStreamController: () => RpcOutputStreamController,
    ServerCallContextController: () => ServerCallContextController,
    ServerStreamingCall: () => ServerStreamingCall,
    ServiceType: () => ServiceType,
    TestTransport: () => TestTransport,
    UnaryCall: () => UnaryCall,
    mergeRpcOptions: () => mergeRpcOptions,
    readMethodOption: () => readMethodOption,
    readMethodOptions: () => readMethodOptions,
    readServiceOption: () => readServiceOption,
    stackClientStreamingInterceptors: () => stackClientStreamingInterceptors,
    stackDuplexStreamingInterceptors: () => stackDuplexStreamingInterceptors,
    stackIntercept: () => stackIntercept,
    stackServerStreamingInterceptors: () => stackServerStreamingInterceptors,
    stackUnaryInterceptors: () => stackUnaryInterceptors
   });
   var lower_camel_case = __webpack_require__(4502);
   function readMethodOptions(service, methodName, extensionName, extensionType) {
    var _a;
    const options = null === (_a = service.methods.find(((m, i) => m.localName === methodName || i === methodName))) || void 0 === _a ? void 0 : _a.options;
    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : void 0;
   }
   function readMethodOption(service, methodName, extensionName, extensionType) {
    var _a;
    const options = null === (_a = service.methods.find(((m, i) => m.localName === methodName || i === methodName))) || void 0 === _a ? void 0 : _a.options;
    if (!options) return;
    const optionVal = options[extensionName];
    return void 0 === optionVal ? optionVal : extensionType ? extensionType.fromJson(optionVal) : optionVal;
   }
   function readServiceOption(service, extensionName, extensionType) {
    const options = service.options;
    if (!options) return;
    const optionVal = options[extensionName];
    return void 0 === optionVal ? optionVal : extensionType ? extensionType.fromJson(optionVal) : optionVal;
   }
   class ServiceType {
    constructor(typeName, methods, options) {
     this.typeName = typeName, this.methods = methods.map((i => function(method, service) {
      var _a, _b, _c;
      let m = method;
      return m.service = service, m.localName = null !== (_a = m.localName) && void 0 !== _a ? _a : (0, 
      lower_camel_case.W)(m.name), m.serverStreaming = !!m.serverStreaming, m.clientStreaming = !!m.clientStreaming, 
      m.options = null !== (_b = m.options) && void 0 !== _b ? _b : {}, m.idempotency = null !== (_c = m.idempotency) && void 0 !== _c ? _c : void 0, 
      m;
     }(i, this))), this.options = null != options ? options : {};
    }
   }
   class RpcError extends Error {
    constructor(message, code = "UNKNOWN", meta) {
     super(message), this.name = "RpcError", Object.setPrototypeOf(this, new.target.prototype), 
     this.code = code, this.meta = null != meta ? meta : {};
    }
    toString() {
     const l = [ this.name + ": " + this.message ];
     this.code && (l.push(""), l.push("Code: " + this.code)), this.serviceName && this.methodName && l.push("Method: " + this.serviceName + "/" + this.methodName);
     let m = Object.entries(this.meta);
     if (m.length) {
      l.push(""), l.push("Meta:");
      for (let [k, v] of m) l.push(`  ${k}: ${v}`);
     }
     return l.join("\n");
    }
   }
   var DeferredState, json_format_contract = __webpack_require__(7568), binary_format_contract = __webpack_require__(7727);
   function mergeRpcOptions(defaults, options) {
    if (!options) return defaults;
    let o = {};
    copy(defaults, o), copy(options, o);
    for (let key of Object.keys(options)) {
     let val = options[key];
     switch (key) {
     case "jsonOptions":
      o.jsonOptions = (0, json_format_contract.Zc)(defaults.jsonOptions, o.jsonOptions);
      break;

     case "binaryOptions":
      o.binaryOptions = (0, binary_format_contract.Ix)(defaults.binaryOptions, o.binaryOptions);
      break;

     case "meta":
      o.meta = {}, copy(defaults.meta, o.meta), copy(options.meta, o.meta);
      break;

     case "interceptors":
      o.interceptors = defaults.interceptors ? defaults.interceptors.concat(val) : val.concat();
     }
    }
    return o;
   }
   function copy(a, into) {
    if (!a) return;
    let c = into;
    for (let [k, v] of Object.entries(a)) v instanceof Date ? c[k] = new Date(v.getTime()) : Array.isArray(v) ? c[k] = v.concat() : c[k] = v;
   }
   !function(DeferredState) {
    DeferredState[DeferredState.PENDING = 0] = "PENDING", DeferredState[DeferredState.REJECTED = 1] = "REJECTED", 
    DeferredState[DeferredState.RESOLVED = 2] = "RESOLVED";
   }(DeferredState || (DeferredState = {}));
   class Deferred {
    constructor(preventUnhandledRejectionWarning = !0) {
     this._state = DeferredState.PENDING, this._promise = new Promise(((resolve, reject) => {
      this._resolve = resolve, this._reject = reject;
     })), preventUnhandledRejectionWarning && this._promise.catch((_ => {}));
    }
    get state() {
     return this._state;
    }
    get promise() {
     return this._promise;
    }
    resolve(value) {
     if (this.state !== DeferredState.PENDING) throw new Error(`cannot resolve ${DeferredState[this.state].toLowerCase()}`);
     this._resolve(value), this._state = DeferredState.RESOLVED;
    }
    reject(reason) {
     if (this.state !== DeferredState.PENDING) throw new Error(`cannot reject ${DeferredState[this.state].toLowerCase()}`);
     this._reject(reason), this._state = DeferredState.REJECTED;
    }
    resolvePending(val) {
     this._state === DeferredState.PENDING && this.resolve(val);
    }
    rejectPending(reason) {
     this._state === DeferredState.PENDING && this.reject(reason);
    }
   }
   var assert = __webpack_require__(9917);
   class RpcOutputStreamController {
    constructor() {
     this._lis = {
      nxt: [],
      msg: [],
      err: [],
      cmp: []
     }, this._closed = !1, this._itState = {
      q: []
     };
    }
    onNext(callback) {
     return this.addLis(callback, this._lis.nxt);
    }
    onMessage(callback) {
     return this.addLis(callback, this._lis.msg);
    }
    onError(callback) {
     return this.addLis(callback, this._lis.err);
    }
    onComplete(callback) {
     return this.addLis(callback, this._lis.cmp);
    }
    addLis(callback, list) {
     return list.push(callback), () => {
      let i = list.indexOf(callback);
      i >= 0 && list.splice(i, 1);
     };
    }
    clearLis() {
     for (let l of Object.values(this._lis)) l.splice(0, l.length);
    }
    get closed() {
     return !1 !== this._closed;
    }
    notifyNext(message, error, complete) {
     (0, assert.vA)((message ? 1 : 0) + (error ? 1 : 0) + (complete ? 1 : 0) <= 1, "only one emission at a time"), 
     message && this.notifyMessage(message), error && this.notifyError(error), complete && this.notifyComplete();
    }
    notifyMessage(message) {
     (0, assert.vA)(!this.closed, "stream is closed"), this.pushIt({
      value: message,
      done: !1
     }), this._lis.msg.forEach((l => l(message))), this._lis.nxt.forEach((l => l(message, void 0, !1)));
    }
    notifyError(error) {
     (0, assert.vA)(!this.closed, "stream is closed"), this._closed = error, this.pushIt(error), 
     this._lis.err.forEach((l => l(error))), this._lis.nxt.forEach((l => l(void 0, error, !1))), 
     this.clearLis();
    }
    notifyComplete() {
     (0, assert.vA)(!this.closed, "stream is closed"), this._closed = !0, this.pushIt({
      value: null,
      done: !0
     }), this._lis.cmp.forEach((l => l())), this._lis.nxt.forEach((l => l(void 0, void 0, !0))), 
     this.clearLis();
    }
    [Symbol.asyncIterator]() {
     return !0 === this._closed ? this.pushIt({
      value: null,
      done: !0
     }) : !1 !== this._closed && this.pushIt(this._closed), {
      next: () => {
       let state = this._itState;
       (0, assert.vA)(state, "bad state"), (0, assert.vA)(!state.p, "iterator contract broken");
       let first = state.q.shift();
       return first ? "value" in first ? Promise.resolve(first) : Promise.reject(first) : (state.p = new Deferred, 
       state.p.promise);
      }
     };
    }
    pushIt(result) {
     let state = this._itState;
     if (state.p) {
      const p = state.p;
      (0, assert.vA)(p.state == DeferredState.PENDING, "iterator contract broken"), "value" in result ? p.resolve(result) : p.reject(result), 
      delete state.p;
     } else state.q.push(result);
    }
   }
   var __awaiter = function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   class UnaryCall {
    constructor(method, requestHeaders, request, headers, response, status, trailers) {
     this.method = method, this.requestHeaders = requestHeaders, this.request = request, 
     this.headers = headers, this.response = response, this.status = status, this.trailers = trailers;
    }
    then(onfulfilled, onrejected) {
     return this.promiseFinished().then((value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value), (reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason)));
    }
    promiseFinished() {
     return __awaiter(this, void 0, void 0, (function*() {
      let [headers, response, status, trailers] = yield Promise.all([ this.headers, this.response, this.status, this.trailers ]);
      return {
       method: this.method,
       requestHeaders: this.requestHeaders,
       request: this.request,
       headers,
       response,
       status,
       trailers
      };
     }));
    }
   }
   var server_streaming_call_awaiter = function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   class ServerStreamingCall {
    constructor(method, requestHeaders, request, headers, response, status, trailers) {
     this.method = method, this.requestHeaders = requestHeaders, this.request = request, 
     this.headers = headers, this.responses = response, this.status = status, this.trailers = trailers;
    }
    then(onfulfilled, onrejected) {
     return this.promiseFinished().then((value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value), (reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason)));
    }
    promiseFinished() {
     return server_streaming_call_awaiter(this, void 0, void 0, (function*() {
      let [headers, status, trailers] = yield Promise.all([ this.headers, this.status, this.trailers ]);
      return {
       method: this.method,
       requestHeaders: this.requestHeaders,
       request: this.request,
       headers,
       status,
       trailers
      };
     }));
    }
   }
   var client_streaming_call_awaiter = function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   class ClientStreamingCall {
    constructor(method, requestHeaders, request, headers, response, status, trailers) {
     this.method = method, this.requestHeaders = requestHeaders, this.requests = request, 
     this.headers = headers, this.response = response, this.status = status, this.trailers = trailers;
    }
    then(onfulfilled, onrejected) {
     return this.promiseFinished().then((value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value), (reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason)));
    }
    promiseFinished() {
     return client_streaming_call_awaiter(this, void 0, void 0, (function*() {
      let [headers, response, status, trailers] = yield Promise.all([ this.headers, this.response, this.status, this.trailers ]);
      return {
       method: this.method,
       requestHeaders: this.requestHeaders,
       headers,
       response,
       status,
       trailers
      };
     }));
    }
   }
   var duplex_streaming_call_awaiter = function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   class DuplexStreamingCall {
    constructor(method, requestHeaders, request, headers, response, status, trailers) {
     this.method = method, this.requestHeaders = requestHeaders, this.requests = request, 
     this.headers = headers, this.responses = response, this.status = status, this.trailers = trailers;
    }
    then(onfulfilled, onrejected) {
     return this.promiseFinished().then((value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value), (reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason)));
    }
    promiseFinished() {
     return duplex_streaming_call_awaiter(this, void 0, void 0, (function*() {
      let [headers, status, trailers] = yield Promise.all([ this.headers, this.status, this.trailers ]);
      return {
       method: this.method,
       requestHeaders: this.requestHeaders,
       headers,
       status,
       trailers
      };
     }));
    }
   }
   var test_transport_awaiter = function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))((function(resolve, reject) {
     function fulfilled(value) {
      try {
       step(generator.next(value));
      } catch (e) {
       reject(e);
      }
     }
     function rejected(value) {
      try {
       step(generator.throw(value));
      } catch (e) {
       reject(e);
      }
     }
     function step(result) {
      var value;
      result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P((function(resolve) {
       resolve(value);
      }))).then(fulfilled, rejected);
     }
     step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
   };
   class TestTransport {
    constructor(data) {
     this.suppressUncaughtRejections = !0, this.headerDelay = 10, this.responseDelay = 50, 
     this.betweenResponseDelay = 10, this.afterResponseDelay = 10, this.data = null != data ? data : {};
    }
    get sentMessages() {
     return this.lastInput instanceof TestInputStream ? this.lastInput.sent : "object" == typeof this.lastInput ? [ this.lastInput.single ] : [];
    }
    get sendComplete() {
     return this.lastInput instanceof TestInputStream ? this.lastInput.completed : "object" == typeof this.lastInput;
    }
    promiseHeaders() {
     var _a;
     const headers = null !== (_a = this.data.headers) && void 0 !== _a ? _a : TestTransport.defaultHeaders;
     return headers instanceof RpcError ? Promise.reject(headers) : Promise.resolve(headers);
    }
    promiseSingleResponse(method) {
     if (this.data.response instanceof RpcError) return Promise.reject(this.data.response);
     let r;
     return Array.isArray(this.data.response) ? ((0, assert.vA)(this.data.response.length > 0), 
     r = this.data.response[0]) : r = void 0 !== this.data.response ? this.data.response : method.O.create(), 
     (0, assert.vA)(method.O.is(r)), Promise.resolve(r);
    }
    streamResponses(method, stream, abort) {
     return test_transport_awaiter(this, void 0, void 0, (function*() {
      const messages = [];
      if (void 0 === this.data.response) messages.push(method.O.create()); else if (Array.isArray(this.data.response)) for (let msg of this.data.response) (0, 
      assert.vA)(method.O.is(msg)), messages.push(msg); else this.data.response instanceof RpcError || ((0, 
      assert.vA)(method.O.is(this.data.response)), messages.push(this.data.response));
      try {
       yield delay(this.responseDelay, abort)(void 0);
      } catch (error) {
       return void stream.notifyError(error);
      }
      if (this.data.response instanceof RpcError) stream.notifyError(this.data.response); else {
       for (let msg of messages) {
        stream.notifyMessage(msg);
        try {
         yield delay(this.betweenResponseDelay, abort)(void 0);
        } catch (error) {
         return void stream.notifyError(error);
        }
       }
       this.data.status instanceof RpcError ? stream.notifyError(this.data.status) : this.data.trailers instanceof RpcError ? stream.notifyError(this.data.trailers) : stream.notifyComplete();
      }
     }));
    }
    promiseStatus() {
     var _a;
     const status = null !== (_a = this.data.status) && void 0 !== _a ? _a : TestTransport.defaultStatus;
     return status instanceof RpcError ? Promise.reject(status) : Promise.resolve(status);
    }
    promiseTrailers() {
     var _a;
     const trailers = null !== (_a = this.data.trailers) && void 0 !== _a ? _a : TestTransport.defaultTrailers;
     return trailers instanceof RpcError ? Promise.reject(trailers) : Promise.resolve(trailers);
    }
    maybeSuppressUncaught(...promise) {
     if (this.suppressUncaughtRejections) for (let p of promise) p.catch((() => {}));
    }
    mergeOptions(options) {
     return mergeRpcOptions({}, options);
    }
    unary(method, input, options) {
     var _a;
     const requestHeaders = null !== (_a = options.meta) && void 0 !== _a ? _a : {}, headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)), responsePromise = headersPromise.catch((_ => {})).then(delay(this.responseDelay, options.abort)).then((_ => this.promiseSingleResponse(method))), statusPromise = responsePromise.catch((_ => {})).then(delay(this.afterResponseDelay, options.abort)).then((_ => this.promiseStatus())), trailersPromise = responsePromise.catch((_ => {})).then(delay(this.afterResponseDelay, options.abort)).then((_ => this.promiseTrailers()));
     return this.maybeSuppressUncaught(statusPromise, trailersPromise), this.lastInput = {
      single: input
     }, new UnaryCall(method, requestHeaders, input, headersPromise, responsePromise, statusPromise, trailersPromise);
    }
    serverStreaming(method, input, options) {
     var _a;
     const requestHeaders = null !== (_a = options.meta) && void 0 !== _a ? _a : {}, headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)), outputStream = new RpcOutputStreamController, responseStreamClosedPromise = headersPromise.then(delay(this.responseDelay, options.abort)).catch((() => {})).then((() => this.streamResponses(method, outputStream, options.abort))).then(delay(this.afterResponseDelay, options.abort)), statusPromise = responseStreamClosedPromise.then((() => this.promiseStatus())), trailersPromise = responseStreamClosedPromise.then((() => this.promiseTrailers()));
     return this.maybeSuppressUncaught(statusPromise, trailersPromise), this.lastInput = {
      single: input
     }, new ServerStreamingCall(method, requestHeaders, input, headersPromise, outputStream, statusPromise, trailersPromise);
    }
    clientStreaming(method, options) {
     var _a;
     const requestHeaders = null !== (_a = options.meta) && void 0 !== _a ? _a : {}, headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)), responsePromise = headersPromise.catch((_ => {})).then(delay(this.responseDelay, options.abort)).then((_ => this.promiseSingleResponse(method))), statusPromise = responsePromise.catch((_ => {})).then(delay(this.afterResponseDelay, options.abort)).then((_ => this.promiseStatus())), trailersPromise = responsePromise.catch((_ => {})).then(delay(this.afterResponseDelay, options.abort)).then((_ => this.promiseTrailers()));
     return this.maybeSuppressUncaught(statusPromise, trailersPromise), this.lastInput = new TestInputStream(this.data, options.abort), 
     new ClientStreamingCall(method, requestHeaders, this.lastInput, headersPromise, responsePromise, statusPromise, trailersPromise);
    }
    duplex(method, options) {
     var _a;
     const requestHeaders = null !== (_a = options.meta) && void 0 !== _a ? _a : {}, headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)), outputStream = new RpcOutputStreamController, responseStreamClosedPromise = headersPromise.then(delay(this.responseDelay, options.abort)).catch((() => {})).then((() => this.streamResponses(method, outputStream, options.abort))).then(delay(this.afterResponseDelay, options.abort)), statusPromise = responseStreamClosedPromise.then((() => this.promiseStatus())), trailersPromise = responseStreamClosedPromise.then((() => this.promiseTrailers()));
     return this.maybeSuppressUncaught(statusPromise, trailersPromise), this.lastInput = new TestInputStream(this.data, options.abort), 
     new DuplexStreamingCall(method, requestHeaders, this.lastInput, headersPromise, outputStream, statusPromise, trailersPromise);
    }
   }
   function delay(ms, abort) {
    return v => new Promise(((resolve, reject) => {
     if (null == abort ? void 0 : abort.aborted) reject(new RpcError("user cancel", "CANCELLED")); else {
      const id = setTimeout((() => resolve(v)), ms);
      abort && abort.addEventListener("abort", (ev => {
       clearTimeout(id), reject(new RpcError("user cancel", "CANCELLED"));
      }));
     }
    }));
   }
   TestTransport.defaultHeaders = {
    responseHeader: "test"
   }, TestTransport.defaultStatus = {
    code: "OK",
    detail: "all good"
   }, TestTransport.defaultTrailers = {
    responseTrailer: "test"
   };
   class TestInputStream {
    constructor(data, abort) {
     this._completed = !1, this._sent = [], this.data = data, this.abort = abort;
    }
    get sent() {
     return this._sent;
    }
    get completed() {
     return this._completed;
    }
    send(message) {
     if (this.data.inputMessage instanceof RpcError) return Promise.reject(this.data.inputMessage);
     const delayMs = void 0 === this.data.inputMessage ? 10 : this.data.inputMessage;
     return Promise.resolve(void 0).then((() => {
      this._sent.push(message);
     })).then(delay(delayMs, this.abort));
    }
    complete() {
     if (this.data.inputComplete instanceof RpcError) return Promise.reject(this.data.inputComplete);
     const delayMs = void 0 === this.data.inputComplete ? 10 : this.data.inputComplete;
     return Promise.resolve(void 0).then((() => {
      this._completed = !0;
     })).then(delay(delayMs, this.abort));
    }
   }
   function stackIntercept(kind, transport, method, options, input) {
    var _a, _b, _c, _d;
    if ("unary" == kind) {
     let tail = (mtd, inp, opt) => transport.unary(mtd, inp, opt);
     for (const curr of (null !== (_a = options.interceptors) && void 0 !== _a ? _a : []).filter((i => i.interceptUnary)).reverse()) {
      const next = tail;
      tail = (mtd, inp, opt) => curr.interceptUnary(next, mtd, inp, opt);
     }
     return tail(method, input, options);
    }
    if ("serverStreaming" == kind) {
     let tail = (mtd, inp, opt) => transport.serverStreaming(mtd, inp, opt);
     for (const curr of (null !== (_b = options.interceptors) && void 0 !== _b ? _b : []).filter((i => i.interceptServerStreaming)).reverse()) {
      const next = tail;
      tail = (mtd, inp, opt) => curr.interceptServerStreaming(next, mtd, inp, opt);
     }
     return tail(method, input, options);
    }
    if ("clientStreaming" == kind) {
     let tail = (mtd, opt) => transport.clientStreaming(mtd, opt);
     for (const curr of (null !== (_c = options.interceptors) && void 0 !== _c ? _c : []).filter((i => i.interceptClientStreaming)).reverse()) {
      const next = tail;
      tail = (mtd, opt) => curr.interceptClientStreaming(next, mtd, opt);
     }
     return tail(method, options);
    }
    if ("duplex" == kind) {
     let tail = (mtd, opt) => transport.duplex(mtd, opt);
     for (const curr of (null !== (_d = options.interceptors) && void 0 !== _d ? _d : []).filter((i => i.interceptDuplex)).reverse()) {
      const next = tail;
      tail = (mtd, opt) => curr.interceptDuplex(next, mtd, opt);
     }
     return tail(method, options);
    }
    (0, assert.xb)(kind);
   }
   function stackUnaryInterceptors(transport, method, input, options) {
    return stackIntercept("unary", transport, method, options, input);
   }
   function stackServerStreamingInterceptors(transport, method, input, options) {
    return stackIntercept("serverStreaming", transport, method, options, input);
   }
   function stackClientStreamingInterceptors(transport, method, options) {
    return stackIntercept("clientStreaming", transport, method, options);
   }
   function stackDuplexStreamingInterceptors(transport, method, options) {
    return stackIntercept("duplex", transport, method, options);
   }
   class ServerCallContextController {
    constructor(method, headers, deadline, sendResponseHeadersFn, defaultStatus = {
     code: "OK",
     detail: ""
    }) {
     this._cancelled = !1, this._listeners = [], this.method = method, this.headers = headers, 
     this.deadline = deadline, this.trailers = {}, this._sendRH = sendResponseHeadersFn, 
     this.status = defaultStatus;
    }
    notifyCancelled() {
     if (!this._cancelled) {
      this._cancelled = !0;
      for (let l of this._listeners) l();
     }
    }
    sendResponseHeaders(data) {
     this._sendRH(data);
    }
    get cancelled() {
     return this._cancelled;
    }
    onCancel(callback) {
     const l = this._listeners;
     return l.push(callback), () => {
      let i = l.indexOf(callback);
      i >= 0 && l.splice(i, 1);
     };
    }
   }
  },
  9917: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
   "use strict";
   function assert(condition, msg) {
    if (!condition) throw new Error(msg);
   }
   function assertNever(value, msg) {
    throw new Error(null != msg ? msg : "Unexpected object: " + value);
   }
   __webpack_require__.d(__webpack_exports__, {
    bn: () => assertInt32,
    e1: () => assertUInt32,
    vA: () => assert,
    wO: () => assertFloat32,
    xb: () => assertNever
   });
   const FLOAT32_MAX = 34028234663852886e22, FLOAT32_MIN = -34028234663852886e22, UINT32_MAX = 4294967295, INT32_MAX = 2147483647, INT32_MIN = -2147483648;
   function assertInt32(arg) {
    if ("number" != typeof arg) throw new Error("invalid int 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN) throw new Error("invalid int 32: " + arg);
   }
   function assertUInt32(arg) {
    if ("number" != typeof arg) throw new Error("invalid uint 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0) throw new Error("invalid uint 32: " + arg);
   }
   function assertFloat32(arg) {
    if ("number" != typeof arg) throw new Error("invalid float 32: " + typeof arg);
    if (Number.isFinite(arg) && (arg > FLOAT32_MAX || arg < FLOAT32_MIN)) throw new Error("invalid float 32: " + arg);
   }
  },
  7727: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
   "use strict";
   var UnknownFieldHandler, WireType;
   function mergeBinaryOptions(a, b) {
    return Object.assign(Object.assign({}, a), b);
   }
   __webpack_require__.d(__webpack_exports__, {
    Ix: () => mergeBinaryOptions,
    O0: () => WireType,
    f$: () => UnknownFieldHandler
   }), function(UnknownFieldHandler) {
    UnknownFieldHandler.symbol = Symbol.for("protobuf-ts/unknown"), UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {
     (is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = []).push({
      no: fieldNo,
      wireType,
      data
     });
    }, UnknownFieldHandler.onWrite = (typeName, message, writer) => {
     for (let {no, wireType, data} of UnknownFieldHandler.list(message)) writer.tag(no, wireType).raw(data);
    }, UnknownFieldHandler.list = (message, fieldNo) => {
     if (is(message)) {
      let all = message[UnknownFieldHandler.symbol];
      return fieldNo ? all.filter((uf => uf.no == fieldNo)) : all;
     }
     return [];
    }, UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];
    const is = message => message && Array.isArray(message[UnknownFieldHandler.symbol]);
   }(UnknownFieldHandler || (UnknownFieldHandler = {})), function(WireType) {
    WireType[WireType.Varint = 0] = "Varint", WireType[WireType.Bit64 = 1] = "Bit64", 
    WireType[WireType.LengthDelimited = 2] = "LengthDelimited", WireType[WireType.StartGroup = 3] = "StartGroup", 
    WireType[WireType.EndGroup = 4] = "EndGroup", WireType[WireType.Bit32 = 5] = "Bit32";
   }(WireType || (WireType = {}));
  },
  7876: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
   "use strict";
   function typeofJsonValue(value) {
    let t = typeof value;
    if ("object" == t) {
     if (Array.isArray(value)) return "array";
     if (null === value) return "null";
    }
    return t;
   }
   function isJsonObject(value) {
    return null !== value && "object" == typeof value && !Array.isArray(value);
   }
   __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
    BinaryReader: () => BinaryReader,
    BinaryWriter: () => BinaryWriter,
    LongType: () => LongType,
    MESSAGE_TYPE: () => MESSAGE_TYPE,
    MessageType: () => MessageType,
    PbLong: () => PbLong,
    PbULong: () => PbULong,
    ReflectionBinaryReader: () => ReflectionBinaryReader,
    ReflectionBinaryWriter: () => ReflectionBinaryWriter,
    ReflectionJsonReader: () => ReflectionJsonReader,
    ReflectionJsonWriter: () => ReflectionJsonWriter,
    ReflectionTypeCheck: () => ReflectionTypeCheck,
    RepeatType: () => RepeatType,
    ScalarType: () => ScalarType,
    UnknownFieldHandler: () => binary_format_contract.f$,
    WireType: () => binary_format_contract.O0,
    assert: () => assert.vA,
    assertFloat32: () => assert.wO,
    assertInt32: () => assert.bn,
    assertNever: () => assert.xb,
    assertUInt32: () => assert.e1,
    base64decode: () => base64decode,
    base64encode: () => base64encode,
    binaryReadOptions: () => binaryReadOptions,
    binaryWriteOptions: () => binaryWriteOptions,
    clearOneofValue: () => clearOneofValue,
    containsMessageType: () => containsMessageType,
    getOneofValue: () => getOneofValue,
    getSelectedOneofValue: () => getSelectedOneofValue,
    isEnumObject: () => isEnumObject,
    isJsonObject: () => isJsonObject,
    isOneofGroup: () => isOneofGroup,
    jsonReadOptions: () => json_format_contract.bm,
    jsonWriteOptions: () => json_format_contract.yG,
    listEnumNames: () => listEnumNames,
    listEnumNumbers: () => listEnumNumbers,
    listEnumValues: () => listEnumValues,
    lowerCamelCase: () => lower_camel_case.W,
    mergeBinaryOptions: () => binary_format_contract.Ix,
    mergeJsonOptions: () => json_format_contract.Zc,
    normalizeFieldInfo: () => normalizeFieldInfo,
    readFieldOption: () => readFieldOption,
    readFieldOptions: () => readFieldOptions,
    readMessageOption: () => readMessageOption,
    reflectionCreate: () => reflectionCreate,
    reflectionEquals: () => reflectionEquals,
    reflectionMergePartial: () => reflectionMergePartial,
    reflectionScalarDefault: () => reflectionScalarDefault,
    setOneofValue: () => setOneofValue,
    typeofJsonValue: () => typeofJsonValue,
    utf8read: () => utf8read
   });
   let encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""), decTable = [];
   for (let i = 0; i < encTable.length; i++) decTable[encTable[i].charCodeAt(0)] = i;
   function base64decode(base64Str) {
    let es = 3 * base64Str.length / 4;
    "=" == base64Str[base64Str.length - 2] ? es -= 2 : "=" == base64Str[base64Str.length - 1] && (es -= 1);
    let b, bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, p = 0;
    for (let i = 0; i < base64Str.length; i++) {
     if (b = decTable[base64Str.charCodeAt(i)], void 0 === b) switch (base64Str[i]) {
     case "=":
      groupPos = 0;

     case "\n":
     case "\r":
     case "\t":
     case " ":
      continue;

     default:
      throw Error("invalid base64 string.");
     }
     switch (groupPos) {
     case 0:
      p = b, groupPos = 1;
      break;

     case 1:
      bytes[bytePos++] = p << 2 | (48 & b) >> 4, p = b, groupPos = 2;
      break;

     case 2:
      bytes[bytePos++] = (15 & p) << 4 | (60 & b) >> 2, p = b, groupPos = 3;
      break;

     case 3:
      bytes[bytePos++] = (3 & p) << 6 | b, groupPos = 0;
     }
    }
    if (1 == groupPos) throw Error("invalid base64 string.");
    return bytes.subarray(0, bytePos);
   }
   function base64encode(bytes) {
    let b, base64 = "", groupPos = 0, p = 0;
    for (let i = 0; i < bytes.length; i++) switch (b = bytes[i], groupPos) {
    case 0:
     base64 += encTable[b >> 2], p = (3 & b) << 4, groupPos = 1;
     break;

    case 1:
     base64 += encTable[p | b >> 4], p = (15 & b) << 2, groupPos = 2;
     break;

    case 2:
     base64 += encTable[p | b >> 6], base64 += encTable[63 & b], groupPos = 0;
    }
    return groupPos && (base64 += encTable[p], base64 += "=", 1 == groupPos && (base64 += "=")), 
    base64;
   }
   decTable["-".charCodeAt(0)] = encTable.indexOf("+"), decTable["_".charCodeAt(0)] = encTable.indexOf("/");
   const fromCharCodes = chunk => String.fromCharCode.apply(String, chunk);
   function utf8read(bytes) {
    if (bytes.length < 1) return "";
    let t, pos = 0, parts = [], chunk = [], i = 0, len = bytes.length;
    for (;pos < len; ) t = bytes[pos++], t < 128 ? chunk[i++] = t : t > 191 && t < 224 ? chunk[i++] = (31 & t) << 6 | 63 & bytes[pos++] : t > 239 && t < 365 ? (t = ((7 & t) << 18 | (63 & bytes[pos++]) << 12 | (63 & bytes[pos++]) << 6 | 63 & bytes[pos++]) - 65536, 
    chunk[i++] = 55296 + (t >> 10), chunk[i++] = 56320 + (1023 & t)) : chunk[i++] = (15 & t) << 12 | (63 & bytes[pos++]) << 6 | 63 & bytes[pos++], 
    i > 8191 && (parts.push(fromCharCodes(chunk)), i = 0);
    return parts.length ? (i && parts.push(fromCharCodes(chunk.slice(0, i))), parts.join("")) : fromCharCodes(chunk.slice(0, i));
   }
   var binary_format_contract = __webpack_require__(7727);
   function varint64read() {
    let lowBits = 0, highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
     let b = this.buf[this.pos++];
     if (lowBits |= (127 & b) << shift, !(128 & b)) return this.assertBounds(), [ lowBits, highBits ];
    }
    let middleByte = this.buf[this.pos++];
    if (lowBits |= (15 & middleByte) << 28, highBits = (112 & middleByte) >> 4, !(128 & middleByte)) return this.assertBounds(), 
    [ lowBits, highBits ];
    for (let shift = 3; shift <= 31; shift += 7) {
     let b = this.buf[this.pos++];
     if (highBits |= (127 & b) << shift, !(128 & b)) return this.assertBounds(), [ lowBits, highBits ];
    }
    throw new Error("invalid varint");
   }
   function varint64write(lo, hi, bytes) {
    for (let i = 0; i < 28; i += 7) {
     const shift = lo >>> i, hasNext = !(shift >>> 7 == 0 && 0 == hi), byte = 255 & (hasNext ? 128 | shift : shift);
     if (bytes.push(byte), !hasNext) return;
    }
    const splitBits = lo >>> 28 & 15 | (7 & hi) << 4, hasMoreBits = !!(hi >> 3);
    if (bytes.push(255 & (hasMoreBits ? 128 | splitBits : splitBits)), hasMoreBits) {
     for (let i = 3; i < 31; i += 7) {
      const shift = hi >>> i, hasNext = !(shift >>> 7 == 0), byte = 255 & (hasNext ? 128 | shift : shift);
      if (bytes.push(byte), !hasNext) return;
     }
     bytes.push(hi >>> 31 & 1);
    }
   }
   function int64fromString(dec) {
    let minus = "-" == dec[0];
    minus && (dec = dec.slice(1));
    let lowBits = 0, highBits = 0;
    function add1e6digit(begin, end) {
     const digit1e6 = Number(dec.slice(begin, end));
     highBits *= 1e6, lowBits = 1e6 * lowBits + digit1e6, lowBits >= 4294967296 && (highBits += lowBits / 4294967296 | 0, 
     lowBits %= 4294967296);
    }
    return add1e6digit(-24, -18), add1e6digit(-18, -12), add1e6digit(-12, -6), add1e6digit(-6), 
    [ minus, lowBits, highBits ];
   }
   function int64toString(bitsLow, bitsHigh) {
    if (bitsHigh >>> 0 <= 2097151) return "" + (4294967296 * bitsHigh + (bitsLow >>> 0));
    let mid = (bitsLow >>> 24 | bitsHigh << 8) >>> 0 & 16777215, high = bitsHigh >> 16 & 65535, digitA = (16777215 & bitsLow) + 6777216 * mid + 6710656 * high, digitB = mid + 8147497 * high, digitC = 2 * high, base = 1e7;
    function decimalFrom1e7(digit1e7, needLeadingZeros) {
     let partial = digit1e7 ? String(digit1e7) : "";
     return needLeadingZeros ? "0000000".slice(partial.length) + partial : partial;
    }
    return digitA >= base && (digitB += Math.floor(digitA / base), digitA %= base), 
    digitB >= base && (digitC += Math.floor(digitB / base), digitB %= base), decimalFrom1e7(digitC, 0) + decimalFrom1e7(digitB, digitC) + decimalFrom1e7(digitA, 1);
   }
   function varint32write(value, bytes) {
    if (value >= 0) {
     for (;value > 127; ) bytes.push(127 & value | 128), value >>>= 7;
     bytes.push(value);
    } else {
     for (let i = 0; i < 9; i++) bytes.push(127 & value | 128), value >>= 7;
     bytes.push(1);
    }
   }
   function varint32read() {
    let b = this.buf[this.pos++], result = 127 & b;
    if (!(128 & b)) return this.assertBounds(), result;
    if (b = this.buf[this.pos++], result |= (127 & b) << 7, !(128 & b)) return this.assertBounds(), 
    result;
    if (b = this.buf[this.pos++], result |= (127 & b) << 14, !(128 & b)) return this.assertBounds(), 
    result;
    if (b = this.buf[this.pos++], result |= (127 & b) << 21, !(128 & b)) return this.assertBounds(), 
    result;
    b = this.buf[this.pos++], result |= (15 & b) << 28;
    for (let readBytes = 5; 128 & b && readBytes < 10; readBytes++) b = this.buf[this.pos++];
    if (128 & b) throw new Error("invalid varint");
    return this.assertBounds(), result >>> 0;
   }
   let BI;
   function assertBi(bi) {
    if (!bi) throw new Error("BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support");
   }
   !function() {
    const dv = new DataView(new ArrayBuffer(8)), ok = void 0 !== globalThis.BigInt && "function" == typeof dv.getBigInt64 && "function" == typeof dv.getBigUint64 && "function" == typeof dv.setBigInt64 && "function" == typeof dv.setBigUint64;
    BI = ok ? {
     MIN: BigInt("-9223372036854775808"),
     MAX: BigInt("9223372036854775807"),
     UMIN: BigInt("0"),
     UMAX: BigInt("18446744073709551615"),
     C: BigInt,
     V: dv
    } : void 0;
   }();
   const RE_DECIMAL_STR = /^-?[0-9]+$/;
   class SharedPbLong {
    constructor(lo, hi) {
     this.lo = 0 | lo, this.hi = 0 | hi;
    }
    isZero() {
     return 0 == this.lo && 0 == this.hi;
    }
    toNumber() {
     let result = 4294967296 * this.hi + (this.lo >>> 0);
     if (!Number.isSafeInteger(result)) throw new Error("cannot convert to safe number");
     return result;
    }
   }
   class PbULong extends SharedPbLong {
    static from(value) {
     if (BI) switch (typeof value) {
     case "string":
      if ("0" == value) return this.ZERO;
      if ("" == value) throw new Error("string is no integer");
      value = BI.C(value);

     case "number":
      if (0 === value) return this.ZERO;
      value = BI.C(value);

     case "bigint":
      if (!value) return this.ZERO;
      if (value < BI.UMIN) throw new Error("signed value for ulong");
      if (value > BI.UMAX) throw new Error("ulong too large");
      return BI.V.setBigUint64(0, value, !0), new PbULong(BI.V.getInt32(0, !0), BI.V.getInt32(4, !0));
     } else switch (typeof value) {
     case "string":
      if ("0" == value) return this.ZERO;
      if (value = value.trim(), !RE_DECIMAL_STR.test(value)) throw new Error("string is no integer");
      let [minus, lo, hi] = int64fromString(value);
      if (minus) throw new Error("signed value for ulong");
      return new PbULong(lo, hi);

     case "number":
      if (0 == value) return this.ZERO;
      if (!Number.isSafeInteger(value)) throw new Error("number is no integer");
      if (value < 0) throw new Error("signed value for ulong");
      return new PbULong(value, value / 4294967296);
     }
     throw new Error("unknown value " + typeof value);
    }
    toString() {
     return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);
    }
    toBigInt() {
     return assertBi(BI), BI.V.setInt32(0, this.lo, !0), BI.V.setInt32(4, this.hi, !0), 
     BI.V.getBigUint64(0, !0);
    }
   }
   PbULong.ZERO = new PbULong(0, 0);
   class PbLong extends SharedPbLong {
    static from(value) {
     if (BI) switch (typeof value) {
     case "string":
      if ("0" == value) return this.ZERO;
      if ("" == value) throw new Error("string is no integer");
      value = BI.C(value);

     case "number":
      if (0 === value) return this.ZERO;
      value = BI.C(value);

     case "bigint":
      if (!value) return this.ZERO;
      if (value < BI.MIN) throw new Error("signed long too small");
      if (value > BI.MAX) throw new Error("signed long too large");
      return BI.V.setBigInt64(0, value, !0), new PbLong(BI.V.getInt32(0, !0), BI.V.getInt32(4, !0));
     } else switch (typeof value) {
     case "string":
      if ("0" == value) return this.ZERO;
      if (value = value.trim(), !RE_DECIMAL_STR.test(value)) throw new Error("string is no integer");
      let [minus, lo, hi] = int64fromString(value);
      if (minus) {
       if (hi > 2147483648 || 2147483648 == hi && 0 != lo) throw new Error("signed long too small");
      } else if (hi >= 2147483648) throw new Error("signed long too large");
      let pbl = new PbLong(lo, hi);
      return minus ? pbl.negate() : pbl;

     case "number":
      if (0 == value) return this.ZERO;
      if (!Number.isSafeInteger(value)) throw new Error("number is no integer");
      return value > 0 ? new PbLong(value, value / 4294967296) : new PbLong(-value, -value / 4294967296).negate();
     }
     throw new Error("unknown value " + typeof value);
    }
    isNegative() {
     return !!(2147483648 & this.hi);
    }
    negate() {
     let hi = ~this.hi, lo = this.lo;
     return lo ? lo = 1 + ~lo : hi += 1, new PbLong(lo, hi);
    }
    toString() {
     if (BI) return this.toBigInt().toString();
     if (this.isNegative()) {
      let n = this.negate();
      return "-" + int64toString(n.lo, n.hi);
     }
     return int64toString(this.lo, this.hi);
    }
    toBigInt() {
     return assertBi(BI), BI.V.setInt32(0, this.lo, !0), BI.V.setInt32(4, this.hi, !0), 
     BI.V.getBigInt64(0, !0);
    }
   }
   PbLong.ZERO = new PbLong(0, 0);
   const defaultsRead = {
    readUnknownField: !0,
    readerFactory: bytes => new BinaryReader(bytes)
   };
   function binaryReadOptions(options) {
    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;
   }
   class BinaryReader {
    constructor(buf, textDecoder) {
     this.varint64 = varint64read, this.uint32 = varint32read, this.buf = buf, this.len = buf.length, 
     this.pos = 0, this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength), 
     this.textDecoder = null != textDecoder ? textDecoder : new TextDecoder("utf-8", {
      fatal: !0,
      ignoreBOM: !0
     });
    }
    tag() {
     let tag = this.uint32(), fieldNo = tag >>> 3, wireType = 7 & tag;
     if (fieldNo <= 0 || wireType < 0 || wireType > 5) throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
     return [ fieldNo, wireType ];
    }
    skip(wireType) {
     let start = this.pos;
     switch (wireType) {
     case binary_format_contract.O0.Varint:
      for (;128 & this.buf[this.pos++]; ) ;
      break;

     case binary_format_contract.O0.Bit64:
      this.pos += 4;

     case binary_format_contract.O0.Bit32:
      this.pos += 4;
      break;

     case binary_format_contract.O0.LengthDelimited:
      let len = this.uint32();
      this.pos += len;
      break;

     case binary_format_contract.O0.StartGroup:
      let t;
      for (;(t = this.tag()[1]) !== binary_format_contract.O0.EndGroup; ) this.skip(t);
      break;

     default:
      throw new Error("cant skip wire type " + wireType);
     }
     return this.assertBounds(), this.buf.subarray(start, this.pos);
    }
    assertBounds() {
     if (this.pos > this.len) throw new RangeError("premature EOF");
    }
    int32() {
     return 0 | this.uint32();
    }
    sint32() {
     let zze = this.uint32();
     return zze >>> 1 ^ -(1 & zze);
    }
    int64() {
     return new PbLong(...this.varint64());
    }
    uint64() {
     return new PbULong(...this.varint64());
    }
    sint64() {
     let [lo, hi] = this.varint64(), s = -(1 & lo);
     return lo = (lo >>> 1 | (1 & hi) << 31) ^ s, hi = hi >>> 1 ^ s, new PbLong(lo, hi);
    }
    bool() {
     let [lo, hi] = this.varint64();
     return 0 !== lo || 0 !== hi;
    }
    fixed32() {
     return this.view.getUint32((this.pos += 4) - 4, !0);
    }
    sfixed32() {
     return this.view.getInt32((this.pos += 4) - 4, !0);
    }
    fixed64() {
     return new PbULong(this.sfixed32(), this.sfixed32());
    }
    sfixed64() {
     return new PbLong(this.sfixed32(), this.sfixed32());
    }
    float() {
     return this.view.getFloat32((this.pos += 4) - 4, !0);
    }
    double() {
     return this.view.getFloat64((this.pos += 8) - 8, !0);
    }
    bytes() {
     let len = this.uint32(), start = this.pos;
     return this.pos += len, this.assertBounds(), this.buf.subarray(start, start + len);
    }
    string() {
     return this.textDecoder.decode(this.bytes());
    }
   }
   var assert = __webpack_require__(9917);
   const defaultsWrite = {
    writeUnknownFields: !0,
    writerFactory: () => new BinaryWriter
   };
   function binaryWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;
   }
   class BinaryWriter {
    constructor(textEncoder) {
     this.stack = [], this.textEncoder = null != textEncoder ? textEncoder : new TextEncoder, 
     this.chunks = [], this.buf = [];
    }
    finish() {
     this.chunks.push(new Uint8Array(this.buf));
     let len = 0;
     for (let i = 0; i < this.chunks.length; i++) len += this.chunks[i].length;
     let bytes = new Uint8Array(len), offset = 0;
     for (let i = 0; i < this.chunks.length; i++) bytes.set(this.chunks[i], offset), 
     offset += this.chunks[i].length;
     return this.chunks = [], bytes;
    }
    fork() {
     return this.stack.push({
      chunks: this.chunks,
      buf: this.buf
     }), this.chunks = [], this.buf = [], this;
    }
    join() {
     let chunk = this.finish(), prev = this.stack.pop();
     if (!prev) throw new Error("invalid state, fork stack empty");
     return this.chunks = prev.chunks, this.buf = prev.buf, this.uint32(chunk.byteLength), 
     this.raw(chunk);
    }
    tag(fieldNo, type) {
     return this.uint32((fieldNo << 3 | type) >>> 0);
    }
    raw(chunk) {
     return this.buf.length && (this.chunks.push(new Uint8Array(this.buf)), this.buf = []), 
     this.chunks.push(chunk), this;
    }
    uint32(value) {
     for ((0, assert.e1)(value); value > 127; ) this.buf.push(127 & value | 128), value >>>= 7;
     return this.buf.push(value), this;
    }
    int32(value) {
     return (0, assert.bn)(value), varint32write(value, this.buf), this;
    }
    bool(value) {
     return this.buf.push(value ? 1 : 0), this;
    }
    bytes(value) {
     return this.uint32(value.byteLength), this.raw(value);
    }
    string(value) {
     let chunk = this.textEncoder.encode(value);
     return this.uint32(chunk.byteLength), this.raw(chunk);
    }
    float(value) {
     (0, assert.wO)(value);
     let chunk = new Uint8Array(4);
     return new DataView(chunk.buffer).setFloat32(0, value, !0), this.raw(chunk);
    }
    double(value) {
     let chunk = new Uint8Array(8);
     return new DataView(chunk.buffer).setFloat64(0, value, !0), this.raw(chunk);
    }
    fixed32(value) {
     (0, assert.e1)(value);
     let chunk = new Uint8Array(4);
     return new DataView(chunk.buffer).setUint32(0, value, !0), this.raw(chunk);
    }
    sfixed32(value) {
     (0, assert.bn)(value);
     let chunk = new Uint8Array(4);
     return new DataView(chunk.buffer).setInt32(0, value, !0), this.raw(chunk);
    }
    sint32(value) {
     return (0, assert.bn)(value), varint32write(value = (value << 1 ^ value >> 31) >>> 0, this.buf), 
     this;
    }
    sfixed64(value) {
     let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), long = PbLong.from(value);
     return view.setInt32(0, long.lo, !0), view.setInt32(4, long.hi, !0), this.raw(chunk);
    }
    fixed64(value) {
     let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), long = PbULong.from(value);
     return view.setInt32(0, long.lo, !0), view.setInt32(4, long.hi, !0), this.raw(chunk);
    }
    int64(value) {
     let long = PbLong.from(value);
     return varint64write(long.lo, long.hi, this.buf), this;
    }
    sint64(value) {
     let long = PbLong.from(value), sign = long.hi >> 31;
     return varint64write(long.lo << 1 ^ sign, (long.hi << 1 | long.lo >>> 31) ^ sign, this.buf), 
     this;
    }
    uint64(value) {
     let long = PbULong.from(value);
     return varint64write(long.lo, long.hi, this.buf), this;
    }
   }
   var json_format_contract = __webpack_require__(7568);
   const MESSAGE_TYPE = Symbol.for("protobuf-ts/message-type");
   var ScalarType, LongType, RepeatType, lower_camel_case = __webpack_require__(4502);
   function normalizeFieldInfo(field) {
    var _a, _b, _c, _d;
    return field.localName = null !== (_a = field.localName) && void 0 !== _a ? _a : (0, 
    lower_camel_case.W)(field.name), field.jsonName = null !== (_b = field.jsonName) && void 0 !== _b ? _b : (0, 
    lower_camel_case.W)(field.name), field.repeat = null !== (_c = field.repeat) && void 0 !== _c ? _c : RepeatType.NO, 
    field.opt = null !== (_d = field.opt) && void 0 !== _d ? _d : !field.repeat && (!field.oneof && "message" == field.kind), 
    field;
   }
   function readFieldOptions(messageType, fieldName, extensionName, extensionType) {
    var _a;
    const options = null === (_a = messageType.fields.find(((m, i) => m.localName == fieldName || i == fieldName))) || void 0 === _a ? void 0 : _a.options;
    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : void 0;
   }
   function readFieldOption(messageType, fieldName, extensionName, extensionType) {
    var _a;
    const options = null === (_a = messageType.fields.find(((m, i) => m.localName == fieldName || i == fieldName))) || void 0 === _a ? void 0 : _a.options;
    if (!options) return;
    const optionVal = options[extensionName];
    return void 0 === optionVal ? optionVal : extensionType ? extensionType.fromJson(optionVal) : optionVal;
   }
   function readMessageOption(messageType, extensionName, extensionType) {
    const optionVal = messageType.options[extensionName];
    return void 0 === optionVal ? optionVal : extensionType ? extensionType.fromJson(optionVal) : optionVal;
   }
   function isOneofGroup(any) {
    if ("object" != typeof any || null === any || !any.hasOwnProperty("oneofKind")) return !1;
    switch (typeof any.oneofKind) {
    case "string":
     return void 0 !== any[any.oneofKind] && 2 == Object.keys(any).length;

    case "undefined":
     return 1 == Object.keys(any).length;

    default:
     return !1;
    }
   }
   function getOneofValue(oneof, kind) {
    return oneof[kind];
   }
   function setOneofValue(oneof, kind, value) {
    void 0 !== oneof.oneofKind && delete oneof[oneof.oneofKind], oneof.oneofKind = kind, 
    void 0 !== value && (oneof[kind] = value);
   }
   function clearOneofValue(oneof) {
    void 0 !== oneof.oneofKind && delete oneof[oneof.oneofKind], oneof.oneofKind = void 0;
   }
   function getSelectedOneofValue(oneof) {
    if (void 0 !== oneof.oneofKind) return oneof[oneof.oneofKind];
   }
   !function(ScalarType) {
    ScalarType[ScalarType.DOUBLE = 1] = "DOUBLE", ScalarType[ScalarType.FLOAT = 2] = "FLOAT", 
    ScalarType[ScalarType.INT64 = 3] = "INT64", ScalarType[ScalarType.UINT64 = 4] = "UINT64", 
    ScalarType[ScalarType.INT32 = 5] = "INT32", ScalarType[ScalarType.FIXED64 = 6] = "FIXED64", 
    ScalarType[ScalarType.FIXED32 = 7] = "FIXED32", ScalarType[ScalarType.BOOL = 8] = "BOOL", 
    ScalarType[ScalarType.STRING = 9] = "STRING", ScalarType[ScalarType.BYTES = 12] = "BYTES", 
    ScalarType[ScalarType.UINT32 = 13] = "UINT32", ScalarType[ScalarType.SFIXED32 = 15] = "SFIXED32", 
    ScalarType[ScalarType.SFIXED64 = 16] = "SFIXED64", ScalarType[ScalarType.SINT32 = 17] = "SINT32", 
    ScalarType[ScalarType.SINT64 = 18] = "SINT64";
   }(ScalarType || (ScalarType = {})), function(LongType) {
    LongType[LongType.BIGINT = 0] = "BIGINT", LongType[LongType.STRING = 1] = "STRING", 
    LongType[LongType.NUMBER = 2] = "NUMBER";
   }(LongType || (LongType = {})), function(RepeatType) {
    RepeatType[RepeatType.NO = 0] = "NO", RepeatType[RepeatType.PACKED = 1] = "PACKED", 
    RepeatType[RepeatType.UNPACKED = 2] = "UNPACKED";
   }(RepeatType || (RepeatType = {}));
   class ReflectionTypeCheck {
    constructor(info) {
     var _a;
     this.fields = null !== (_a = info.fields) && void 0 !== _a ? _a : [];
    }
    prepare() {
     if (this.data) return;
     const req = [], known = [], oneofs = [];
     for (let field of this.fields) if (field.oneof) oneofs.includes(field.oneof) || (oneofs.push(field.oneof), 
     req.push(field.oneof), known.push(field.oneof)); else switch (known.push(field.localName), 
     field.kind) {
     case "scalar":
     case "enum":
      field.opt && !field.repeat || req.push(field.localName);
      break;

     case "message":
      field.repeat && req.push(field.localName);
      break;

     case "map":
      req.push(field.localName);
     }
     this.data = {
      req,
      known,
      oneofs: Object.values(oneofs)
     };
    }
    is(message, depth, allowExcessProperties = !1) {
     if (depth < 0) return !0;
     if (null == message || "object" != typeof message) return !1;
     this.prepare();
     let keys = Object.keys(message), data = this.data;
     if (keys.length < data.req.length || data.req.some((n => !keys.includes(n)))) return !1;
     if (!allowExcessProperties && keys.some((k => !data.known.includes(k)))) return !1;
     if (depth < 1) return !0;
     for (const name of data.oneofs) {
      const group = message[name];
      if (!isOneofGroup(group)) return !1;
      if (void 0 === group.oneofKind) continue;
      const field = this.fields.find((f => f.localName === group.oneofKind));
      if (!field) return !1;
      if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth)) return !1;
     }
     for (const field of this.fields) if (void 0 === field.oneof && !this.field(message[field.localName], field, allowExcessProperties, depth)) return !1;
     return !0;
    }
    field(arg, field, allowExcessProperties, depth) {
     let repeated = field.repeat;
     switch (field.kind) {
     case "scalar":
      return void 0 === arg ? field.opt : repeated ? this.scalars(arg, field.T, depth, field.L) : this.scalar(arg, field.T, field.L);

     case "enum":
      return void 0 === arg ? field.opt : repeated ? this.scalars(arg, ScalarType.INT32, depth) : this.scalar(arg, ScalarType.INT32);

     case "message":
      return void 0 === arg || (repeated ? this.messages(arg, field.T(), allowExcessProperties, depth) : this.message(arg, field.T(), allowExcessProperties, depth));

     case "map":
      if ("object" != typeof arg || null === arg) return !1;
      if (depth < 2) return !0;
      if (!this.mapKeys(arg, field.K, depth)) return !1;
      switch (field.V.kind) {
      case "scalar":
       return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);

      case "enum":
       return this.scalars(Object.values(arg), ScalarType.INT32, depth);

      case "message":
       return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);
      }
     }
     return !0;
    }
    message(arg, type, allowExcessProperties, depth) {
     return allowExcessProperties ? type.isAssignable(arg, depth) : type.is(arg, depth);
    }
    messages(arg, type, allowExcessProperties, depth) {
     if (!Array.isArray(arg)) return !1;
     if (depth < 2) return !0;
     if (allowExcessProperties) {
      for (let i = 0; i < arg.length && i < depth; i++) if (!type.isAssignable(arg[i], depth - 1)) return !1;
     } else for (let i = 0; i < arg.length && i < depth; i++) if (!type.is(arg[i], depth - 1)) return !1;
     return !0;
    }
    scalar(arg, type, longType) {
     let argType = typeof arg;
     switch (type) {
     case ScalarType.UINT64:
     case ScalarType.FIXED64:
     case ScalarType.INT64:
     case ScalarType.SFIXED64:
     case ScalarType.SINT64:
      switch (longType) {
      case LongType.BIGINT:
       return "bigint" == argType;

      case LongType.NUMBER:
       return "number" == argType && !isNaN(arg);

      default:
       return "string" == argType;
      }

     case ScalarType.BOOL:
      return "boolean" == argType;

     case ScalarType.STRING:
      return "string" == argType;

     case ScalarType.BYTES:
      return arg instanceof Uint8Array;

     case ScalarType.DOUBLE:
     case ScalarType.FLOAT:
      return "number" == argType && !isNaN(arg);

     default:
      return "number" == argType && Number.isInteger(arg);
     }
    }
    scalars(arg, type, depth, longType) {
     if (!Array.isArray(arg)) return !1;
     if (depth < 2) return !0;
     if (Array.isArray(arg)) for (let i = 0; i < arg.length && i < depth; i++) if (!this.scalar(arg[i], type, longType)) return !1;
     return !0;
    }
    mapKeys(map, type, depth) {
     let keys = Object.keys(map);
     switch (type) {
     case ScalarType.INT32:
     case ScalarType.FIXED32:
     case ScalarType.SFIXED32:
     case ScalarType.SINT32:
     case ScalarType.UINT32:
      return this.scalars(keys.slice(0, depth).map((k => parseInt(k))), type, depth);

     case ScalarType.BOOL:
      return this.scalars(keys.slice(0, depth).map((k => "true" == k || "false" != k && k)), type, depth);

     default:
      return this.scalars(keys, type, depth, LongType.STRING);
     }
    }
   }
   function reflectionLongConvert(long, type) {
    switch (type) {
    case LongType.BIGINT:
     return long.toBigInt();

    case LongType.NUMBER:
     return long.toNumber();

    default:
     return long.toString();
    }
   }
   class ReflectionJsonReader {
    constructor(info) {
     this.info = info;
    }
    prepare() {
     var _a;
     if (void 0 === this.fMap) {
      this.fMap = {};
      const fieldsInput = null !== (_a = this.info.fields) && void 0 !== _a ? _a : [];
      for (const field of fieldsInput) this.fMap[field.name] = field, this.fMap[field.jsonName] = field, 
      this.fMap[field.localName] = field;
     }
    }
    assert(condition, fieldName, jsonValue) {
     if (!condition) {
      let what = typeofJsonValue(jsonValue);
      throw "number" != what && "boolean" != what || (what = jsonValue.toString()), new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);
     }
    }
    read(input, message, options) {
     this.prepare();
     const oneofsHandled = [];
     for (const [jsonKey, jsonValue] of Object.entries(input)) {
      const field = this.fMap[jsonKey];
      if (!field) {
       if (!options.ignoreUnknownFields) throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);
       continue;
      }
      const localName = field.localName;
      let target;
      if (field.oneof) {
       if (null === jsonValue && ("enum" !== field.kind || "google.protobuf.NullValue" !== field.T()[0])) continue;
       if (oneofsHandled.includes(field.oneof)) throw new Error(`Multiple members of the oneof group "${field.oneof}" of ${this.info.typeName} are present in JSON.`);
       oneofsHandled.push(field.oneof), target = message[field.oneof] = {
        oneofKind: localName
       };
      } else target = message;
      if ("map" == field.kind) {
       if (null === jsonValue) continue;
       this.assert(isJsonObject(jsonValue), field.name, jsonValue);
       const fieldObj = target[localName];
       for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {
        let val;
        switch (this.assert(null !== jsonObjValue, field.name + " map value", null), field.V.kind) {
        case "message":
         val = field.V.T().internalJsonRead(jsonObjValue, options);
         break;

        case "enum":
         if (val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields), 
         !1 === val) continue;
         break;

        case "scalar":
         val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);
        }
        this.assert(void 0 !== val, field.name + " map value", jsonObjValue);
        let key = jsonObjKey;
        field.K == ScalarType.BOOL && (key = "true" == key || "false" != key && key), key = this.scalar(key, field.K, LongType.STRING, field.name).toString(), 
        fieldObj[key] = val;
       }
      } else if (field.repeat) {
       if (null === jsonValue) continue;
       this.assert(Array.isArray(jsonValue), field.name, jsonValue);
       const fieldArr = target[localName];
       for (const jsonItem of jsonValue) {
        let val;
        switch (this.assert(null !== jsonItem, field.name, null), field.kind) {
        case "message":
         val = field.T().internalJsonRead(jsonItem, options);
         break;

        case "enum":
         if (val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields), 
         !1 === val) continue;
         break;

        case "scalar":
         val = this.scalar(jsonItem, field.T, field.L, field.name);
        }
        this.assert(void 0 !== val, field.name, jsonValue), fieldArr.push(val);
       }
      } else switch (field.kind) {
      case "message":
       if (null === jsonValue && "google.protobuf.Value" != field.T().typeName) {
        this.assert(void 0 === field.oneof, field.name + " (oneof member)", null);
        continue;
       }
       target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);
       break;

      case "enum":
       if (null === jsonValue) continue;
       let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);
       if (!1 === val) continue;
       target[localName] = val;
       break;

      case "scalar":
       if (null === jsonValue) continue;
       target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);
      }
     }
    }
    enum(type, json, fieldName, ignoreUnknownFields) {
     if ("google.protobuf.NullValue" == type[0] && (0, assert.vA)(null === json || "NULL_VALUE" === json, `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`), 
     null === json) return 0;
     switch (typeof json) {
     case "number":
      return (0, assert.vA)(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`), 
      json;

     case "string":
      let localEnumName = json;
      type[2] && json.substring(0, type[2].length) === type[2] && (localEnumName = json.substring(type[2].length));
      let enumNumber = type[1][localEnumName];
      return (void 0 !== enumNumber || !ignoreUnknownFields) && ((0, assert.vA)("number" == typeof enumNumber, `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for "${json}".`), 
      enumNumber);
     }
     (0, assert.vA)(!1, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}".`);
    }
    scalar(json, type, longType, fieldName) {
     let e;
     try {
      switch (type) {
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
       if (null === json) return 0;
       if ("NaN" === json) return Number.NaN;
       if ("Infinity" === json) return Number.POSITIVE_INFINITY;
       if ("-Infinity" === json) return Number.NEGATIVE_INFINITY;
       if ("" === json) {
        e = "empty string";
        break;
       }
       if ("string" == typeof json && json.trim().length !== json.length) {
        e = "extra whitespace";
        break;
       }
       if ("string" != typeof json && "number" != typeof json) break;
       let float = Number(json);
       if (Number.isNaN(float)) {
        e = "not a number";
        break;
       }
       if (!Number.isFinite(float)) {
        e = "too large or small";
        break;
       }
       return type == ScalarType.FLOAT && (0, assert.wO)(float), float;

      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.UINT32:
       if (null === json) return 0;
       let int32;
       if ("number" == typeof json ? int32 = json : "" === json ? e = "empty string" : "string" == typeof json && (json.trim().length !== json.length ? e = "extra whitespace" : int32 = Number(json)), 
       void 0 === int32) break;
       return type == ScalarType.UINT32 ? (0, assert.e1)(int32) : (0, assert.bn)(int32), 
       int32;

      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
       if (null === json) return reflectionLongConvert(PbLong.ZERO, longType);
       if ("number" != typeof json && "string" != typeof json) break;
       return reflectionLongConvert(PbLong.from(json), longType);

      case ScalarType.FIXED64:
      case ScalarType.UINT64:
       if (null === json) return reflectionLongConvert(PbULong.ZERO, longType);
       if ("number" != typeof json && "string" != typeof json) break;
       return reflectionLongConvert(PbULong.from(json), longType);

      case ScalarType.BOOL:
       if (null === json) return !1;
       if ("boolean" != typeof json) break;
       return json;

      case ScalarType.STRING:
       if (null === json) return "";
       if ("string" != typeof json) {
        e = "extra whitespace";
        break;
       }
       try {
        encodeURIComponent(json);
       } catch (e) {
        e = "invalid UTF8";
        break;
       }
       return json;

      case ScalarType.BYTES:
       if (null === json || "" === json) return new Uint8Array(0);
       if ("string" != typeof json) break;
       return base64decode(json);
      }
     } catch (error) {
      e = error.message;
     }
     this.assert(!1, fieldName + (e ? " - " + e : ""), json);
    }
   }
   class ReflectionJsonWriter {
    constructor(info) {
     var _a;
     this.fields = null !== (_a = info.fields) && void 0 !== _a ? _a : [];
    }
    write(message, options) {
     const json = {}, source = message;
     for (const field of this.fields) {
      if (!field.oneof) {
       let jsonValue = this.field(field, source[field.localName], options);
       void 0 !== jsonValue && (json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue);
       continue;
      }
      const group = source[field.oneof];
      if (group.oneofKind !== field.localName) continue;
      const opt = "scalar" == field.kind || "enum" == field.kind ? Object.assign(Object.assign({}, options), {
       emitDefaultValues: !0
      }) : options;
      let jsonValue = this.field(field, group[field.localName], opt);
      (0, assert.vA)(void 0 !== jsonValue), json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
     }
     return json;
    }
    field(field, value, options) {
     let jsonValue;
     if ("map" == field.kind) {
      (0, assert.vA)("object" == typeof value && null !== value);
      const jsonObj = {};
      switch (field.V.kind) {
      case "scalar":
       for (const [entryKey, entryValue] of Object.entries(value)) {
        const val = this.scalar(field.V.T, entryValue, field.name, !1, !0);
        (0, assert.vA)(void 0 !== val), jsonObj[entryKey.toString()] = val;
       }
       break;

      case "message":
       const messageType = field.V.T();
       for (const [entryKey, entryValue] of Object.entries(value)) {
        const val = this.message(messageType, entryValue, field.name, options);
        (0, assert.vA)(void 0 !== val), jsonObj[entryKey.toString()] = val;
       }
       break;

      case "enum":
       const enumInfo = field.V.T();
       for (const [entryKey, entryValue] of Object.entries(value)) {
        (0, assert.vA)(void 0 === entryValue || "number" == typeof entryValue);
        const val = this.enum(enumInfo, entryValue, field.name, !1, !0, options.enumAsInteger);
        (0, assert.vA)(void 0 !== val), jsonObj[entryKey.toString()] = val;
       }
      }
      (options.emitDefaultValues || Object.keys(jsonObj).length > 0) && (jsonValue = jsonObj);
     } else if (field.repeat) {
      (0, assert.vA)(Array.isArray(value));
      const jsonArr = [];
      switch (field.kind) {
      case "scalar":
       for (let i = 0; i < value.length; i++) {
        const val = this.scalar(field.T, value[i], field.name, field.opt, !0);
        (0, assert.vA)(void 0 !== val), jsonArr.push(val);
       }
       break;

      case "enum":
       const enumInfo = field.T();
       for (let i = 0; i < value.length; i++) {
        (0, assert.vA)(void 0 === value[i] || "number" == typeof value[i]);
        const val = this.enum(enumInfo, value[i], field.name, field.opt, !0, options.enumAsInteger);
        (0, assert.vA)(void 0 !== val), jsonArr.push(val);
       }
       break;

      case "message":
       const messageType = field.T();
       for (let i = 0; i < value.length; i++) {
        const val = this.message(messageType, value[i], field.name, options);
        (0, assert.vA)(void 0 !== val), jsonArr.push(val);
       }
      }
      (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues) && (jsonValue = jsonArr);
     } else switch (field.kind) {
     case "scalar":
      jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);
      break;

     case "enum":
      jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);
      break;

     case "message":
      jsonValue = this.message(field.T(), value, field.name, options);
     }
     return jsonValue;
    }
    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {
     if ("google.protobuf.NullValue" == type[0]) return emitDefaultValues || optional ? null : void 0;
     if (void 0 !== value) {
      if (0 !== value || emitDefaultValues || optional) return (0, assert.vA)("number" == typeof value), 
      (0, assert.vA)(Number.isInteger(value)), enumAsInteger || !type[1].hasOwnProperty(value) ? value : type[2] ? type[2] + type[1][value] : type[1][value];
     } else (0, assert.vA)(optional);
    }
    message(type, value, fieldName, options) {
     return void 0 === value ? options.emitDefaultValues ? null : void 0 : type.internalJsonWrite(value, options);
    }
    scalar(type, value, fieldName, optional, emitDefaultValues) {
     if (void 0 === value) return void (0, assert.vA)(optional);
     const ed = emitDefaultValues || optional;
     switch (type) {
     case ScalarType.INT32:
     case ScalarType.SFIXED32:
     case ScalarType.SINT32:
      return 0 === value ? ed ? 0 : void 0 : ((0, assert.bn)(value), value);

     case ScalarType.FIXED32:
     case ScalarType.UINT32:
      return 0 === value ? ed ? 0 : void 0 : ((0, assert.e1)(value), value);

     case ScalarType.FLOAT:
      (0, assert.wO)(value);

     case ScalarType.DOUBLE:
      return 0 === value ? ed ? 0 : void 0 : ((0, assert.vA)("number" == typeof value), 
      Number.isNaN(value) ? "NaN" : value === Number.POSITIVE_INFINITY ? "Infinity" : value === Number.NEGATIVE_INFINITY ? "-Infinity" : value);

     case ScalarType.STRING:
      return "" === value ? ed ? "" : void 0 : ((0, assert.vA)("string" == typeof value), 
      value);

     case ScalarType.BOOL:
      return !1 === value ? !ed && void 0 : ((0, assert.vA)("boolean" == typeof value), 
      value);

     case ScalarType.UINT64:
     case ScalarType.FIXED64:
      (0, assert.vA)("number" == typeof value || "string" == typeof value || "bigint" == typeof value);
      let ulong = PbULong.from(value);
      if (ulong.isZero() && !ed) return;
      return ulong.toString();

     case ScalarType.INT64:
     case ScalarType.SFIXED64:
     case ScalarType.SINT64:
      (0, assert.vA)("number" == typeof value || "string" == typeof value || "bigint" == typeof value);
      let long = PbLong.from(value);
      if (long.isZero() && !ed) return;
      return long.toString();

     case ScalarType.BYTES:
      return (0, assert.vA)(value instanceof Uint8Array), value.byteLength ? base64encode(value) : ed ? "" : void 0;
     }
    }
   }
   function reflectionScalarDefault(type, longType = LongType.STRING) {
    switch (type) {
    case ScalarType.BOOL:
     return !1;

    case ScalarType.UINT64:
    case ScalarType.FIXED64:
     return reflectionLongConvert(PbULong.ZERO, longType);

    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
     return reflectionLongConvert(PbLong.ZERO, longType);

    case ScalarType.DOUBLE:
    case ScalarType.FLOAT:
     return 0;

    case ScalarType.BYTES:
     return new Uint8Array(0);

    case ScalarType.STRING:
     return "";

    default:
     return 0;
    }
   }
   class ReflectionBinaryReader {
    constructor(info) {
     this.info = info;
    }
    prepare() {
     var _a;
     if (!this.fieldNoToField) {
      const fieldsInput = null !== (_a = this.info.fields) && void 0 !== _a ? _a : [];
      this.fieldNoToField = new Map(fieldsInput.map((field => [ field.no, field ])));
     }
    }
    read(reader, message, options, length) {
     this.prepare();
     const end = void 0 === length ? reader.len : reader.pos + length;
     for (;reader.pos < end; ) {
      const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);
      if (!field) {
       let u = options.readUnknownField;
       if ("throw" == u) throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);
       let d = reader.skip(wireType);
       !1 !== u && (!0 === u ? binary_format_contract.f$.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);
       continue;
      }
      let target = message, repeated = field.repeat, localName = field.localName;
      switch (field.oneof && (target = target[field.oneof], target.oneofKind !== localName && (target = message[field.oneof] = {
       oneofKind: localName
      })), field.kind) {
      case "scalar":
      case "enum":
       let T = "enum" == field.kind ? ScalarType.INT32 : field.T, L = "scalar" == field.kind ? field.L : void 0;
       if (repeated) {
        let arr = target[localName];
        if (wireType == binary_format_contract.O0.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {
         let e = reader.uint32() + reader.pos;
         for (;reader.pos < e; ) arr.push(this.scalar(reader, T, L));
        } else arr.push(this.scalar(reader, T, L));
       } else target[localName] = this.scalar(reader, T, L);
       break;

      case "message":
       if (repeated) {
        let arr = target[localName], msg = field.T().internalBinaryRead(reader, reader.uint32(), options);
        arr.push(msg);
       } else target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);
       break;

      case "map":
       let [mapKey, mapVal] = this.mapEntry(field, reader, options);
       target[localName][mapKey] = mapVal;
      }
     }
    }
    mapEntry(field, reader, options) {
     let key, val, length = reader.uint32(), end = reader.pos + length;
     for (;reader.pos < end; ) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
      case 1:
       key = field.K == ScalarType.BOOL ? reader.bool().toString() : this.scalar(reader, field.K, LongType.STRING);
       break;

      case 2:
       switch (field.V.kind) {
       case "scalar":
        val = this.scalar(reader, field.V.T, field.V.L);
        break;

       case "enum":
        val = reader.int32();
        break;

       case "message":
        val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);
       }
       break;

      default:
       throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);
      }
     }
     if (void 0 === key) {
      let keyRaw = reflectionScalarDefault(field.K);
      key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;
     }
     if (void 0 === val) switch (field.V.kind) {
     case "scalar":
      val = reflectionScalarDefault(field.V.T, field.V.L);
      break;

     case "enum":
      val = 0;
      break;

     case "message":
      val = field.V.T().create();
     }
     return [ key, val ];
    }
    scalar(reader, type, longType) {
     switch (type) {
     case ScalarType.INT32:
      return reader.int32();

     case ScalarType.STRING:
      return reader.string();

     case ScalarType.BOOL:
      return reader.bool();

     case ScalarType.DOUBLE:
      return reader.double();

     case ScalarType.FLOAT:
      return reader.float();

     case ScalarType.INT64:
      return reflectionLongConvert(reader.int64(), longType);

     case ScalarType.UINT64:
      return reflectionLongConvert(reader.uint64(), longType);

     case ScalarType.FIXED64:
      return reflectionLongConvert(reader.fixed64(), longType);

     case ScalarType.FIXED32:
      return reader.fixed32();

     case ScalarType.BYTES:
      return reader.bytes();

     case ScalarType.UINT32:
      return reader.uint32();

     case ScalarType.SFIXED32:
      return reader.sfixed32();

     case ScalarType.SFIXED64:
      return reflectionLongConvert(reader.sfixed64(), longType);

     case ScalarType.SINT32:
      return reader.sint32();

     case ScalarType.SINT64:
      return reflectionLongConvert(reader.sint64(), longType);
     }
    }
   }
   class ReflectionBinaryWriter {
    constructor(info) {
     this.info = info;
    }
    prepare() {
     if (!this.fields) {
      const fieldsInput = this.info.fields ? this.info.fields.concat() : [];
      this.fields = fieldsInput.sort(((a, b) => a.no - b.no));
     }
    }
    write(message, writer, options) {
     this.prepare();
     for (const field of this.fields) {
      let value, emitDefault, repeated = field.repeat, localName = field.localName;
      if (field.oneof) {
       const group = message[field.oneof];
       if (group.oneofKind !== localName) continue;
       value = group[localName], emitDefault = !0;
      } else value = message[localName], emitDefault = !1;
      switch (field.kind) {
      case "scalar":
      case "enum":
       let T = "enum" == field.kind ? ScalarType.INT32 : field.T;
       if (repeated) if ((0, assert.vA)(Array.isArray(value)), repeated == RepeatType.PACKED) this.packed(writer, T, field.no, value); else for (const item of value) this.scalar(writer, T, field.no, item, !0); else void 0 === value ? (0, 
       assert.vA)(field.opt) : this.scalar(writer, T, field.no, value, emitDefault || field.opt);
       break;

      case "message":
       if (repeated) {
        (0, assert.vA)(Array.isArray(value));
        for (const item of value) this.message(writer, options, field.T(), field.no, item);
       } else this.message(writer, options, field.T(), field.no, value);
       break;

      case "map":
       (0, assert.vA)("object" == typeof value && null !== value);
       for (const [key, val] of Object.entries(value)) this.mapEntry(writer, options, field, key, val);
      }
     }
     let u = options.writeUnknownFields;
     !1 !== u && (!0 === u ? binary_format_contract.f$.onWrite : u)(this.info.typeName, message, writer);
    }
    mapEntry(writer, options, field, key, value) {
     writer.tag(field.no, binary_format_contract.O0.LengthDelimited), writer.fork();
     let keyValue = key;
     switch (field.K) {
     case ScalarType.INT32:
     case ScalarType.FIXED32:
     case ScalarType.UINT32:
     case ScalarType.SFIXED32:
     case ScalarType.SINT32:
      keyValue = Number.parseInt(key);
      break;

     case ScalarType.BOOL:
      (0, assert.vA)("true" == key || "false" == key), keyValue = "true" == key;
     }
     switch (this.scalar(writer, field.K, 1, keyValue, !0), field.V.kind) {
     case "scalar":
      this.scalar(writer, field.V.T, 2, value, !0);
      break;

     case "enum":
      this.scalar(writer, ScalarType.INT32, 2, value, !0);
      break;

     case "message":
      this.message(writer, options, field.V.T(), 2, value);
     }
     writer.join();
    }
    message(writer, options, handler, fieldNo, value) {
     void 0 !== value && (handler.internalBinaryWrite(value, writer.tag(fieldNo, binary_format_contract.O0.LengthDelimited).fork(), options), 
     writer.join());
    }
    scalar(writer, type, fieldNo, value, emitDefault) {
     let [wireType, method, isDefault] = this.scalarInfo(type, value);
     isDefault && !emitDefault || (writer.tag(fieldNo, wireType), writer[method](value));
    }
    packed(writer, type, fieldNo, value) {
     if (!value.length) return;
     (0, assert.vA)(type !== ScalarType.BYTES && type !== ScalarType.STRING), writer.tag(fieldNo, binary_format_contract.O0.LengthDelimited), 
     writer.fork();
     let [, method] = this.scalarInfo(type);
     for (let i = 0; i < value.length; i++) writer[method](value[i]);
     writer.join();
    }
    scalarInfo(type, value) {
     let m, t = binary_format_contract.O0.Varint, i = void 0 === value, d = 0 === value;
     switch (type) {
     case ScalarType.INT32:
      m = "int32";
      break;

     case ScalarType.STRING:
      d = i || !value.length, t = binary_format_contract.O0.LengthDelimited, m = "string";
      break;

     case ScalarType.BOOL:
      d = !1 === value, m = "bool";
      break;

     case ScalarType.UINT32:
      m = "uint32";
      break;

     case ScalarType.DOUBLE:
      t = binary_format_contract.O0.Bit64, m = "double";
      break;

     case ScalarType.FLOAT:
      t = binary_format_contract.O0.Bit32, m = "float";
      break;

     case ScalarType.INT64:
      d = i || PbLong.from(value).isZero(), m = "int64";
      break;

     case ScalarType.UINT64:
      d = i || PbULong.from(value).isZero(), m = "uint64";
      break;

     case ScalarType.FIXED64:
      d = i || PbULong.from(value).isZero(), t = binary_format_contract.O0.Bit64, m = "fixed64";
      break;

     case ScalarType.BYTES:
      d = i || !value.byteLength, t = binary_format_contract.O0.LengthDelimited, m = "bytes";
      break;

     case ScalarType.FIXED32:
      t = binary_format_contract.O0.Bit32, m = "fixed32";
      break;

     case ScalarType.SFIXED32:
      t = binary_format_contract.O0.Bit32, m = "sfixed32";
      break;

     case ScalarType.SFIXED64:
      d = i || PbLong.from(value).isZero(), t = binary_format_contract.O0.Bit64, m = "sfixed64";
      break;

     case ScalarType.SINT32:
      m = "sint32";
      break;

     case ScalarType.SINT64:
      d = i || PbLong.from(value).isZero(), m = "sint64";
     }
     return [ t, m, i || d ];
    }
   }
   function reflectionCreate(type) {
    const msg = type.messagePrototype ? Object.create(type.messagePrototype) : Object.defineProperty({}, MESSAGE_TYPE, {
     value: type
    });
    for (let field of type.fields) {
     let name = field.localName;
     if (!field.opt) if (field.oneof) msg[field.oneof] = {
      oneofKind: void 0
     }; else if (field.repeat) msg[name] = []; else switch (field.kind) {
     case "scalar":
      msg[name] = reflectionScalarDefault(field.T, field.L);
      break;

     case "enum":
      msg[name] = 0;
      break;

     case "map":
      msg[name] = {};
     }
    }
    return msg;
   }
   function reflectionMergePartial(info, target, source) {
    let fieldValue, output, input = source;
    for (let field of info.fields) {
     let name = field.localName;
     if (field.oneof) {
      const group = input[field.oneof];
      if (null == (null == group ? void 0 : group.oneofKind)) continue;
      if (fieldValue = group[name], output = target[field.oneof], output.oneofKind = group.oneofKind, 
      null == fieldValue) {
       delete output[name];
       continue;
      }
     } else if (fieldValue = input[name], output = target, null == fieldValue) continue;
     switch (field.repeat && (output[name].length = fieldValue.length), field.kind) {
     case "scalar":
     case "enum":
      if (field.repeat) for (let i = 0; i < fieldValue.length; i++) output[name][i] = fieldValue[i]; else output[name] = fieldValue;
      break;

     case "message":
      let T = field.T();
      if (field.repeat) for (let i = 0; i < fieldValue.length; i++) output[name][i] = T.create(fieldValue[i]); else void 0 === output[name] ? output[name] = T.create(fieldValue) : T.mergePartial(output[name], fieldValue);
      break;

     case "map":
      switch (field.V.kind) {
      case "scalar":
      case "enum":
       Object.assign(output[name], fieldValue);
       break;

      case "message":
       let T = field.V.T();
       for (let k of Object.keys(fieldValue)) output[name][k] = T.create(fieldValue[k]);
      }
     }
    }
   }
   function reflectionEquals(info, a, b) {
    if (a === b) return !0;
    if (!a || !b) return !1;
    for (let field of info.fields) {
     let localName = field.localName, val_a = field.oneof ? a[field.oneof][localName] : a[localName], val_b = field.oneof ? b[field.oneof][localName] : b[localName];
     switch (field.kind) {
     case "enum":
     case "scalar":
      let t = "enum" == field.kind ? ScalarType.INT32 : field.T;
      if (!(field.repeat ? repeatedPrimitiveEq(t, val_a, val_b) : primitiveEq(t, val_a, val_b))) return !1;
      break;

     case "map":
      if (!("message" == field.V.kind ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b)) : repeatedPrimitiveEq("enum" == field.V.kind ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b)))) return !1;
      break;

     case "message":
      let T = field.T();
      if (!(field.repeat ? repeatedMsgEq(T, val_a, val_b) : T.equals(val_a, val_b))) return !1;
     }
    }
    return !0;
   }
   const objectValues = Object.values;
   function primitiveEq(type, a, b) {
    if (a === b) return !0;
    if (type !== ScalarType.BYTES) return !1;
    let ba = a, bb = b;
    if (ba.length !== bb.length) return !1;
    for (let i = 0; i < ba.length; i++) if (ba[i] != bb[i]) return !1;
    return !0;
   }
   function repeatedPrimitiveEq(type, a, b) {
    if (a.length !== b.length) return !1;
    for (let i = 0; i < a.length; i++) if (!primitiveEq(type, a[i], b[i])) return !1;
    return !0;
   }
   function repeatedMsgEq(type, a, b) {
    if (a.length !== b.length) return !1;
    for (let i = 0; i < a.length; i++) if (!type.equals(a[i], b[i])) return !1;
    return !0;
   }
   const baseDescriptors = Object.getOwnPropertyDescriptors(Object.getPrototypeOf({}));
   class MessageType {
    constructor(name, fields, options) {
     this.defaultCheckDepth = 16, this.typeName = name, this.fields = fields.map(normalizeFieldInfo), 
     this.options = null != options ? options : {}, this.messagePrototype = Object.create(null, Object.assign(Object.assign({}, baseDescriptors), {
      [MESSAGE_TYPE]: {
       value: this
      }
     })), this.refTypeCheck = new ReflectionTypeCheck(this), this.refJsonReader = new ReflectionJsonReader(this), 
     this.refJsonWriter = new ReflectionJsonWriter(this), this.refBinReader = new ReflectionBinaryReader(this), 
     this.refBinWriter = new ReflectionBinaryWriter(this);
    }
    create(value) {
     let message = reflectionCreate(this);
     return void 0 !== value && reflectionMergePartial(this, message, value), message;
    }
    clone(message) {
     let copy = this.create();
     return reflectionMergePartial(this, copy, message), copy;
    }
    equals(a, b) {
     return reflectionEquals(this, a, b);
    }
    is(arg, depth = this.defaultCheckDepth) {
     return this.refTypeCheck.is(arg, depth, !1);
    }
    isAssignable(arg, depth = this.defaultCheckDepth) {
     return this.refTypeCheck.is(arg, depth, !0);
    }
    mergePartial(target, source) {
     reflectionMergePartial(this, target, source);
    }
    fromBinary(data, options) {
     let opt = binaryReadOptions(options);
     return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);
    }
    fromJson(json, options) {
     return this.internalJsonRead(json, (0, json_format_contract.bm)(options));
    }
    fromJsonString(json, options) {
     let value = JSON.parse(json);
     return this.fromJson(value, options);
    }
    toJson(message, options) {
     return this.internalJsonWrite(message, (0, json_format_contract.yG)(options));
    }
    toJsonString(message, options) {
     var _a;
     let value = this.toJson(message, options);
     return JSON.stringify(value, null, null !== (_a = null == options ? void 0 : options.prettySpaces) && void 0 !== _a ? _a : 0);
    }
    toBinary(message, options) {
     let opt = binaryWriteOptions(options);
     return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();
    }
    internalJsonRead(json, options, target) {
     if (null !== json && "object" == typeof json && !Array.isArray(json)) {
      let message = null != target ? target : this.create();
      return this.refJsonReader.read(json, message, options), message;
     }
     throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);
    }
    internalJsonWrite(message, options) {
     return this.refJsonWriter.write(message, options);
    }
    internalBinaryWrite(message, writer, options) {
     return this.refBinWriter.write(message, writer, options), writer;
    }
    internalBinaryRead(reader, length, options, target) {
     let message = null != target ? target : this.create();
     return this.refBinReader.read(reader, message, options, length), message;
    }
   }
   function containsMessageType(msg) {
    return null != msg[MESSAGE_TYPE];
   }
   function isEnumObject(arg) {
    if ("object" != typeof arg || null === arg) return !1;
    if (!arg.hasOwnProperty(0)) return !1;
    for (let k of Object.keys(arg)) {
     let num = parseInt(k);
     if (Number.isNaN(num)) {
      let num = arg[k];
      if (void 0 === num) return !1;
      if ("number" != typeof num) return !1;
      if (void 0 === arg[num]) return !1;
     } else {
      let nam = arg[num];
      if (void 0 === nam) return !1;
      if (arg[nam] !== num) return !1;
     }
    }
    return !0;
   }
   function listEnumValues(enumObject) {
    if (!isEnumObject(enumObject)) throw new Error("not a typescript enum object");
    let values = [];
    for (let [name, number] of Object.entries(enumObject)) "number" == typeof number && values.push({
     name,
     number
    });
    return values;
   }
   function listEnumNames(enumObject) {
    return listEnumValues(enumObject).map((val => val.name));
   }
   function listEnumNumbers(enumObject) {
    return listEnumValues(enumObject).map((val => val.number)).filter(((num, index, arr) => arr.indexOf(num) == index));
   }
  },
  7568: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
   "use strict";
   __webpack_require__.d(__webpack_exports__, {
    Zc: () => mergeJsonOptions,
    bm: () => jsonReadOptions,
    yG: () => jsonWriteOptions
   });
   const defaultsWrite = {
    emitDefaultValues: !1,
    enumAsInteger: !1,
    useProtoFieldName: !1,
    prettySpaces: 0
   }, defaultsRead = {
    ignoreUnknownFields: !1
   };
   function jsonReadOptions(options) {
    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;
   }
   function jsonWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;
   }
   function mergeJsonOptions(a, b) {
    var _a, _b;
    let c = Object.assign(Object.assign({}, a), b);
    return c.typeRegistry = [ ...null !== (_a = null == a ? void 0 : a.typeRegistry) && void 0 !== _a ? _a : [], ...null !== (_b = null == b ? void 0 : b.typeRegistry) && void 0 !== _b ? _b : [] ], 
    c;
   }
  },
  4502: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
   "use strict";
   function lowerCamelCase(snakeCase) {
    let capNext = !1;
    const sb = [];
    for (let i = 0; i < snakeCase.length; i++) {
     let next = snakeCase.charAt(i);
     "_" == next ? capNext = !0 : /\d/.test(next) ? (sb.push(next), capNext = !0) : capNext ? (sb.push(next.toUpperCase()), 
     capNext = !1) : 0 == i ? sb.push(next.toLowerCase()) : sb.push(next);
    }
    return sb.join("");
   }
   __webpack_require__.d(__webpack_exports__, {
    W: () => lowerCamelCase
   });
  },
  4924: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.req = exports.json = exports.toBuffer = void 0;
   const http = __importStar(__webpack_require__(8611)), https = __importStar(__webpack_require__(5692));
   async function toBuffer(stream) {
    let length = 0;
    const chunks = [];
    for await (const chunk of stream) length += chunk.length, chunks.push(chunk);
    return Buffer.concat(chunks, length);
   }
   exports.toBuffer = toBuffer, exports.json = async function(stream) {
    const str = (await toBuffer(stream)).toString("utf8");
    try {
     return JSON.parse(str);
    } catch (_err) {
     const err = _err;
     throw err.message += ` (input: ${str})`, err;
    }
   }, exports.req = function(url, opts = {}) {
    const req = (("string" == typeof url ? url : url.href).startsWith("https:") ? https : http).request(url, opts), promise = new Promise(((resolve, reject) => {
     req.once("response", resolve).once("error", reject).end();
    }));
    return req.then = promise.then.bind(promise), req;
   };
  },
  7841: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __exportStar = this && this.__exportStar || function(m, exports) {
    for (var p in m) "default" === p || Object.prototype.hasOwnProperty.call(exports, p) || __createBinding(exports, m, p);
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.Agent = void 0;
   const net = __importStar(__webpack_require__(9278)), http = __importStar(__webpack_require__(8611)), https_1 = __webpack_require__(5692);
   __exportStar(__webpack_require__(4924), exports);
   const INTERNAL = Symbol("AgentBaseInternalState");
   class Agent extends http.Agent {
    constructor(opts) {
     super(opts), this[INTERNAL] = {};
    }
    isSecureEndpoint(options) {
     if (options) {
      if ("boolean" == typeof options.secureEndpoint) return options.secureEndpoint;
      if ("string" == typeof options.protocol) return "https:" === options.protocol;
     }
     const {stack} = new Error;
     return "string" == typeof stack && stack.split("\n").some((l => -1 !== l.indexOf("(https.js:") || -1 !== l.indexOf("node:https:")));
    }
    incrementSockets(name) {
     if (this.maxSockets === 1 / 0 && this.maxTotalSockets === 1 / 0) return null;
     this.sockets[name] || (this.sockets[name] = []);
     const fakeSocket = new net.Socket({
      writable: !1
     });
     return this.sockets[name].push(fakeSocket), this.totalSocketCount++, fakeSocket;
    }
    decrementSockets(name, socket) {
     if (!this.sockets[name] || null === socket) return;
     const sockets = this.sockets[name], index = sockets.indexOf(socket);
     -1 !== index && (sockets.splice(index, 1), this.totalSocketCount--, 0 === sockets.length && delete this.sockets[name]);
    }
    getName(options) {
     return ("boolean" == typeof options.secureEndpoint ? options.secureEndpoint : this.isSecureEndpoint(options)) ? https_1.Agent.prototype.getName.call(this, options) : super.getName(options);
    }
    createSocket(req, options, cb) {
     const connectOpts = {
      ...options,
      secureEndpoint: this.isSecureEndpoint(options)
     }, name = this.getName(connectOpts), fakeSocket = this.incrementSockets(name);
     Promise.resolve().then((() => this.connect(req, connectOpts))).then((socket => {
      if (this.decrementSockets(name, fakeSocket), socket instanceof http.Agent) try {
       return socket.addRequest(req, connectOpts);
      } catch (err) {
       return cb(err);
      }
      this[INTERNAL].currentSocket = socket, super.createSocket(req, options, cb);
     }), (err => {
      this.decrementSockets(name, fakeSocket), cb(err);
     }));
    }
    createConnection() {
     const socket = this[INTERNAL].currentSocket;
     if (this[INTERNAL].currentSocket = void 0, !socket) throw new Error("No socket was returned in the `connect()` function");
     return socket;
    }
    get defaultPort() {
     return this[INTERNAL].defaultPort ?? ("https:" === this.protocol ? 443 : 80);
    }
    set defaultPort(v) {
     this[INTERNAL] && (this[INTERNAL].defaultPort = v);
    }
    get protocol() {
     return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? "https:" : "http:");
    }
    set protocol(v) {
     this[INTERNAL] && (this[INTERNAL].protocol = v);
    }
   }
   exports.Agent = Agent;
  },
  877: module => {
   "use strict";
   function balanced(a, b, str) {
    a instanceof RegExp && (a = maybeMatch(a, str)), b instanceof RegExp && (b = maybeMatch(b, str));
    var r = range(a, b, str);
    return r && {
     start: r[0],
     end: r[1],
     pre: str.slice(0, r[0]),
     body: str.slice(r[0] + a.length, r[1]),
     post: str.slice(r[1] + b.length)
    };
   }
   function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
   }
   function range(a, b, str) {
    var begs, beg, left, right, result, ai = str.indexOf(a), bi = str.indexOf(b, ai + 1), i = ai;
    if (ai >= 0 && bi > 0) {
     if (a === b) return [ ai, bi ];
     for (begs = [], left = str.length; i >= 0 && !result; ) i == ai ? (begs.push(i), 
     ai = str.indexOf(a, i + 1)) : 1 == begs.length ? result = [ begs.pop(), bi ] : ((beg = begs.pop()) < left && (left = beg, 
     right = bi), bi = str.indexOf(b, i + 1)), i = ai < bi && ai >= 0 ? ai : bi;
     begs.length && (result = [ left, right ]);
    }
    return result;
   }
   module.exports = balanced, balanced.range = range;
  },
  7364: (module, __unused_webpack_exports, __webpack_require__) => {
   var concatMap = __webpack_require__(2190), balanced = __webpack_require__(877);
   module.exports = function(str) {
    if (!str) return [];
    "{}" === str.substr(0, 2) && (str = "\\{\\}" + str.substr(2));
    return expand(function(str) {
     return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }(str), !0).map(unescapeBraces);
   };
   var escSlash = "\0SLASH" + Math.random() + "\0", escOpen = "\0OPEN" + Math.random() + "\0", escClose = "\0CLOSE" + Math.random() + "\0", escComma = "\0COMMA" + Math.random() + "\0", escPeriod = "\0PERIOD" + Math.random() + "\0";
   function numeric(str) {
    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
   }
   function unescapeBraces(str) {
    return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
   }
   function parseCommaParts(str) {
    if (!str) return [ "" ];
    var parts = [], m = balanced("{", "}", str);
    if (!m) return str.split(",");
    var pre = m.pre, body = m.body, post = m.post, p = pre.split(",");
    p[p.length - 1] += "{" + body + "}";
    var postParts = parseCommaParts(post);
    return post.length && (p[p.length - 1] += postParts.shift(), p.push.apply(p, postParts)), 
    parts.push.apply(parts, p), parts;
   }
   function embrace(str) {
    return "{" + str + "}";
   }
   function isPadded(el) {
    return /^-?0\d/.test(el);
   }
   function lte(i, y) {
    return i <= y;
   }
   function gte(i, y) {
    return i >= y;
   }
   function expand(str, isTop) {
    var expansions = [], m = balanced("{", "}", str);
    if (!m || /\$$/.test(m.pre)) return [ str ];
    var n, isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body), isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body), isSequence = isNumericSequence || isAlphaSequence, isOptions = m.body.indexOf(",") >= 0;
    if (!isSequence && !isOptions) return m.post.match(/,.*\}/) ? expand(str = m.pre + "{" + m.body + escClose + m.post) : [ str ];
    if (isSequence) n = m.body.split(/\.\./); else if (1 === (n = parseCommaParts(m.body)).length && 1 === (n = expand(n[0], !1).map(embrace)).length) return (post = m.post.length ? expand(m.post, !1) : [ "" ]).map((function(p) {
     return m.pre + n[0] + p;
    }));
    var N, pre = m.pre, post = m.post.length ? expand(m.post, !1) : [ "" ];
    if (isSequence) {
     var x = numeric(n[0]), y = numeric(n[1]), width = Math.max(n[0].length, n[1].length), incr = 3 == n.length ? Math.abs(numeric(n[2])) : 1, test = lte;
     y < x && (incr *= -1, test = gte);
     var pad = n.some(isPadded);
     N = [];
     for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) "\\" === (c = String.fromCharCode(i)) && (c = ""); else if (c = String(i), 
      pad) {
       var need = width - c.length;
       if (need > 0) {
        var z = new Array(need + 1).join("0");
        c = i < 0 ? "-" + z + c.slice(1) : z + c;
       }
      }
      N.push(c);
     }
    } else N = concatMap(n, (function(el) {
     return expand(el, !1);
    }));
    for (var j = 0; j < N.length; j++) for (var k = 0; k < post.length; k++) {
     var expansion = pre + N[j] + post[k];
     (!isTop || isSequence || expansion) && expansions.push(expansion);
    }
    return expansions;
   }
  },
  2190: module => {
   module.exports = function(xs, fn) {
    for (var res = [], i = 0; i < xs.length; i++) {
     var x = fn(xs[i], i);
     isArray(x) ? res.push.apply(res, x) : res.push(x);
    }
    return res;
   };
   var isArray = Array.isArray || function(xs) {
    return "[object Array]" === Object.prototype.toString.call(xs);
   };
  },
  4568: module => {
   "use strict";
   module.exports = (flag, argv = process.argv) => {
    const prefix = flag.startsWith("-") ? "" : 1 === flag.length ? "-" : "--", position = argv.indexOf(prefix + flag), terminatorPosition = argv.indexOf("--");
    return -1 !== position && (-1 === terminatorPosition || position < terminatorPosition);
   };
  },
  4009: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.HttpProxyAgent = void 0;
   const net = __importStar(__webpack_require__(9278)), tls = __importStar(__webpack_require__(4756)), debug_1 = __importDefault(__webpack_require__(5214)), events_1 = __webpack_require__(4434), agent_base_1 = __webpack_require__(7841), url_1 = __webpack_require__(7016), debug = (0, 
   debug_1.default)("http-proxy-agent");
   class HttpProxyAgent extends agent_base_1.Agent {
    constructor(proxy, opts) {
     super(opts), this.proxy = "string" == typeof proxy ? new url_1.URL(proxy) : proxy, 
     this.proxyHeaders = opts?.headers ?? {}, debug("Creating new HttpProxyAgent instance: %o", this.proxy.href);
     const host = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, ""), port = this.proxy.port ? parseInt(this.proxy.port, 10) : "https:" === this.proxy.protocol ? 443 : 80;
     this.connectOpts = {
      ...opts ? omit(opts, "headers") : null,
      host,
      port
     };
    }
    addRequest(req, opts) {
     req._header = null, this.setRequestProps(req, opts), super.addRequest(req, opts);
    }
    setRequestProps(req, opts) {
     const {proxy} = this, base = `${opts.secureEndpoint ? "https:" : "http:"}//${req.getHeader("host") || "localhost"}`, url = new url_1.URL(req.path, base);
     80 !== opts.port && (url.port = String(opts.port)), req.path = String(url);
     const headers = "function" == typeof this.proxyHeaders ? this.proxyHeaders() : {
      ...this.proxyHeaders
     };
     if (proxy.username || proxy.password) {
      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;
      headers["Proxy-Authorization"] = `Basic ${Buffer.from(auth).toString("base64")}`;
     }
     headers["Proxy-Connection"] || (headers["Proxy-Connection"] = this.keepAlive ? "Keep-Alive" : "close");
     for (const name of Object.keys(headers)) {
      const value = headers[name];
      value && req.setHeader(name, value);
     }
    }
    async connect(req, opts) {
     let first, endOfHeaders, socket;
     return req._header = null, req.path.includes("://") || this.setRequestProps(req, opts), 
     debug("Regenerating stored HTTP header string for request"), req._implicitHeader(), 
     req.outputData && req.outputData.length > 0 && (debug("Patching connection write() output buffer with updated header"), 
     first = req.outputData[0].data, endOfHeaders = first.indexOf("\r\n\r\n") + 4, req.outputData[0].data = req._header + first.substring(endOfHeaders), 
     debug("Output buffer: %o", req.outputData[0].data)), "https:" === this.proxy.protocol ? (debug("Creating `tls.Socket`: %o", this.connectOpts), 
     socket = tls.connect(this.connectOpts)) : (debug("Creating `net.Socket`: %o", this.connectOpts), 
     socket = net.connect(this.connectOpts)), await (0, events_1.once)(socket, "connect"), 
     socket;
    }
   }
   function omit(obj, ...keys) {
    const ret = {};
    let key;
    for (key in obj) keys.includes(key) || (ret[key] = obj[key]);
    return ret;
   }
   HttpProxyAgent.protocols = [ "http", "https" ], exports.HttpProxyAgent = HttpProxyAgent;
  },
  1886: (module, exports, __webpack_require__) => {
   exports.formatArgs = function(args) {
    if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff), 
    !this.useColors) return;
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    let index = 0, lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match => {
     "%%" !== match && (index++, "%c" === match && (lastC = index));
    })), args.splice(lastC, 0, c);
   }, exports.save = function(namespaces) {
    try {
     namespaces ? exports.storage.setItem("debug", namespaces) : exports.storage.removeItem("debug");
    } catch (error) {}
   }, exports.load = function() {
    let r;
    try {
     r = exports.storage.getItem("debug");
    } catch (error) {}
    !r && "undefined" != typeof process && "env" in process && (r = process.env.DEBUG);
    return r;
   }, exports.useColors = function() {
    if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return !0;
    if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return !1;
    let m;
    return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
   }, exports.storage = function() {
    try {
     return localStorage;
    } catch (error) {}
   }(), exports.destroy = (() => {
    let warned = !1;
    return () => {
     warned || (warned = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
    };
   })(), exports.colors = [ "#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33" ], 
   exports.log = console.debug || console.log || (() => {}), module.exports = __webpack_require__(7025)(exports);
   const {formatters} = module.exports;
   formatters.j = function(v) {
    try {
     return JSON.stringify(v);
    } catch (error) {
     return "[UnexpectedJSONParseError]: " + error.message;
    }
   };
  },
  7025: (module, __unused_webpack_exports, __webpack_require__) => {
   module.exports = function(env) {
    function createDebug(namespace) {
     let prevTime, namespacesCache, enabledCache, enableOverride = null;
     function debug(...args) {
      if (!debug.enabled) return;
      const self = debug, curr = Number(new Date), ms = curr - (prevTime || curr);
      self.diff = ms, self.prev = prevTime, self.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), 
      "string" != typeof args[0] && args.unshift("%O");
      let index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, ((match, format) => {
       if ("%%" === match) return "%";
       index++;
       const formatter = createDebug.formatters[format];
       if ("function" == typeof formatter) {
        const val = args[index];
        match = formatter.call(self, val), args.splice(index, 1), index--;
       }
       return match;
      })), createDebug.formatArgs.call(self, args);
      (self.log || createDebug.log).apply(self, args);
     }
     return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), 
     debug.extend = extend, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", {
      enumerable: !0,
      configurable: !1,
      get: () => null !== enableOverride ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, 
      enabledCache = createDebug.enabled(namespace)), enabledCache),
      set: v => {
       enableOverride = v;
      }
     }), "function" == typeof createDebug.init && createDebug.init(debug), debug;
    }
    function extend(namespace, delimiter) {
     const newDebug = createDebug(this.namespace + (void 0 === delimiter ? ":" : delimiter) + namespace);
     return newDebug.log = this.log, newDebug;
    }
    function matchesTemplate(search, template) {
     let searchIndex = 0, templateIndex = 0, starIndex = -1, matchIndex = 0;
     for (;searchIndex < search.length; ) if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || "*" === template[templateIndex])) "*" === template[templateIndex] ? (starIndex = templateIndex, 
     matchIndex = searchIndex, templateIndex++) : (searchIndex++, templateIndex++); else {
      if (-1 === starIndex) return !1;
      templateIndex = starIndex + 1, matchIndex++, searchIndex = matchIndex;
     }
     for (;templateIndex < template.length && "*" === template[templateIndex]; ) templateIndex++;
     return templateIndex === template.length;
    }
    return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
     if (val instanceof Error) return val.stack || val.message;
     return val;
    }, createDebug.disable = function() {
     const namespaces = [ ...createDebug.names, ...createDebug.skips.map((namespace => "-" + namespace)) ].join(",");
     return createDebug.enable(""), namespaces;
    }, createDebug.enable = function(namespaces) {
     createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], 
     createDebug.skips = [];
     const split = ("string" == typeof namespaces ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
     for (const ns of split) "-" === ns[0] ? createDebug.skips.push(ns.slice(1)) : createDebug.names.push(ns);
    }, createDebug.enabled = function(name) {
     for (const skip of createDebug.skips) if (matchesTemplate(name, skip)) return !1;
     for (const ns of createDebug.names) if (matchesTemplate(name, ns)) return !0;
     return !1;
    }, createDebug.humanize = __webpack_require__(5693), createDebug.destroy = function() {
     console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }, Object.keys(env).forEach((key => {
     createDebug[key] = env[key];
    })), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, 
    createDebug.selectColor = function(namespace) {
     let hash = 0;
     for (let i = 0; i < namespace.length; i++) hash = (hash << 5) - hash + namespace.charCodeAt(i), 
     hash |= 0;
     return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }, createDebug.enable(createDebug.load()), createDebug;
   };
  },
  5214: (module, __unused_webpack_exports, __webpack_require__) => {
   "undefined" == typeof process || "renderer" === process.type || !0 === process.browser || process.__nwjs ? module.exports = __webpack_require__(1886) : module.exports = __webpack_require__(4100);
  },
  4100: (module, exports, __webpack_require__) => {
   const tty = __webpack_require__(2018), util = __webpack_require__(9023);
   exports.init = function(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for (let i = 0; i < keys.length; i++) debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
   }, exports.log = function(...args) {
    return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + "\n");
   }, exports.formatArgs = function(args) {
    const {namespace: name, useColors} = this;
    if (useColors) {
     const c = this.color, colorCode = "[3" + (c < 8 ? c : "8;5;" + c), prefix = `  ${colorCode};1m${name} [0m`;
     args[0] = prefix + args[0].split("\n").join("\n" + prefix), args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "[0m");
    } else args[0] = function() {
     if (exports.inspectOpts.hideDate) return "";
     return (new Date).toISOString() + " ";
    }() + name + " " + args[0];
   }, exports.save = function(namespaces) {
    namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
   }, exports.load = function() {
    return process.env.DEBUG;
   }, exports.useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
   }, exports.destroy = util.deprecate((() => {}), "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), 
   exports.colors = [ 6, 2, 3, 4, 5, 1 ];
   try {
    const supportsColor = __webpack_require__(6603);
    supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports.colors = [ 20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221 ]);
   } catch (error) {}
   exports.inspectOpts = Object.keys(process.env).filter((key => /^debug_/i.test(key))).reduce(((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, ((_, k) => k.toUpperCase()));
    let val = process.env[key];
    return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && ("null" === val ? null : Number(val)), 
    obj[prop] = val, obj;
   }), {}), module.exports = __webpack_require__(7025)(exports);
   const {formatters} = module.exports;
   formatters.o = function(v) {
    return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts).split("\n").map((str => str.trim())).join(" ");
   }, formatters.O = function(v) {
    return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts);
   };
  },
  1516: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    void 0 === k2 && (k2 = k);
    var desc = Object.getOwnPropertyDescriptor(m, k);
    desc && !("get" in desc ? !m.__esModule : desc.writable || desc.configurable) || (desc = {
     enumerable: !0,
     get: function() {
      return m[k];
     }
    }), Object.defineProperty(o, k2, desc);
   } : function(o, m, k, k2) {
    void 0 === k2 && (k2 = k), o[k2] = m[k];
   }), __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
     enumerable: !0,
     value: v
    });
   } : function(o, v) {
    o.default = v;
   }), __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (null != mod) for (var k in mod) "default" !== k && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
   }, __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.HttpsProxyAgent = void 0;
   const net = __importStar(__webpack_require__(9278)), tls = __importStar(__webpack_require__(4756)), assert_1 = __importDefault(__webpack_require__(2613)), debug_1 = __importDefault(__webpack_require__(5915)), agent_base_1 = __webpack_require__(7841), url_1 = __webpack_require__(7016), parse_proxy_response_1 = __webpack_require__(7336), debug = (0, 
   debug_1.default)("https-proxy-agent"), setServernameFromNonIpHost = options => void 0 === options.servername && options.host && !net.isIP(options.host) ? {
    ...options,
    servername: options.host
   } : options;
   class HttpsProxyAgent extends agent_base_1.Agent {
    constructor(proxy, opts) {
     super(opts), this.options = {
      path: void 0
     }, this.proxy = "string" == typeof proxy ? new url_1.URL(proxy) : proxy, this.proxyHeaders = opts?.headers ?? {}, 
     debug("Creating new HttpsProxyAgent instance: %o", this.proxy.href);
     const host = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, ""), port = this.proxy.port ? parseInt(this.proxy.port, 10) : "https:" === this.proxy.protocol ? 443 : 80;
     this.connectOpts = {
      ALPNProtocols: [ "http/1.1" ],
      ...opts ? omit(opts, "headers") : null,
      host,
      port
     };
    }
    async connect(req, opts) {
     const {proxy} = this;
     if (!opts.host) throw new TypeError('No "host" provided');
     let socket;
     "https:" === proxy.protocol ? (debug("Creating `tls.Socket`: %o", this.connectOpts), 
     socket = tls.connect(setServernameFromNonIpHost(this.connectOpts))) : (debug("Creating `net.Socket`: %o", this.connectOpts), 
     socket = net.connect(this.connectOpts));
     const headers = "function" == typeof this.proxyHeaders ? this.proxyHeaders() : {
      ...this.proxyHeaders
     }, host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;
     let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\r\n`;
     if (proxy.username || proxy.password) {
      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;
      headers["Proxy-Authorization"] = `Basic ${Buffer.from(auth).toString("base64")}`;
     }
     headers.Host = `${host}:${opts.port}`, headers["Proxy-Connection"] || (headers["Proxy-Connection"] = this.keepAlive ? "Keep-Alive" : "close");
     for (const name of Object.keys(headers)) payload += `${name}: ${headers[name]}\r\n`;
     const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);
     socket.write(`${payload}\r\n`);
     const {connect, buffered} = await proxyResponsePromise;
     if (req.emit("proxyConnect", connect), this.emit("proxyConnect", connect, req), 
     200 === connect.statusCode) return req.once("socket", resume), opts.secureEndpoint ? (debug("Upgrading socket connection to TLS"), 
     tls.connect({
      ...omit(setServernameFromNonIpHost(opts), "host", "path", "port"),
      socket
     })) : socket;
     socket.destroy();
     const fakeSocket = new net.Socket({
      writable: !1
     });
     return fakeSocket.readable = !0, req.once("socket", (s => {
      debug("Replaying proxy buffer for failed request"), (0, assert_1.default)(s.listenerCount("data") > 0), 
      s.push(buffered), s.push(null);
     })), fakeSocket;
    }
   }
   function resume(socket) {
    socket.resume();
   }
   function omit(obj, ...keys) {
    const ret = {};
    let key;
    for (key in obj) keys.includes(key) || (ret[key] = obj[key]);
    return ret;
   }
   HttpsProxyAgent.protocols = [ "http", "https" ], exports.HttpsProxyAgent = HttpsProxyAgent;
  },
  7336: function(__unused_webpack_module, exports, __webpack_require__) {
   "use strict";
   var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
     default: mod
    };
   };
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.parseProxyResponse = void 0;
   const debug = (0, __importDefault(__webpack_require__(5915)).default)("https-proxy-agent:parse-proxy-response");
   exports.parseProxyResponse = function(socket) {
    return new Promise(((resolve, reject) => {
     let buffersLength = 0;
     const buffers = [];
     function read() {
      const b = socket.read();
      b ? function(b) {
       buffers.push(b), buffersLength += b.length;
       const buffered = Buffer.concat(buffers, buffersLength), endOfHeaders = buffered.indexOf("\r\n\r\n");
       if (-1 === endOfHeaders) return debug("have not received end of HTTP headers yet..."), 
       void read();
       const headerParts = buffered.slice(0, endOfHeaders).toString("ascii").split("\r\n"), firstLine = headerParts.shift();
       if (!firstLine) return socket.destroy(), reject(new Error("No header received from proxy CONNECT response"));
       const firstLineParts = firstLine.split(" "), statusCode = +firstLineParts[1], statusText = firstLineParts.slice(2).join(" "), headers = {};
       for (const header of headerParts) {
        if (!header) continue;
        const firstColon = header.indexOf(":");
        if (-1 === firstColon) return socket.destroy(), reject(new Error(`Invalid header from proxy CONNECT response: "${header}"`));
        const key = header.slice(0, firstColon).toLowerCase(), value = header.slice(firstColon + 1).trimStart(), current = headers[key];
        "string" == typeof current ? headers[key] = [ current, value ] : Array.isArray(current) ? current.push(value) : headers[key] = value;
       }
       debug("got proxy server response: %o %o", firstLine, headers), cleanup(), resolve({
        connect: {
         statusCode,
         statusText,
         headers
        },
        buffered
       });
      }(b) : socket.once("readable", read);
     }
     function cleanup() {
      socket.removeListener("end", onend), socket.removeListener("error", onerror), socket.removeListener("readable", read);
     }
     function onend() {
      cleanup(), debug("onend"), reject(new Error("Proxy connection ended before receiving CONNECT response"));
     }
     function onerror(err) {
      cleanup(), debug("onerror %o", err), reject(err);
     }
     socket.on("error", onerror), socket.on("end", onend), read();
    }));
   };
  },
  3631: (module, exports, __webpack_require__) => {
   exports.formatArgs = function(args) {
    if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff), 
    !this.useColors) return;
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    let index = 0, lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match => {
     "%%" !== match && (index++, "%c" === match && (lastC = index));
    })), args.splice(lastC, 0, c);
   }, exports.save = function(namespaces) {
    try {
     namespaces ? exports.storage.setItem("debug", namespaces) : exports.storage.removeItem("debug");
    } catch (error) {}
   }, exports.load = function() {
    let r;
    try {
     r = exports.storage.getItem("debug");
    } catch (error) {}
    !r && "undefined" != typeof process && "env" in process && (r = process.env.DEBUG);
    return r;
   }, exports.useColors = function() {
    if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return !0;
    if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return !1;
    let m;
    return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
   }, exports.storage = function() {
    try {
     return localStorage;
    } catch (error) {}
   }(), exports.destroy = (() => {
    let warned = !1;
    return () => {
     warned || (warned = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
    };
   })(), exports.colors = [ "#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33" ], 
   exports.log = console.debug || console.log || (() => {}), module.exports = __webpack_require__(5650)(exports);
   const {formatters} = module.exports;
   formatters.j = function(v) {
    try {
     return JSON.stringify(v);
    } catch (error) {
     return "[UnexpectedJSONParseError]: " + error.message;
    }
   };
  },
  5650: (module, __unused_webpack_exports, __webpack_require__) => {
   module.exports = function(env) {
    function createDebug(namespace) {
     let prevTime, namespacesCache, enabledCache, enableOverride = null;
     function debug(...args) {
      if (!debug.enabled) return;
      const self = debug, curr = Number(new Date), ms = curr - (prevTime || curr);
      self.diff = ms, self.prev = prevTime, self.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), 
      "string" != typeof args[0] && args.unshift("%O");
      let index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, ((match, format) => {
       if ("%%" === match) return "%";
       index++;
       const formatter = createDebug.formatters[format];
       if ("function" == typeof formatter) {
        const val = args[index];
        match = formatter.call(self, val), args.splice(index, 1), index--;
       }
       return match;
      })), createDebug.formatArgs.call(self, args);
      (self.log || createDebug.log).apply(self, args);
     }
     return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), 
     debug.extend = extend, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", {
      enumerable: !0,
      configurable: !1,
      get: () => null !== enableOverride ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, 
      enabledCache = createDebug.enabled(namespace)), enabledCache),
      set: v => {
       enableOverride = v;
      }
     }), "function" == typeof createDebug.init && createDebug.init(debug), debug;
    }
    function extend(namespace, delimiter) {
     const newDebug = createDebug(this.namespace + (void 0 === delimiter ? ":" : delimiter) + namespace);
     return newDebug.log = this.log, newDebug;
    }
    function matchesTemplate(search, template) {
     let searchIndex = 0, templateIndex = 0, starIndex = -1, matchIndex = 0;
     for (;searchIndex < search.length; ) if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || "*" === template[templateIndex])) "*" === template[templateIndex] ? (starIndex = templateIndex, 
     matchIndex = searchIndex, templateIndex++) : (searchIndex++, templateIndex++); else {
      if (-1 === starIndex) return !1;
      templateIndex = starIndex + 1, matchIndex++, searchIndex = matchIndex;
     }
     for (;templateIndex < template.length && "*" === template[templateIndex]; ) templateIndex++;
     return templateIndex === template.length;
    }
    return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
     if (val instanceof Error) return val.stack || val.message;
     return val;
    }, createDebug.disable = function() {
     const namespaces = [ ...createDebug.names, ...createDebug.skips.map((namespace => "-" + namespace)) ].join(",");
     return createDebug.enable(""), namespaces;
    }, createDebug.enable = function(namespaces) {
     createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], 
     createDebug.skips = [];
     const split = ("string" == typeof namespaces ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
     for (const ns of split) "-" === ns[0] ? createDebug.skips.push(ns.slice(1)) : createDebug.names.push(ns);
    }, createDebug.enabled = function(name) {
     for (const skip of createDebug.skips) if (matchesTemplate(name, skip)) return !1;
     for (const ns of createDebug.names) if (matchesTemplate(name, ns)) return !0;
     return !1;
    }, createDebug.humanize = __webpack_require__(5693), createDebug.destroy = function() {
     console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }, Object.keys(env).forEach((key => {
     createDebug[key] = env[key];
    })), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, 
    createDebug.selectColor = function(namespace) {
     let hash = 0;
     for (let i = 0; i < namespace.length; i++) hash = (hash << 5) - hash + namespace.charCodeAt(i), 
     hash |= 0;
     return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }, createDebug.enable(createDebug.load()), createDebug;
   };
  },
  5915: (module, __unused_webpack_exports, __webpack_require__) => {
   "undefined" == typeof process || "renderer" === process.type || !0 === process.browser || process.__nwjs ? module.exports = __webpack_require__(3631) : module.exports = __webpack_require__(1531);
  },
  1531: (module, exports, __webpack_require__) => {
   const tty = __webpack_require__(2018), util = __webpack_require__(9023);
   exports.init = function(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for (let i = 0; i < keys.length; i++) debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
   }, exports.log = function(...args) {
    return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + "\n");
   }, exports.formatArgs = function(args) {
    const {namespace: name, useColors} = this;
    if (useColors) {
     const c = this.color, colorCode = "[3" + (c < 8 ? c : "8;5;" + c), prefix = `  ${colorCode};1m${name} [0m`;
     args[0] = prefix + args[0].split("\n").join("\n" + prefix), args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "[0m");
    } else args[0] = function() {
     if (exports.inspectOpts.hideDate) return "";
     return (new Date).toISOString() + " ";
    }() + name + " " + args[0];
   }, exports.save = function(namespaces) {
    namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
   }, exports.load = function() {
    return process.env.DEBUG;
   }, exports.useColors = function() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
   }, exports.destroy = util.deprecate((() => {}), "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), 
   exports.colors = [ 6, 2, 3, 4, 5, 1 ];
   try {
    const supportsColor = __webpack_require__(6603);
    supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports.colors = [ 20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221 ]);
   } catch (error) {}
   exports.inspectOpts = Object.keys(process.env).filter((key => /^debug_/i.test(key))).reduce(((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, ((_, k) => k.toUpperCase()));
    let val = process.env[key];
    return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && ("null" === val ? null : Number(val)), 
    obj[prop] = val, obj;
   }), {}), module.exports = __webpack_require__(5650)(exports);
   const {formatters} = module.exports;
   formatters.o = function(v) {
    return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts).split("\n").map((str => str.trim())).join(" ");
   }, formatters.O = function(v) {
    return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts);
   };
  },
  7265: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.of = exports.PropertiesFile = void 0;
   var obj, _fs = (obj = __webpack_require__(9896)) && obj.__esModule ? obj : {
    default: obj
   };
   class PropertiesFile {
    constructor(...args) {
     this.objs = {}, args.length && this.of.apply(this, args);
    }
    makeKeys(line) {
     if (line && 0 !== line.indexOf("#")) {
      let separatorPositions = [ "=", ":" ].map((sep => line.indexOf(sep))).filter((index => index > -1)), splitIndex = Math.min(...separatorPositions), key = line.substring(0, splitIndex).trim(), value = line.substring(splitIndex + 1).trim();
      if (this.objs.hasOwnProperty(key)) if (Array.isArray(this.objs[key])) this.objs[key].push(value); else {
       let oldValue = this.objs[key];
       this.objs[key] = [ oldValue, value ];
      } else {
       const escapedValue = value.replace(/"/g, '\\"').replace(/\\:/g, ":").replace(/\\=/g, "=");
       this.objs[key] = unescape(JSON.parse('"' + escapedValue + '"'));
      }
     }
    }
    addFile(file) {
     let items = _fs.default.readFileSync(file, "utf-8").split(/\r?\n/), me = this;
     for (let i = 0; i < items.length; i++) {
      let line = items[i];
      for (;"\\" === line.substring(line.length - 1); ) {
       line = line.slice(0, -1), line += items[i + 1].trim(), i++;
      }
      me.makeKeys(line);
     }
    }
    of(...args) {
     for (let i = 0; i < args.length; i++) this.addFile(args[i]);
    }
    get(key, defaultValue) {
     if (this.objs.hasOwnProperty(key)) {
      if (Array.isArray(this.objs[key])) {
       let ret = [];
       for (let i = 0; i < this.objs[key].length; i++) ret[i] = this.interpolate(this.objs[key][i]);
       return ret;
      }
      return void 0 === this.objs[key] ? "" : this.interpolate(this.objs[key]);
     }
     return defaultValue;
    }
    getLast(key, defaultValue) {
     if (this.objs.hasOwnProperty(key)) {
      if (Array.isArray(this.objs[key])) {
       var lg = this.objs[key].length;
       return this.interpolate(this.objs[key][lg - 1]);
      }
      return void 0 === this.objs[key] ? "" : this.interpolate(this.objs[key]);
     }
     return defaultValue;
    }
    getFirst(key, defaultValue) {
     return this.objs.hasOwnProperty(key) ? Array.isArray(this.objs[key]) ? this.interpolate(this.objs[key][0]) : void 0 === this.objs[key] ? "" : this.interpolate(this.objs[key]) : defaultValue;
    }
    getInt(key, defaultIntValue) {
     let val = this.getLast(key);
     return val ? parseInt(val, 10) : defaultIntValue;
    }
    getFloat(key, defaultFloatValue) {
     let val = this.getLast(key);
     return val ? parseFloat(val) : defaultFloatValue;
    }
    getBoolean(key, defaultBooleanValue) {
     let val = this.getLast(key);
     return val ? !/^(false|0)$/i.test(b = val) && !!b : defaultBooleanValue || !1;
     var b;
    }
    set(key, value) {
     this.objs[key] = value;
    }
    interpolate(s) {
     let me = this;
     return s.replace(/\\\\/g, "\\").replace(/\$\{([A-Za-z0-9\.\-\_]*)\}/g, (function(match) {
      return me.getLast(match.substring(2, match.length - 1));
     }));
    }
    getKeys() {
     let keys = [];
     for (let key in this.objs) keys.push(key);
     return keys;
    }
    getMatchingKeys(matchstr) {
     let keys = [];
     for (let key in this.objs) -1 !== key.search(matchstr) && keys.push(key);
     return keys;
    }
    reset() {
     this.objs = {};
    }
   }
   exports.PropertiesFile = PropertiesFile;
   exports.of = function(...args) {
    let globalFile = new PropertiesFile;
    return globalFile.of.apply(globalFile, args), globalFile;
   };
  },
  2535: (module, __unused_webpack_exports, __webpack_require__) => {
   module.exports = minimatch, minimatch.Minimatch = Minimatch;
   var path = function() {
    try {
     return __webpack_require__(6928);
    } catch (e) {}
   }() || {
    sep: "/"
   };
   minimatch.sep = path.sep;
   var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}, expand = __webpack_require__(7364), plTypes = {
    "!": {
     open: "(?:(?!(?:",
     close: "))[^/]*?)"
    },
    "?": {
     open: "(?:",
     close: ")?"
    },
    "+": {
     open: "(?:",
     close: ")+"
    },
    "*": {
     open: "(?:",
     close: ")*"
    },
    "@": {
     open: "(?:",
     close: ")"
    }
   }, reSpecials = "().*{}+?[]^$\\!".split("").reduce((function(set, c) {
    return set[c] = !0, set;
   }), {});
   var slashSplit = /\/+/;
   function ext(a, b) {
    b = b || {};
    var t = {};
    return Object.keys(a).forEach((function(k) {
     t[k] = a[k];
    })), Object.keys(b).forEach((function(k) {
     t[k] = b[k];
    })), t;
   }
   function minimatch(p, pattern, options) {
    return assertValidPattern(pattern), options || (options = {}), !(!options.nocomment && "#" === pattern.charAt(0)) && new Minimatch(pattern, options).match(p);
   }
   function Minimatch(pattern, options) {
    if (!(this instanceof Minimatch)) return new Minimatch(pattern, options);
    assertValidPattern(pattern), options || (options = {}), pattern = pattern.trim(), 
    options.allowWindowsEscape || "/" === path.sep || (pattern = pattern.split(path.sep).join("/")), 
    this.options = options, this.set = [], this.pattern = pattern, this.regexp = null, 
    this.negate = !1, this.comment = !1, this.empty = !1, this.partial = !!options.partial, 
    this.make();
   }
   function braceExpand(pattern, options) {
    return options || (options = this instanceof Minimatch ? this.options : {}), pattern = void 0 === pattern ? this.pattern : pattern, 
    assertValidPattern(pattern), options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern) ? [ pattern ] : expand(pattern);
   }
   minimatch.filter = function(pattern, options) {
    return options = options || {}, function(p, i, list) {
     return minimatch(p, pattern, options);
    };
   }, minimatch.defaults = function(def) {
    if (!def || "object" != typeof def || !Object.keys(def).length) return minimatch;
    var orig = minimatch, m = function(p, pattern, options) {
     return orig(p, pattern, ext(def, options));
    };
    return (m.Minimatch = function(pattern, options) {
     return new orig.Minimatch(pattern, ext(def, options));
    }).defaults = function(options) {
     return orig.defaults(ext(def, options)).Minimatch;
    }, m.filter = function(pattern, options) {
     return orig.filter(pattern, ext(def, options));
    }, m.defaults = function(options) {
     return orig.defaults(ext(def, options));
    }, m.makeRe = function(pattern, options) {
     return orig.makeRe(pattern, ext(def, options));
    }, m.braceExpand = function(pattern, options) {
     return orig.braceExpand(pattern, ext(def, options));
    }, m.match = function(list, pattern, options) {
     return orig.match(list, pattern, ext(def, options));
    }, m;
   }, Minimatch.defaults = function(def) {
    return minimatch.defaults(def).Minimatch;
   }, Minimatch.prototype.debug = function() {}, Minimatch.prototype.make = function() {
    var pattern = this.pattern, options = this.options;
    if (!options.nocomment && "#" === pattern.charAt(0)) return void (this.comment = !0);
    if (!pattern) return void (this.empty = !0);
    this.parseNegate();
    var set = this.globSet = this.braceExpand();
    options.debug && (this.debug = function() {
     console.error.apply(console, arguments);
    });
    this.debug(this.pattern, set), set = this.globParts = set.map((function(s) {
     return s.split(slashSplit);
    })), this.debug(this.pattern, set), set = set.map((function(s, si, set) {
     return s.map(this.parse, this);
    }), this), this.debug(this.pattern, set), set = set.filter((function(s) {
     return -1 === s.indexOf(!1);
    })), this.debug(this.pattern, set), this.set = set;
   }, Minimatch.prototype.parseNegate = function() {
    var pattern = this.pattern, negate = !1, options = this.options, negateOffset = 0;
    if (options.nonegate) return;
    for (var i = 0, l = pattern.length; i < l && "!" === pattern.charAt(i); i++) negate = !negate, 
    negateOffset++;
    negateOffset && (this.pattern = pattern.substr(negateOffset));
    this.negate = negate;
   }, minimatch.braceExpand = function(pattern, options) {
    return braceExpand(pattern, options);
   }, Minimatch.prototype.braceExpand = braceExpand;
   var assertValidPattern = function(pattern) {
    if ("string" != typeof pattern) throw new TypeError("invalid pattern");
    if (pattern.length > 65536) throw new TypeError("pattern is too long");
   };
   Minimatch.prototype.parse = function(pattern, isSub) {
    assertValidPattern(pattern);
    var options = this.options;
    if ("**" === pattern) {
     if (!options.noglobstar) return GLOBSTAR;
     pattern = "*";
    }
    if ("" === pattern) return "";
    var stateChar, re = "", hasMagic = !!options.nocase, escaping = !1, patternListStack = [], negativeLists = [], inClass = !1, reClassStart = -1, classStart = -1, patternStart = "." === pattern.charAt(0) ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", self = this;
    function clearStateChar() {
     if (stateChar) {
      switch (stateChar) {
      case "*":
       re += "[^/]*?", hasMagic = !0;
       break;

      case "?":
       re += "[^/]", hasMagic = !0;
       break;

      default:
       re += "\\" + stateChar;
      }
      self.debug("clearStateChar %j %j", stateChar, re), stateChar = !1;
     }
    }
    for (var c, i = 0, len = pattern.length; i < len && (c = pattern.charAt(i)); i++) if (this.debug("%s\t%s %s %j", pattern, i, re, c), 
    escaping && reSpecials[c]) re += "\\" + c, escaping = !1; else switch (c) {
    case "/":
     return !1;

    case "\\":
     clearStateChar(), escaping = !0;
     continue;

    case "?":
    case "*":
    case "+":
    case "@":
    case "!":
     if (this.debug("%s\t%s %s %j <-- stateChar", pattern, i, re, c), inClass) {
      this.debug("  in class"), "!" === c && i === classStart + 1 && (c = "^"), re += c;
      continue;
     }
     self.debug("call clearStateChar %j", stateChar), clearStateChar(), stateChar = c, 
     options.noext && clearStateChar();
     continue;

    case "(":
     if (inClass) {
      re += "(";
      continue;
     }
     if (!stateChar) {
      re += "\\(";
      continue;
     }
     patternListStack.push({
      type: stateChar,
      start: i - 1,
      reStart: re.length,
      open: plTypes[stateChar].open,
      close: plTypes[stateChar].close
     }), re += "!" === stateChar ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", stateChar, re), 
     stateChar = !1;
     continue;

    case ")":
     if (inClass || !patternListStack.length) {
      re += "\\)";
      continue;
     }
     clearStateChar(), hasMagic = !0;
     var pl = patternListStack.pop();
     re += pl.close, "!" === pl.type && negativeLists.push(pl), pl.reEnd = re.length;
     continue;

    case "|":
     if (inClass || !patternListStack.length || escaping) {
      re += "\\|", escaping = !1;
      continue;
     }
     clearStateChar(), re += "|";
     continue;

    case "[":
     if (clearStateChar(), inClass) {
      re += "\\" + c;
      continue;
     }
     inClass = !0, classStart = i, reClassStart = re.length, re += c;
     continue;

    case "]":
     if (i === classStart + 1 || !inClass) {
      re += "\\" + c, escaping = !1;
      continue;
     }
     var cs = pattern.substring(classStart + 1, i);
     try {
      RegExp("[" + cs + "]");
     } catch (er) {
      var sp = this.parse(cs, SUBPARSE);
      re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]", hasMagic = hasMagic || sp[1], 
      inClass = !1;
      continue;
     }
     hasMagic = !0, inClass = !1, re += c;
     continue;

    default:
     clearStateChar(), escaping ? escaping = !1 : !reSpecials[c] || "^" === c && inClass || (re += "\\"), 
     re += c;
    }
    inClass && (cs = pattern.substr(classStart + 1), sp = this.parse(cs, SUBPARSE), 
    re = re.substr(0, reClassStart) + "\\[" + sp[0], hasMagic = hasMagic || sp[1]);
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
     var tail = re.slice(pl.reStart + pl.open.length);
     this.debug("setting tail", re, pl), tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, (function(_, $1, $2) {
      return $2 || ($2 = "\\"), $1 + $1 + $2 + "|";
     })), this.debug("tail=%j\n   %s", tail, tail, pl, re);
     var t = "*" === pl.type ? "[^/]*?" : "?" === pl.type ? "[^/]" : "\\" + pl.type;
     hasMagic = !0, re = re.slice(0, pl.reStart) + t + "\\(" + tail;
    }
    clearStateChar(), escaping && (re += "\\\\");
    var addPatternStart = !1;
    switch (re.charAt(0)) {
    case "[":
    case ".":
    case "(":
     addPatternStart = !0;
    }
    for (var n = negativeLists.length - 1; n > -1; n--) {
     var nl = negativeLists[n], nlBefore = re.slice(0, nl.reStart), nlFirst = re.slice(nl.reStart, nl.reEnd - 8), nlLast = re.slice(nl.reEnd - 8, nl.reEnd), nlAfter = re.slice(nl.reEnd);
     nlLast += nlAfter;
     var openParensBefore = nlBefore.split("(").length - 1, cleanAfter = nlAfter;
     for (i = 0; i < openParensBefore; i++) cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
     var dollar = "";
     "" === (nlAfter = cleanAfter) && isSub !== SUBPARSE && (dollar = "$"), re = nlBefore + nlFirst + nlAfter + dollar + nlLast;
    }
    "" !== re && hasMagic && (re = "(?=.)" + re);
    addPatternStart && (re = patternStart + re);
    if (isSub === SUBPARSE) return [ re, hasMagic ];
    if (!hasMagic) return function(s) {
     return s.replace(/\\(.)/g, "$1");
    }(pattern);
    var flags = options.nocase ? "i" : "";
    try {
     var regExp = new RegExp("^" + re + "$", flags);
    } catch (er) {
     return new RegExp("$.");
    }
    return regExp._glob = pattern, regExp._src = re, regExp;
   };
   var SUBPARSE = {};
   minimatch.makeRe = function(pattern, options) {
    return new Minimatch(pattern, options || {}).makeRe();
   }, Minimatch.prototype.makeRe = function() {
    if (this.regexp || !1 === this.regexp) return this.regexp;
    var set = this.set;
    if (!set.length) return this.regexp = !1, this.regexp;
    var options = this.options, twoStar = options.noglobstar ? "[^/]*?" : options.dot ? "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?" : "(?:(?!(?:\\/|^)\\.).)*?", flags = options.nocase ? "i" : "", re = set.map((function(pattern) {
     return pattern.map((function(p) {
      return p === GLOBSTAR ? twoStar : "string" == typeof p ? function(s) {
       return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      }(p) : p._src;
     })).join("\\/");
    })).join("|");
    re = "^(?:" + re + ")$", this.negate && (re = "^(?!" + re + ").*$");
    try {
     this.regexp = new RegExp(re, flags);
    } catch (ex) {
     this.regexp = !1;
    }
    return this.regexp;
   }, minimatch.match = function(list, pattern, options) {
    var mm = new Minimatch(pattern, options = options || {});
    return list = list.filter((function(f) {
     return mm.match(f);
    })), mm.options.nonull && !list.length && list.push(pattern), list;
   }, Minimatch.prototype.match = function(f, partial) {
    if (void 0 === partial && (partial = this.partial), this.debug("match", f, this.pattern), 
    this.comment) return !1;
    if (this.empty) return "" === f;
    if ("/" === f && partial) return !0;
    var options = this.options;
    "/" !== path.sep && (f = f.split(path.sep).join("/")), f = f.split(slashSplit), 
    this.debug(this.pattern, "split", f);
    var filename, i, set = this.set;
    for (this.debug(this.pattern, "set", set), i = f.length - 1; i >= 0 && !(filename = f[i]); i--) ;
    for (i = 0; i < set.length; i++) {
     var pattern = set[i], file = f;
     if (options.matchBase && 1 === pattern.length && (file = [ filename ]), this.matchOne(file, pattern, partial)) return !!options.flipNegate || !this.negate;
    }
    return !options.flipNegate && this.negate;
   }, Minimatch.prototype.matchOne = function(file, pattern, partial) {
    var options = this.options;
    this.debug("matchOne", {
     this: this,
     file,
     pattern
    }), this.debug("matchOne", file.length, pattern.length);
    for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, 
    pi++) {
     this.debug("matchOne loop");
     var hit, p = pattern[pi], f = file[fi];
     if (this.debug(pattern, p, f), !1 === p) return !1;
     if (p === GLOBSTAR) {
      this.debug("GLOBSTAR", [ pattern, p, f ]);
      var fr = fi, pr = pi + 1;
      if (pr === pl) {
       for (this.debug("** at the end"); fi < fl; fi++) if ("." === file[fi] || ".." === file[fi] || !options.dot && "." === file[fi].charAt(0)) return !1;
       return !0;
      }
      for (;fr < fl; ) {
       var swallowee = file[fr];
       if (this.debug("\nglobstar while", file, fr, pattern, pr, swallowee), this.matchOne(file.slice(fr), pattern.slice(pr), partial)) return this.debug("globstar found match!", fr, fl, swallowee), 
       !0;
       if ("." === swallowee || ".." === swallowee || !options.dot && "." === swallowee.charAt(0)) {
        this.debug("dot detected!", file, fr, pattern, pr);
        break;
       }
       this.debug("globstar swallow a segment, and continue"), fr++;
      }
      return !(!partial || (this.debug("\n>>> no match, partial?", file, fr, pattern, pr), 
      fr !== fl));
     }
     if ("string" == typeof p ? (hit = f === p, this.debug("string match", p, f, hit)) : (hit = f.match(p), 
     this.debug("pattern match", p, f, hit)), !hit) return !1;
    }
    if (fi === fl && pi === pl) return !0;
    if (fi === fl) return partial;
    if (pi === pl) return fi === fl - 1 && "" === file[fi];
    throw new Error("wtf?");
   };
  },
  5693: module => {
   var s = 1e3, m = 60 * s, h = 60 * m, d = 24 * h, w = 7 * d, y = 365.25 * d;
   function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= 1.5 * n;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
   }
   module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if ("string" === type && val.length > 0) return function(str) {
     if ((str = String(str)).length > 100) return;
     var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
     if (!match) return;
     var n = parseFloat(match[1]);
     switch ((match[2] || "ms").toLowerCase()) {
     case "years":
     case "year":
     case "yrs":
     case "yr":
     case "y":
      return n * y;

     case "weeks":
     case "week":
     case "w":
      return n * w;

     case "days":
     case "day":
     case "d":
      return n * d;

     case "hours":
     case "hour":
     case "hrs":
     case "hr":
     case "h":
      return n * h;

     case "minutes":
     case "minute":
     case "mins":
     case "min":
     case "m":
      return n * m;

     case "seconds":
     case "second":
     case "secs":
     case "sec":
     case "s":
      return n * s;

     case "milliseconds":
     case "millisecond":
     case "msecs":
     case "msec":
     case "ms":
      return n;

     default:
      return;
     }
    }(val);
    if ("number" === type && isFinite(val)) return options.long ? function(ms) {
     var msAbs = Math.abs(ms);
     if (msAbs >= d) return plural(ms, msAbs, d, "day");
     if (msAbs >= h) return plural(ms, msAbs, h, "hour");
     if (msAbs >= m) return plural(ms, msAbs, m, "minute");
     if (msAbs >= s) return plural(ms, msAbs, s, "second");
     return ms + " ms";
    }(val) : function(ms) {
     var msAbs = Math.abs(ms);
     if (msAbs >= d) return Math.round(ms / d) + "d";
     if (msAbs >= h) return Math.round(ms / h) + "h";
     if (msAbs >= m) return Math.round(ms / m) + "m";
     if (msAbs >= s) return Math.round(ms / s) + "s";
     return ms + "ms";
    }(val);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
   };
  },
  1213: (module, exports) => {
   var debug;
   exports = module.exports = SemVer, debug = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
    var args = Array.prototype.slice.call(arguments, 0);
    args.unshift("SEMVER"), console.log.apply(console, args);
   } : function() {}, exports.SEMVER_SPEC_VERSION = "2.0.0";
   var MAX_LENGTH = 256, MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6, re = exports.re = [], safeRe = exports.safeRe = [], src = exports.src = [], t = exports.tokens = {}, R = 0;
   function tok(n) {
    t[n] = R++;
   }
   var safeRegexReplacements = [ [ "\\s", 1 ], [ "\\d", MAX_LENGTH ], [ "[a-zA-Z0-9-]", MAX_SAFE_BUILD_LENGTH ] ];
   function makeSafeRe(value) {
    for (var i = 0; i < safeRegexReplacements.length; i++) {
     var token = safeRegexReplacements[i][0], max = safeRegexReplacements[i][1];
     value = value.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
    }
    return value;
   }
   tok("NUMERICIDENTIFIER"), src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*", tok("NUMERICIDENTIFIERLOOSE"), 
   src[t.NUMERICIDENTIFIERLOOSE] = "\\d+", tok("NONNUMERICIDENTIFIER"), src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", 
   tok("MAINVERSION"), src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")", 
   tok("MAINVERSIONLOOSE"), src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")", 
   tok("PRERELEASEIDENTIFIER"), src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", 
   tok("PRERELEASEIDENTIFIERLOOSE"), src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", 
   tok("PRERELEASE"), src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))", 
   tok("PRERELEASELOOSE"), src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))", 
   tok("BUILDIDENTIFIER"), src[t.BUILDIDENTIFIER] = "[a-zA-Z0-9-]+", tok("BUILD"), 
   src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))", 
   tok("FULL"), tok("FULLPLAIN"), src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?", 
   src[t.FULL] = "^" + src[t.FULLPLAIN] + "$", tok("LOOSEPLAIN"), src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?", 
   tok("LOOSE"), src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$", tok("GTLT"), src[t.GTLT] = "((?:<|>)?=?)", 
   tok("XRANGEIDENTIFIERLOOSE"), src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", 
   tok("XRANGEIDENTIFIER"), src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*", 
   tok("XRANGEPLAIN"), src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?", 
   tok("XRANGEPLAINLOOSE"), src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?", 
   tok("XRANGE"), src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$", 
   tok("XRANGELOOSE"), src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$", 
   tok("COERCE"), src[t.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", 
   tok("COERCERTL"), re[t.COERCERTL] = new RegExp(src[t.COERCE], "g"), safeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), "g"), 
   tok("LONETILDE"), src[t.LONETILDE] = "(?:~>?)", tok("TILDETRIM"), src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+", 
   re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g"), safeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), "g");
   tok("TILDE"), src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$", 
   tok("TILDELOOSE"), src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$", 
   tok("LONECARET"), src[t.LONECARET] = "(?:\\^)", tok("CARETTRIM"), src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+", 
   re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g"), safeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), "g");
   tok("CARET"), src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$", 
   tok("CARETLOOSE"), src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$", 
   tok("COMPARATORLOOSE"), src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$", 
   tok("COMPARATOR"), src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$", 
   tok("COMPARATORTRIM"), src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")", 
   re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g"), safeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), "g");
   tok("HYPHENRANGE"), src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$", 
   tok("HYPHENRANGELOOSE"), src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$", 
   tok("STAR"), src[t.STAR] = "(<|>)?=?\\s*\\*";
   for (var i = 0; i < R; i++) debug(i, src[i]), re[i] || (re[i] = new RegExp(src[i]), 
   safeRe[i] = new RegExp(makeSafeRe(src[i])));
   function parse(version, options) {
    if (options && "object" == typeof options || (options = {
     loose: !!options,
     includePrerelease: !1
    }), version instanceof SemVer) return version;
    if ("string" != typeof version) return null;
    if (version.length > MAX_LENGTH) return null;
    if (!(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]).test(version)) return null;
    try {
     return new SemVer(version, options);
    } catch (er) {
     return null;
    }
   }
   function SemVer(version, options) {
    if (options && "object" == typeof options || (options = {
     loose: !!options,
     includePrerelease: !1
    }), version instanceof SemVer) {
     if (version.loose === options.loose) return version;
     version = version.version;
    } else if ("string" != typeof version) throw new TypeError("Invalid Version: " + version);
    if (version.length > MAX_LENGTH) throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
    if (!(this instanceof SemVer)) return new SemVer(version, options);
    debug("SemVer", version, options), this.options = options, this.loose = !!options.loose;
    var m = version.trim().match(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]);
    if (!m) throw new TypeError("Invalid Version: " + version);
    if (this.raw = version, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], 
    this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
    m[4] ? this.prerelease = m[4].split(".").map((function(id) {
     if (/^[0-9]+$/.test(id)) {
      var num = +id;
      if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
     }
     return id;
    })) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
   }
   exports.parse = parse, exports.valid = function(version, options) {
    var v = parse(version, options);
    return v ? v.version : null;
   }, exports.clean = function(version, options) {
    var s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
   }, exports.SemVer = SemVer, SemVer.prototype.format = function() {
    return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), 
    this.version;
   }, SemVer.prototype.toString = function() {
    return this.version;
   }, SemVer.prototype.compare = function(other) {
    return debug("SemVer.compare", this.version, this.options, other), other instanceof SemVer || (other = new SemVer(other, this.options)), 
    this.compareMain(other) || this.comparePre(other);
   }, SemVer.prototype.compareMain = function(other) {
    return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
   }, SemVer.prototype.comparePre = function(other) {
    if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length) return -1;
    if (!this.prerelease.length && other.prerelease.length) return 1;
    if (!this.prerelease.length && !other.prerelease.length) return 0;
    var i = 0;
    do {
     var a = this.prerelease[i], b = other.prerelease[i];
     if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b) return 0;
     if (void 0 === b) return 1;
     if (void 0 === a) return -1;
     if (a !== b) return compareIdentifiers(a, b);
    } while (++i);
   }, SemVer.prototype.compareBuild = function(other) {
    other instanceof SemVer || (other = new SemVer(other, this.options));
    var i = 0;
    do {
     var a = this.build[i], b = other.build[i];
     if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b) return 0;
     if (void 0 === b) return 1;
     if (void 0 === a) return -1;
     if (a !== b) return compareIdentifiers(a, b);
    } while (++i);
   }, SemVer.prototype.inc = function(release, identifier) {
    switch (release) {
    case "premajor":
     this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
     break;

    case "preminor":
     this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
     break;

    case "prepatch":
     this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
     break;

    case "prerelease":
     0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
     break;

    case "major":
     0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, 
     this.minor = 0, this.patch = 0, this.prerelease = [];
     break;

    case "minor":
     0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, 
     this.prerelease = [];
     break;

    case "patch":
     0 === this.prerelease.length && this.patch++, this.prerelease = [];
     break;

    case "pre":
     if (0 === this.prerelease.length) this.prerelease = [ 0 ]; else {
      for (var i = this.prerelease.length; --i >= 0; ) "number" == typeof this.prerelease[i] && (this.prerelease[i]++, 
      i = -2);
      -1 === i && this.prerelease.push(0);
     }
     identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [ identifier, 0 ]) : this.prerelease = [ identifier, 0 ]);
     break;

    default:
     throw new Error("invalid increment argument: " + release);
    }
    return this.format(), this.raw = this.version, this;
   }, exports.inc = function(version, release, loose, identifier) {
    "string" == typeof loose && (identifier = loose, loose = void 0);
    try {
     return new SemVer(version, loose).inc(release, identifier).version;
    } catch (er) {
     return null;
    }
   }, exports.diff = function(version1, version2) {
    if (eq(version1, version2)) return null;
    var v1 = parse(version1), v2 = parse(version2), prefix = "";
    if (v1.prerelease.length || v2.prerelease.length) {
     prefix = "pre";
     var defaultResult = "prerelease";
    }
    for (var key in v1) if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key]) return prefix + key;
    return defaultResult;
   }, exports.compareIdentifiers = compareIdentifiers;
   var numeric = /^[0-9]+$/;
   function compareIdentifiers(a, b) {
    var anum = numeric.test(a), bnum = numeric.test(b);
    return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
   }
   function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
   }
   function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
   }
   function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
   }
   function eq(a, b, loose) {
    return 0 === compare(a, b, loose);
   }
   function neq(a, b, loose) {
    return 0 !== compare(a, b, loose);
   }
   function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
   }
   function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
   }
   function cmp(a, op, b, loose) {
    switch (op) {
    case "===":
     return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), 
     a === b;

    case "!==":
     return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), 
     a !== b;

    case "":
    case "=":
    case "==":
     return eq(a, b, loose);

    case "!=":
     return neq(a, b, loose);

    case ">":
     return gt(a, b, loose);

    case ">=":
     return gte(a, b, loose);

    case "<":
     return lt(a, b, loose);

    case "<=":
     return lte(a, b, loose);

    default:
     throw new TypeError("Invalid operator: " + op);
    }
   }
   function Comparator(comp, options) {
    if (options && "object" == typeof options || (options = {
     loose: !!options,
     includePrerelease: !1
    }), comp instanceof Comparator) {
     if (comp.loose === !!options.loose) return comp;
     comp = comp.value;
    }
    if (!(this instanceof Comparator)) return new Comparator(comp, options);
    comp = comp.trim().split(/\s+/).join(" "), debug("comparator", comp, options), this.options = options, 
    this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, 
    debug("comp", this);
   }
   exports.rcompareIdentifiers = function(a, b) {
    return compareIdentifiers(b, a);
   }, exports.major = function(a, loose) {
    return new SemVer(a, loose).major;
   }, exports.minor = function(a, loose) {
    return new SemVer(a, loose).minor;
   }, exports.patch = function(a, loose) {
    return new SemVer(a, loose).patch;
   }, exports.compare = compare, exports.compareLoose = function(a, b) {
    return compare(a, b, !0);
   }, exports.compareBuild = function(a, b, loose) {
    var versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
   }, exports.rcompare = function(a, b, loose) {
    return compare(b, a, loose);
   }, exports.sort = function(list, loose) {
    return list.sort((function(a, b) {
     return exports.compareBuild(a, b, loose);
    }));
   }, exports.rsort = function(list, loose) {
    return list.sort((function(a, b) {
     return exports.compareBuild(b, a, loose);
    }));
   }, exports.gt = gt, exports.lt = lt, exports.eq = eq, exports.neq = neq, exports.gte = gte, 
   exports.lte = lte, exports.cmp = cmp, exports.Comparator = Comparator;
   var ANY = {};
   function Range(range, options) {
    if (options && "object" == typeof options || (options = {
     loose: !!options,
     includePrerelease: !1
    }), range instanceof Range) return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
    if (range instanceof Comparator) return new Range(range.value, options);
    if (!(this instanceof Range)) return new Range(range, options);
    if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, 
    this.raw = range.trim().split(/\s+/).join(" "), this.set = this.raw.split("||").map((function(range) {
     return this.parseRange(range.trim());
    }), this).filter((function(c) {
     return c.length;
    })), !this.set.length) throw new TypeError("Invalid SemVer Range: " + this.raw);
    this.format();
   }
   function isSatisfiable(comparators, options) {
    for (var result = !0, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop(); result && remainingComparators.length; ) result = remainingComparators.every((function(otherComparator) {
     return testComparator.intersects(otherComparator, options);
    })), testComparator = remainingComparators.pop();
    return result;
   }
   function isX(id) {
    return !id || "x" === id.toLowerCase() || "*" === id;
   }
   function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
    return ((from = isX(fM) ? "" : isX(fm) ? ">=" + fM + ".0.0" : isX(fp) ? ">=" + fM + "." + fm + ".0" : ">=" + from) + " " + (to = isX(tM) ? "" : isX(tm) ? "<" + (+tM + 1) + ".0.0" : isX(tp) ? "<" + tM + "." + (+tm + 1) + ".0" : tpr ? "<=" + tM + "." + tm + "." + tp + "-" + tpr : "<=" + to)).trim();
   }
   function testSet(set, version, options) {
    for (var i = 0; i < set.length; i++) if (!set[i].test(version)) return !1;
    if (version.prerelease.length && !options.includePrerelease) {
     for (i = 0; i < set.length; i++) if (debug(set[i].semver), set[i].semver !== ANY && set[i].semver.prerelease.length > 0) {
      var allowed = set[i].semver;
      if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return !0;
     }
     return !1;
    }
    return !0;
   }
   function satisfies(version, range, options) {
    try {
     range = new Range(range, options);
    } catch (er) {
     return !1;
    }
    return range.test(version);
   }
   function outside(version, range, hilo, options) {
    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (version = new SemVer(version, options), range = new Range(range, options), 
    hilo) {
    case ">":
     gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
     break;

    case "<":
     gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
     break;

    default:
     throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options)) return !1;
    for (var i = 0; i < range.set.length; ++i) {
     var comparators = range.set[i], high = null, low = null;
     if (comparators.forEach((function(comparator) {
      comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, 
      low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
     })), high.operator === comp || high.operator === ecomp) return !1;
     if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return !1;
     if (low.operator === ecomp && ltfn(version, low.semver)) return !1;
    }
    return !0;
   }
   Comparator.prototype.parse = function(comp) {
    var r = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR], m = comp.match(r);
    if (!m) throw new TypeError("Invalid comparator: " + comp);
    this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), 
    m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
   }, Comparator.prototype.toString = function() {
    return this.value;
   }, Comparator.prototype.test = function(version) {
    if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY) return !0;
    if ("string" == typeof version) try {
     version = new SemVer(version, this.options);
    } catch (er) {
     return !1;
    }
    return cmp(version, this.operator, this.semver, this.options);
   }, Comparator.prototype.intersects = function(comp, options) {
    if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
    var rangeTmp;
    if (options && "object" == typeof options || (options = {
     loose: !!options,
     includePrerelease: !1
    }), "" === this.operator) return "" === this.value || (rangeTmp = new Range(comp.value, options), 
    satisfies(this.value, rangeTmp, options));
    if ("" === comp.operator) return "" === comp.value || (rangeTmp = new Range(this.value, options), 
    satisfies(comp.semver, rangeTmp, options));
    var sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
    return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
   }, exports.Range = Range, Range.prototype.format = function() {
    return this.range = this.set.map((function(comps) {
     return comps.join(" ").trim();
    })).join("||").trim(), this.range;
   }, Range.prototype.toString = function() {
    return this.range;
   }, Range.prototype.parseRange = function(range) {
    var loose = this.options.loose, hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE];
    range = range.replace(hr, hyphenReplace), debug("hyphen replace", range), range = range.replace(safeRe[t.COMPARATORTRIM], "$1$2$3"), 
    debug("comparator trim", range, safeRe[t.COMPARATORTRIM]), range = (range = (range = range.replace(safeRe[t.TILDETRIM], "$1~")).replace(safeRe[t.CARETTRIM], "$1^")).split(/\s+/).join(" ");
    var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR], set = range.split(" ").map((function(comp) {
     return function(comp, options) {
      return debug("comp", comp, options), comp = function(comp, options) {
       return comp.trim().split(/\s+/).map((function(comp) {
        return function(comp, options) {
         debug("caret", comp, options);
         var r = options.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET];
         return comp.replace(r, (function(_, M, m, p, pr) {
          var ret;
          return debug("caret", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = "0" === M ? ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0" : pr ? (debug("replaceCaret pr", pr), 
          ret = "0" === M ? "0" === m ? ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0") : (debug("no pr"), 
          ret = "0" === M ? "0" === m ? ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0"), 
          debug("caret return", ret), ret;
         }));
        }(comp, options);
       })).join(" ");
      }(comp, options), debug("caret", comp), comp = function(comp, options) {
       return comp.trim().split(/\s+/).map((function(comp) {
        return function(comp, options) {
         var r = options.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE];
         return comp.replace(r, (function(_, M, m, p, pr) {
          var ret;
          return debug("tilde", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : pr ? (debug("replaceTilde pr", pr), 
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0") : ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0", 
          debug("tilde return", ret), ret;
         }));
        }(comp, options);
       })).join(" ");
      }(comp, options), debug("tildes", comp), comp = function(comp, options) {
       return debug("replaceXRanges", comp, options), comp.split(/\s+/).map((function(comp) {
        return function(comp, options) {
         comp = comp.trim();
         var r = options.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE];
         return comp.replace(r, (function(ret, gtlt, M, m, p, pr) {
          debug("xRange", comp, ret, gtlt, M, m, p, pr);
          var xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
          return "=" === gtlt && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", 
          xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), 
          p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, 
          p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), ret = gtlt + M + "." + m + "." + p + pr) : xm ? ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr : xp && (ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr), 
          debug("xRange return", ret), ret;
         }));
        }(comp, options);
       })).join(" ");
      }(comp, options), debug("xrange", comp), comp = function(comp, options) {
       return debug("replaceStars", comp, options), comp.trim().replace(safeRe[t.STAR], "");
      }(comp, options), debug("stars", comp), comp;
     }(comp, this.options);
    }), this).join(" ").split(/\s+/);
    return this.options.loose && (set = set.filter((function(comp) {
     return !!comp.match(compRe);
    }))), set = set.map((function(comp) {
     return new Comparator(comp, this.options);
    }), this);
   }, Range.prototype.intersects = function(range, options) {
    if (!(range instanceof Range)) throw new TypeError("a Range is required");
    return this.set.some((function(thisComparators) {
     return isSatisfiable(thisComparators, options) && range.set.some((function(rangeComparators) {
      return isSatisfiable(rangeComparators, options) && thisComparators.every((function(thisComparator) {
       return rangeComparators.every((function(rangeComparator) {
        return thisComparator.intersects(rangeComparator, options);
       }));
      }));
     }));
    }));
   }, exports.toComparators = function(range, options) {
    return new Range(range, options).set.map((function(comp) {
     return comp.map((function(c) {
      return c.value;
     })).join(" ").trim().split(" ");
    }));
   }, Range.prototype.test = function(version) {
    if (!version) return !1;
    if ("string" == typeof version) try {
     version = new SemVer(version, this.options);
    } catch (er) {
     return !1;
    }
    for (var i = 0; i < this.set.length; i++) if (testSet(this.set[i], version, this.options)) return !0;
    return !1;
   }, exports.satisfies = satisfies, exports.maxSatisfying = function(versions, range, options) {
    var max = null, maxSV = null;
    try {
     var rangeObj = new Range(range, options);
    } catch (er) {
     return null;
    }
    return versions.forEach((function(v) {
     rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (maxSV = new SemVer(max = v, options)));
    })), max;
   }, exports.minSatisfying = function(versions, range, options) {
    var min = null, minSV = null;
    try {
     var rangeObj = new Range(range, options);
    } catch (er) {
     return null;
    }
    return versions.forEach((function(v) {
     rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (minSV = new SemVer(min = v, options)));
    })), min;
   }, exports.minVersion = function(range, loose) {
    range = new Range(range, loose);
    var minver = new SemVer("0.0.0");
    if (range.test(minver)) return minver;
    if (minver = new SemVer("0.0.0-0"), range.test(minver)) return minver;
    minver = null;
    for (var i = 0; i < range.set.length; ++i) {
     range.set[i].forEach((function(comparator) {
      var compver = new SemVer(comparator.semver.version);
      switch (comparator.operator) {
      case ">":
       0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), 
       compver.raw = compver.format();

      case "":
      case ">=":
       minver && !gt(minver, compver) || (minver = compver);
       break;

      case "<":
      case "<=":
       break;

      default:
       throw new Error("Unexpected operation: " + comparator.operator);
      }
     }));
    }
    if (minver && range.test(minver)) return minver;
    return null;
   }, exports.validRange = function(range, options) {
    try {
     return new Range(range, options).range || "*";
    } catch (er) {
     return null;
    }
   }, exports.ltr = function(version, range, options) {
    return outside(version, range, "<", options);
   }, exports.gtr = function(version, range, options) {
    return outside(version, range, ">", options);
   }, exports.outside = outside, exports.prerelease = function(version, options) {
    var parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
   }, exports.intersects = function(r1, r2, options) {
    return r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2);
   }, exports.coerce = function(version, options) {
    if (version instanceof SemVer) return version;
    "number" == typeof version && (version = String(version));
    if ("string" != typeof version) return null;
    var match = null;
    if ((options = options || {}).rtl) {
     for (var next; (next = safeRe[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); ) match && next.index + next[0].length === match.index + match[0].length || (match = next), 
     safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
     safeRe[t.COERCERTL].lastIndex = -1;
    } else match = version.match(safeRe[t.COERCE]);
    if (null === match) return null;
    return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
   };
  },
  829: (__unused_webpack_module, exports) => {
   "use strict";
   function parseArgsStringToArgv(value, env, file) {
    var match, myRegexp = /([^\s'"]([^\s'"]*(['"])([^\3]*?)\3)+[^\s'"]*)|[^\s'"]+|(['"])([^\5]*?)\5/gi, myString = value, myArray = [];
    env && myArray.push(env), file && myArray.push(file);
    do {
     null !== (match = myRegexp.exec(myString)) && myArray.push(firstString(match[1], match[6], match[0]));
    } while (null !== match);
    return myArray;
   }
   function firstString() {
    for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
    for (var i = 0; i < args.length; i++) {
     var arg = args[i];
     if ("string" == typeof arg) return arg;
    }
   }
   exports.__esModule = !0, exports.default = parseArgsStringToArgv, exports.parseArgsStringToArgv = parseArgsStringToArgv;
  },
  6603: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const os = __webpack_require__(857), tty = __webpack_require__(2018), hasFlag = __webpack_require__(4568), {env} = process;
   let flagForceColor;
   function supportsColor(haveStream, {streamIsTTY, sniffFlags = !0} = {}) {
    const noFlagForceColor = function() {
     if ("FORCE_COLOR" in env) return "true" === env.FORCE_COLOR ? 1 : "false" === env.FORCE_COLOR ? 0 : 0 === env.FORCE_COLOR.length ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
    }();
    void 0 !== noFlagForceColor && (flagForceColor = noFlagForceColor);
    const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
    if (0 === forceColor) return 0;
    if (sniffFlags) {
     if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) return 3;
     if (hasFlag("color=256")) return 2;
    }
    if (haveStream && !streamIsTTY && void 0 === forceColor) return 0;
    const min = forceColor || 0;
    if ("dumb" === env.TERM) return min;
    if ("win32" === process.platform) {
     const osRelease = os.release().split(".");
     return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
    }
    if ("CI" in env) return [ "TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE" ].some((sign => sign in env)) || "codeship" === env.CI_NAME ? 1 : min;
    if ("TEAMCITY_VERSION" in env) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    if ("truecolor" === env.COLORTERM) return 3;
    if ("TERM_PROGRAM" in env) {
     const version = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
     switch (env.TERM_PROGRAM) {
     case "iTerm.app":
      return version >= 3 ? 3 : 2;

     case "Apple_Terminal":
      return 2;
     }
    }
    return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || "COLORTERM" in env ? 1 : min;
   }
   function getSupportLevel(stream, options = {}) {
    return function(level) {
     return 0 !== level && {
      level,
      hasBasic: !0,
      has256: level >= 2,
      has16m: level >= 3
     };
    }(supportsColor(stream, {
     streamIsTTY: stream && stream.isTTY,
     ...options
    }));
   }
   hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? flagForceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (flagForceColor = 1), 
   module.exports = {
    supportsColor: getSupportLevel,
    stdout: getSupportLevel({
     isTTY: tty.isatty(1)
    }),
    stderr: getSupportLevel({
     isTTY: tty.isatty(2)
    })
   };
  },
  3663: (module, __unused_webpack_exports, __webpack_require__) => {
   module.exports = __webpack_require__(8393);
  },
  8393: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   __webpack_require__(9278);
   var debug, tls = __webpack_require__(4756), http = __webpack_require__(8611), https = __webpack_require__(5692), events = __webpack_require__(4434), util = (__webpack_require__(2613), 
   __webpack_require__(9023));
   function TunnelingAgent(options) {
    var self = this;
    self.options = options || {}, self.proxyOptions = self.options.proxy || {}, self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets, 
    self.requests = [], self.sockets = [], self.on("free", (function(socket, host, port, localAddress) {
     for (var options = toOptions(host, port, localAddress), i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) return self.requests.splice(i, 1), 
      void pending.request.onSocket(socket);
     }
     socket.destroy(), self.removeSocket(socket);
    }));
   }
   function createSecureSocket(options, cb) {
    var self = this;
    TunnelingAgent.prototype.createSocket.call(self, options, (function(socket) {
     var hostHeader = options.request.getHeader("host"), tlsOptions = mergeOptions({}, self.options, {
      socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
     }), secureSocket = tls.connect(0, tlsOptions);
     self.sockets[self.sockets.indexOf(socket)] = secureSocket, cb(secureSocket);
    }));
   }
   function toOptions(host, port, localAddress) {
    return "string" == typeof host ? {
     host,
     port,
     localAddress
    } : host;
   }
   function mergeOptions(target) {
    for (var i = 1, len = arguments.length; i < len; ++i) {
     var overrides = arguments[i];
     if ("object" == typeof overrides) for (var keys = Object.keys(overrides), j = 0, keyLen = keys.length; j < keyLen; ++j) {
      var k = keys[j];
      void 0 !== overrides[k] && (target[k] = overrides[k]);
     }
    }
    return target;
   }
   exports.httpOverHttp = function(options) {
    var agent = new TunnelingAgent(options);
    return agent.request = http.request, agent;
   }, exports.httpsOverHttp = function(options) {
    var agent = new TunnelingAgent(options);
    return agent.request = http.request, agent.createSocket = createSecureSocket, agent.defaultPort = 443, 
    agent;
   }, exports.httpOverHttps = function(options) {
    var agent = new TunnelingAgent(options);
    return agent.request = https.request, agent;
   }, exports.httpsOverHttps = function(options) {
    var agent = new TunnelingAgent(options);
    return agent.request = https.request, agent.createSocket = createSecureSocket, agent.defaultPort = 443, 
    agent;
   }, util.inherits(TunnelingAgent, events.EventEmitter), TunnelingAgent.prototype.addRequest = function(req, host, port, localAddress) {
    var self = this, options = mergeOptions({
     request: req
    }, self.options, toOptions(host, port, localAddress));
    self.sockets.length >= this.maxSockets ? self.requests.push(options) : self.createSocket(options, (function(socket) {
     function onFree() {
      self.emit("free", socket, options);
     }
     function onCloseOrRemove(err) {
      self.removeSocket(socket), socket.removeListener("free", onFree), socket.removeListener("close", onCloseOrRemove), 
      socket.removeListener("agentRemove", onCloseOrRemove);
     }
     socket.on("free", onFree), socket.on("close", onCloseOrRemove), socket.on("agentRemove", onCloseOrRemove), 
     req.onSocket(socket);
    }));
   }, TunnelingAgent.prototype.createSocket = function(options, cb) {
    var self = this, placeholder = {};
    self.sockets.push(placeholder);
    var connectOptions = mergeOptions({}, self.proxyOptions, {
     method: "CONNECT",
     path: options.host + ":" + options.port,
     agent: !1,
     headers: {
      host: options.host + ":" + options.port
     }
    });
    options.localAddress && (connectOptions.localAddress = options.localAddress), connectOptions.proxyAuth && (connectOptions.headers = connectOptions.headers || {}, 
    connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64")), 
    debug("making CONNECT request");
    var connectReq = self.request(connectOptions);
    function onConnect(res, socket, head) {
     var error;
     return connectReq.removeAllListeners(), socket.removeAllListeners(), 200 !== res.statusCode ? (debug("tunneling socket could not be established, statusCode=%d", res.statusCode), 
     socket.destroy(), (error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode)).code = "ECONNRESET", 
     options.request.emit("error", error), void self.removeSocket(placeholder)) : head.length > 0 ? (debug("got illegal response body from proxy"), 
     socket.destroy(), (error = new Error("got illegal response body from proxy")).code = "ECONNRESET", 
     options.request.emit("error", error), void self.removeSocket(placeholder)) : (debug("tunneling connection has established"), 
     self.sockets[self.sockets.indexOf(placeholder)] = socket, cb(socket));
    }
    connectReq.useChunkedEncodingByDefault = !1, connectReq.once("response", (function(res) {
     res.upgrade = !0;
    })), connectReq.once("upgrade", (function(res, socket, head) {
     process.nextTick((function() {
      onConnect(res, socket, head);
     }));
    })), connectReq.once("connect", onConnect), connectReq.once("error", (function(cause) {
     connectReq.removeAllListeners(), debug("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
     var error = new Error("tunneling socket could not be established, cause=" + cause.message);
     error.code = "ECONNRESET", options.request.emit("error", error), self.removeSocket(placeholder);
    })), connectReq.end();
   }, TunnelingAgent.prototype.removeSocket = function(socket) {
    var pos = this.sockets.indexOf(socket);
    if (-1 !== pos) {
     this.sockets.splice(pos, 1);
     var pending = this.requests.shift();
     pending && this.createSocket(pending, (function(socket) {
      pending.request.onSocket(socket);
     }));
    }
   }, debug = process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG) ? function() {
    var args = Array.prototype.slice.call(arguments);
    "string" == typeof args[0] ? args[0] = "TUNNEL: " + args[0] : args.unshift("TUNNEL:"), 
    console.error.apply(console, args);
   } : function() {}, exports.debug = debug;
  },
  3001: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const Client = __webpack_require__(2138), Dispatcher = __webpack_require__(7704), errors = __webpack_require__(3898), Pool = __webpack_require__(7047), BalancedPool = __webpack_require__(3788), Agent = __webpack_require__(1180), util = __webpack_require__(8869), {InvalidArgumentError} = errors, api = __webpack_require__(130), buildConnector = __webpack_require__(5651), MockClient = __webpack_require__(1014), MockAgent = __webpack_require__(992), MockPool = __webpack_require__(7099), mockErrors = __webpack_require__(4850), ProxyAgent = __webpack_require__(1133), RetryHandler = __webpack_require__(3786), {getGlobalDispatcher, setGlobalDispatcher} = __webpack_require__(5710), DecoratorHandler = __webpack_require__(899), RedirectHandler = __webpack_require__(4386), createRedirectInterceptor = __webpack_require__(8838);
   let hasCrypto;
   try {
    __webpack_require__(6982), hasCrypto = !0;
   } catch {
    hasCrypto = !1;
   }
   function makeDispatcher(fn) {
    return (url, opts, handler) => {
     if ("function" == typeof opts && (handler = opts, opts = null), !url || "string" != typeof url && "object" != typeof url && !(url instanceof URL)) throw new InvalidArgumentError("invalid url");
     if (null != opts && "object" != typeof opts) throw new InvalidArgumentError("invalid opts");
     if (opts && null != opts.path) {
      if ("string" != typeof opts.path) throw new InvalidArgumentError("invalid opts.path");
      let path = opts.path;
      opts.path.startsWith("/") || (path = `/${path}`), url = new URL(util.parseOrigin(url).origin + path);
     } else opts || (opts = "object" == typeof url ? url : {}), url = util.parseURL(url);
     const {agent, dispatcher = getGlobalDispatcher()} = opts;
     if (agent) throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
     return fn.call(dispatcher, {
      ...opts,
      origin: url.origin,
      path: url.search ? `${url.pathname}${url.search}` : url.pathname,
      method: opts.method || (opts.body ? "PUT" : "GET")
     }, handler);
    };
   }
   if (Object.assign(Dispatcher.prototype, api), module.exports.Dispatcher = Dispatcher, 
   module.exports.Client = Client, module.exports.Pool = Pool, module.exports.BalancedPool = BalancedPool, 
   module.exports.Agent = Agent, module.exports.ProxyAgent = ProxyAgent, module.exports.RetryHandler = RetryHandler, 
   module.exports.DecoratorHandler = DecoratorHandler, module.exports.RedirectHandler = RedirectHandler, 
   module.exports.createRedirectInterceptor = createRedirectInterceptor, module.exports.buildConnector = buildConnector, 
   module.exports.errors = errors, module.exports.setGlobalDispatcher = setGlobalDispatcher, 
   module.exports.getGlobalDispatcher = getGlobalDispatcher, util.nodeMajor > 16 || 16 === util.nodeMajor && util.nodeMinor >= 8) {
    let fetchImpl = null;
    module.exports.fetch = async function(resource) {
     fetchImpl || (fetchImpl = __webpack_require__(5306).fetch);
     try {
      return await fetchImpl(...arguments);
     } catch (err) {
      throw "object" == typeof err && Error.captureStackTrace(err, this), err;
     }
    }, module.exports.Headers = __webpack_require__(5472).Headers, module.exports.Response = __webpack_require__(3767).Response, 
    module.exports.Request = __webpack_require__(8899).Request, module.exports.FormData = __webpack_require__(9706).FormData, 
    module.exports.File = __webpack_require__(3534).File, module.exports.FileReader = __webpack_require__(2495).FileReader;
    const {setGlobalOrigin, getGlobalOrigin} = __webpack_require__(6367);
    module.exports.setGlobalOrigin = setGlobalOrigin, module.exports.getGlobalOrigin = getGlobalOrigin;
    const {CacheStorage} = __webpack_require__(2609), {kConstruct} = __webpack_require__(6889);
    module.exports.caches = new CacheStorage(kConstruct);
   }
   if (util.nodeMajor >= 16) {
    const {deleteCookie, getCookies, getSetCookies, setCookie} = __webpack_require__(4305);
    module.exports.deleteCookie = deleteCookie, module.exports.getCookies = getCookies, 
    module.exports.getSetCookies = getSetCookies, module.exports.setCookie = setCookie;
    const {parseMIMEType, serializeAMimeType} = __webpack_require__(3587);
    module.exports.parseMIMEType = parseMIMEType, module.exports.serializeAMimeType = serializeAMimeType;
   }
   if (util.nodeMajor >= 18 && hasCrypto) {
    const {WebSocket} = __webpack_require__(9658);
    module.exports.WebSocket = WebSocket;
   }
   module.exports.request = makeDispatcher(api.request), module.exports.stream = makeDispatcher(api.stream), 
   module.exports.pipeline = makeDispatcher(api.pipeline), module.exports.connect = makeDispatcher(api.connect), 
   module.exports.upgrade = makeDispatcher(api.upgrade), module.exports.MockClient = MockClient, 
   module.exports.MockPool = MockPool, module.exports.MockAgent = MockAgent, module.exports.mockErrors = mockErrors;
  },
  1180: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {InvalidArgumentError} = __webpack_require__(3898), {kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors} = __webpack_require__(8028), DispatcherBase = __webpack_require__(524), Pool = __webpack_require__(7047), Client = __webpack_require__(2138), util = __webpack_require__(8869), createRedirectInterceptor = __webpack_require__(8838), {WeakRef, FinalizationRegistry} = __webpack_require__(383)(), kOnConnect = Symbol("onConnect"), kOnDisconnect = Symbol("onDisconnect"), kOnConnectionError = Symbol("onConnectionError"), kMaxRedirections = Symbol("maxRedirections"), kOnDrain = Symbol("onDrain"), kFactory = Symbol("factory"), kFinalizer = Symbol("finalizer"), kOptions = Symbol("options");
   function defaultFactory(origin, opts) {
    return opts && 1 === opts.connections ? new Client(origin, opts) : new Pool(origin, opts);
   }
   module.exports = class extends DispatcherBase {
    constructor({factory = defaultFactory, maxRedirections = 0, connect, ...options} = {}) {
     if (super(), "function" != typeof factory) throw new InvalidArgumentError("factory must be a function.");
     if (null != connect && "function" != typeof connect && "object" != typeof connect) throw new InvalidArgumentError("connect must be a function or an object");
     if (!Number.isInteger(maxRedirections) || maxRedirections < 0) throw new InvalidArgumentError("maxRedirections must be a positive number");
     connect && "function" != typeof connect && (connect = {
      ...connect
     }), this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [ createRedirectInterceptor({
      maxRedirections
     }) ], this[kOptions] = {
      ...util.deepClone(options),
      connect
     }, this[kOptions].interceptors = options.interceptors ? {
      ...options.interceptors
     } : void 0, this[kMaxRedirections] = maxRedirections, this[kFactory] = factory, 
     this[kClients] = new Map, this[kFinalizer] = new FinalizationRegistry((key => {
      const ref = this[kClients].get(key);
      void 0 !== ref && void 0 === ref.deref() && this[kClients].delete(key);
     }));
     const agent = this;
     this[kOnDrain] = (origin, targets) => {
      agent.emit("drain", origin, [ agent, ...targets ]);
     }, this[kOnConnect] = (origin, targets) => {
      agent.emit("connect", origin, [ agent, ...targets ]);
     }, this[kOnDisconnect] = (origin, targets, err) => {
      agent.emit("disconnect", origin, [ agent, ...targets ], err);
     }, this[kOnConnectionError] = (origin, targets, err) => {
      agent.emit("connectionError", origin, [ agent, ...targets ], err);
     };
    }
    get [kRunning]() {
     let ret = 0;
     for (const ref of this[kClients].values()) {
      const client = ref.deref();
      client && (ret += client[kRunning]);
     }
     return ret;
    }
    [kDispatch](opts, handler) {
     let key;
     if (!opts.origin || !("string" == typeof opts.origin || opts.origin instanceof URL)) throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
     key = String(opts.origin);
     const ref = this[kClients].get(key);
     let dispatcher = ref ? ref.deref() : null;
     return dispatcher || (dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]), 
     this[kClients].set(key, new WeakRef(dispatcher)), this[kFinalizer].register(dispatcher, key)), 
     dispatcher.dispatch(opts, handler);
    }
    async [kClose]() {
     const closePromises = [];
     for (const ref of this[kClients].values()) {
      const client = ref.deref();
      client && closePromises.push(client.close());
     }
     await Promise.all(closePromises);
    }
    async [kDestroy](err) {
     const destroyPromises = [];
     for (const ref of this[kClients].values()) {
      const client = ref.deref();
      client && destroyPromises.push(client.destroy(err));
     }
     await Promise.all(destroyPromises);
    }
   };
  },
  4185: (module, __unused_webpack_exports, __webpack_require__) => {
   const {addAbortListener} = __webpack_require__(8869), {RequestAbortedError} = __webpack_require__(3898), kListener = Symbol("kListener"), kSignal = Symbol("kSignal");
   function abort(self) {
    self.abort ? self.abort() : self.onError(new RequestAbortedError);
   }
   module.exports = {
    addSignal: function(self, signal) {
     self[kSignal] = null, self[kListener] = null, signal && (signal.aborted ? abort(self) : (self[kSignal] = signal, 
     self[kListener] = () => {
      abort(self);
     }, addAbortListener(self[kSignal], self[kListener])));
    },
    removeSignal: function(self) {
     self[kSignal] && ("removeEventListener" in self[kSignal] ? self[kSignal].removeEventListener("abort", self[kListener]) : self[kSignal].removeListener("abort", self[kListener]), 
     self[kSignal] = null, self[kListener] = null);
    }
   };
  },
  8069: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {AsyncResource} = __webpack_require__(290), {InvalidArgumentError, RequestAbortedError, SocketError} = __webpack_require__(3898), util = __webpack_require__(8869), {addSignal, removeSignal} = __webpack_require__(4185);
   class ConnectHandler extends AsyncResource {
    constructor(opts, callback) {
     if (!opts || "object" != typeof opts) throw new InvalidArgumentError("invalid opts");
     if ("function" != typeof callback) throw new InvalidArgumentError("invalid callback");
     const {signal, opaque, responseHeaders} = opts;
     if (signal && "function" != typeof signal.on && "function" != typeof signal.addEventListener) throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
     super("UNDICI_CONNECT"), this.opaque = opaque || null, this.responseHeaders = responseHeaders || null, 
     this.callback = callback, this.abort = null, addSignal(this, signal);
    }
    onConnect(abort, context) {
     if (!this.callback) throw new RequestAbortedError;
     this.abort = abort, this.context = context;
    }
    onHeaders() {
     throw new SocketError("bad connect", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
     const {callback, opaque, context} = this;
     removeSignal(this), this.callback = null;
     let headers = rawHeaders;
     null != headers && (headers = "raw" === this.responseHeaders ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)), 
     this.runInAsyncScope(callback, null, null, {
      statusCode,
      headers,
      socket,
      opaque,
      context
     });
    }
    onError(err) {
     const {callback, opaque} = this;
     removeSignal(this), callback && (this.callback = null, queueMicrotask((() => {
      this.runInAsyncScope(callback, null, err, {
       opaque
      });
     })));
    }
   }
   module.exports = function connect(opts, callback) {
    if (void 0 === callback) return new Promise(((resolve, reject) => {
     connect.call(this, opts, ((err, data) => err ? reject(err) : resolve(data)));
    }));
    try {
     const connectHandler = new ConnectHandler(opts, callback);
     this.dispatch({
      ...opts,
      method: "CONNECT"
     }, connectHandler);
    } catch (err) {
     if ("function" != typeof callback) throw err;
     const opaque = opts && opts.opaque;
     queueMicrotask((() => callback(err, {
      opaque
     })));
    }
   };
  },
  9901: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {Readable, Duplex, PassThrough} = __webpack_require__(2203), {InvalidArgumentError, InvalidReturnValueError, RequestAbortedError} = __webpack_require__(3898), util = __webpack_require__(8869), {AsyncResource} = __webpack_require__(290), {addSignal, removeSignal} = __webpack_require__(4185), assert = __webpack_require__(2613), kResume = Symbol("resume");
   class PipelineRequest extends Readable {
    constructor() {
     super({
      autoDestroy: !0
     }), this[kResume] = null;
    }
    _read() {
     const {[kResume]: resume} = this;
     resume && (this[kResume] = null, resume());
    }
    _destroy(err, callback) {
     this._read(), callback(err);
    }
   }
   class PipelineResponse extends Readable {
    constructor(resume) {
     super({
      autoDestroy: !0
     }), this[kResume] = resume;
    }
    _read() {
     this[kResume]();
    }
    _destroy(err, callback) {
     err || this._readableState.endEmitted || (err = new RequestAbortedError), callback(err);
    }
   }
   class PipelineHandler extends AsyncResource {
    constructor(opts, handler) {
     if (!opts || "object" != typeof opts) throw new InvalidArgumentError("invalid opts");
     if ("function" != typeof handler) throw new InvalidArgumentError("invalid handler");
     const {signal, method, opaque, onInfo, responseHeaders} = opts;
     if (signal && "function" != typeof signal.on && "function" != typeof signal.addEventListener) throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
     if ("CONNECT" === method) throw new InvalidArgumentError("invalid method");
     if (onInfo && "function" != typeof onInfo) throw new InvalidArgumentError("invalid onInfo callback");
     super("UNDICI_PIPELINE"), this.opaque = opaque || null, this.responseHeaders = responseHeaders || null, 
     this.handler = handler, this.abort = null, this.context = null, this.onInfo = onInfo || null, 
     this.req = (new PipelineRequest).on("error", util.nop), this.ret = new Duplex({
      readableObjectMode: opts.objectMode,
      autoDestroy: !0,
      read: () => {
       const {body} = this;
       body && body.resume && body.resume();
      },
      write: (chunk, encoding, callback) => {
       const {req} = this;
       req.push(chunk, encoding) || req._readableState.destroyed ? callback() : req[kResume] = callback;
      },
      destroy: (err, callback) => {
       const {body, req, res, ret, abort} = this;
       err || ret._readableState.endEmitted || (err = new RequestAbortedError), abort && err && abort(), 
       util.destroy(body, err), util.destroy(req, err), util.destroy(res, err), removeSignal(this), 
       callback(err);
      }
     }).on("prefinish", (() => {
      const {req} = this;
      req.push(null);
     })), this.res = null, addSignal(this, signal);
    }
    onConnect(abort, context) {
     const {ret, res} = this;
     if (assert(!res, "pipeline cannot be retried"), ret.destroyed) throw new RequestAbortedError;
     this.abort = abort, this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume) {
     const {opaque, handler, context} = this;
     if (statusCode < 200) {
      if (this.onInfo) {
       const headers = "raw" === this.responseHeaders ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
       this.onInfo({
        statusCode,
        headers
       });
      }
      return;
     }
     let body;
     this.res = new PipelineResponse(resume);
     try {
      this.handler = null;
      const headers = "raw" === this.responseHeaders ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      body = this.runInAsyncScope(handler, null, {
       statusCode,
       headers,
       opaque,
       body: this.res,
       context
      });
     } catch (err) {
      throw this.res.on("error", util.nop), err;
     }
     if (!body || "function" != typeof body.on) throw new InvalidReturnValueError("expected Readable");
     body.on("data", (chunk => {
      const {ret, body} = this;
      !ret.push(chunk) && body.pause && body.pause();
     })).on("error", (err => {
      const {ret} = this;
      util.destroy(ret, err);
     })).on("end", (() => {
      const {ret} = this;
      ret.push(null);
     })).on("close", (() => {
      const {ret} = this;
      ret._readableState.ended || util.destroy(ret, new RequestAbortedError);
     })), this.body = body;
    }
    onData(chunk) {
     const {res} = this;
     return res.push(chunk);
    }
    onComplete(trailers) {
     const {res} = this;
     res.push(null);
    }
    onError(err) {
     const {ret} = this;
     this.handler = null, util.destroy(ret, err);
    }
   }
   module.exports = function(opts, handler) {
    try {
     const pipelineHandler = new PipelineHandler(opts, handler);
     return this.dispatch({
      ...opts,
      body: pipelineHandler.req
     }, pipelineHandler), pipelineHandler.ret;
    } catch (err) {
     return (new PassThrough).destroy(err);
    }
   };
  },
  6878: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const Readable = __webpack_require__(6248), {InvalidArgumentError, RequestAbortedError} = __webpack_require__(3898), util = __webpack_require__(8869), {getResolveErrorBodyCallback} = __webpack_require__(8204), {AsyncResource} = __webpack_require__(290), {addSignal, removeSignal} = __webpack_require__(4185);
   class RequestHandler extends AsyncResource {
    constructor(opts, callback) {
     if (!opts || "object" != typeof opts) throw new InvalidArgumentError("invalid opts");
     const {signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark} = opts;
     try {
      if ("function" != typeof callback) throw new InvalidArgumentError("invalid callback");
      if (highWaterMark && ("number" != typeof highWaterMark || highWaterMark < 0)) throw new InvalidArgumentError("invalid highWaterMark");
      if (signal && "function" != typeof signal.on && "function" != typeof signal.addEventListener) throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      if ("CONNECT" === method) throw new InvalidArgumentError("invalid method");
      if (onInfo && "function" != typeof onInfo) throw new InvalidArgumentError("invalid onInfo callback");
      super("UNDICI_REQUEST");
     } catch (err) {
      throw util.isStream(body) && util.destroy(body.on("error", util.nop), err), err;
     }
     this.responseHeaders = responseHeaders || null, this.opaque = opaque || null, this.callback = callback, 
     this.res = null, this.abort = null, this.body = body, this.trailers = {}, this.context = null, 
     this.onInfo = onInfo || null, this.throwOnError = throwOnError, this.highWaterMark = highWaterMark, 
     util.isStream(body) && body.on("error", (err => {
      this.onError(err);
     })), addSignal(this, signal);
    }
    onConnect(abort, context) {
     if (!this.callback) throw new RequestAbortedError;
     this.abort = abort, this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
     const {callback, opaque, abort, context, responseHeaders, highWaterMark} = this, headers = "raw" === responseHeaders ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
     if (statusCode < 200) return void (this.onInfo && this.onInfo({
      statusCode,
      headers
     }));
     const contentType = ("raw" === responseHeaders ? util.parseHeaders(rawHeaders) : headers)["content-type"], body = new Readable({
      resume,
      abort,
      contentType,
      highWaterMark
     });
     this.callback = null, this.res = body, null !== callback && (this.throwOnError && statusCode >= 400 ? this.runInAsyncScope(getResolveErrorBodyCallback, null, {
      callback,
      body,
      contentType,
      statusCode,
      statusMessage,
      headers
     }) : this.runInAsyncScope(callback, null, null, {
      statusCode,
      headers,
      trailers: this.trailers,
      opaque,
      body,
      context
     }));
    }
    onData(chunk) {
     const {res} = this;
     return res.push(chunk);
    }
    onComplete(trailers) {
     const {res} = this;
     removeSignal(this), util.parseHeaders(trailers, this.trailers), res.push(null);
    }
    onError(err) {
     const {res, callback, body, opaque} = this;
     removeSignal(this), callback && (this.callback = null, queueMicrotask((() => {
      this.runInAsyncScope(callback, null, err, {
       opaque
      });
     }))), res && (this.res = null, queueMicrotask((() => {
      util.destroy(res, err);
     }))), body && (this.body = null, util.destroy(body, err));
    }
   }
   module.exports = function request(opts, callback) {
    if (void 0 === callback) return new Promise(((resolve, reject) => {
     request.call(this, opts, ((err, data) => err ? reject(err) : resolve(data)));
    }));
    try {
     this.dispatch(opts, new RequestHandler(opts, callback));
    } catch (err) {
     if ("function" != typeof callback) throw err;
     const opaque = opts && opts.opaque;
     queueMicrotask((() => callback(err, {
      opaque
     })));
    }
   }, module.exports.RequestHandler = RequestHandler;
  },
  4579: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {finished, PassThrough} = __webpack_require__(2203), {InvalidArgumentError, InvalidReturnValueError, RequestAbortedError} = __webpack_require__(3898), util = __webpack_require__(8869), {getResolveErrorBodyCallback} = __webpack_require__(8204), {AsyncResource} = __webpack_require__(290), {addSignal, removeSignal} = __webpack_require__(4185);
   class StreamHandler extends AsyncResource {
    constructor(opts, factory, callback) {
     if (!opts || "object" != typeof opts) throw new InvalidArgumentError("invalid opts");
     const {signal, method, opaque, body, onInfo, responseHeaders, throwOnError} = opts;
     try {
      if ("function" != typeof callback) throw new InvalidArgumentError("invalid callback");
      if ("function" != typeof factory) throw new InvalidArgumentError("invalid factory");
      if (signal && "function" != typeof signal.on && "function" != typeof signal.addEventListener) throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      if ("CONNECT" === method) throw new InvalidArgumentError("invalid method");
      if (onInfo && "function" != typeof onInfo) throw new InvalidArgumentError("invalid onInfo callback");
      super("UNDICI_STREAM");
     } catch (err) {
      throw util.isStream(body) && util.destroy(body.on("error", util.nop), err), err;
     }
     this.responseHeaders = responseHeaders || null, this.opaque = opaque || null, this.factory = factory, 
     this.callback = callback, this.res = null, this.abort = null, this.context = null, 
     this.trailers = null, this.body = body, this.onInfo = onInfo || null, this.throwOnError = throwOnError || !1, 
     util.isStream(body) && body.on("error", (err => {
      this.onError(err);
     })), addSignal(this, signal);
    }
    onConnect(abort, context) {
     if (!this.callback) throw new RequestAbortedError;
     this.abort = abort, this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
     const {factory, opaque, context, callback, responseHeaders} = this, headers = "raw" === responseHeaders ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
     if (statusCode < 200) return void (this.onInfo && this.onInfo({
      statusCode,
      headers
     }));
     let res;
     if (this.factory = null, this.throwOnError && statusCode >= 400) {
      const contentType = ("raw" === responseHeaders ? util.parseHeaders(rawHeaders) : headers)["content-type"];
      res = new PassThrough, this.callback = null, this.runInAsyncScope(getResolveErrorBodyCallback, null, {
       callback,
       body: res,
       contentType,
       statusCode,
       statusMessage,
       headers
      });
     } else {
      if (null === factory) return;
      if (res = this.runInAsyncScope(factory, null, {
       statusCode,
       headers,
       opaque,
       context
      }), !res || "function" != typeof res.write || "function" != typeof res.end || "function" != typeof res.on) throw new InvalidReturnValueError("expected Writable");
      finished(res, {
       readable: !1
      }, (err => {
       const {callback, res, opaque, trailers, abort} = this;
       this.res = null, !err && res.readable || util.destroy(res, err), this.callback = null, 
       this.runInAsyncScope(callback, null, err || null, {
        opaque,
        trailers
       }), err && abort();
      }));
     }
     res.on("drain", resume), this.res = res;
     return !0 !== (void 0 !== res.writableNeedDrain ? res.writableNeedDrain : res._writableState && res._writableState.needDrain);
    }
    onData(chunk) {
     const {res} = this;
     return !res || res.write(chunk);
    }
    onComplete(trailers) {
     const {res} = this;
     removeSignal(this), res && (this.trailers = util.parseHeaders(trailers), res.end());
    }
    onError(err) {
     const {res, callback, opaque, body} = this;
     removeSignal(this), this.factory = null, res ? (this.res = null, util.destroy(res, err)) : callback && (this.callback = null, 
     queueMicrotask((() => {
      this.runInAsyncScope(callback, null, err, {
       opaque
      });
     }))), body && (this.body = null, util.destroy(body, err));
    }
   }
   module.exports = function stream(opts, factory, callback) {
    if (void 0 === callback) return new Promise(((resolve, reject) => {
     stream.call(this, opts, factory, ((err, data) => err ? reject(err) : resolve(data)));
    }));
    try {
     this.dispatch(opts, new StreamHandler(opts, factory, callback));
    } catch (err) {
     if ("function" != typeof callback) throw err;
     const opaque = opts && opts.opaque;
     queueMicrotask((() => callback(err, {
      opaque
     })));
    }
   };
  },
  8999: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {InvalidArgumentError, RequestAbortedError, SocketError} = __webpack_require__(3898), {AsyncResource} = __webpack_require__(290), util = __webpack_require__(8869), {addSignal, removeSignal} = __webpack_require__(4185), assert = __webpack_require__(2613);
   class UpgradeHandler extends AsyncResource {
    constructor(opts, callback) {
     if (!opts || "object" != typeof opts) throw new InvalidArgumentError("invalid opts");
     if ("function" != typeof callback) throw new InvalidArgumentError("invalid callback");
     const {signal, opaque, responseHeaders} = opts;
     if (signal && "function" != typeof signal.on && "function" != typeof signal.addEventListener) throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
     super("UNDICI_UPGRADE"), this.responseHeaders = responseHeaders || null, this.opaque = opaque || null, 
     this.callback = callback, this.abort = null, this.context = null, addSignal(this, signal);
    }
    onConnect(abort, context) {
     if (!this.callback) throw new RequestAbortedError;
     this.abort = abort, this.context = null;
    }
    onHeaders() {
     throw new SocketError("bad upgrade", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
     const {callback, opaque, context} = this;
     assert.strictEqual(statusCode, 101), removeSignal(this), this.callback = null;
     const headers = "raw" === this.responseHeaders ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
     this.runInAsyncScope(callback, null, null, {
      headers,
      socket,
      opaque,
      context
     });
    }
    onError(err) {
     const {callback, opaque} = this;
     removeSignal(this), callback && (this.callback = null, queueMicrotask((() => {
      this.runInAsyncScope(callback, null, err, {
       opaque
      });
     })));
    }
   }
   module.exports = function upgrade(opts, callback) {
    if (void 0 === callback) return new Promise(((resolve, reject) => {
     upgrade.call(this, opts, ((err, data) => err ? reject(err) : resolve(data)));
    }));
    try {
     const upgradeHandler = new UpgradeHandler(opts, callback);
     this.dispatch({
      ...opts,
      method: opts.method || "GET",
      upgrade: opts.protocol || "Websocket"
     }, upgradeHandler);
    } catch (err) {
     if ("function" != typeof callback) throw err;
     const opaque = opts && opts.opaque;
     queueMicrotask((() => callback(err, {
      opaque
     })));
    }
   };
  },
  130: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   module.exports.request = __webpack_require__(6878), module.exports.stream = __webpack_require__(4579), 
   module.exports.pipeline = __webpack_require__(9901), module.exports.upgrade = __webpack_require__(8999), 
   module.exports.connect = __webpack_require__(8069);
  },
  6248: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const assert = __webpack_require__(2613), {Readable} = __webpack_require__(2203), {RequestAbortedError, NotSupportedError, InvalidArgumentError} = __webpack_require__(3898), util = __webpack_require__(8869), {ReadableStreamFrom, toUSVString} = __webpack_require__(8869);
   let Blob;
   const kConsume = Symbol("kConsume"), kReading = Symbol("kReading"), kBody = Symbol("kBody"), kAbort = Symbol("abort"), kContentType = Symbol("kContentType"), noop = () => {};
   function isUnusable(self) {
    return util.isDisturbed(self) || function(self) {
     return self[kBody] && !0 === self[kBody].locked || self[kConsume];
    }(self);
   }
   async function consume(stream, type) {
    if (isUnusable(stream)) throw new TypeError("unusable");
    return assert(!stream[kConsume]), new Promise(((resolve, reject) => {
     stream[kConsume] = {
      type,
      stream,
      resolve,
      reject,
      length: 0,
      body: []
     }, stream.on("error", (function(err) {
      consumeFinish(this[kConsume], err);
     })).on("close", (function() {
      null !== this[kConsume].body && consumeFinish(this[kConsume], new RequestAbortedError);
     })), process.nextTick(consumeStart, stream[kConsume]);
    }));
   }
   function consumeStart(consume) {
    if (null === consume.body) return;
    const {_readableState: state} = consume.stream;
    for (const chunk of state.buffer) consumePush(consume, chunk);
    for (state.endEmitted ? consumeEnd(this[kConsume]) : consume.stream.on("end", (function() {
     consumeEnd(this[kConsume]);
    })), consume.stream.resume(); null != consume.stream.read(); ) ;
   }
   function consumeEnd(consume) {
    const {type, body, resolve, stream, length} = consume;
    try {
     if ("text" === type) resolve(toUSVString(Buffer.concat(body))); else if ("json" === type) resolve(JSON.parse(Buffer.concat(body))); else if ("arrayBuffer" === type) {
      const dst = new Uint8Array(length);
      let pos = 0;
      for (const buf of body) dst.set(buf, pos), pos += buf.byteLength;
      resolve(dst.buffer);
     } else "blob" === type && (Blob || (Blob = __webpack_require__(181).Blob), resolve(new Blob(body, {
      type: stream[kContentType]
     })));
     consumeFinish(consume);
    } catch (err) {
     stream.destroy(err);
    }
   }
   function consumePush(consume, chunk) {
    consume.length += chunk.length, consume.body.push(chunk);
   }
   function consumeFinish(consume, err) {
    null !== consume.body && (err ? consume.reject(err) : consume.resolve(), consume.type = null, 
    consume.stream = null, consume.resolve = null, consume.reject = null, consume.length = 0, 
    consume.body = null);
   }
   module.exports = class extends Readable {
    constructor({resume, abort, contentType = "", highWaterMark = 65536}) {
     super({
      autoDestroy: !0,
      read: resume,
      highWaterMark
     }), this._readableState.dataEmitted = !1, this[kAbort] = abort, this[kConsume] = null, 
     this[kBody] = null, this[kContentType] = contentType, this[kReading] = !1;
    }
    destroy(err) {
     return this.destroyed ? this : (err || this._readableState.endEmitted || (err = new RequestAbortedError), 
     err && this[kAbort](), super.destroy(err));
    }
    emit(ev, ...args) {
     return "data" === ev ? this._readableState.dataEmitted = !0 : "error" === ev && (this._readableState.errorEmitted = !0), 
     super.emit(ev, ...args);
    }
    on(ev, ...args) {
     return "data" !== ev && "readable" !== ev || (this[kReading] = !0), super.on(ev, ...args);
    }
    addListener(ev, ...args) {
     return this.on(ev, ...args);
    }
    off(ev, ...args) {
     const ret = super.off(ev, ...args);
     return "data" !== ev && "readable" !== ev || (this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0), 
     ret;
    }
    removeListener(ev, ...args) {
     return this.off(ev, ...args);
    }
    push(chunk) {
     return this[kConsume] && null !== chunk && 0 === this.readableLength ? (consumePush(this[kConsume], chunk), 
     !this[kReading] || super.push(chunk)) : super.push(chunk);
    }
    async text() {
     return consume(this, "text");
    }
    async json() {
     return consume(this, "json");
    }
    async blob() {
     return consume(this, "blob");
    }
    async arrayBuffer() {
     return consume(this, "arrayBuffer");
    }
    async formData() {
     throw new NotSupportedError;
    }
    get bodyUsed() {
     return util.isDisturbed(this);
    }
    get body() {
     return this[kBody] || (this[kBody] = ReadableStreamFrom(this), this[kConsume] && (this[kBody].getReader(), 
     assert(this[kBody].locked))), this[kBody];
    }
    dump(opts) {
     let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
     const signal = opts && opts.signal;
     if (signal) try {
      if ("object" != typeof signal || !("aborted" in signal)) throw new InvalidArgumentError("signal must be an AbortSignal");
      util.throwIfAborted(signal);
     } catch (err) {
      return Promise.reject(err);
     }
     return this.closed ? Promise.resolve(null) : new Promise(((resolve, reject) => {
      const signalListenerCleanup = signal ? util.addAbortListener(signal, (() => {
       this.destroy();
      })) : noop;
      this.on("close", (function() {
       signalListenerCleanup(), signal && signal.aborted ? reject(signal.reason || Object.assign(new Error("The operation was aborted"), {
        name: "AbortError"
       })) : resolve(null);
      })).on("error", noop).on("data", (function(chunk) {
       limit -= chunk.length, limit <= 0 && this.destroy();
      })).resume();
     }));
    }
   };
  },
  8204: (module, __unused_webpack_exports, __webpack_require__) => {
   const assert = __webpack_require__(2613), {ResponseStatusCodeError} = __webpack_require__(3898), {toUSVString} = __webpack_require__(8869);
   module.exports = {
    getResolveErrorBodyCallback: async function({callback, body, contentType, statusCode, statusMessage, headers}) {
     assert(body);
     let chunks = [], limit = 0;
     for await (const chunk of body) if (chunks.push(chunk), limit += chunk.length, limit > 131072) {
      chunks = null;
      break;
     }
     if (204 !== statusCode && contentType && chunks) {
      try {
       if (contentType.startsWith("application/json")) {
        const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
        return void process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
       }
       if (contentType.startsWith("text/")) {
        const payload = toUSVString(Buffer.concat(chunks));
        return void process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
       }
      } catch (err) {}
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
     } else process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
    }
   };
  },
  3788: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {BalancedPoolMissingUpstreamError, InvalidArgumentError} = __webpack_require__(3898), {PoolBase, kClients, kNeedDrain, kAddClient, kRemoveClient, kGetDispatcher} = __webpack_require__(333), Pool = __webpack_require__(7047), {kUrl, kInterceptors} = __webpack_require__(8028), {parseOrigin} = __webpack_require__(8869), kFactory = Symbol("factory"), kOptions = Symbol("options"), kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor"), kCurrentWeight = Symbol("kCurrentWeight"), kIndex = Symbol("kIndex"), kWeight = Symbol("kWeight"), kMaxWeightPerServer = Symbol("kMaxWeightPerServer"), kErrorPenalty = Symbol("kErrorPenalty");
   function getGreatestCommonDivisor(a, b) {
    return 0 === b ? a : getGreatestCommonDivisor(b, a % b);
   }
   function defaultFactory(origin, opts) {
    return new Pool(origin, opts);
   }
   module.exports = class extends PoolBase {
    constructor(upstreams = [], {factory = defaultFactory, ...opts} = {}) {
     if (super(), this[kOptions] = opts, this[kIndex] = -1, this[kCurrentWeight] = 0, 
     this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100, this[kErrorPenalty] = this[kOptions].errorPenalty || 15, 
     Array.isArray(upstreams) || (upstreams = [ upstreams ]), "function" != typeof factory) throw new InvalidArgumentError("factory must be a function.");
     this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [], 
     this[kFactory] = factory;
     for (const upstream of upstreams) this.addUpstream(upstream);
     this._updateBalancedPoolStats();
    }
    addUpstream(upstream) {
     const upstreamOrigin = parseOrigin(upstream).origin;
     if (this[kClients].find((pool => pool[kUrl].origin === upstreamOrigin && !0 !== pool.closed && !0 !== pool.destroyed))) return this;
     const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
     this[kAddClient](pool), pool.on("connect", (() => {
      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
     })), pool.on("connectionError", (() => {
      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]), this._updateBalancedPoolStats();
     })), pool.on("disconnect", ((...args) => {
      const err = args[2];
      err && "UND_ERR_SOCKET" === err.code && (pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]), 
      this._updateBalancedPoolStats());
     }));
     for (const client of this[kClients]) client[kWeight] = this[kMaxWeightPerServer];
     return this._updateBalancedPoolStats(), this;
    }
    _updateBalancedPoolStats() {
     this[kGreatestCommonDivisor] = this[kClients].map((p => p[kWeight])).reduce(getGreatestCommonDivisor, 0);
    }
    removeUpstream(upstream) {
     const upstreamOrigin = parseOrigin(upstream).origin, pool = this[kClients].find((pool => pool[kUrl].origin === upstreamOrigin && !0 !== pool.closed && !0 !== pool.destroyed));
     return pool && this[kRemoveClient](pool), this;
    }
    get upstreams() {
     return this[kClients].filter((dispatcher => !0 !== dispatcher.closed && !0 !== dispatcher.destroyed)).map((p => p[kUrl].origin));
    }
    [kGetDispatcher]() {
     if (0 === this[kClients].length) throw new BalancedPoolMissingUpstreamError;
     if (!this[kClients].find((dispatcher => !dispatcher[kNeedDrain] && !0 !== dispatcher.closed && !0 !== dispatcher.destroyed))) return;
     if (this[kClients].map((pool => pool[kNeedDrain])).reduce(((a, b) => a && b), !0)) return;
     let counter = 0, maxWeightIndex = this[kClients].findIndex((pool => !pool[kNeedDrain]));
     for (;counter++ < this[kClients].length; ) {
      this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
      const pool = this[kClients][this[kIndex]];
      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain] && (maxWeightIndex = this[kIndex]), 
      0 === this[kIndex] && (this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor], 
      this[kCurrentWeight] <= 0 && (this[kCurrentWeight] = this[kMaxWeightPerServer])), 
      pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) return pool;
     }
     return this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight], this[kIndex] = maxWeightIndex, 
     this[kClients][maxWeightIndex];
    }
   };
  },
  7758: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {kConstruct} = __webpack_require__(6889), {urlEquals, fieldValues: getFieldValues} = __webpack_require__(178), {kEnumerableProperty, isDisturbed} = __webpack_require__(8869), {kHeadersList} = __webpack_require__(8028), {webidl} = __webpack_require__(769), {Response, cloneResponse} = __webpack_require__(3767), {Request} = __webpack_require__(8899), {kState, kHeaders, kGuard, kRealm} = __webpack_require__(9415), {fetching} = __webpack_require__(5306), {urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes} = __webpack_require__(8292), assert = __webpack_require__(2613), {getGlobalDispatcher} = __webpack_require__(5710);
   class Cache {
    #relevantRequestResponseList;
    constructor() {
     arguments[0] !== kConstruct && webidl.illegalConstructor(), this.#relevantRequestResponseList = arguments[1];
    }
    async match(request, options = {}) {
     webidl.brandCheck(this, Cache), webidl.argumentLengthCheck(arguments, 1, {
      header: "Cache.match"
     }), request = webidl.converters.RequestInfo(request), options = webidl.converters.CacheQueryOptions(options);
     const p = await this.matchAll(request, options);
     if (0 !== p.length) return p[0];
    }
    async matchAll(request = void 0, options = {}) {
     webidl.brandCheck(this, Cache), void 0 !== request && (request = webidl.converters.RequestInfo(request)), 
     options = webidl.converters.CacheQueryOptions(options);
     let r = null;
     if (void 0 !== request) if (request instanceof Request) {
      if (r = request[kState], "GET" !== r.method && !options.ignoreMethod) return [];
     } else "string" == typeof request && (r = new Request(request)[kState]);
     const responses = [];
     if (void 0 === request) for (const requestResponse of this.#relevantRequestResponseList) responses.push(requestResponse[1]); else {
      const requestResponses = this.#queryCache(r, options);
      for (const requestResponse of requestResponses) responses.push(requestResponse[1]);
     }
     const responseList = [];
     for (const response of responses) {
      const responseObject = new Response(response.body?.source ?? null), body = responseObject[kState].body;
      responseObject[kState] = response, responseObject[kState].body = body, responseObject[kHeaders][kHeadersList] = response.headersList, 
      responseObject[kHeaders][kGuard] = "immutable", responseList.push(responseObject);
     }
     return Object.freeze(responseList);
    }
    async add(request) {
     webidl.brandCheck(this, Cache), webidl.argumentLengthCheck(arguments, 1, {
      header: "Cache.add"
     });
     const requests = [ request = webidl.converters.RequestInfo(request) ], responseArrayPromise = this.addAll(requests);
     return await responseArrayPromise;
    }
    async addAll(requests) {
     webidl.brandCheck(this, Cache), webidl.argumentLengthCheck(arguments, 1, {
      header: "Cache.addAll"
     }), requests = webidl.converters["sequence<RequestInfo>"](requests);
     const responsePromises = [], requestList = [];
     for (const request of requests) {
      if ("string" == typeof request) continue;
      const r = request[kState];
      if (!urlIsHttpHttpsScheme(r.url) || "GET" !== r.method) throw webidl.errors.exception({
       header: "Cache.addAll",
       message: "Expected http/s scheme when method is not GET."
      });
     }
     const fetchControllers = [];
     for (const request of requests) {
      const r = new Request(request)[kState];
      if (!urlIsHttpHttpsScheme(r.url)) throw webidl.errors.exception({
       header: "Cache.addAll",
       message: "Expected http/s scheme."
      });
      r.initiator = "fetch", r.destination = "subresource", requestList.push(r);
      const responsePromise = createDeferredPromise();
      fetchControllers.push(fetching({
       request: r,
       dispatcher: getGlobalDispatcher(),
       processResponse(response) {
        if ("error" === response.type || 206 === response.status || response.status < 200 || response.status > 299) responsePromise.reject(webidl.errors.exception({
         header: "Cache.addAll",
         message: "Received an invalid status code or the request failed."
        })); else if (response.headersList.contains("vary")) {
         const fieldValues = getFieldValues(response.headersList.get("vary"));
         for (const fieldValue of fieldValues) if ("*" === fieldValue) {
          responsePromise.reject(webidl.errors.exception({
           header: "Cache.addAll",
           message: "invalid vary field value"
          }));
          for (const controller of fetchControllers) controller.abort();
          return;
         }
        }
       },
       processResponseEndOfBody(response) {
        response.aborted ? responsePromise.reject(new DOMException("aborted", "AbortError")) : responsePromise.resolve(response);
       }
      })), responsePromises.push(responsePromise.promise);
     }
     const p = Promise.all(responsePromises), responses = await p, operations = [];
     let index = 0;
     for (const response of responses) {
      const operation = {
       type: "put",
       request: requestList[index],
       response
      };
      operations.push(operation), index++;
     }
     const cacheJobPromise = createDeferredPromise();
     let errorData = null;
     try {
      this.#batchCacheOperations(operations);
     } catch (e) {
      errorData = e;
     }
     return queueMicrotask((() => {
      null === errorData ? cacheJobPromise.resolve(void 0) : cacheJobPromise.reject(errorData);
     })), cacheJobPromise.promise;
    }
    async put(request, response) {
     webidl.brandCheck(this, Cache), webidl.argumentLengthCheck(arguments, 2, {
      header: "Cache.put"
     }), request = webidl.converters.RequestInfo(request), response = webidl.converters.Response(response);
     let innerRequest = null;
     if (innerRequest = request instanceof Request ? request[kState] : new Request(request)[kState], 
     !urlIsHttpHttpsScheme(innerRequest.url) || "GET" !== innerRequest.method) throw webidl.errors.exception({
      header: "Cache.put",
      message: "Expected an http/s scheme when method is not GET"
     });
     const innerResponse = response[kState];
     if (206 === innerResponse.status) throw webidl.errors.exception({
      header: "Cache.put",
      message: "Got 206 status"
     });
     if (innerResponse.headersList.contains("vary")) {
      const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
      for (const fieldValue of fieldValues) if ("*" === fieldValue) throw webidl.errors.exception({
       header: "Cache.put",
       message: "Got * vary field value"
      });
     }
     if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) throw webidl.errors.exception({
      header: "Cache.put",
      message: "Response body is locked or disturbed"
     });
     const clonedResponse = cloneResponse(innerResponse), bodyReadPromise = createDeferredPromise();
     if (null != innerResponse.body) {
      const reader = innerResponse.body.stream.getReader();
      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
     } else bodyReadPromise.resolve(void 0);
     const operations = [], operation = {
      type: "put",
      request: innerRequest,
      response: clonedResponse
     };
     operations.push(operation);
     const bytes = await bodyReadPromise.promise;
     null != clonedResponse.body && (clonedResponse.body.source = bytes);
     const cacheJobPromise = createDeferredPromise();
     let errorData = null;
     try {
      this.#batchCacheOperations(operations);
     } catch (e) {
      errorData = e;
     }
     return queueMicrotask((() => {
      null === errorData ? cacheJobPromise.resolve() : cacheJobPromise.reject(errorData);
     })), cacheJobPromise.promise;
    }
    async delete(request, options = {}) {
     webidl.brandCheck(this, Cache), webidl.argumentLengthCheck(arguments, 1, {
      header: "Cache.delete"
     }), request = webidl.converters.RequestInfo(request), options = webidl.converters.CacheQueryOptions(options);
     let r = null;
     if (request instanceof Request) {
      if (r = request[kState], "GET" !== r.method && !options.ignoreMethod) return !1;
     } else assert("string" == typeof request), r = new Request(request)[kState];
     const operations = [], operation = {
      type: "delete",
      request: r,
      options
     };
     operations.push(operation);
     const cacheJobPromise = createDeferredPromise();
     let requestResponses, errorData = null;
     try {
      requestResponses = this.#batchCacheOperations(operations);
     } catch (e) {
      errorData = e;
     }
     return queueMicrotask((() => {
      null === errorData ? cacheJobPromise.resolve(!!requestResponses?.length) : cacheJobPromise.reject(errorData);
     })), cacheJobPromise.promise;
    }
    async keys(request = void 0, options = {}) {
     webidl.brandCheck(this, Cache), void 0 !== request && (request = webidl.converters.RequestInfo(request)), 
     options = webidl.converters.CacheQueryOptions(options);
     let r = null;
     if (void 0 !== request) if (request instanceof Request) {
      if (r = request[kState], "GET" !== r.method && !options.ignoreMethod) return [];
     } else "string" == typeof request && (r = new Request(request)[kState]);
     const promise = createDeferredPromise(), requests = [];
     if (void 0 === request) for (const requestResponse of this.#relevantRequestResponseList) requests.push(requestResponse[0]); else {
      const requestResponses = this.#queryCache(r, options);
      for (const requestResponse of requestResponses) requests.push(requestResponse[0]);
     }
     return queueMicrotask((() => {
      const requestList = [];
      for (const request of requests) {
       const requestObject = new Request("https://a");
       requestObject[kState] = request, requestObject[kHeaders][kHeadersList] = request.headersList, 
       requestObject[kHeaders][kGuard] = "immutable", requestObject[kRealm] = request.client, 
       requestList.push(requestObject);
      }
      promise.resolve(Object.freeze(requestList));
     })), promise.promise;
    }
    #batchCacheOperations(operations) {
     const cache = this.#relevantRequestResponseList, backupCache = [ ...cache ], addedItems = [], resultList = [];
     try {
      for (const operation of operations) {
       if ("delete" !== operation.type && "put" !== operation.type) throw webidl.errors.exception({
        header: "Cache.#batchCacheOperations",
        message: 'operation type does not match "delete" or "put"'
       });
       if ("delete" === operation.type && null != operation.response) throw webidl.errors.exception({
        header: "Cache.#batchCacheOperations",
        message: "delete operation should not have an associated response"
       });
       if (this.#queryCache(operation.request, operation.options, addedItems).length) throw new DOMException("???", "InvalidStateError");
       let requestResponses;
       if ("delete" === operation.type) {
        if (requestResponses = this.#queryCache(operation.request, operation.options), 0 === requestResponses.length) return [];
        for (const requestResponse of requestResponses) {
         const idx = cache.indexOf(requestResponse);
         assert(-1 !== idx), cache.splice(idx, 1);
        }
       } else if ("put" === operation.type) {
        if (null == operation.response) throw webidl.errors.exception({
         header: "Cache.#batchCacheOperations",
         message: "put operation should have an associated response"
        });
        const r = operation.request;
        if (!urlIsHttpHttpsScheme(r.url)) throw webidl.errors.exception({
         header: "Cache.#batchCacheOperations",
         message: "expected http or https scheme"
        });
        if ("GET" !== r.method) throw webidl.errors.exception({
         header: "Cache.#batchCacheOperations",
         message: "not get method"
        });
        if (null != operation.options) throw webidl.errors.exception({
         header: "Cache.#batchCacheOperations",
         message: "options must not be defined"
        });
        requestResponses = this.#queryCache(operation.request);
        for (const requestResponse of requestResponses) {
         const idx = cache.indexOf(requestResponse);
         assert(-1 !== idx), cache.splice(idx, 1);
        }
        cache.push([ operation.request, operation.response ]), addedItems.push([ operation.request, operation.response ]);
       }
       resultList.push([ operation.request, operation.response ]);
      }
      return resultList;
     } catch (e) {
      throw this.#relevantRequestResponseList.length = 0, this.#relevantRequestResponseList = backupCache, 
      e;
     }
    }
    #queryCache(requestQuery, options, targetStorage) {
     const resultList = [], storage = targetStorage ?? this.#relevantRequestResponseList;
     for (const requestResponse of storage) {
      const [cachedRequest, cachedResponse] = requestResponse;
      this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options) && resultList.push(requestResponse);
     }
     return resultList;
    }
    #requestMatchesCachedItem(requestQuery, request, response = null, options) {
     const queryURL = new URL(requestQuery.url), cachedURL = new URL(request.url);
     if (options?.ignoreSearch && (cachedURL.search = "", queryURL.search = ""), !urlEquals(queryURL, cachedURL, !0)) return !1;
     if (null == response || options?.ignoreVary || !response.headersList.contains("vary")) return !0;
     const fieldValues = getFieldValues(response.headersList.get("vary"));
     for (const fieldValue of fieldValues) {
      if ("*" === fieldValue) return !1;
      if (request.headersList.get(fieldValue) !== requestQuery.headersList.get(fieldValue)) return !1;
     }
     return !0;
    }
   }
   Object.defineProperties(Cache.prototype, {
    [Symbol.toStringTag]: {
     value: "Cache",
     configurable: !0
    },
    match: kEnumerableProperty,
    matchAll: kEnumerableProperty,
    add: kEnumerableProperty,
    addAll: kEnumerableProperty,
    put: kEnumerableProperty,
    delete: kEnumerableProperty,
    keys: kEnumerableProperty
   });
   const cacheQueryOptionConverters = [ {
    key: "ignoreSearch",
    converter: webidl.converters.boolean,
    defaultValue: !1
   }, {
    key: "ignoreMethod",
    converter: webidl.converters.boolean,
    defaultValue: !1
   }, {
    key: "ignoreVary",
    converter: webidl.converters.boolean,
    defaultValue: !1
   } ];
   webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters), 
   webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([ ...cacheQueryOptionConverters, {
    key: "cacheName",
    converter: webidl.converters.DOMString
   } ]), webidl.converters.Response = webidl.interfaceConverter(Response), webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(webidl.converters.RequestInfo), 
   module.exports = {
    Cache
   };
  },
  2609: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {kConstruct} = __webpack_require__(6889), {Cache} = __webpack_require__(7758), {webidl} = __webpack_require__(769), {kEnumerableProperty} = __webpack_require__(8869);
   class CacheStorage {
    #caches=new Map;
    constructor() {
     arguments[0] !== kConstruct && webidl.illegalConstructor();
    }
    async match(request, options = {}) {
     if (webidl.brandCheck(this, CacheStorage), webidl.argumentLengthCheck(arguments, 1, {
      header: "CacheStorage.match"
     }), request = webidl.converters.RequestInfo(request), null != (options = webidl.converters.MultiCacheQueryOptions(options)).cacheName) {
      if (this.#caches.has(options.cacheName)) {
       const cacheList = this.#caches.get(options.cacheName), cache = new Cache(kConstruct, cacheList);
       return await cache.match(request, options);
      }
     } else for (const cacheList of this.#caches.values()) {
      const cache = new Cache(kConstruct, cacheList), response = await cache.match(request, options);
      if (void 0 !== response) return response;
     }
    }
    async has(cacheName) {
     return webidl.brandCheck(this, CacheStorage), webidl.argumentLengthCheck(arguments, 1, {
      header: "CacheStorage.has"
     }), cacheName = webidl.converters.DOMString(cacheName), this.#caches.has(cacheName);
    }
    async open(cacheName) {
     if (webidl.brandCheck(this, CacheStorage), webidl.argumentLengthCheck(arguments, 1, {
      header: "CacheStorage.open"
     }), cacheName = webidl.converters.DOMString(cacheName), this.#caches.has(cacheName)) {
      const cache = this.#caches.get(cacheName);
      return new Cache(kConstruct, cache);
     }
     const cache = [];
     return this.#caches.set(cacheName, cache), new Cache(kConstruct, cache);
    }
    async delete(cacheName) {
     return webidl.brandCheck(this, CacheStorage), webidl.argumentLengthCheck(arguments, 1, {
      header: "CacheStorage.delete"
     }), cacheName = webidl.converters.DOMString(cacheName), this.#caches.delete(cacheName);
    }
    async keys() {
     webidl.brandCheck(this, CacheStorage);
     return [ ...this.#caches.keys() ];
    }
   }
   Object.defineProperties(CacheStorage.prototype, {
    [Symbol.toStringTag]: {
     value: "CacheStorage",
     configurable: !0
    },
    match: kEnumerableProperty,
    has: kEnumerableProperty,
    open: kEnumerableProperty,
    delete: kEnumerableProperty,
    keys: kEnumerableProperty
   }), module.exports = {
    CacheStorage
   };
  },
  6889: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   module.exports = {
    kConstruct: __webpack_require__(8028).kConstruct
   };
  },
  178: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const assert = __webpack_require__(2613), {URLSerializer} = __webpack_require__(3587), {isValidHeaderName} = __webpack_require__(8292);
   module.exports = {
    urlEquals: function(A, B, excludeFragment = !1) {
     return URLSerializer(A, excludeFragment) === URLSerializer(B, excludeFragment);
    },
    fieldValues: function(header) {
     assert(null !== header);
     const values = [];
     for (let value of header.split(",")) value = value.trim(), value.length && isValidHeaderName(value) && values.push(value);
     return values;
    }
   };
  },
  2138: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const assert = __webpack_require__(2613), net = __webpack_require__(9278), http = __webpack_require__(8611), {pipeline} = __webpack_require__(2203), util = __webpack_require__(8869), timers = __webpack_require__(6087), Request = __webpack_require__(7392), DispatcherBase = __webpack_require__(524), {RequestContentLengthMismatchError, ResponseContentLengthMismatchError, InvalidArgumentError, RequestAbortedError, HeadersTimeoutError, HeadersOverflowError, SocketError, InformationalError, BodyTimeoutError, HTTPParserError, ResponseExceededMaxSizeError, ClientDestroyedError} = __webpack_require__(3898), buildConnector = __webpack_require__(5651), {kUrl, kReset, kServerName, kClient, kBusy, kParser, kConnect, kBlocking, kResuming, kRunning, kPending, kSize, kWriting, kQueue, kConnected, kConnecting, kNeedDrain, kNoRef, kKeepAliveDefaultTimeout, kHostHeader, kPendingIdx, kRunningIdx, kError, kPipelining, kSocket, kKeepAliveTimeoutValue, kMaxHeadersSize, kKeepAliveMaxTimeout, kKeepAliveTimeoutThreshold, kHeadersTimeout, kBodyTimeout, kStrictContentLength, kConnector, kMaxRedirections, kMaxRequests, kCounter, kClose, kDestroy, kDispatch, kInterceptors, kLocalAddress, kMaxResponseSize, kHTTPConnVersion, kHost, kHTTP2Session, kHTTP2SessionState, kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest} = __webpack_require__(8028);
   let http2;
   try {
    http2 = __webpack_require__(5675);
   } catch {
    http2 = {
     constants: {}
    };
   }
   const {constants: {HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS}} = http2;
   let h2ExperimentalWarned = !1;
   const FastBuffer = Buffer[Symbol.species], kClosedResolve = Symbol("kClosedResolve"), channels = {};
   try {
    const diagnosticsChannel = __webpack_require__(1637);
    channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders"), 
    channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect"), 
    channels.connectError = diagnosticsChannel.channel("undici:client:connectError"), 
    channels.connected = diagnosticsChannel.channel("undici:client:connected");
   } catch {
    channels.sendHeaders = {
     hasSubscribers: !1
    }, channels.beforeConnect = {
     hasSubscribers: !1
    }, channels.connectError = {
     hasSubscribers: !1
    }, channels.connected = {
     hasSubscribers: !1
    };
   }
   function onHttp2SessionError(err) {
    assert("ERR_TLS_CERT_ALTNAME_INVALID" !== err.code), this[kSocket][kError] = err, 
    onError(this[kClient], err);
   }
   function onHttp2FrameError(type, code, id) {
    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
    0 === id && (this[kSocket][kError] = err, onError(this[kClient], err));
   }
   function onHttp2SessionEnd() {
    util.destroy(this, new SocketError("other side closed")), util.destroy(this[kSocket], new SocketError("other side closed"));
   }
   function onHTTP2GoAway(code) {
    const client = this[kClient], err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
    if (client[kSocket] = null, client[kHTTP2Session] = null, client.destroyed) {
     assert(0 === this[kPending]);
     const requests = client[kQueue].splice(client[kRunningIdx]);
     for (let i = 0; i < requests.length; i++) {
      errorRequest(this, requests[i], err);
     }
    } else if (client[kRunning] > 0) {
     const request = client[kQueue][client[kRunningIdx]];
     client[kQueue][client[kRunningIdx]++] = null, errorRequest(client, request, err);
    }
    client[kPendingIdx] = client[kRunningIdx], assert(0 === client[kRunning]), client.emit("disconnect", client[kUrl], [ client ], err), 
    resume(client);
   }
   const constants = __webpack_require__(263), createRedirectInterceptor = __webpack_require__(8838), EMPTY_BUF = Buffer.alloc(0);
   let llhttpInstance = null, llhttpPromise = async function() {
    const llhttpWasmData = process.env.JEST_WORKER_ID ? __webpack_require__(3265) : void 0;
    let mod;
    try {
     mod = await WebAssembly.compile(Buffer.from(__webpack_require__(995), "base64"));
    } catch (e) {
     mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || __webpack_require__(3265), "base64"));
    }
    return await WebAssembly.instantiate(mod, {
     env: {
      wasm_on_url: (p, at, len) => 0,
      wasm_on_status: (p, at, len) => {
       assert.strictEqual(currentParser.ptr, p);
       const start = at - currentBufferPtr + currentBufferRef.byteOffset;
       return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
      },
      wasm_on_message_begin: p => (assert.strictEqual(currentParser.ptr, p), currentParser.onMessageBegin() || 0),
      wasm_on_header_field: (p, at, len) => {
       assert.strictEqual(currentParser.ptr, p);
       const start = at - currentBufferPtr + currentBufferRef.byteOffset;
       return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
      },
      wasm_on_header_value: (p, at, len) => {
       assert.strictEqual(currentParser.ptr, p);
       const start = at - currentBufferPtr + currentBufferRef.byteOffset;
       return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
      },
      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => (assert.strictEqual(currentParser.ptr, p), 
      currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0),
      wasm_on_body: (p, at, len) => {
       assert.strictEqual(currentParser.ptr, p);
       const start = at - currentBufferPtr + currentBufferRef.byteOffset;
       return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
      },
      wasm_on_message_complete: p => (assert.strictEqual(currentParser.ptr, p), currentParser.onMessageComplete() || 0)
     }
    });
   }();
   llhttpPromise.catch();
   let currentParser = null, currentBufferRef = null, currentBufferSize = 0, currentBufferPtr = null;
   const TIMEOUT_HEADERS = 1, TIMEOUT_IDLE = 3;
   class Parser {
    constructor(client, socket, {exports}) {
     assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0), 
     this.llhttp = exports, this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE), 
     this.client = client, this.socket = socket, this.timeout = null, this.timeoutValue = null, 
     this.timeoutType = null, this.statusCode = null, this.statusText = "", this.upgrade = !1, 
     this.headers = [], this.headersSize = 0, this.headersMaxSize = client[kMaxHeadersSize], 
     this.shouldKeepAlive = !1, this.paused = !1, this.resume = this.resume.bind(this), 
     this.bytesRead = 0, this.keepAlive = "", this.contentLength = "", this.connection = "", 
     this.maxResponseSize = client[kMaxResponseSize];
    }
    setTimeout(value, type) {
     this.timeoutType = type, value !== this.timeoutValue ? (timers.clearTimeout(this.timeout), 
     value ? (this.timeout = timers.setTimeout(onParserTimeout, value, this), this.timeout.unref && this.timeout.unref()) : this.timeout = null, 
     this.timeoutValue = value) : this.timeout && this.timeout.refresh && this.timeout.refresh();
    }
    resume() {
     !this.socket.destroyed && this.paused && (assert(null != this.ptr), assert(null == currentParser), 
     this.llhttp.llhttp_resume(this.ptr), assert(2 === this.timeoutType), this.timeout && this.timeout.refresh && this.timeout.refresh(), 
     this.paused = !1, this.execute(this.socket.read() || EMPTY_BUF), this.readMore());
    }
    readMore() {
     for (;!this.paused && this.ptr; ) {
      const chunk = this.socket.read();
      if (null === chunk) break;
      this.execute(chunk);
     }
    }
    execute(data) {
     assert(null != this.ptr), assert(null == currentParser), assert(!this.paused);
     const {socket, llhttp} = this;
     data.length > currentBufferSize && (currentBufferPtr && llhttp.free(currentBufferPtr), 
     currentBufferSize = 4096 * Math.ceil(data.length / 4096), currentBufferPtr = llhttp.malloc(currentBufferSize)), 
     new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
     try {
      let ret;
      try {
       currentBufferRef = data, currentParser = this, ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
      } catch (err) {
       throw err;
      } finally {
       currentParser = null, currentBufferRef = null;
      }
      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
      if (ret === constants.ERROR.PAUSED_UPGRADE) this.onUpgrade(data.slice(offset)); else if (ret === constants.ERROR.PAUSED) this.paused = !0, 
      socket.unshift(data.slice(offset)); else if (ret !== constants.ERROR.OK) {
       const ptr = llhttp.llhttp_get_error_reason(this.ptr);
       let message = "";
       if (ptr) {
        const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
        message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
       }
       throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
      }
     } catch (err) {
      util.destroy(socket, err);
     }
    }
    destroy() {
     assert(null != this.ptr), assert(null == currentParser), this.llhttp.llhttp_free(this.ptr), 
     this.ptr = null, timers.clearTimeout(this.timeout), this.timeout = null, this.timeoutValue = null, 
     this.timeoutType = null, this.paused = !1;
    }
    onStatus(buf) {
     this.statusText = buf.toString();
    }
    onMessageBegin() {
     const {socket, client} = this;
     if (socket.destroyed) return -1;
     return client[kQueue][client[kRunningIdx]] ? void 0 : -1;
    }
    onHeaderField(buf) {
     const len = this.headers.length;
     1 & len ? this.headers[len - 1] = Buffer.concat([ this.headers[len - 1], buf ]) : this.headers.push(buf), 
     this.trackHeader(buf.length);
    }
    onHeaderValue(buf) {
     let len = this.headers.length;
     1 & ~len ? this.headers[len - 1] = Buffer.concat([ this.headers[len - 1], buf ]) : (this.headers.push(buf), 
     len += 1);
     const key = this.headers[len - 2];
     10 === key.length && "keep-alive" === key.toString().toLowerCase() ? this.keepAlive += buf.toString() : 10 === key.length && "connection" === key.toString().toLowerCase() ? this.connection += buf.toString() : 14 === key.length && "content-length" === key.toString().toLowerCase() && (this.contentLength += buf.toString()), 
     this.trackHeader(buf.length);
    }
    trackHeader(len) {
     this.headersSize += len, this.headersSize >= this.headersMaxSize && util.destroy(this.socket, new HeadersOverflowError);
    }
    onUpgrade(head) {
     const {upgrade, client, socket, headers, statusCode} = this;
     assert(upgrade);
     const request = client[kQueue][client[kRunningIdx]];
     assert(request), assert(!socket.destroyed), assert(socket === client[kSocket]), 
     assert(!this.paused), assert(request.upgrade || "CONNECT" === request.method), this.statusCode = null, 
     this.statusText = "", this.shouldKeepAlive = null, assert(this.headers.length % 2 == 0), 
     this.headers = [], this.headersSize = 0, socket.unshift(head), socket[kParser].destroy(), 
     socket[kParser] = null, socket[kClient] = null, socket[kError] = null, socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose), 
     client[kSocket] = null, client[kQueue][client[kRunningIdx]++] = null, client.emit("disconnect", client[kUrl], [ client ], new InformationalError("upgrade"));
     try {
      request.onUpgrade(statusCode, headers, socket);
     } catch (err) {
      util.destroy(socket, err);
     }
     resume(client);
    }
    onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
     const {client, socket, headers, statusText} = this;
     if (socket.destroyed) return -1;
     const request = client[kQueue][client[kRunningIdx]];
     if (!request) return -1;
     if (assert(!this.upgrade), assert(this.statusCode < 200), 100 === statusCode) return util.destroy(socket, new SocketError("bad response", util.getSocketInfo(socket))), 
     -1;
     if (upgrade && !request.upgrade) return util.destroy(socket, new SocketError("bad upgrade", util.getSocketInfo(socket))), 
     -1;
     if (assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS), this.statusCode = statusCode, 
     this.shouldKeepAlive = shouldKeepAlive || "HEAD" === request.method && !socket[kReset] && "keep-alive" === this.connection.toLowerCase(), 
     this.statusCode >= 200) {
      const bodyTimeout = null != request.bodyTimeout ? request.bodyTimeout : client[kBodyTimeout];
      this.setTimeout(bodyTimeout, 2);
     } else this.timeout && this.timeout.refresh && this.timeout.refresh();
     if ("CONNECT" === request.method) return assert(1 === client[kRunning]), this.upgrade = !0, 
     2;
     if (upgrade) return assert(1 === client[kRunning]), this.upgrade = !0, 2;
     if (assert(this.headers.length % 2 == 0), this.headers = [], this.headersSize = 0, 
     this.shouldKeepAlive && client[kPipelining]) {
      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;
      if (null != keepAliveTimeout) {
       const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
       timeout <= 0 ? socket[kReset] = !0 : client[kKeepAliveTimeoutValue] = timeout;
      } else client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
     } else socket[kReset] = !0;
     const pause = !1 === request.onHeaders(statusCode, headers, this.resume, statusText);
     return request.aborted ? -1 : "HEAD" === request.method || statusCode < 200 ? 1 : (socket[kBlocking] && (socket[kBlocking] = !1, 
     resume(client)), pause ? constants.ERROR.PAUSED : 0);
    }
    onBody(buf) {
     const {client, socket, statusCode, maxResponseSize} = this;
     if (socket.destroyed) return -1;
     const request = client[kQueue][client[kRunningIdx]];
     return assert(request), assert.strictEqual(this.timeoutType, 2), this.timeout && this.timeout.refresh && this.timeout.refresh(), 
     assert(statusCode >= 200), maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize ? (util.destroy(socket, new ResponseExceededMaxSizeError), 
     -1) : (this.bytesRead += buf.length, !1 === request.onData(buf) ? constants.ERROR.PAUSED : void 0);
    }
    onMessageComplete() {
     const {client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive} = this;
     if (socket.destroyed && (!statusCode || shouldKeepAlive)) return -1;
     if (upgrade) return;
     const request = client[kQueue][client[kRunningIdx]];
     return assert(request), assert(statusCode >= 100), this.statusCode = null, this.statusText = "", 
     this.bytesRead = 0, this.contentLength = "", this.keepAlive = "", this.connection = "", 
     assert(this.headers.length % 2 == 0), this.headers = [], this.headersSize = 0, statusCode < 200 ? void 0 : "HEAD" !== request.method && contentLength && bytesRead !== parseInt(contentLength, 10) ? (util.destroy(socket, new ResponseContentLengthMismatchError), 
     -1) : (request.onComplete(headers), client[kQueue][client[kRunningIdx]++] = null, 
     socket[kWriting] ? (assert.strictEqual(client[kRunning], 0), util.destroy(socket, new InformationalError("reset")), 
     constants.ERROR.PAUSED) : shouldKeepAlive ? socket[kReset] && 0 === client[kRunning] ? (util.destroy(socket, new InformationalError("reset")), 
     constants.ERROR.PAUSED) : void (1 === client[kPipelining] ? setImmediate(resume, client) : resume(client)) : (util.destroy(socket, new InformationalError("reset")), 
     constants.ERROR.PAUSED));
    }
   }
   function onParserTimeout(parser) {
    const {socket, timeoutType, client} = parser;
    timeoutType === TIMEOUT_HEADERS ? (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) && (assert(!parser.paused, "cannot be paused while waiting for headers"), 
    util.destroy(socket, new HeadersTimeoutError)) : 2 === timeoutType ? parser.paused || util.destroy(socket, new BodyTimeoutError) : timeoutType === TIMEOUT_IDLE && (assert(0 === client[kRunning] && client[kKeepAliveTimeoutValue]), 
    util.destroy(socket, new InformationalError("socket idle timeout")));
   }
   function onSocketReadable() {
    const {[kParser]: parser} = this;
    parser && parser.readMore();
   }
   function onSocketError(err) {
    const {[kClient]: client, [kParser]: parser} = this;
    assert("ERR_TLS_CERT_ALTNAME_INVALID" !== err.code), "h2" === client[kHTTPConnVersion] || "ECONNRESET" !== err.code || !parser.statusCode || parser.shouldKeepAlive ? (this[kError] = err, 
    onError(this[kClient], err)) : parser.onMessageComplete();
   }
   function onError(client, err) {
    if (0 === client[kRunning] && "UND_ERR_INFO" !== err.code && "UND_ERR_SOCKET" !== err.code) {
     assert(client[kPendingIdx] === client[kRunningIdx]);
     const requests = client[kQueue].splice(client[kRunningIdx]);
     for (let i = 0; i < requests.length; i++) {
      errorRequest(client, requests[i], err);
     }
     assert(0 === client[kSize]);
    }
   }
   function onSocketEnd() {
    const {[kParser]: parser, [kClient]: client} = this;
    "h2" === client[kHTTPConnVersion] || !parser.statusCode || parser.shouldKeepAlive ? util.destroy(this, new SocketError("other side closed", util.getSocketInfo(this))) : parser.onMessageComplete();
   }
   function onSocketClose() {
    const {[kClient]: client, [kParser]: parser} = this;
    "h1" === client[kHTTPConnVersion] && parser && (this[kError] || !parser.statusCode || parser.shouldKeepAlive || parser.onMessageComplete(), 
    this[kParser].destroy(), this[kParser] = null);
    const err = this[kError] || new SocketError("closed", util.getSocketInfo(this));
    if (client[kSocket] = null, client.destroyed) {
     assert(0 === client[kPending]);
     const requests = client[kQueue].splice(client[kRunningIdx]);
     for (let i = 0; i < requests.length; i++) {
      errorRequest(client, requests[i], err);
     }
    } else if (client[kRunning] > 0 && "UND_ERR_INFO" !== err.code) {
     const request = client[kQueue][client[kRunningIdx]];
     client[kQueue][client[kRunningIdx]++] = null, errorRequest(client, request, err);
    }
    client[kPendingIdx] = client[kRunningIdx], assert(0 === client[kRunning]), client.emit("disconnect", client[kUrl], [ client ], err), 
    resume(client);
   }
   async function connect(client) {
    assert(!client[kConnecting]), assert(!client[kSocket]);
    let {host, hostname, protocol, port} = client[kUrl];
    if ("[" === hostname[0]) {
     const idx = hostname.indexOf("]");
     assert(-1 !== idx);
     const ip = hostname.substring(1, idx);
     assert(net.isIP(ip)), hostname = ip;
    }
    client[kConnecting] = !0, channels.beforeConnect.hasSubscribers && channels.beforeConnect.publish({
     connectParams: {
      host,
      hostname,
      protocol,
      port,
      servername: client[kServerName],
      localAddress: client[kLocalAddress]
     },
     connector: client[kConnector]
    });
    try {
     const socket = await new Promise(((resolve, reject) => {
      client[kConnector]({
       host,
       hostname,
       protocol,
       port,
       servername: client[kServerName],
       localAddress: client[kLocalAddress]
      }, ((err, socket) => {
       err ? reject(err) : resolve(socket);
      }));
     }));
     if (client.destroyed) return void util.destroy(socket.on("error", (() => {})), new ClientDestroyedError);
     client[kConnecting] = !1, assert(socket);
     if ("h2" === socket.alpnProtocol) {
      h2ExperimentalWarned || (h2ExperimentalWarned = !0, process.emitWarning("H2 support is experimental, expect them to change at any time.", {
       code: "UNDICI-H2"
      }));
      const session = http2.connect(client[kUrl], {
       createConnection: () => socket,
       peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
      });
      client[kHTTPConnVersion] = "h2", session[kClient] = client, session[kSocket] = socket, 
      session.on("error", onHttp2SessionError), session.on("frameError", onHttp2FrameError), 
      session.on("end", onHttp2SessionEnd), session.on("goaway", onHTTP2GoAway), session.on("close", onSocketClose), 
      session.unref(), client[kHTTP2Session] = session, socket[kHTTP2Session] = session;
     } else llhttpInstance || (llhttpInstance = await llhttpPromise, llhttpPromise = null), 
     socket[kNoRef] = !1, socket[kWriting] = !1, socket[kReset] = !1, socket[kBlocking] = !1, 
     socket[kParser] = new Parser(client, socket, llhttpInstance);
     socket[kCounter] = 0, socket[kMaxRequests] = client[kMaxRequests], socket[kClient] = client, 
     socket[kError] = null, socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose), 
     client[kSocket] = socket, channels.connected.hasSubscribers && channels.connected.publish({
      connectParams: {
       host,
       hostname,
       protocol,
       port,
       servername: client[kServerName],
       localAddress: client[kLocalAddress]
      },
      connector: client[kConnector],
      socket
     }), client.emit("connect", client[kUrl], [ client ]);
    } catch (err) {
     if (client.destroyed) return;
     if (client[kConnecting] = !1, channels.connectError.hasSubscribers && channels.connectError.publish({
      connectParams: {
       host,
       hostname,
       protocol,
       port,
       servername: client[kServerName],
       localAddress: client[kLocalAddress]
      },
      connector: client[kConnector],
      error: err
     }), "ERR_TLS_CERT_ALTNAME_INVALID" === err.code) for (assert(0 === client[kRunning]); client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]; ) {
      const request = client[kQueue][client[kPendingIdx]++];
      errorRequest(client, request, err);
     } else onError(client, err);
     client.emit("connectionError", client[kUrl], [ client ], err);
    }
    resume(client);
   }
   function emitDrain(client) {
    client[kNeedDrain] = 0, client.emit("drain", client[kUrl], [ client ]);
   }
   function resume(client, sync) {
    2 !== client[kResuming] && (client[kResuming] = 2, function(client, sync) {
     for (;;) {
      if (client.destroyed) return void assert(0 === client[kPending]);
      if (client[kClosedResolve] && !client[kSize]) return client[kClosedResolve](), void (client[kClosedResolve] = null);
      const socket = client[kSocket];
      if (socket && !socket.destroyed && "h2" !== socket.alpnProtocol) if (0 === client[kSize] ? !socket[kNoRef] && socket.unref && (socket.unref(), 
      socket[kNoRef] = !0) : socket[kNoRef] && socket.ref && (socket.ref(), socket[kNoRef] = !1), 
      0 === client[kSize]) socket[kParser].timeoutType !== TIMEOUT_IDLE && socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE); else if (client[kRunning] > 0 && socket[kParser].statusCode < 200 && socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
       const request = client[kQueue][client[kRunningIdx]], headersTimeout = null != request.headersTimeout ? request.headersTimeout : client[kHeadersTimeout];
       socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
      }
      if (client[kBusy]) client[kNeedDrain] = 2; else if (2 === client[kNeedDrain]) {
       sync ? (client[kNeedDrain] = 1, process.nextTick(emitDrain, client)) : emitDrain(client);
       continue;
      }
      if (0 === client[kPending]) return;
      if (client[kRunning] >= (client[kPipelining] || 1)) return;
      const request = client[kQueue][client[kPendingIdx]];
      if ("https:" === client[kUrl].protocol && client[kServerName] !== request.servername) {
       if (client[kRunning] > 0) return;
       if (client[kServerName] = request.servername, socket && socket.servername !== request.servername) return void util.destroy(socket, new InformationalError("servername changed"));
      }
      if (client[kConnecting]) return;
      if (!socket && !client[kHTTP2Session]) return void connect(client);
      if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) return;
      if (client[kRunning] > 0 && !request.idempotent) return;
      if (client[kRunning] > 0 && (request.upgrade || "CONNECT" === request.method)) return;
      if (client[kRunning] > 0 && 0 !== util.bodyLength(request.body) && (util.isStream(request.body) || util.isAsyncIterable(request.body))) return;
      !request.aborted && write(client, request) ? client[kPendingIdx]++ : client[kQueue].splice(client[kPendingIdx], 1);
     }
    }(client, sync), client[kResuming] = 0, client[kRunningIdx] > 256 && (client[kQueue].splice(0, client[kRunningIdx]), 
    client[kPendingIdx] -= client[kRunningIdx], client[kRunningIdx] = 0));
   }
   function shouldSendContentLength(method) {
    return "GET" !== method && "HEAD" !== method && "OPTIONS" !== method && "TRACE" !== method && "CONNECT" !== method;
   }
   function write(client, request) {
    if ("h2" === client[kHTTPConnVersion]) return void function(client, session, request) {
     const {body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders} = request;
     let headers, stream;
     headers = "string" == typeof reqHeaders ? Request[kHTTP2CopyHeaders](reqHeaders.trim()) : reqHeaders;
     if (upgrade) return errorRequest(client, request, new Error("Upgrade not supported for H2")), 
     !1;
     try {
      request.onConnect((err => {
       request.aborted || request.completed || errorRequest(client, request, err || new RequestAbortedError);
      }));
     } catch (err) {
      errorRequest(client, request, err);
     }
     if (request.aborted) return !1;
     const h2State = client[kHTTP2SessionState];
     if (headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost], headers[HTTP2_HEADER_METHOD] = method, 
     "CONNECT" === method) return session.ref(), stream = session.request(headers, {
      endStream: !1,
      signal
     }), stream.id && !stream.pending ? (request.onUpgrade(null, null, stream), ++h2State.openStreams) : stream.once("ready", (() => {
      request.onUpgrade(null, null, stream), ++h2State.openStreams;
     })), stream.once("close", (() => {
      h2State.openStreams -= 1, 0 === h2State.openStreams && session.unref();
     })), !0;
     headers[HTTP2_HEADER_PATH] = path, headers[HTTP2_HEADER_SCHEME] = "https";
     const expectsPayload = "PUT" === method || "POST" === method || "PATCH" === method;
     body && "function" == typeof body.read && body.read(0);
     let contentLength = util.bodyLength(body);
     null == contentLength && (contentLength = request.contentLength);
     0 !== contentLength && expectsPayload || (contentLength = null);
     if (shouldSendContentLength(method) && contentLength > 0 && null != request.contentLength && request.contentLength !== contentLength) {
      if (client[kStrictContentLength]) return errorRequest(client, request, new RequestContentLengthMismatchError), 
      !1;
      process.emitWarning(new RequestContentLengthMismatchError);
     }
     null != contentLength && (assert(body, "no body must not have content length"), 
     headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`);
     session.ref();
     const shouldEndStream = "GET" === method || "HEAD" === method;
     expectContinue ? (headers[HTTP2_HEADER_EXPECT] = "100-continue", stream = session.request(headers, {
      endStream: shouldEndStream,
      signal
     }), stream.once("continue", writeBodyH2)) : (stream = session.request(headers, {
      endStream: shouldEndStream,
      signal
     }), writeBodyH2());
     return ++h2State.openStreams, stream.once("response", (headers => {
      const {[HTTP2_HEADER_STATUS]: statusCode, ...realHeaders} = headers;
      !1 === request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") && stream.pause();
     })), stream.once("end", (() => {
      request.onComplete([]);
     })), stream.on("data", (chunk => {
      !1 === request.onData(chunk) && stream.pause();
     })), stream.once("close", (() => {
      h2State.openStreams -= 1, 0 === h2State.openStreams && session.unref();
     })), stream.once("error", (function(err) {
      !client[kHTTP2Session] || client[kHTTP2Session].destroyed || this.closed || this.destroyed || (h2State.streams -= 1, 
      util.destroy(stream, err));
     })), stream.once("frameError", ((type, code) => {
      const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
      errorRequest(client, request, err), !client[kHTTP2Session] || client[kHTTP2Session].destroyed || this.closed || this.destroyed || (h2State.streams -= 1, 
      util.destroy(stream, err));
     })), !0;
     function writeBodyH2() {
      body ? util.isBuffer(body) ? (assert(contentLength === body.byteLength, "buffer body must have content length"), 
      stream.cork(), stream.write(body), stream.uncork(), stream.end(), request.onBodySent(body), 
      request.onRequestSent()) : util.isBlobLike(body) ? "function" == typeof body.stream ? writeIterable({
       client,
       request,
       contentLength,
       h2stream: stream,
       expectsPayload,
       body: body.stream(),
       socket: client[kSocket],
       header: ""
      }) : writeBlob({
       body,
       client,
       request,
       contentLength,
       expectsPayload,
       h2stream: stream,
       header: "",
       socket: client[kSocket]
      }) : util.isStream(body) ? writeStream({
       body,
       client,
       request,
       contentLength,
       expectsPayload,
       socket: client[kSocket],
       h2stream: stream,
       header: ""
      }) : util.isIterable(body) ? writeIterable({
       body,
       client,
       request,
       contentLength,
       expectsPayload,
       header: "",
       h2stream: stream,
       socket: client[kSocket]
      }) : assert(!1) : request.onRequestSent();
     }
    }(client, client[kHTTP2Session], request);
    const {body, method, path, host, upgrade, headers, blocking, reset} = request, expectsPayload = "PUT" === method || "POST" === method || "PATCH" === method;
    body && "function" == typeof body.read && body.read(0);
    const bodyLength = util.bodyLength(body);
    let contentLength = bodyLength;
    if (null === contentLength && (contentLength = request.contentLength), 0 !== contentLength || expectsPayload || (contentLength = null), 
    shouldSendContentLength(method) && contentLength > 0 && null !== request.contentLength && request.contentLength !== contentLength) {
     if (client[kStrictContentLength]) return errorRequest(client, request, new RequestContentLengthMismatchError), 
     !1;
     process.emitWarning(new RequestContentLengthMismatchError);
    }
    const socket = client[kSocket];
    try {
     request.onConnect((err => {
      request.aborted || request.completed || (errorRequest(client, request, err || new RequestAbortedError), 
      util.destroy(socket, new InformationalError("aborted")));
     }));
    } catch (err) {
     errorRequest(client, request, err);
    }
    if (request.aborted) return !1;
    "HEAD" === method && (socket[kReset] = !0), (upgrade || "CONNECT" === method) && (socket[kReset] = !0), 
    null != reset && (socket[kReset] = reset), client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests] && (socket[kReset] = !0), 
    blocking && (socket[kBlocking] = !0);
    let header = `${method} ${path} HTTP/1.1\r\n`;
    return header += "string" == typeof host ? `host: ${host}\r\n` : client[kHostHeader], 
    upgrade ? header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n` : client[kPipelining] && !socket[kReset] ? header += "connection: keep-alive\r\n" : header += "connection: close\r\n", 
    headers && (header += headers), channels.sendHeaders.hasSubscribers && channels.sendHeaders.publish({
     request,
     headers: header,
     socket
    }), body && 0 !== bodyLength ? util.isBuffer(body) ? (assert(contentLength === body.byteLength, "buffer body must have content length"), 
    socket.cork(), socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1"), 
    socket.write(body), socket.uncork(), request.onBodySent(body), request.onRequestSent(), 
    expectsPayload || (socket[kReset] = !0)) : util.isBlobLike(body) ? "function" == typeof body.stream ? writeIterable({
     body: body.stream(),
     client,
     request,
     socket,
     contentLength,
     header,
     expectsPayload
    }) : writeBlob({
     body,
     client,
     request,
     socket,
     contentLength,
     header,
     expectsPayload
    }) : util.isStream(body) ? writeStream({
     body,
     client,
     request,
     socket,
     contentLength,
     header,
     expectsPayload
    }) : util.isIterable(body) ? writeIterable({
     body,
     client,
     request,
     socket,
     contentLength,
     header,
     expectsPayload
    }) : assert(!1) : (0 === contentLength ? socket.write(`${header}content-length: 0\r\n\r\n`, "latin1") : (assert(null === contentLength, "no body must not have content length"), 
    socket.write(`${header}\r\n`, "latin1")), request.onRequestSent()), !0;
   }
   function writeStream({h2stream, body, client, request, socket, contentLength, header, expectsPayload}) {
    if (assert(0 !== contentLength || 0 === client[kRunning], "stream body cannot be pipelined"), 
    "h2" === client[kHTTPConnVersion]) {
     const pipe = pipeline(body, h2stream, (err => {
      err ? (util.destroy(body, err), util.destroy(h2stream, err)) : request.onRequestSent();
     }));
     function onPipeData(chunk) {
      request.onBodySent(chunk);
     }
     return pipe.on("data", onPipeData), void pipe.once("end", (() => {
      pipe.removeListener("data", onPipeData), util.destroy(pipe);
     }));
    }
    let finished = !1;
    const writer = new AsyncWriter({
     socket,
     request,
     contentLength,
     client,
     expectsPayload,
     header
    }), onData = function(chunk) {
     if (!finished) try {
      !writer.write(chunk) && this.pause && this.pause();
     } catch (err) {
      util.destroy(this, err);
     }
    }, onDrain = function() {
     finished || body.resume && body.resume();
    }, onAbort = function() {
     if (finished) return;
     const err = new RequestAbortedError;
     queueMicrotask((() => onFinished(err)));
    }, onFinished = function(err) {
     if (!finished) {
      if (finished = !0, assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1), 
      socket.off("drain", onDrain).off("error", onFinished), body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort), 
      !err) try {
       writer.end();
      } catch (er) {
       err = er;
      }
      writer.destroy(err), !err || "UND_ERR_INFO" === err.code && "reset" === err.message ? util.destroy(body) : util.destroy(body, err);
     }
    };
    body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort), 
    body.resume && body.resume(), socket.on("drain", onDrain).on("error", onFinished);
   }
   async function writeBlob({h2stream, body, client, request, socket, contentLength, header, expectsPayload}) {
    assert(contentLength === body.size, "blob body must have content length");
    const isH2 = "h2" === client[kHTTPConnVersion];
    try {
     if (null != contentLength && contentLength !== body.size) throw new RequestContentLengthMismatchError;
     const buffer = Buffer.from(await body.arrayBuffer());
     isH2 ? (h2stream.cork(), h2stream.write(buffer), h2stream.uncork()) : (socket.cork(), 
     socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1"), socket.write(buffer), 
     socket.uncork()), request.onBodySent(buffer), request.onRequestSent(), expectsPayload || (socket[kReset] = !0), 
     resume(client);
    } catch (err) {
     util.destroy(isH2 ? h2stream : socket, err);
    }
   }
   async function writeIterable({h2stream, body, client, request, socket, contentLength, header, expectsPayload}) {
    assert(0 !== contentLength || 0 === client[kRunning], "iterator body cannot be pipelined");
    let callback = null;
    function onDrain() {
     if (callback) {
      const cb = callback;
      callback = null, cb();
     }
    }
    const waitForDrain = () => new Promise(((resolve, reject) => {
     assert(null === callback), socket[kError] ? reject(socket[kError]) : callback = resolve;
    }));
    if ("h2" === client[kHTTPConnVersion]) {
     h2stream.on("close", onDrain).on("drain", onDrain);
     try {
      for await (const chunk of body) {
       if (socket[kError]) throw socket[kError];
       const res = h2stream.write(chunk);
       request.onBodySent(chunk), res || await waitForDrain();
      }
     } catch (err) {
      h2stream.destroy(err);
     } finally {
      request.onRequestSent(), h2stream.end(), h2stream.off("close", onDrain).off("drain", onDrain);
     }
     return;
    }
    socket.on("close", onDrain).on("drain", onDrain);
    const writer = new AsyncWriter({
     socket,
     request,
     contentLength,
     client,
     expectsPayload,
     header
    });
    try {
     for await (const chunk of body) {
      if (socket[kError]) throw socket[kError];
      writer.write(chunk) || await waitForDrain();
     }
     writer.end();
    } catch (err) {
     writer.destroy(err);
    } finally {
     socket.off("close", onDrain).off("drain", onDrain);
    }
   }
   class AsyncWriter {
    constructor({socket, request, contentLength, client, expectsPayload, header}) {
     this.socket = socket, this.request = request, this.contentLength = contentLength, 
     this.client = client, this.bytesWritten = 0, this.expectsPayload = expectsPayload, 
     this.header = header, socket[kWriting] = !0;
    }
    write(chunk) {
     const {socket, request, contentLength, client, bytesWritten, expectsPayload, header} = this;
     if (socket[kError]) throw socket[kError];
     if (socket.destroyed) return !1;
     const len = Buffer.byteLength(chunk);
     if (!len) return !0;
     if (null !== contentLength && bytesWritten + len > contentLength) {
      if (client[kStrictContentLength]) throw new RequestContentLengthMismatchError;
      process.emitWarning(new RequestContentLengthMismatchError);
     }
     socket.cork(), 0 === bytesWritten && (expectsPayload || (socket[kReset] = !0), null === contentLength ? socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1") : socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1")), 
     null === contentLength && socket.write(`\r\n${len.toString(16)}\r\n`, "latin1"), 
     this.bytesWritten += len;
     const ret = socket.write(chunk);
     return socket.uncork(), request.onBodySent(chunk), ret || socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS && socket[kParser].timeout.refresh && socket[kParser].timeout.refresh(), 
     ret;
    }
    end() {
     const {socket, contentLength, client, bytesWritten, expectsPayload, header, request} = this;
     if (request.onRequestSent(), socket[kWriting] = !1, socket[kError]) throw socket[kError];
     if (!socket.destroyed) {
      if (0 === bytesWritten ? expectsPayload ? socket.write(`${header}content-length: 0\r\n\r\n`, "latin1") : socket.write(`${header}\r\n`, "latin1") : null === contentLength && socket.write("\r\n0\r\n\r\n", "latin1"), 
      null !== contentLength && bytesWritten !== contentLength) {
       if (client[kStrictContentLength]) throw new RequestContentLengthMismatchError;
       process.emitWarning(new RequestContentLengthMismatchError);
      }
      socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS && socket[kParser].timeout.refresh && socket[kParser].timeout.refresh(), 
      resume(client);
     }
    }
    destroy(err) {
     const {socket, client} = this;
     socket[kWriting] = !1, err && (assert(client[kRunning] <= 1, "pipeline should only contain this request"), 
     util.destroy(socket, err));
    }
   }
   function errorRequest(client, request, err) {
    try {
     request.onError(err), assert(request.aborted);
    } catch (err) {
     client.emit("error", err);
    }
   }
   module.exports = class extends DispatcherBase {
    constructor(url, {interceptors, maxHeaderSize, headersTimeout, socketTimeout, requestTimeout, connectTimeout, bodyTimeout, idleTimeout, keepAlive, keepAliveTimeout, maxKeepAliveTimeout, keepAliveMaxTimeout, keepAliveTimeoutThreshold, socketPath, pipelining, tls, strictContentLength, maxCachedSessions, maxRedirections, connect, maxRequestsPerClient, localAddress, maxResponseSize, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, maxConcurrentStreams} = {}) {
     if (super(), void 0 !== keepAlive) throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
     if (void 0 !== socketTimeout) throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
     if (void 0 !== requestTimeout) throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
     if (void 0 !== idleTimeout) throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
     if (void 0 !== maxKeepAliveTimeout) throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
     if (null != maxHeaderSize && !Number.isFinite(maxHeaderSize)) throw new InvalidArgumentError("invalid maxHeaderSize");
     if (null != socketPath && "string" != typeof socketPath) throw new InvalidArgumentError("invalid socketPath");
     if (null != connectTimeout && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) throw new InvalidArgumentError("invalid connectTimeout");
     if (null != keepAliveTimeout && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) throw new InvalidArgumentError("invalid keepAliveTimeout");
     if (null != keepAliveMaxTimeout && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
     if (null != keepAliveTimeoutThreshold && !Number.isFinite(keepAliveTimeoutThreshold)) throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
     if (null != headersTimeout && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
     if (null != bodyTimeout && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
     if (null != connect && "function" != typeof connect && "object" != typeof connect) throw new InvalidArgumentError("connect must be a function or an object");
     if (null != maxRedirections && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError("maxRedirections must be a positive number");
     if (null != maxRequestsPerClient && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
     if (null != localAddress && ("string" != typeof localAddress || 0 === net.isIP(localAddress))) throw new InvalidArgumentError("localAddress must be valid string IP address");
     if (null != maxResponseSize && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) throw new InvalidArgumentError("maxResponseSize must be a positive number");
     if (null != autoSelectFamilyAttemptTimeout && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
     if (null != allowH2 && "boolean" != typeof allowH2) throw new InvalidArgumentError("allowH2 must be a valid boolean value");
     if (null != maxConcurrentStreams && ("number" != typeof maxConcurrentStreams || maxConcurrentStreams < 1)) throw new InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
     "function" != typeof connect && (connect = buildConnector({
      ...tls,
      maxCachedSessions,
      allowH2,
      socketPath,
      timeout: connectTimeout,
      ...util.nodeHasAutoSelectFamily && autoSelectFamily ? {
       autoSelectFamily,
       autoSelectFamilyAttemptTimeout
      } : void 0,
      ...connect
     })), this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [ createRedirectInterceptor({
      maxRedirections
     }) ], this[kUrl] = util.parseOrigin(url), this[kConnector] = connect, this[kSocket] = null, 
     this[kPipelining] = null != pipelining ? pipelining : 1, this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize, 
     this[kKeepAliveDefaultTimeout] = null == keepAliveTimeout ? 4e3 : keepAliveTimeout, 
     this[kKeepAliveMaxTimeout] = null == keepAliveMaxTimeout ? 6e5 : keepAliveMaxTimeout, 
     this[kKeepAliveTimeoutThreshold] = null == keepAliveTimeoutThreshold ? 1e3 : keepAliveTimeoutThreshold, 
     this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout], this[kServerName] = null, 
     this[kLocalAddress] = null != localAddress ? localAddress : null, this[kResuming] = 0, 
     this[kNeedDrain] = 0, this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r\n`, 
     this[kBodyTimeout] = null != bodyTimeout ? bodyTimeout : 3e5, this[kHeadersTimeout] = null != headersTimeout ? headersTimeout : 3e5, 
     this[kStrictContentLength] = null == strictContentLength || strictContentLength, 
     this[kMaxRedirections] = maxRedirections, this[kMaxRequests] = maxRequestsPerClient, 
     this[kClosedResolve] = null, this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1, 
     this[kHTTPConnVersion] = "h1", this[kHTTP2Session] = null, this[kHTTP2SessionState] = allowH2 ? {
      openStreams: 0,
      maxConcurrentStreams: null != maxConcurrentStreams ? maxConcurrentStreams : 100
     } : null, this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`, 
     this[kQueue] = [], this[kRunningIdx] = 0, this[kPendingIdx] = 0;
    }
    get pipelining() {
     return this[kPipelining];
    }
    set pipelining(value) {
     this[kPipelining] = value, resume(this, !0);
    }
    get [kPending]() {
     return this[kQueue].length - this[kPendingIdx];
    }
    get [kRunning]() {
     return this[kPendingIdx] - this[kRunningIdx];
    }
    get [kSize]() {
     return this[kQueue].length - this[kRunningIdx];
    }
    get [kConnected]() {
     return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
    }
    get [kBusy]() {
     const socket = this[kSocket];
     return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
    }
    [kConnect](cb) {
     connect(this), this.once("connect", cb);
    }
    [kDispatch](opts, handler) {
     const origin = opts.origin || this[kUrl].origin, request = "h2" === this[kHTTPConnVersion] ? Request[kHTTP2BuildRequest](origin, opts, handler) : Request[kHTTP1BuildRequest](origin, opts, handler);
     return this[kQueue].push(request), this[kResuming] || (null == util.bodyLength(request.body) && util.isIterable(request.body) ? (this[kResuming] = 1, 
     process.nextTick(resume, this)) : resume(this, !0)), this[kResuming] && 2 !== this[kNeedDrain] && this[kBusy] && (this[kNeedDrain] = 2), 
     this[kNeedDrain] < 2;
    }
    async [kClose]() {
     return new Promise((resolve => {
      this[kSize] ? this[kClosedResolve] = resolve : resolve(null);
     }));
    }
    async [kDestroy](err) {
     return new Promise((resolve => {
      const requests = this[kQueue].splice(this[kPendingIdx]);
      for (let i = 0; i < requests.length; i++) {
       errorRequest(this, requests[i], err);
      }
      const callback = () => {
       this[kClosedResolve] && (this[kClosedResolve](), this[kClosedResolve] = null), resolve();
      };
      null != this[kHTTP2Session] && (util.destroy(this[kHTTP2Session], err), this[kHTTP2Session] = null, 
      this[kHTTP2SessionState] = null), this[kSocket] ? util.destroy(this[kSocket].on("close", callback), err) : queueMicrotask(callback), 
      resume(this);
     }));
    }
   };
  },
  383: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {kConnected, kSize} = __webpack_require__(8028);
   class CompatWeakRef {
    constructor(value) {
     this.value = value;
    }
    deref() {
     return 0 === this.value[kConnected] && 0 === this.value[kSize] ? void 0 : this.value;
    }
   }
   class CompatFinalizer {
    constructor(finalizer) {
     this.finalizer = finalizer;
    }
    register(dispatcher, key) {
     dispatcher.on && dispatcher.on("disconnect", (() => {
      0 === dispatcher[kConnected] && 0 === dispatcher[kSize] && this.finalizer(key);
     }));
    }
   }
   module.exports = function() {
    return process.env.NODE_V8_COVERAGE ? {
     WeakRef: CompatWeakRef,
     FinalizationRegistry: CompatFinalizer
    } : {
     WeakRef: global.WeakRef || CompatWeakRef,
     FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
    };
   };
  },
  4312: module => {
   "use strict";
   module.exports = {
    maxAttributeValueSize: 1024,
    maxNameValuePairSize: 4096
   };
  },
  4305: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {parseSetCookie} = __webpack_require__(2246), {stringify} = __webpack_require__(8745), {webidl} = __webpack_require__(769), {Headers} = __webpack_require__(5472);
   function setCookie(headers, cookie) {
    webidl.argumentLengthCheck(arguments, 2, {
     header: "setCookie"
    }), webidl.brandCheck(headers, Headers, {
     strict: !1
    }), cookie = webidl.converters.Cookie(cookie);
    stringify(cookie) && headers.append("Set-Cookie", stringify(cookie));
   }
   webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([ {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: "path",
    defaultValue: null
   }, {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: "domain",
    defaultValue: null
   } ]), webidl.converters.Cookie = webidl.dictionaryConverter([ {
    converter: webidl.converters.DOMString,
    key: "name"
   }, {
    converter: webidl.converters.DOMString,
    key: "value"
   }, {
    converter: webidl.nullableConverter((value => "number" == typeof value ? webidl.converters["unsigned long long"](value) : new Date(value))),
    key: "expires",
    defaultValue: null
   }, {
    converter: webidl.nullableConverter(webidl.converters["long long"]),
    key: "maxAge",
    defaultValue: null
   }, {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: "domain",
    defaultValue: null
   }, {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: "path",
    defaultValue: null
   }, {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: "secure",
    defaultValue: null
   }, {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: "httpOnly",
    defaultValue: null
   }, {
    converter: webidl.converters.USVString,
    key: "sameSite",
    allowedValues: [ "Strict", "Lax", "None" ]
   }, {
    converter: webidl.sequenceConverter(webidl.converters.DOMString),
    key: "unparsed",
    defaultValue: []
   } ]), module.exports = {
    getCookies: function(headers) {
     webidl.argumentLengthCheck(arguments, 1, {
      header: "getCookies"
     }), webidl.brandCheck(headers, Headers, {
      strict: !1
     });
     const cookie = headers.get("cookie"), out = {};
     if (!cookie) return out;
     for (const piece of cookie.split(";")) {
      const [name, ...value] = piece.split("=");
      out[name.trim()] = value.join("=");
     }
     return out;
    },
    deleteCookie: function(headers, name, attributes) {
     webidl.argumentLengthCheck(arguments, 2, {
      header: "deleteCookie"
     }), webidl.brandCheck(headers, Headers, {
      strict: !1
     }), name = webidl.converters.DOMString(name), attributes = webidl.converters.DeleteCookieAttributes(attributes), 
     setCookie(headers, {
      name,
      value: "",
      expires: new Date(0),
      ...attributes
     });
    },
    getSetCookies: function(headers) {
     webidl.argumentLengthCheck(arguments, 1, {
      header: "getSetCookies"
     }), webidl.brandCheck(headers, Headers, {
      strict: !1
     });
     const cookies = headers.getSetCookie();
     return cookies ? cookies.map((pair => parseSetCookie(pair))) : [];
    },
    setCookie
   };
  },
  2246: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {maxNameValuePairSize, maxAttributeValueSize} = __webpack_require__(4312), {isCTLExcludingHtab} = __webpack_require__(8745), {collectASequenceOfCodePointsFast} = __webpack_require__(3587), assert = __webpack_require__(2613);
   function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
    if (0 === unparsedAttributes.length) return cookieAttributeList;
    assert(";" === unparsedAttributes[0]);
    let cookieAv = "";
    (unparsedAttributes = unparsedAttributes.slice(1)).includes(";") ? (cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, {
     position: 0
    }), unparsedAttributes = unparsedAttributes.slice(cookieAv.length)) : (cookieAv = unparsedAttributes, 
    unparsedAttributes = "");
    let attributeName = "", attributeValue = "";
    if (cookieAv.includes("=")) {
     const position = {
      position: 0
     };
     attributeName = collectASequenceOfCodePointsFast("=", cookieAv, position), attributeValue = cookieAv.slice(position.position + 1);
    } else attributeName = cookieAv;
    if (attributeName = attributeName.trim(), attributeValue = attributeValue.trim(), 
    attributeValue.length > maxAttributeValueSize) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    const attributeNameLowercase = attributeName.toLowerCase();
    if ("expires" === attributeNameLowercase) {
     const expiryTime = new Date(attributeValue);
     cookieAttributeList.expires = expiryTime;
    } else if ("max-age" === attributeNameLowercase) {
     const charCode = attributeValue.charCodeAt(0);
     if ((charCode < 48 || charCode > 57) && "-" !== attributeValue[0]) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
     if (!/^\d+$/.test(attributeValue)) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
     const deltaSeconds = Number(attributeValue);
     cookieAttributeList.maxAge = deltaSeconds;
    } else if ("domain" === attributeNameLowercase) {
     let cookieDomain = attributeValue;
     "." === cookieDomain[0] && (cookieDomain = cookieDomain.slice(1)), cookieDomain = cookieDomain.toLowerCase(), 
     cookieAttributeList.domain = cookieDomain;
    } else if ("path" === attributeNameLowercase) {
     let cookiePath = "";
     cookiePath = 0 === attributeValue.length || "/" !== attributeValue[0] ? "/" : attributeValue, 
     cookieAttributeList.path = cookiePath;
    } else if ("secure" === attributeNameLowercase) cookieAttributeList.secure = !0; else if ("httponly" === attributeNameLowercase) cookieAttributeList.httpOnly = !0; else if ("samesite" === attributeNameLowercase) {
     let enforcement = "Default";
     const attributeValueLowercase = attributeValue.toLowerCase();
     attributeValueLowercase.includes("none") && (enforcement = "None"), attributeValueLowercase.includes("strict") && (enforcement = "Strict"), 
     attributeValueLowercase.includes("lax") && (enforcement = "Lax"), cookieAttributeList.sameSite = enforcement;
    } else cookieAttributeList.unparsed ??= [], cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
   }
   module.exports = {
    parseSetCookie: function(header) {
     if (isCTLExcludingHtab(header)) return null;
     let nameValuePair = "", unparsedAttributes = "", name = "", value = "";
     if (header.includes(";")) {
      const position = {
       position: 0
      };
      nameValuePair = collectASequenceOfCodePointsFast(";", header, position), unparsedAttributes = header.slice(position.position);
     } else nameValuePair = header;
     if (nameValuePair.includes("=")) {
      const position = {
       position: 0
      };
      name = collectASequenceOfCodePointsFast("=", nameValuePair, position), value = nameValuePair.slice(position.position + 1);
     } else value = nameValuePair;
     return name = name.trim(), value = value.trim(), name.length + value.length > maxNameValuePairSize ? null : {
      name,
      value,
      ...parseUnparsedAttributes(unparsedAttributes)
     };
    },
    parseUnparsedAttributes
   };
  },
  8745: module => {
   "use strict";
   function validateCookieName(name) {
    for (const char of name) {
     const code = char.charCodeAt(0);
     if (code <= 32 || code > 127 || "(" === char || ")" === char || ">" === char || "<" === char || "@" === char || "," === char || ";" === char || ":" === char || "\\" === char || '"' === char || "/" === char || "[" === char || "]" === char || "?" === char || "=" === char || "{" === char || "}" === char) throw new Error("Invalid cookie name");
    }
   }
   function validateCookieValue(value) {
    for (const char of value) {
     const code = char.charCodeAt(0);
     if (code < 33 || 34 === code || 44 === code || 59 === code || 92 === code || code > 126) throw new Error("Invalid header value");
    }
   }
   function validateCookiePath(path) {
    for (const char of path) {
     if (char.charCodeAt(0) < 33 || ";" === char) throw new Error("Invalid cookie path");
    }
   }
   function toIMFDate(date) {
    "number" == typeof date && (date = new Date(date));
    return `${[ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ][date.getUTCDay()]}, ${date.getUTCDate().toString().padStart(2, "0")} ${[ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ][date.getUTCMonth()]} ${date.getUTCFullYear()} ${date.getUTCHours().toString().padStart(2, "0")}:${date.getUTCMinutes().toString().padStart(2, "0")}:${date.getUTCSeconds().toString().padStart(2, "0")} GMT`;
   }
   module.exports = {
    isCTLExcludingHtab: function(value) {
     if (0 === value.length) return !1;
     for (const char of value) {
      const code = char.charCodeAt(0);
      if (code >= 0 || code <= 8 || code >= 10 || code <= 31 || 127 === code) return !1;
     }
    },
    validateCookieName,
    validateCookiePath,
    validateCookieValue,
    toIMFDate,
    stringify: function(cookie) {
     if (0 === cookie.name.length) return null;
     validateCookieName(cookie.name), validateCookieValue(cookie.value);
     const out = [ `${cookie.name}=${cookie.value}` ];
     cookie.name.startsWith("__Secure-") && (cookie.secure = !0), cookie.name.startsWith("__Host-") && (cookie.secure = !0, 
     cookie.domain = null, cookie.path = "/"), cookie.secure && out.push("Secure"), cookie.httpOnly && out.push("HttpOnly"), 
     "number" == typeof cookie.maxAge && (!function(maxAge) {
      if (maxAge < 0) throw new Error("Invalid cookie max-age");
     }(cookie.maxAge), out.push(`Max-Age=${cookie.maxAge}`)), cookie.domain && (!function(domain) {
      if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
     }(cookie.domain), out.push(`Domain=${cookie.domain}`)), cookie.path && (validateCookiePath(cookie.path), 
     out.push(`Path=${cookie.path}`)), cookie.expires && "Invalid Date" !== cookie.expires.toString() && out.push(`Expires=${toIMFDate(cookie.expires)}`), 
     cookie.sameSite && out.push(`SameSite=${cookie.sameSite}`);
     for (const part of cookie.unparsed) {
      if (!part.includes("=")) throw new Error("Invalid unparsed");
      const [key, ...value] = part.split("=");
      out.push(`${key.trim()}=${value.join("=")}`);
     }
     return out.join("; ");
    }
   };
  },
  5651: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const net = __webpack_require__(9278), assert = __webpack_require__(2613), util = __webpack_require__(8869), {InvalidArgumentError, ConnectTimeoutError} = __webpack_require__(3898);
   let tls, SessionCache;
   SessionCache = global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE ? class {
    constructor(maxCachedSessions) {
     this._maxCachedSessions = maxCachedSessions, this._sessionCache = new Map, this._sessionRegistry = new global.FinalizationRegistry((key => {
      if (this._sessionCache.size < this._maxCachedSessions) return;
      const ref = this._sessionCache.get(key);
      void 0 !== ref && void 0 === ref.deref() && this._sessionCache.delete(key);
     }));
    }
    get(sessionKey) {
     const ref = this._sessionCache.get(sessionKey);
     return ref ? ref.deref() : null;
    }
    set(sessionKey, session) {
     0 !== this._maxCachedSessions && (this._sessionCache.set(sessionKey, new WeakRef(session)), 
     this._sessionRegistry.register(session, sessionKey));
    }
   } : class {
    constructor(maxCachedSessions) {
     this._maxCachedSessions = maxCachedSessions, this._sessionCache = new Map;
    }
    get(sessionKey) {
     return this._sessionCache.get(sessionKey);
    }
    set(sessionKey, session) {
     if (0 !== this._maxCachedSessions) {
      if (this._sessionCache.size >= this._maxCachedSessions) {
       const {value: oldestKey} = this._sessionCache.keys().next();
       this._sessionCache.delete(oldestKey);
      }
      this._sessionCache.set(sessionKey, session);
     }
    }
   }, module.exports = function({allowH2, maxCachedSessions, socketPath, timeout, ...opts}) {
    if (null != maxCachedSessions && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
    const options = {
     path: socketPath,
     ...opts
    }, sessionCache = new SessionCache(null == maxCachedSessions ? 100 : maxCachedSessions);
    return timeout = null == timeout ? 1e4 : timeout, allowH2 = null != allowH2 && allowH2, 
    function({hostname, host, protocol, port, servername, localAddress, httpSocket}, callback) {
     let socket;
     if ("https:" === protocol) {
      tls || (tls = __webpack_require__(4756));
      const sessionKey = (servername = servername || options.servername || util.getServerName(host) || null) || hostname, session = sessionCache.get(sessionKey) || null;
      assert(sessionKey), socket = tls.connect({
       highWaterMark: 16384,
       ...options,
       servername,
       session,
       localAddress,
       ALPNProtocols: allowH2 ? [ "http/1.1", "h2" ] : [ "http/1.1" ],
       socket: httpSocket,
       port: port || 443,
       host: hostname
      }), socket.on("session", (function(session) {
       sessionCache.set(sessionKey, session);
      }));
     } else assert(!httpSocket, "httpSocket can only be sent on TLS update"), socket = net.connect({
      highWaterMark: 65536,
      ...options,
      localAddress,
      port: port || 80,
      host: hostname
     });
     if (null == options.keepAlive || options.keepAlive) {
      const keepAliveInitialDelay = void 0 === options.keepAliveInitialDelay ? 6e4 : options.keepAliveInitialDelay;
      socket.setKeepAlive(!0, keepAliveInitialDelay);
     }
     const cancelTimeout = function(onConnectTimeout, timeout) {
      if (!timeout) return () => {};
      let s1 = null, s2 = null;
      const timeoutId = setTimeout((() => {
       s1 = setImmediate((() => {
        "win32" === process.platform ? s2 = setImmediate((() => onConnectTimeout())) : onConnectTimeout();
       }));
      }), timeout);
      return () => {
       clearTimeout(timeoutId), clearImmediate(s1), clearImmediate(s2);
      };
     }((() => function(socket) {
      util.destroy(socket, new ConnectTimeoutError);
     }(socket)), timeout);
     return socket.setNoDelay(!0).once("https:" === protocol ? "secureConnect" : "connect", (function() {
      if (cancelTimeout(), callback) {
       const cb = callback;
       callback = null, cb(null, this);
      }
     })).on("error", (function(err) {
      if (cancelTimeout(), callback) {
       const cb = callback;
       callback = null, cb(err);
      }
     })), socket;
    };
   };
  },
  5340: module => {
   "use strict";
   const headerNameLowerCasedRecord = {}, wellknownHeaderNames = [ "Accept", "Accept-Encoding", "Accept-Language", "Accept-Ranges", "Access-Control-Allow-Credentials", "Access-Control-Allow-Headers", "Access-Control-Allow-Methods", "Access-Control-Allow-Origin", "Access-Control-Expose-Headers", "Access-Control-Max-Age", "Access-Control-Request-Headers", "Access-Control-Request-Method", "Age", "Allow", "Alt-Svc", "Alt-Used", "Authorization", "Cache-Control", "Clear-Site-Data", "Connection", "Content-Disposition", "Content-Encoding", "Content-Language", "Content-Length", "Content-Location", "Content-Range", "Content-Security-Policy", "Content-Security-Policy-Report-Only", "Content-Type", "Cookie", "Cross-Origin-Embedder-Policy", "Cross-Origin-Opener-Policy", "Cross-Origin-Resource-Policy", "Date", "Device-Memory", "Downlink", "ECT", "ETag", "Expect", "Expect-CT", "Expires", "Forwarded", "From", "Host", "If-Match", "If-Modified-Since", "If-None-Match", "If-Range", "If-Unmodified-Since", "Keep-Alive", "Last-Modified", "Link", "Location", "Max-Forwards", "Origin", "Permissions-Policy", "Pragma", "Proxy-Authenticate", "Proxy-Authorization", "RTT", "Range", "Referer", "Referrer-Policy", "Refresh", "Retry-After", "Sec-WebSocket-Accept", "Sec-WebSocket-Extensions", "Sec-WebSocket-Key", "Sec-WebSocket-Protocol", "Sec-WebSocket-Version", "Server", "Server-Timing", "Service-Worker-Allowed", "Service-Worker-Navigation-Preload", "Set-Cookie", "SourceMap", "Strict-Transport-Security", "Supports-Loading-Mode", "TE", "Timing-Allow-Origin", "Trailer", "Transfer-Encoding", "Upgrade", "Upgrade-Insecure-Requests", "User-Agent", "Vary", "Via", "WWW-Authenticate", "X-Content-Type-Options", "X-DNS-Prefetch-Control", "X-Frame-Options", "X-Permitted-Cross-Domain-Policies", "X-Powered-By", "X-Requested-With", "X-XSS-Protection" ];
   for (let i = 0; i < wellknownHeaderNames.length; ++i) {
    const key = wellknownHeaderNames[i], lowerCasedKey = key.toLowerCase();
    headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
   }
   Object.setPrototypeOf(headerNameLowerCasedRecord, null), module.exports = {
    wellknownHeaderNames,
    headerNameLowerCasedRecord
   };
  },
  3898: module => {
   "use strict";
   class UndiciError extends Error {
    constructor(message) {
     super(message), this.name = "UndiciError", this.code = "UND_ERR";
    }
   }
   class ConnectTimeoutError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, ConnectTimeoutError), this.name = "ConnectTimeoutError", 
     this.message = message || "Connect Timeout Error", this.code = "UND_ERR_CONNECT_TIMEOUT";
    }
   }
   class HeadersTimeoutError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, HeadersTimeoutError), this.name = "HeadersTimeoutError", 
     this.message = message || "Headers Timeout Error", this.code = "UND_ERR_HEADERS_TIMEOUT";
    }
   }
   class HeadersOverflowError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, HeadersOverflowError), this.name = "HeadersOverflowError", 
     this.message = message || "Headers Overflow Error", this.code = "UND_ERR_HEADERS_OVERFLOW";
    }
   }
   class BodyTimeoutError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, BodyTimeoutError), this.name = "BodyTimeoutError", 
     this.message = message || "Body Timeout Error", this.code = "UND_ERR_BODY_TIMEOUT";
    }
   }
   class ResponseStatusCodeError extends UndiciError {
    constructor(message, statusCode, headers, body) {
     super(message), Error.captureStackTrace(this, ResponseStatusCodeError), this.name = "ResponseStatusCodeError", 
     this.message = message || "Response Status Code Error", this.code = "UND_ERR_RESPONSE_STATUS_CODE", 
     this.body = body, this.status = statusCode, this.statusCode = statusCode, this.headers = headers;
    }
   }
   class InvalidArgumentError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, InvalidArgumentError), this.name = "InvalidArgumentError", 
     this.message = message || "Invalid Argument Error", this.code = "UND_ERR_INVALID_ARG";
    }
   }
   class InvalidReturnValueError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, InvalidReturnValueError), this.name = "InvalidReturnValueError", 
     this.message = message || "Invalid Return Value Error", this.code = "UND_ERR_INVALID_RETURN_VALUE";
    }
   }
   class RequestAbortedError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, RequestAbortedError), this.name = "AbortError", 
     this.message = message || "Request aborted", this.code = "UND_ERR_ABORTED";
    }
   }
   class InformationalError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, InformationalError), this.name = "InformationalError", 
     this.message = message || "Request information", this.code = "UND_ERR_INFO";
    }
   }
   class RequestContentLengthMismatchError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, RequestContentLengthMismatchError), 
     this.name = "RequestContentLengthMismatchError", this.message = message || "Request body length does not match content-length header", 
     this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
    }
   }
   class ResponseContentLengthMismatchError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, ResponseContentLengthMismatchError), 
     this.name = "ResponseContentLengthMismatchError", this.message = message || "Response body length does not match content-length header", 
     this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
    }
   }
   class ClientDestroyedError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, ClientDestroyedError), this.name = "ClientDestroyedError", 
     this.message = message || "The client is destroyed", this.code = "UND_ERR_DESTROYED";
    }
   }
   class ClientClosedError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, ClientClosedError), this.name = "ClientClosedError", 
     this.message = message || "The client is closed", this.code = "UND_ERR_CLOSED";
    }
   }
   class SocketError extends UndiciError {
    constructor(message, socket) {
     super(message), Error.captureStackTrace(this, SocketError), this.name = "SocketError", 
     this.message = message || "Socket error", this.code = "UND_ERR_SOCKET", this.socket = socket;
    }
   }
   class NotSupportedError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, NotSupportedError), this.name = "NotSupportedError", 
     this.message = message || "Not supported error", this.code = "UND_ERR_NOT_SUPPORTED";
    }
   }
   class HTTPParserError extends Error {
    constructor(message, code, data) {
     super(message), Error.captureStackTrace(this, HTTPParserError), this.name = "HTTPParserError", 
     this.code = code ? `HPE_${code}` : void 0, this.data = data ? data.toString() : void 0;
    }
   }
   class ResponseExceededMaxSizeError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, ResponseExceededMaxSizeError), this.name = "ResponseExceededMaxSizeError", 
     this.message = message || "Response content exceeded max size", this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
    }
   }
   class RequestRetryError extends UndiciError {
    constructor(message, code, {headers, data}) {
     super(message), Error.captureStackTrace(this, RequestRetryError), this.name = "RequestRetryError", 
     this.message = message || "Request retry error", this.code = "UND_ERR_REQ_RETRY", 
     this.statusCode = code, this.data = data, this.headers = headers;
    }
   }
   module.exports = {
    HTTPParserError,
    UndiciError,
    HeadersTimeoutError,
    HeadersOverflowError,
    BodyTimeoutError,
    RequestContentLengthMismatchError,
    ConnectTimeoutError,
    ResponseStatusCodeError,
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError,
    ClientDestroyedError,
    ClientClosedError,
    InformationalError,
    SocketError,
    NotSupportedError,
    ResponseContentLengthMismatchError,
    BalancedPoolMissingUpstreamError: class extends UndiciError {
     constructor(message) {
      super(message), Error.captureStackTrace(this, NotSupportedError), this.name = "MissingUpstreamError", 
      this.message = message || "No upstream has been added to the BalancedPool", this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
     }
    },
    ResponseExceededMaxSizeError,
    RequestRetryError
   };
  },
  7392: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {InvalidArgumentError, NotSupportedError} = __webpack_require__(3898), assert = __webpack_require__(2613), {kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest} = __webpack_require__(8028), util = __webpack_require__(8869), tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/, headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/, invalidPathRegex = /[^\u0021-\u00ff]/, kHandler = Symbol("handler"), channels = {};
   let extractBody;
   try {
    const diagnosticsChannel = __webpack_require__(1637);
    channels.create = diagnosticsChannel.channel("undici:request:create"), channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent"), 
    channels.headers = diagnosticsChannel.channel("undici:request:headers"), channels.trailers = diagnosticsChannel.channel("undici:request:trailers"), 
    channels.error = diagnosticsChannel.channel("undici:request:error");
   } catch {
    channels.create = {
     hasSubscribers: !1
    }, channels.bodySent = {
     hasSubscribers: !1
    }, channels.headers = {
     hasSubscribers: !1
    }, channels.trailers = {
     hasSubscribers: !1
    }, channels.error = {
     hasSubscribers: !1
    };
   }
   class Request {
    constructor(origin, {path, method, body, headers, query, idempotent, blocking, upgrade, headersTimeout, bodyTimeout, reset, throwOnError, expectContinue}, handler) {
     if ("string" != typeof path) throw new InvalidArgumentError("path must be a string");
     if ("/" !== path[0] && !path.startsWith("http://") && !path.startsWith("https://") && "CONNECT" !== method) throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
     if (null !== invalidPathRegex.exec(path)) throw new InvalidArgumentError("invalid request path");
     if ("string" != typeof method) throw new InvalidArgumentError("method must be a string");
     if (null === tokenRegExp.exec(method)) throw new InvalidArgumentError("invalid request method");
     if (upgrade && "string" != typeof upgrade) throw new InvalidArgumentError("upgrade must be a string");
     if (null != headersTimeout && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError("invalid headersTimeout");
     if (null != bodyTimeout && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError("invalid bodyTimeout");
     if (null != reset && "boolean" != typeof reset) throw new InvalidArgumentError("invalid reset");
     if (null != expectContinue && "boolean" != typeof expectContinue) throw new InvalidArgumentError("invalid expectContinue");
     if (this.headersTimeout = headersTimeout, this.bodyTimeout = bodyTimeout, this.throwOnError = !0 === throwOnError, 
     this.method = method, this.abort = null, null == body) this.body = null; else if (util.isStream(body)) {
      this.body = body;
      const rState = this.body._readableState;
      rState && rState.autoDestroy || (this.endHandler = function() {
       util.destroy(this);
      }, this.body.on("end", this.endHandler)), this.errorHandler = err => {
       this.abort ? this.abort(err) : this.error = err;
      }, this.body.on("error", this.errorHandler);
     } else if (util.isBuffer(body)) this.body = body.byteLength ? body : null; else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null; else if (body instanceof ArrayBuffer) this.body = body.byteLength ? Buffer.from(body) : null; else if ("string" == typeof body) this.body = body.length ? Buffer.from(body) : null; else {
      if (!(util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body))) throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
      this.body = body;
     }
     if (this.completed = !1, this.aborted = !1, this.upgrade = upgrade || null, this.path = query ? util.buildURL(path, query) : path, 
     this.origin = origin, this.idempotent = null == idempotent ? "HEAD" === method || "GET" === method : idempotent, 
     this.blocking = null != blocking && blocking, this.reset = null == reset ? null : reset, 
     this.host = null, this.contentLength = null, this.contentType = null, this.headers = "", 
     this.expectContinue = null != expectContinue && expectContinue, Array.isArray(headers)) {
      if (headers.length % 2 != 0) throw new InvalidArgumentError("headers array must be even");
      for (let i = 0; i < headers.length; i += 2) processHeader(this, headers[i], headers[i + 1]);
     } else if (headers && "object" == typeof headers) {
      const keys = Object.keys(headers);
      for (let i = 0; i < keys.length; i++) {
       const key = keys[i];
       processHeader(this, key, headers[key]);
      }
     } else if (null != headers) throw new InvalidArgumentError("headers must be an object or an array");
     if (util.isFormDataLike(this.body)) {
      if (util.nodeMajor < 16 || 16 === util.nodeMajor && util.nodeMinor < 8) throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
      extractBody || (extractBody = __webpack_require__(2136).extractBody);
      const [bodyStream, contentType] = extractBody(body);
      null == this.contentType && (this.contentType = contentType, this.headers += `content-type: ${contentType}\r\n`), 
      this.body = bodyStream.stream, this.contentLength = bodyStream.length;
     } else util.isBlobLike(body) && null == this.contentType && body.type && (this.contentType = body.type, 
     this.headers += `content-type: ${body.type}\r\n`);
     util.validateHandler(handler, method, upgrade), this.servername = util.getServerName(this.host), 
     this[kHandler] = handler, channels.create.hasSubscribers && channels.create.publish({
      request: this
     });
    }
    onBodySent(chunk) {
     if (this[kHandler].onBodySent) try {
      return this[kHandler].onBodySent(chunk);
     } catch (err) {
      this.abort(err);
     }
    }
    onRequestSent() {
     if (channels.bodySent.hasSubscribers && channels.bodySent.publish({
      request: this
     }), this[kHandler].onRequestSent) try {
      return this[kHandler].onRequestSent();
     } catch (err) {
      this.abort(err);
     }
    }
    onConnect(abort) {
     if (assert(!this.aborted), assert(!this.completed), !this.error) return this.abort = abort, 
     this[kHandler].onConnect(abort);
     abort(this.error);
    }
    onHeaders(statusCode, headers, resume, statusText) {
     assert(!this.aborted), assert(!this.completed), channels.headers.hasSubscribers && channels.headers.publish({
      request: this,
      response: {
       statusCode,
       headers,
       statusText
      }
     });
     try {
      return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
     } catch (err) {
      this.abort(err);
     }
    }
    onData(chunk) {
     assert(!this.aborted), assert(!this.completed);
     try {
      return this[kHandler].onData(chunk);
     } catch (err) {
      return this.abort(err), !1;
     }
    }
    onUpgrade(statusCode, headers, socket) {
     return assert(!this.aborted), assert(!this.completed), this[kHandler].onUpgrade(statusCode, headers, socket);
    }
    onComplete(trailers) {
     this.onFinally(), assert(!this.aborted), this.completed = !0, channels.trailers.hasSubscribers && channels.trailers.publish({
      request: this,
      trailers
     });
     try {
      return this[kHandler].onComplete(trailers);
     } catch (err) {
      this.onError(err);
     }
    }
    onError(error) {
     if (this.onFinally(), channels.error.hasSubscribers && channels.error.publish({
      request: this,
      error
     }), !this.aborted) return this.aborted = !0, this[kHandler].onError(error);
    }
    onFinally() {
     this.errorHandler && (this.body.off("error", this.errorHandler), this.errorHandler = null), 
     this.endHandler && (this.body.off("end", this.endHandler), this.endHandler = null);
    }
    addHeader(key, value) {
     return processHeader(this, key, value), this;
    }
    static [kHTTP1BuildRequest](origin, opts, handler) {
     return new Request(origin, opts, handler);
    }
    static [kHTTP2BuildRequest](origin, opts, handler) {
     const headers = opts.headers;
     opts = {
      ...opts,
      headers: null
     };
     const request = new Request(origin, opts, handler);
     if (request.headers = {}, Array.isArray(headers)) {
      if (headers.length % 2 != 0) throw new InvalidArgumentError("headers array must be even");
      for (let i = 0; i < headers.length; i += 2) processHeader(request, headers[i], headers[i + 1], !0);
     } else if (headers && "object" == typeof headers) {
      const keys = Object.keys(headers);
      for (let i = 0; i < keys.length; i++) {
       const key = keys[i];
       processHeader(request, key, headers[key], !0);
      }
     } else if (null != headers) throw new InvalidArgumentError("headers must be an object or an array");
     return request;
    }
    static [kHTTP2CopyHeaders](raw) {
     const rawHeaders = raw.split("\r\n"), headers = {};
     for (const header of rawHeaders) {
      const [key, value] = header.split(": ");
      null != value && 0 !== value.length && (headers[key] ? headers[key] += `,${value}` : headers[key] = value);
     }
     return headers;
    }
   }
   function processHeaderValue(key, val, skipAppend) {
    if (val && "object" == typeof val) throw new InvalidArgumentError(`invalid ${key} header`);
    if (val = null != val ? `${val}` : "", null !== headerCharRegex.exec(val)) throw new InvalidArgumentError(`invalid ${key} header`);
    return skipAppend ? val : `${key}: ${val}\r\n`;
   }
   function processHeader(request, key, val, skipAppend = !1) {
    if (val && "object" == typeof val && !Array.isArray(val)) throw new InvalidArgumentError(`invalid ${key} header`);
    if (void 0 !== val) if (null === request.host && 4 === key.length && "host" === key.toLowerCase()) {
     if (null !== headerCharRegex.exec(val)) throw new InvalidArgumentError(`invalid ${key} header`);
     request.host = val;
    } else if (null === request.contentLength && 14 === key.length && "content-length" === key.toLowerCase()) {
     if (request.contentLength = parseInt(val, 10), !Number.isFinite(request.contentLength)) throw new InvalidArgumentError("invalid content-length header");
    } else if (null === request.contentType && 12 === key.length && "content-type" === key.toLowerCase()) request.contentType = val, 
    skipAppend ? request.headers[key] = processHeaderValue(key, val, skipAppend) : request.headers += processHeaderValue(key, val); else {
     if (17 === key.length && "transfer-encoding" === key.toLowerCase()) throw new InvalidArgumentError("invalid transfer-encoding header");
     if (10 === key.length && "connection" === key.toLowerCase()) {
      const value = "string" == typeof val ? val.toLowerCase() : null;
      if ("close" !== value && "keep-alive" !== value) throw new InvalidArgumentError("invalid connection header");
      "close" === value && (request.reset = !0);
     } else {
      if (10 === key.length && "keep-alive" === key.toLowerCase()) throw new InvalidArgumentError("invalid keep-alive header");
      if (7 === key.length && "upgrade" === key.toLowerCase()) throw new InvalidArgumentError("invalid upgrade header");
      if (6 === key.length && "expect" === key.toLowerCase()) throw new NotSupportedError("expect header not supported");
      if (null === tokenRegExp.exec(key)) throw new InvalidArgumentError("invalid header key");
      if (Array.isArray(val)) for (let i = 0; i < val.length; i++) skipAppend ? request.headers[key] ? request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}` : request.headers[key] = processHeaderValue(key, val[i], skipAppend) : request.headers += processHeaderValue(key, val[i]); else skipAppend ? request.headers[key] = processHeaderValue(key, val, skipAppend) : request.headers += processHeaderValue(key, val);
     }
    }
   }
   module.exports = Request;
  },
  8028: module => {
   module.exports = {
    kClose: Symbol("close"),
    kDestroy: Symbol("destroy"),
    kDispatch: Symbol("dispatch"),
    kUrl: Symbol("url"),
    kWriting: Symbol("writing"),
    kResuming: Symbol("resuming"),
    kQueue: Symbol("queue"),
    kConnect: Symbol("connect"),
    kConnecting: Symbol("connecting"),
    kHeadersList: Symbol("headers list"),
    kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
    kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
    kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
    kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
    kKeepAlive: Symbol("keep alive"),
    kHeadersTimeout: Symbol("headers timeout"),
    kBodyTimeout: Symbol("body timeout"),
    kServerName: Symbol("server name"),
    kLocalAddress: Symbol("local address"),
    kHost: Symbol("host"),
    kNoRef: Symbol("no ref"),
    kBodyUsed: Symbol("used"),
    kRunning: Symbol("running"),
    kBlocking: Symbol("blocking"),
    kPending: Symbol("pending"),
    kSize: Symbol("size"),
    kBusy: Symbol("busy"),
    kQueued: Symbol("queued"),
    kFree: Symbol("free"),
    kConnected: Symbol("connected"),
    kClosed: Symbol("closed"),
    kNeedDrain: Symbol("need drain"),
    kReset: Symbol("reset"),
    kDestroyed: Symbol.for("nodejs.stream.destroyed"),
    kMaxHeadersSize: Symbol("max headers size"),
    kRunningIdx: Symbol("running index"),
    kPendingIdx: Symbol("pending index"),
    kError: Symbol("error"),
    kClients: Symbol("clients"),
    kClient: Symbol("client"),
    kParser: Symbol("parser"),
    kOnDestroyed: Symbol("destroy callbacks"),
    kPipelining: Symbol("pipelining"),
    kSocket: Symbol("socket"),
    kHostHeader: Symbol("host header"),
    kConnector: Symbol("connector"),
    kStrictContentLength: Symbol("strict content length"),
    kMaxRedirections: Symbol("maxRedirections"),
    kMaxRequests: Symbol("maxRequestsPerClient"),
    kProxy: Symbol("proxy agent options"),
    kCounter: Symbol("socket request counter"),
    kInterceptors: Symbol("dispatch interceptors"),
    kMaxResponseSize: Symbol("max response size"),
    kHTTP2Session: Symbol("http2Session"),
    kHTTP2SessionState: Symbol("http2Session state"),
    kHTTP2BuildRequest: Symbol("http2 build request"),
    kHTTP1BuildRequest: Symbol("http1 build request"),
    kHTTP2CopyHeaders: Symbol("http2 copy headers"),
    kHTTPConnVersion: Symbol("http connection version"),
    kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
    kConstruct: Symbol("constructable")
   };
  },
  8869: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const assert = __webpack_require__(2613), {kDestroyed, kBodyUsed} = __webpack_require__(8028), {IncomingMessage} = __webpack_require__(8611), stream = __webpack_require__(2203), net = __webpack_require__(9278), {InvalidArgumentError} = __webpack_require__(3898), {Blob} = __webpack_require__(181), nodeUtil = __webpack_require__(9023), {stringify} = __webpack_require__(3480), {headerNameLowerCasedRecord} = __webpack_require__(5340), [nodeMajor, nodeMinor] = process.versions.node.split(".").map((v => Number(v)));
   function isStream(obj) {
    return obj && "object" == typeof obj && "function" == typeof obj.pipe && "function" == typeof obj.on;
   }
   function isBlobLike(object) {
    return Blob && object instanceof Blob || object && "object" == typeof object && ("function" == typeof object.stream || "function" == typeof object.arrayBuffer) && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
   }
   function parseURL(url) {
    if ("string" == typeof url) {
     if (url = new URL(url), !/^https?:/.test(url.origin || url.protocol)) throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
     return url;
    }
    if (!url || "object" != typeof url) throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
    if (!/^https?:/.test(url.origin || url.protocol)) throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
    if (!(url instanceof URL)) {
     if (null != url.port && "" !== url.port && !Number.isFinite(parseInt(url.port))) throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
     if (null != url.path && "string" != typeof url.path) throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
     if (null != url.pathname && "string" != typeof url.pathname) throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
     if (null != url.hostname && "string" != typeof url.hostname) throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
     if (null != url.origin && "string" != typeof url.origin) throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
     const port = null != url.port ? url.port : "https:" === url.protocol ? 443 : 80;
     let origin = null != url.origin ? url.origin : `${url.protocol}//${url.hostname}:${port}`, path = null != url.path ? url.path : `${url.pathname || ""}${url.search || ""}`;
     origin.endsWith("/") && (origin = origin.substring(0, origin.length - 1)), path && !path.startsWith("/") && (path = `/${path}`), 
     url = new URL(origin + path);
    }
    return url;
   }
   function isDestroyed(stream) {
    return !stream || !(!stream.destroyed && !stream[kDestroyed]);
   }
   function isReadableAborted(stream) {
    const state = stream && stream._readableState;
    return isDestroyed(stream) && state && !state.endEmitted;
   }
   const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
   function isBuffer(buffer) {
    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
   }
   let ReadableStream;
   const hasToWellFormed = !!String.prototype.toWellFormed;
   const kEnumerableProperty = Object.create(null);
   kEnumerableProperty.enumerable = !0, module.exports = {
    kEnumerableProperty,
    nop: function() {},
    isDisturbed: function(body) {
     return !(!body || !(stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
    },
    isErrored: function(body) {
     return !(!body || !(stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));
    },
    isReadable: function(body) {
     return !(!body || !(stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));
    },
    toUSVString: function(val) {
     return hasToWellFormed ? `${val}`.toWellFormed() : nodeUtil.toUSVString ? nodeUtil.toUSVString(val) : `${val}`;
    },
    isReadableAborted,
    isBlobLike,
    parseOrigin: function(url) {
     if ("/" !== (url = parseURL(url)).pathname || url.search || url.hash) throw new InvalidArgumentError("invalid url");
     return url;
    },
    parseURL,
    getServerName: function(host) {
     if (!host) return null;
     assert.strictEqual(typeof host, "string");
     const servername = function(host) {
      if ("[" === host[0]) {
       const idx = host.indexOf("]");
       return assert(-1 !== idx), host.substring(1, idx);
      }
      const idx = host.indexOf(":");
      return -1 === idx ? host : host.substring(0, idx);
     }(host);
     return net.isIP(servername) ? "" : servername;
    },
    isStream,
    isIterable: function(obj) {
     return !(null == obj || "function" != typeof obj[Symbol.iterator] && "function" != typeof obj[Symbol.asyncIterator]);
    },
    isAsyncIterable: function(obj) {
     return !(null == obj || "function" != typeof obj[Symbol.asyncIterator]);
    },
    isDestroyed,
    headerNameToString: function(value) {
     return headerNameLowerCasedRecord[value] || value.toLowerCase();
    },
    parseRawHeaders: function(headers) {
     const ret = [];
     let hasContentLength = !1, contentDispositionIdx = -1;
     for (let n = 0; n < headers.length; n += 2) {
      const key = headers[n + 0].toString(), val = headers[n + 1].toString("utf8");
      14 !== key.length || "content-length" !== key && "content-length" !== key.toLowerCase() ? 19 !== key.length || "content-disposition" !== key && "content-disposition" !== key.toLowerCase() ? ret.push(key, val) : contentDispositionIdx = ret.push(key, val) - 1 : (ret.push(key, val), 
      hasContentLength = !0);
     }
     return hasContentLength && -1 !== contentDispositionIdx && (ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1")), 
     ret;
    },
    parseHeaders: function(headers, obj = {}) {
     if (!Array.isArray(headers)) return headers;
     for (let i = 0; i < headers.length; i += 2) {
      const key = headers[i].toString().toLowerCase();
      let val = obj[key];
      val ? (Array.isArray(val) || (val = [ val ], obj[key] = val), val.push(headers[i + 1].toString("utf8"))) : Array.isArray(headers[i + 1]) ? obj[key] = headers[i + 1].map((x => x.toString("utf8"))) : obj[key] = headers[i + 1].toString("utf8");
     }
     return "content-length" in obj && "content-disposition" in obj && (obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1")), 
     obj;
    },
    parseKeepAliveTimeout: function(val) {
     const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
     return m ? 1e3 * parseInt(m[1], 10) : null;
    },
    destroy: function(stream, err) {
     null != stream && isStream(stream) && !isDestroyed(stream) && ("function" == typeof stream.destroy ? (Object.getPrototypeOf(stream).constructor === IncomingMessage && (stream.socket = null), 
     stream.destroy(err)) : err && process.nextTick(((stream, err) => {
      stream.emit("error", err);
     }), stream, err), !0 !== stream.destroyed && (stream[kDestroyed] = !0));
    },
    bodyLength: function(body) {
     if (null == body) return 0;
     if (isStream(body)) {
      const state = body._readableState;
      return state && !1 === state.objectMode && !0 === state.ended && Number.isFinite(state.length) ? state.length : null;
     }
     return isBlobLike(body) ? null != body.size ? body.size : null : isBuffer(body) ? body.byteLength : null;
    },
    deepClone: function(obj) {
     return JSON.parse(JSON.stringify(obj));
    },
    ReadableStreamFrom: function(iterable) {
     if (ReadableStream || (ReadableStream = __webpack_require__(3774).ReadableStream), 
     ReadableStream.from) return ReadableStream.from(async function*(iterable) {
      for await (const chunk of iterable) yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
     }(iterable));
     let iterator;
     return new ReadableStream({
      async start() {
       iterator = iterable[Symbol.asyncIterator]();
      },
      async pull(controller) {
       const {done, value} = await iterator.next();
       if (done) queueMicrotask((() => {
        controller.close();
       })); else {
        const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
        controller.enqueue(new Uint8Array(buf));
       }
       return controller.desiredSize > 0;
      },
      async cancel(reason) {
       await iterator.return();
      }
     }, 0);
    },
    isBuffer,
    validateHandler: function(handler, method, upgrade) {
     if (!handler || "object" != typeof handler) throw new InvalidArgumentError("handler must be an object");
     if ("function" != typeof handler.onConnect) throw new InvalidArgumentError("invalid onConnect method");
     if ("function" != typeof handler.onError) throw new InvalidArgumentError("invalid onError method");
     if ("function" != typeof handler.onBodySent && void 0 !== handler.onBodySent) throw new InvalidArgumentError("invalid onBodySent method");
     if (upgrade || "CONNECT" === method) {
      if ("function" != typeof handler.onUpgrade) throw new InvalidArgumentError("invalid onUpgrade method");
     } else {
      if ("function" != typeof handler.onHeaders) throw new InvalidArgumentError("invalid onHeaders method");
      if ("function" != typeof handler.onData) throw new InvalidArgumentError("invalid onData method");
      if ("function" != typeof handler.onComplete) throw new InvalidArgumentError("invalid onComplete method");
     }
    },
    getSocketInfo: function(socket) {
     return {
      localAddress: socket.localAddress,
      localPort: socket.localPort,
      remoteAddress: socket.remoteAddress,
      remotePort: socket.remotePort,
      remoteFamily: socket.remoteFamily,
      timeout: socket.timeout,
      bytesWritten: socket.bytesWritten,
      bytesRead: socket.bytesRead
     };
    },
    isFormDataLike: function(object) {
     return object && "object" == typeof object && "function" == typeof object.append && "function" == typeof object.delete && "function" == typeof object.get && "function" == typeof object.getAll && "function" == typeof object.has && "function" == typeof object.set && "FormData" === object[Symbol.toStringTag];
    },
    buildURL: function(url, queryParams) {
     if (url.includes("?") || url.includes("#")) throw new Error('Query params cannot be passed when url already contains "?" or "#".');
     const stringified = stringify(queryParams);
     return stringified && (url += "?" + stringified), url;
    },
    throwIfAborted: function(signal) {
     if (signal) if ("function" == typeof signal.throwIfAborted) signal.throwIfAborted(); else if (signal.aborted) {
      const err = new Error("The operation was aborted");
      throw err.name = "AbortError", err;
     }
    },
    addAbortListener: function(signal, listener) {
     return "addEventListener" in signal ? (signal.addEventListener("abort", listener, {
      once: !0
     }), () => signal.removeEventListener("abort", listener)) : (signal.addListener("abort", listener), 
     () => signal.removeListener("abort", listener));
    },
    parseRangeHeader: function(range) {
     if (null == range || "" === range) return {
      start: 0,
      end: null,
      size: null
     };
     const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
     return m ? {
      start: parseInt(m[1]),
      end: m[2] ? parseInt(m[2]) : null,
      size: m[3] ? parseInt(m[3]) : null
     } : null;
    },
    nodeMajor,
    nodeMinor,
    nodeHasAutoSelectFamily: nodeMajor > 18 || 18 === nodeMajor && nodeMinor >= 13,
    safeHTTPMethods: [ "GET", "HEAD", "OPTIONS", "TRACE" ]
   };
  },
  524: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const Dispatcher = __webpack_require__(7704), {ClientDestroyedError, ClientClosedError, InvalidArgumentError} = __webpack_require__(3898), {kDestroy, kClose, kDispatch, kInterceptors} = __webpack_require__(8028), kDestroyed = Symbol("destroyed"), kClosed = Symbol("closed"), kOnDestroyed = Symbol("onDestroyed"), kOnClosed = Symbol("onClosed"), kInterceptedDispatch = Symbol("Intercepted Dispatch");
   module.exports = class extends Dispatcher {
    constructor() {
     super(), this[kDestroyed] = !1, this[kOnDestroyed] = null, this[kClosed] = !1, this[kOnClosed] = [];
    }
    get destroyed() {
     return this[kDestroyed];
    }
    get closed() {
     return this[kClosed];
    }
    get interceptors() {
     return this[kInterceptors];
    }
    set interceptors(newInterceptors) {
     if (newInterceptors) for (let i = newInterceptors.length - 1; i >= 0; i--) {
      if ("function" != typeof this[kInterceptors][i]) throw new InvalidArgumentError("interceptor must be an function");
     }
     this[kInterceptors] = newInterceptors;
    }
    close(callback) {
     if (void 0 === callback) return new Promise(((resolve, reject) => {
      this.close(((err, data) => err ? reject(err) : resolve(data)));
     }));
     if ("function" != typeof callback) throw new InvalidArgumentError("invalid callback");
     if (this[kDestroyed]) return void queueMicrotask((() => callback(new ClientDestroyedError, null)));
     if (this[kClosed]) return void (this[kOnClosed] ? this[kOnClosed].push(callback) : queueMicrotask((() => callback(null, null))));
     this[kClosed] = !0, this[kOnClosed].push(callback);
     const onClosed = () => {
      const callbacks = this[kOnClosed];
      this[kOnClosed] = null;
      for (let i = 0; i < callbacks.length; i++) callbacks[i](null, null);
     };
     this[kClose]().then((() => this.destroy())).then((() => {
      queueMicrotask(onClosed);
     }));
    }
    destroy(err, callback) {
     if ("function" == typeof err && (callback = err, err = null), void 0 === callback) return new Promise(((resolve, reject) => {
      this.destroy(err, ((err, data) => err ? reject(err) : resolve(data)));
     }));
     if ("function" != typeof callback) throw new InvalidArgumentError("invalid callback");
     if (this[kDestroyed]) return void (this[kOnDestroyed] ? this[kOnDestroyed].push(callback) : queueMicrotask((() => callback(null, null))));
     err || (err = new ClientDestroyedError), this[kDestroyed] = !0, this[kOnDestroyed] = this[kOnDestroyed] || [], 
     this[kOnDestroyed].push(callback);
     const onDestroyed = () => {
      const callbacks = this[kOnDestroyed];
      this[kOnDestroyed] = null;
      for (let i = 0; i < callbacks.length; i++) callbacks[i](null, null);
     };
     this[kDestroy](err).then((() => {
      queueMicrotask(onDestroyed);
     }));
    }
    [kInterceptedDispatch](opts, handler) {
     if (!this[kInterceptors] || 0 === this[kInterceptors].length) return this[kInterceptedDispatch] = this[kDispatch], 
     this[kDispatch](opts, handler);
     let dispatch = this[kDispatch].bind(this);
     for (let i = this[kInterceptors].length - 1; i >= 0; i--) dispatch = this[kInterceptors][i](dispatch);
     return this[kInterceptedDispatch] = dispatch, dispatch(opts, handler);
    }
    dispatch(opts, handler) {
     if (!handler || "object" != typeof handler) throw new InvalidArgumentError("handler must be an object");
     try {
      if (!opts || "object" != typeof opts) throw new InvalidArgumentError("opts must be an object.");
      if (this[kDestroyed] || this[kOnDestroyed]) throw new ClientDestroyedError;
      if (this[kClosed]) throw new ClientClosedError;
      return this[kInterceptedDispatch](opts, handler);
     } catch (err) {
      if ("function" != typeof handler.onError) throw new InvalidArgumentError("invalid onError method");
      return handler.onError(err), !1;
     }
    }
   };
  },
  7704: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const EventEmitter = __webpack_require__(4434);
   module.exports = class extends EventEmitter {
    dispatch() {
     throw new Error("not implemented");
    }
    close() {
     throw new Error("not implemented");
    }
    destroy() {
     throw new Error("not implemented");
    }
   };
  },
  2136: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const Busboy = __webpack_require__(1484), util = __webpack_require__(8869), {ReadableStreamFrom, isBlobLike, isReadableStreamLike, readableStreamClose, createDeferredPromise, fullyReadBody} = __webpack_require__(8292), {FormData} = __webpack_require__(9706), {kState} = __webpack_require__(9415), {webidl} = __webpack_require__(769), {DOMException, structuredClone} = __webpack_require__(3771), {Blob, File: NativeFile} = __webpack_require__(181), {kBodyUsed} = __webpack_require__(8028), assert = __webpack_require__(2613), {isErrored} = __webpack_require__(8869), {isUint8Array, isArrayBuffer} = __webpack_require__(8253), {File: UndiciFile} = __webpack_require__(3534), {parseMIMEType, serializeAMimeType} = __webpack_require__(3587);
   let random;
   try {
    const crypto = __webpack_require__(7598);
    random = max => crypto.randomInt(0, max);
   } catch {
    random = max => Math.floor(Math.random(max));
   }
   let ReadableStream = globalThis.ReadableStream;
   const File = NativeFile ?? UndiciFile, textEncoder = new TextEncoder, textDecoder = new TextDecoder;
   function extractBody(object, keepalive = !1) {
    ReadableStream || (ReadableStream = __webpack_require__(3774).ReadableStream);
    let stream = null;
    stream = object instanceof ReadableStream ? object : isBlobLike(object) ? object.stream() : new ReadableStream({
     async pull(controller) {
      controller.enqueue("string" == typeof source ? textEncoder.encode(source) : source), 
      queueMicrotask((() => readableStreamClose(controller)));
     },
     start() {},
     type: void 0
    }), assert(isReadableStreamLike(stream));
    let action = null, source = null, length = null, type = null;
    if ("string" == typeof object) source = object, type = "text/plain;charset=UTF-8"; else if (object instanceof URLSearchParams) source = object.toString(), 
    type = "application/x-www-form-urlencoded;charset=UTF-8"; else if (isArrayBuffer(object)) source = new Uint8Array(object.slice()); else if (ArrayBuffer.isView(object)) source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength)); else if (util.isFormDataLike(object)) {
     const boundary = `----formdata-undici-0${`${random(1e11)}`.padStart(11, "0")}`, prefix = `--${boundary}\r\nContent-Disposition: form-data`, escape = str => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22"), normalizeLinefeeds = value => value.replace(/\r?\n|\r/g, "\r\n"), blobParts = [], rn = new Uint8Array([ 13, 10 ]);
     length = 0;
     let hasUnknownSizeValue = !1;
     for (const [name, value] of object) if ("string" == typeof value) {
      const chunk = textEncoder.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"` + `\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
      blobParts.push(chunk), length += chunk.byteLength;
     } else {
      const chunk = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + "\r\n" + `Content-Type: ${value.type || "application/octet-stream"}\r\n\r\n`);
      blobParts.push(chunk, value, rn), "number" == typeof value.size ? length += chunk.byteLength + value.size + rn.byteLength : hasUnknownSizeValue = !0;
     }
     const chunk = textEncoder.encode(`--${boundary}--`);
     blobParts.push(chunk), length += chunk.byteLength, hasUnknownSizeValue && (length = null), 
     source = object, action = async function*() {
      for (const part of blobParts) part.stream ? yield* part.stream() : yield part;
     }, type = "multipart/form-data; boundary=" + boundary;
    } else if (isBlobLike(object)) source = object, length = object.size, object.type && (type = object.type); else if ("function" == typeof object[Symbol.asyncIterator]) {
     if (keepalive) throw new TypeError("keepalive");
     if (util.isDisturbed(object) || object.locked) throw new TypeError("Response body object should not be disturbed or locked");
     stream = object instanceof ReadableStream ? object : ReadableStreamFrom(object);
    }
    if (("string" == typeof source || util.isBuffer(source)) && (length = Buffer.byteLength(source)), 
    null != action) {
     let iterator;
     stream = new ReadableStream({
      async start() {
       iterator = action(object)[Symbol.asyncIterator]();
      },
      async pull(controller) {
       const {value, done} = await iterator.next();
       return done ? queueMicrotask((() => {
        controller.close();
       })) : isErrored(stream) || controller.enqueue(new Uint8Array(value)), controller.desiredSize > 0;
      },
      async cancel(reason) {
       await iterator.return();
      },
      type: void 0
     });
    }
    return [ {
     stream,
     source,
     length
    }, type ];
   }
   async function* consumeBody(body) {
    if (body) if (isUint8Array(body)) yield body; else {
     const stream = body.stream;
     if (util.isDisturbed(stream)) throw new TypeError("The body has already been consumed.");
     if (stream.locked) throw new TypeError("The stream is locked.");
     stream[kBodyUsed] = !0, yield* stream;
    }
   }
   function throwIfAborted(state) {
    if (state.aborted) throw new DOMException("The operation was aborted.", "AbortError");
   }
   function bodyMixinMethods(instance) {
    return {
     blob() {
      return specConsumeBody(this, (bytes => {
       let mimeType = function(object) {
        const {headersList} = object[kState], contentType = headersList.get("content-type");
        if (null === contentType) return "failure";
        return parseMIMEType(contentType);
       }(this);
       return "failure" === mimeType ? mimeType = "" : mimeType && (mimeType = serializeAMimeType(mimeType)), 
       new Blob([ bytes ], {
        type: mimeType
       });
      }), instance);
     },
     arrayBuffer() {
      return specConsumeBody(this, (bytes => new Uint8Array(bytes).buffer), instance);
     },
     text() {
      return specConsumeBody(this, utf8DecodeBytes, instance);
     },
     json() {
      return specConsumeBody(this, parseJSONFromBytes, instance);
     },
     async formData() {
      webidl.brandCheck(this, instance), throwIfAborted(this[kState]);
      const contentType = this.headers.get("Content-Type");
      if (/multipart\/form-data/.test(contentType)) {
       const headers = {};
       for (const [key, value] of this.headers) headers[key.toLowerCase()] = value;
       const responseFormData = new FormData;
       let busboy;
       try {
        busboy = new Busboy({
         headers,
         preservePath: !0
        });
       } catch (err) {
        throw new DOMException(`${err}`, "AbortError");
       }
       busboy.on("field", ((name, value) => {
        responseFormData.append(name, value);
       })), busboy.on("file", ((name, value, filename, encoding, mimeType) => {
        const chunks = [];
        if ("base64" === encoding || "base64" === encoding.toLowerCase()) {
         let base64chunk = "";
         value.on("data", (chunk => {
          base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
          const end = base64chunk.length - base64chunk.length % 4;
          chunks.push(Buffer.from(base64chunk.slice(0, end), "base64")), base64chunk = base64chunk.slice(end);
         })), value.on("end", (() => {
          chunks.push(Buffer.from(base64chunk, "base64")), responseFormData.append(name, new File(chunks, filename, {
           type: mimeType
          }));
         }));
        } else value.on("data", (chunk => {
         chunks.push(chunk);
        })), value.on("end", (() => {
         responseFormData.append(name, new File(chunks, filename, {
          type: mimeType
         }));
        }));
       }));
       const busboyResolve = new Promise(((resolve, reject) => {
        busboy.on("finish", resolve), busboy.on("error", (err => reject(new TypeError(err))));
       }));
       if (null !== this.body) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk);
       return busboy.end(), await busboyResolve, responseFormData;
      }
      if (/application\/x-www-form-urlencoded/.test(contentType)) {
       let entries;
       try {
        let text = "";
        const streamingDecoder = new TextDecoder("utf-8", {
         ignoreBOM: !0
        });
        for await (const chunk of consumeBody(this[kState].body)) {
         if (!isUint8Array(chunk)) throw new TypeError("Expected Uint8Array chunk");
         text += streamingDecoder.decode(chunk, {
          stream: !0
         });
        }
        text += streamingDecoder.decode(), entries = new URLSearchParams(text);
       } catch (err) {
        throw Object.assign(new TypeError, {
         cause: err
        });
       }
       const formData = new FormData;
       for (const [name, value] of entries) formData.append(name, value);
       return formData;
      }
      throw await Promise.resolve(), throwIfAborted(this[kState]), webidl.errors.exception({
       header: `${instance.name}.formData`,
       message: "Could not parse content as FormData."
      });
     }
    };
   }
   async function specConsumeBody(object, convertBytesToJSValue, instance) {
    if (webidl.brandCheck(object, instance), throwIfAborted(object[kState]), null != (body = object[kState].body) && (body.stream.locked || util.isDisturbed(body.stream))) throw new TypeError("Body is unusable");
    var body;
    const promise = createDeferredPromise(), errorSteps = error => promise.reject(error), successSteps = data => {
     try {
      promise.resolve(convertBytesToJSValue(data));
     } catch (e) {
      errorSteps(e);
     }
    };
    return null == object[kState].body ? (successSteps(new Uint8Array), promise.promise) : (await fullyReadBody(object[kState].body, successSteps, errorSteps), 
    promise.promise);
   }
   function utf8DecodeBytes(buffer) {
    if (0 === buffer.length) return "";
    239 === buffer[0] && 187 === buffer[1] && 191 === buffer[2] && (buffer = buffer.subarray(3));
    return textDecoder.decode(buffer);
   }
   function parseJSONFromBytes(bytes) {
    return JSON.parse(utf8DecodeBytes(bytes));
   }
   module.exports = {
    extractBody,
    safelyExtractBody: function(object, keepalive = !1) {
     return ReadableStream || (ReadableStream = __webpack_require__(3774).ReadableStream), 
     object instanceof ReadableStream && (assert(!util.isDisturbed(object), "The body has already been consumed."), 
     assert(!object.locked, "The stream is locked.")), extractBody(object, keepalive);
    },
    cloneBody: function(body) {
     const [out1, out2] = body.stream.tee(), out2Clone = structuredClone(out2, {
      transfer: [ out2 ]
     }), [, finalClone] = out2Clone.tee();
     return body.stream = out1, {
      stream: finalClone,
      length: body.length,
      source: body.source
     };
    },
    mixinBody: function(prototype) {
     Object.assign(prototype.prototype, bodyMixinMethods(prototype));
    }
   };
  },
  3771: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {MessageChannel, receiveMessageOnPort} = __webpack_require__(8167), corsSafeListedMethods = [ "GET", "HEAD", "POST" ], corsSafeListedMethodsSet = new Set(corsSafeListedMethods), redirectStatus = [ 301, 302, 303, 307, 308 ], redirectStatusSet = new Set(redirectStatus), badPorts = [ "1", "7", "9", "11", "13", "15", "17", "19", "20", "21", "22", "23", "25", "37", "42", "43", "53", "69", "77", "79", "87", "95", "101", "102", "103", "104", "109", "110", "111", "113", "115", "117", "119", "123", "135", "137", "139", "143", "161", "179", "389", "427", "465", "512", "513", "514", "515", "526", "530", "531", "532", "540", "548", "554", "556", "563", "587", "601", "636", "989", "990", "993", "995", "1719", "1720", "1723", "2049", "3659", "4045", "5060", "5061", "6000", "6566", "6665", "6666", "6667", "6668", "6669", "6697", "10080" ], badPortsSet = new Set(badPorts), referrerPolicy = [ "", "no-referrer", "no-referrer-when-downgrade", "same-origin", "origin", "strict-origin", "origin-when-cross-origin", "strict-origin-when-cross-origin", "unsafe-url" ], referrerPolicySet = new Set(referrerPolicy), safeMethods = [ "GET", "HEAD", "OPTIONS", "TRACE" ], safeMethodsSet = new Set(safeMethods), forbiddenMethods = [ "CONNECT", "TRACE", "TRACK" ], forbiddenMethodsSet = new Set(forbiddenMethods), subresource = [ "audio", "audioworklet", "font", "image", "manifest", "paintworklet", "script", "style", "track", "video", "xslt", "" ], subresourceSet = new Set(subresource), DOMException = globalThis.DOMException ?? (() => {
    try {
     atob("~");
    } catch (err) {
     return Object.getPrototypeOf(err).constructor;
    }
   })();
   let channel;
   const structuredClone = globalThis.structuredClone ?? function(value, options = void 0) {
    if (0 === arguments.length) throw new TypeError("missing argument");
    return channel || (channel = new MessageChannel), channel.port1.unref(), channel.port2.unref(), 
    channel.port1.postMessage(value, options?.transfer), receiveMessageOnPort(channel.port2).message;
   };
   module.exports = {
    DOMException,
    structuredClone,
    subresource,
    forbiddenMethods,
    requestBodyHeader: [ "content-encoding", "content-language", "content-location", "content-type", "content-length" ],
    referrerPolicy,
    requestRedirect: [ "follow", "manual", "error" ],
    requestMode: [ "navigate", "same-origin", "no-cors", "cors" ],
    requestCredentials: [ "omit", "same-origin", "include" ],
    requestCache: [ "default", "no-store", "reload", "no-cache", "force-cache", "only-if-cached" ],
    redirectStatus,
    corsSafeListedMethods,
    nullBodyStatus: [ 101, 204, 205, 304 ],
    safeMethods,
    badPorts,
    requestDuplex: [ "half" ],
    subresourceSet,
    badPortsSet,
    redirectStatusSet,
    corsSafeListedMethodsSet,
    safeMethodsSet,
    forbiddenMethodsSet,
    referrerPolicySet
   };
  },
  3587: (module, __unused_webpack_exports, __webpack_require__) => {
   const assert = __webpack_require__(2613), {atob} = __webpack_require__(181), {isomorphicDecode} = __webpack_require__(8292), encoder = new TextEncoder, HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/, HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/, HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
   function URLSerializer(url, excludeFragment = !1) {
    if (!excludeFragment) return url.href;
    const href = url.href, hashLength = url.hash.length;
    return 0 === hashLength ? href : href.substring(0, href.length - hashLength);
   }
   function collectASequenceOfCodePoints(condition, input, position) {
    let result = "";
    for (;position.position < input.length && condition(input[position.position]); ) result += input[position.position], 
    position.position++;
    return result;
   }
   function collectASequenceOfCodePointsFast(char, input, position) {
    const idx = input.indexOf(char, position.position), start = position.position;
    return -1 === idx ? (position.position = input.length, input.slice(start)) : (position.position = idx, 
    input.slice(start, position.position));
   }
   function stringPercentDecode(input) {
    return function(input) {
     const output = [];
     for (let i = 0; i < input.length; i++) {
      const byte = input[i];
      if (37 !== byte) output.push(byte); else if (37 !== byte || /^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
       const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]), bytePoint = Number.parseInt(nextTwoBytes, 16);
       output.push(bytePoint), i += 2;
      } else output.push(37);
     }
     return Uint8Array.from(output);
    }(encoder.encode(input));
   }
   function parseMIMEType(input) {
    const position = {
     position: 0
    }, type = collectASequenceOfCodePointsFast("/", input = removeHTTPWhitespace(input, !0, !0), position);
    if (0 === type.length || !HTTP_TOKEN_CODEPOINTS.test(type)) return "failure";
    if (position.position > input.length) return "failure";
    position.position++;
    let subtype = collectASequenceOfCodePointsFast(";", input, position);
    if (subtype = removeHTTPWhitespace(subtype, !1, !0), 0 === subtype.length || !HTTP_TOKEN_CODEPOINTS.test(subtype)) return "failure";
    const typeLowercase = type.toLowerCase(), subtypeLowercase = subtype.toLowerCase(), mimeType = {
     type: typeLowercase,
     subtype: subtypeLowercase,
     parameters: new Map,
     essence: `${typeLowercase}/${subtypeLowercase}`
    };
    for (;position.position < input.length; ) {
     position.position++, collectASequenceOfCodePoints((char => HTTP_WHITESPACE_REGEX.test(char)), input, position);
     let parameterName = collectASequenceOfCodePoints((char => ";" !== char && "=" !== char), input, position);
     if (parameterName = parameterName.toLowerCase(), position.position < input.length) {
      if (";" === input[position.position]) continue;
      position.position++;
     }
     if (position.position > input.length) break;
     let parameterValue = null;
     if ('"' === input[position.position]) parameterValue = collectAnHTTPQuotedString(input, position, !0), 
     collectASequenceOfCodePointsFast(";", input, position); else if (parameterValue = collectASequenceOfCodePointsFast(";", input, position), 
     parameterValue = removeHTTPWhitespace(parameterValue, !1, !0), 0 === parameterValue.length) continue;
     0 === parameterName.length || !HTTP_TOKEN_CODEPOINTS.test(parameterName) || 0 !== parameterValue.length && !HTTP_QUOTED_STRING_TOKENS.test(parameterValue) || mimeType.parameters.has(parameterName) || mimeType.parameters.set(parameterName, parameterValue);
    }
    return mimeType;
   }
   function collectAnHTTPQuotedString(input, position, extractValue) {
    const positionStart = position.position;
    let value = "";
    for (assert('"' === input[position.position]), position.position++; value += collectASequenceOfCodePoints((char => '"' !== char && "\\" !== char), input, position), 
    !(position.position >= input.length); ) {
     const quoteOrBackslash = input[position.position];
     if (position.position++, "\\" !== quoteOrBackslash) {
      assert('"' === quoteOrBackslash);
      break;
     }
     if (position.position >= input.length) {
      value += "\\";
      break;
     }
     value += input[position.position], position.position++;
    }
    return extractValue ? value : input.slice(positionStart, position.position);
   }
   function isHTTPWhiteSpace(char) {
    return "\r" === char || "\n" === char || "\t" === char || " " === char;
   }
   function removeHTTPWhitespace(str, leading = !0, trailing = !0) {
    let lead = 0, trail = str.length - 1;
    if (leading) for (;lead < str.length && isHTTPWhiteSpace(str[lead]); lead++) ;
    if (trailing) for (;trail > 0 && isHTTPWhiteSpace(str[trail]); trail--) ;
    return str.slice(lead, trail + 1);
   }
   function isASCIIWhitespace(char) {
    return "\r" === char || "\n" === char || "\t" === char || "\f" === char || " " === char;
   }
   module.exports = {
    dataURLProcessor: function(dataURL) {
     assert("data:" === dataURL.protocol);
     let input = URLSerializer(dataURL, !0);
     input = input.slice(5);
     const position = {
      position: 0
     };
     let mimeType = collectASequenceOfCodePointsFast(",", input, position);
     const mimeTypeLength = mimeType.length;
     if (mimeType = function(str, leading = !0, trailing = !0) {
      let lead = 0, trail = str.length - 1;
      if (leading) for (;lead < str.length && isASCIIWhitespace(str[lead]); lead++) ;
      if (trailing) for (;trail > 0 && isASCIIWhitespace(str[trail]); trail--) ;
      return str.slice(lead, trail + 1);
     }(mimeType, !0, !0), position.position >= input.length) return "failure";
     position.position++;
     let body = stringPercentDecode(input.slice(mimeTypeLength + 1));
     if (/;(\u0020){0,}base64$/i.test(mimeType)) {
      if (body = function(data) {
       (data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "")).length % 4 == 0 && (data = data.replace(/=?=$/, ""));
       if (data.length % 4 == 1) return "failure";
       if (/[^+/0-9A-Za-z]/.test(data)) return "failure";
       const binary = atob(data), bytes = new Uint8Array(binary.length);
       for (let byte = 0; byte < binary.length; byte++) bytes[byte] = binary.charCodeAt(byte);
       return bytes;
      }(isomorphicDecode(body)), "failure" === body) return "failure";
      mimeType = mimeType.slice(0, -6), mimeType = mimeType.replace(/(\u0020)+$/, ""), 
      mimeType = mimeType.slice(0, -1);
     }
     mimeType.startsWith(";") && (mimeType = "text/plain" + mimeType);
     let mimeTypeRecord = parseMIMEType(mimeType);
     return "failure" === mimeTypeRecord && (mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII")), 
     {
      mimeType: mimeTypeRecord,
      body
     };
    },
    URLSerializer,
    collectASequenceOfCodePoints,
    collectASequenceOfCodePointsFast,
    stringPercentDecode,
    parseMIMEType,
    collectAnHTTPQuotedString,
    serializeAMimeType: function(mimeType) {
     assert("failure" !== mimeType);
     const {parameters, essence} = mimeType;
     let serialization = essence;
     for (let [name, value] of parameters.entries()) serialization += ";", serialization += name, 
     serialization += "=", HTTP_TOKEN_CODEPOINTS.test(value) || (value = value.replace(/(\\|")/g, "\\$1"), 
     value = '"' + value, value += '"'), serialization += value;
     return serialization;
    }
   };
  },
  3534: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {Blob, File: NativeFile} = __webpack_require__(181), {types} = __webpack_require__(9023), {kState} = __webpack_require__(9415), {isBlobLike} = __webpack_require__(8292), {webidl} = __webpack_require__(769), {parseMIMEType, serializeAMimeType} = __webpack_require__(3587), {kEnumerableProperty} = __webpack_require__(8869), encoder = new TextEncoder;
   class File extends Blob {
    constructor(fileBits, fileName, options = {}) {
     webidl.argumentLengthCheck(arguments, 2, {
      header: "File constructor"
     }), fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
     const n = fileName = webidl.converters.USVString(fileName);
     let d, t = (options = webidl.converters.FilePropertyBag(options)).type;
     substep: {
      if (t) {
       if (t = parseMIMEType(t), "failure" === t) {
        t = "";
        break substep;
       }
       t = serializeAMimeType(t).toLowerCase();
      }
      d = options.lastModified;
     }
     super(function(parts, options) {
      const bytes = [];
      for (const element of parts) if ("string" == typeof element) {
       let s = element;
       "native" === options.endings && (s = convertLineEndingsNative(s)), bytes.push(encoder.encode(s));
      } else types.isAnyArrayBuffer(element) || types.isTypedArray(element) ? element.buffer ? bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength)) : bytes.push(new Uint8Array(element)) : isBlobLike(element) && bytes.push(element);
      return bytes;
     }(fileBits, options), {
      type: t
     }), this[kState] = {
      name: n,
      lastModified: d,
      type: t
     };
    }
    get name() {
     return webidl.brandCheck(this, File), this[kState].name;
    }
    get lastModified() {
     return webidl.brandCheck(this, File), this[kState].lastModified;
    }
    get type() {
     return webidl.brandCheck(this, File), this[kState].type;
    }
   }
   class FileLike {
    constructor(blobLike, fileName, options = {}) {
     const n = fileName, t = options.type, d = options.lastModified ?? Date.now();
     this[kState] = {
      blobLike,
      name: n,
      type: t,
      lastModified: d
     };
    }
    stream(...args) {
     return webidl.brandCheck(this, FileLike), this[kState].blobLike.stream(...args);
    }
    arrayBuffer(...args) {
     return webidl.brandCheck(this, FileLike), this[kState].blobLike.arrayBuffer(...args);
    }
    slice(...args) {
     return webidl.brandCheck(this, FileLike), this[kState].blobLike.slice(...args);
    }
    text(...args) {
     return webidl.brandCheck(this, FileLike), this[kState].blobLike.text(...args);
    }
    get size() {
     return webidl.brandCheck(this, FileLike), this[kState].blobLike.size;
    }
    get type() {
     return webidl.brandCheck(this, FileLike), this[kState].blobLike.type;
    }
    get name() {
     return webidl.brandCheck(this, FileLike), this[kState].name;
    }
    get lastModified() {
     return webidl.brandCheck(this, FileLike), this[kState].lastModified;
    }
    get [Symbol.toStringTag]() {
     return "File";
    }
   }
   function convertLineEndingsNative(s) {
    let nativeLineEnding = "\n";
    return "win32" === process.platform && (nativeLineEnding = "\r\n"), s.replace(/\r?\n/g, nativeLineEnding);
   }
   Object.defineProperties(File.prototype, {
    [Symbol.toStringTag]: {
     value: "File",
     configurable: !0
    },
    name: kEnumerableProperty,
    lastModified: kEnumerableProperty
   }), webidl.converters.Blob = webidl.interfaceConverter(Blob), webidl.converters.BlobPart = function(V, opts) {
    if ("Object" === webidl.util.Type(V)) {
     if (isBlobLike(V)) return webidl.converters.Blob(V, {
      strict: !1
     });
     if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) return webidl.converters.BufferSource(V, opts);
    }
    return webidl.converters.USVString(V, opts);
   }, webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(webidl.converters.BlobPart), 
   webidl.converters.FilePropertyBag = webidl.dictionaryConverter([ {
    key: "lastModified",
    converter: webidl.converters["long long"],
    get defaultValue() {
     return Date.now();
    }
   }, {
    key: "type",
    converter: webidl.converters.DOMString,
    defaultValue: ""
   }, {
    key: "endings",
    converter: value => ("native" !== (value = (value = webidl.converters.DOMString(value)).toLowerCase()) && (value = "transparent"), 
    value),
    defaultValue: "transparent"
   } ]), module.exports = {
    File,
    FileLike,
    isFileLike: function(object) {
     return NativeFile && object instanceof NativeFile || object instanceof File || object && ("function" == typeof object.stream || "function" == typeof object.arrayBuffer) && "File" === object[Symbol.toStringTag];
    }
   };
  },
  9706: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {isBlobLike, toUSVString, makeIterator} = __webpack_require__(8292), {kState} = __webpack_require__(9415), {File: UndiciFile, FileLike, isFileLike} = __webpack_require__(3534), {webidl} = __webpack_require__(769), {Blob, File: NativeFile} = __webpack_require__(181), File = NativeFile ?? UndiciFile;
   class FormData {
    constructor(form) {
     if (void 0 !== form) throw webidl.errors.conversionFailed({
      prefix: "FormData constructor",
      argument: "Argument 1",
      types: [ "undefined" ]
     });
     this[kState] = [];
    }
    append(name, value, filename = void 0) {
     if (webidl.brandCheck(this, FormData), webidl.argumentLengthCheck(arguments, 2, {
      header: "FormData.append"
     }), 3 === arguments.length && !isBlobLike(value)) throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
     const entry = makeEntry(name = webidl.converters.USVString(name), value = isBlobLike(value) ? webidl.converters.Blob(value, {
      strict: !1
     }) : webidl.converters.USVString(value), filename = 3 === arguments.length ? webidl.converters.USVString(filename) : void 0);
     this[kState].push(entry);
    }
    delete(name) {
     webidl.brandCheck(this, FormData), webidl.argumentLengthCheck(arguments, 1, {
      header: "FormData.delete"
     }), name = webidl.converters.USVString(name), this[kState] = this[kState].filter((entry => entry.name !== name));
    }
    get(name) {
     webidl.brandCheck(this, FormData), webidl.argumentLengthCheck(arguments, 1, {
      header: "FormData.get"
     }), name = webidl.converters.USVString(name);
     const idx = this[kState].findIndex((entry => entry.name === name));
     return -1 === idx ? null : this[kState][idx].value;
    }
    getAll(name) {
     return webidl.brandCheck(this, FormData), webidl.argumentLengthCheck(arguments, 1, {
      header: "FormData.getAll"
     }), name = webidl.converters.USVString(name), this[kState].filter((entry => entry.name === name)).map((entry => entry.value));
    }
    has(name) {
     return webidl.brandCheck(this, FormData), webidl.argumentLengthCheck(arguments, 1, {
      header: "FormData.has"
     }), name = webidl.converters.USVString(name), -1 !== this[kState].findIndex((entry => entry.name === name));
    }
    set(name, value, filename = void 0) {
     if (webidl.brandCheck(this, FormData), webidl.argumentLengthCheck(arguments, 2, {
      header: "FormData.set"
     }), 3 === arguments.length && !isBlobLike(value)) throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
     name = webidl.converters.USVString(name), value = isBlobLike(value) ? webidl.converters.Blob(value, {
      strict: !1
     }) : webidl.converters.USVString(value), filename = 3 === arguments.length ? toUSVString(filename) : void 0;
     const entry = makeEntry(name, value, filename), idx = this[kState].findIndex((entry => entry.name === name));
     -1 !== idx ? this[kState] = [ ...this[kState].slice(0, idx), entry, ...this[kState].slice(idx + 1).filter((entry => entry.name !== name)) ] : this[kState].push(entry);
    }
    entries() {
     return webidl.brandCheck(this, FormData), makeIterator((() => this[kState].map((pair => [ pair.name, pair.value ]))), "FormData", "key+value");
    }
    keys() {
     return webidl.brandCheck(this, FormData), makeIterator((() => this[kState].map((pair => [ pair.name, pair.value ]))), "FormData", "key");
    }
    values() {
     return webidl.brandCheck(this, FormData), makeIterator((() => this[kState].map((pair => [ pair.name, pair.value ]))), "FormData", "value");
    }
    forEach(callbackFn, thisArg = globalThis) {
     if (webidl.brandCheck(this, FormData), webidl.argumentLengthCheck(arguments, 1, {
      header: "FormData.forEach"
     }), "function" != typeof callbackFn) throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
     for (const [key, value] of this) callbackFn.apply(thisArg, [ value, key, this ]);
    }
   }
   function makeEntry(name, value, filename) {
    if (name = Buffer.from(name).toString("utf8"), "string" == typeof value) value = Buffer.from(value).toString("utf8"); else if (isFileLike(value) || (value = value instanceof Blob ? new File([ value ], "blob", {
     type: value.type
    }) : new FileLike(value, "blob", {
     type: value.type
    })), void 0 !== filename) {
     const options = {
      type: value.type,
      lastModified: value.lastModified
     };
     value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile ? new File([ value ], filename, options) : new FileLike(value, filename, options);
    }
    return {
     name,
     value
    };
   }
   FormData.prototype[Symbol.iterator] = FormData.prototype.entries, Object.defineProperties(FormData.prototype, {
    [Symbol.toStringTag]: {
     value: "FormData",
     configurable: !0
    }
   }), module.exports = {
    FormData
   };
  },
  6367: module => {
   "use strict";
   const globalOrigin = Symbol.for("undici.globalOrigin.1");
   module.exports = {
    getGlobalOrigin: function() {
     return globalThis[globalOrigin];
    },
    setGlobalOrigin: function(newOrigin) {
     if (void 0 === newOrigin) return void Object.defineProperty(globalThis, globalOrigin, {
      value: void 0,
      writable: !0,
      enumerable: !1,
      configurable: !1
     });
     const parsedURL = new URL(newOrigin);
     if ("http:" !== parsedURL.protocol && "https:" !== parsedURL.protocol) throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
     Object.defineProperty(globalThis, globalOrigin, {
      value: parsedURL,
      writable: !0,
      enumerable: !1,
      configurable: !1
     });
    }
   };
  },
  5472: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {kHeadersList, kConstruct} = __webpack_require__(8028), {kGuard} = __webpack_require__(9415), {kEnumerableProperty} = __webpack_require__(8869), {makeIterator, isValidHeaderName, isValidHeaderValue} = __webpack_require__(8292), util = __webpack_require__(9023), {webidl} = __webpack_require__(769), assert = __webpack_require__(2613), kHeadersMap = Symbol("headers map"), kHeadersSortedMap = Symbol("headers map sorted");
   function isHTTPWhiteSpaceCharCode(code) {
    return 10 === code || 13 === code || 9 === code || 32 === code;
   }
   function headerValueNormalize(potentialValue) {
    let i = 0, j = potentialValue.length;
    for (;j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1)); ) --j;
    for (;j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i)); ) ++i;
    return 0 === i && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
   }
   function fill(headers, object) {
    if (Array.isArray(object)) for (let i = 0; i < object.length; ++i) {
     const header = object[i];
     if (2 !== header.length) throw webidl.errors.exception({
      header: "Headers constructor",
      message: `expected name/value pair to be length 2, found ${header.length}.`
     });
     appendHeader(headers, header[0], header[1]);
    } else {
     if ("object" != typeof object || null === object) throw webidl.errors.conversionFailed({
      prefix: "Headers constructor",
      argument: "Argument 1",
      types: [ "sequence<sequence<ByteString>>", "record<ByteString, ByteString>" ]
     });
     {
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; ++i) appendHeader(headers, keys[i], object[keys[i]]);
     }
    }
   }
   function appendHeader(headers, name, value) {
    if (value = headerValueNormalize(value), !isValidHeaderName(name)) throw webidl.errors.invalidArgument({
     prefix: "Headers.append",
     value: name,
     type: "header name"
    });
    if (!isValidHeaderValue(value)) throw webidl.errors.invalidArgument({
     prefix: "Headers.append",
     value,
     type: "header value"
    });
    if ("immutable" === headers[kGuard]) throw new TypeError("immutable");
    return headers[kGuard], headers[kHeadersList].append(name, value);
   }
   class HeadersList {
    cookies=null;
    constructor(init) {
     init instanceof HeadersList ? (this[kHeadersMap] = new Map(init[kHeadersMap]), this[kHeadersSortedMap] = init[kHeadersSortedMap], 
     this.cookies = null === init.cookies ? null : [ ...init.cookies ]) : (this[kHeadersMap] = new Map(init), 
     this[kHeadersSortedMap] = null);
    }
    contains(name) {
     return name = name.toLowerCase(), this[kHeadersMap].has(name);
    }
    clear() {
     this[kHeadersMap].clear(), this[kHeadersSortedMap] = null, this.cookies = null;
    }
    append(name, value) {
     this[kHeadersSortedMap] = null;
     const lowercaseName = name.toLowerCase(), exists = this[kHeadersMap].get(lowercaseName);
     if (exists) {
      const delimiter = "cookie" === lowercaseName ? "; " : ", ";
      this[kHeadersMap].set(lowercaseName, {
       name: exists.name,
       value: `${exists.value}${delimiter}${value}`
      });
     } else this[kHeadersMap].set(lowercaseName, {
      name,
      value
     });
     "set-cookie" === lowercaseName && (this.cookies ??= [], this.cookies.push(value));
    }
    set(name, value) {
     this[kHeadersSortedMap] = null;
     const lowercaseName = name.toLowerCase();
     "set-cookie" === lowercaseName && (this.cookies = [ value ]), this[kHeadersMap].set(lowercaseName, {
      name,
      value
     });
    }
    delete(name) {
     this[kHeadersSortedMap] = null, "set-cookie" === (name = name.toLowerCase()) && (this.cookies = null), 
     this[kHeadersMap].delete(name);
    }
    get(name) {
     const value = this[kHeadersMap].get(name.toLowerCase());
     return void 0 === value ? null : value.value;
    }
    * [Symbol.iterator]() {
     for (const [name, {value}] of this[kHeadersMap]) yield [ name, value ];
    }
    get entries() {
     const headers = {};
     if (this[kHeadersMap].size) for (const {name, value} of this[kHeadersMap].values()) headers[name] = value;
     return headers;
    }
   }
   class Headers {
    constructor(init = void 0) {
     init !== kConstruct && (this[kHeadersList] = new HeadersList, this[kGuard] = "none", 
     void 0 !== init && fill(this, init = webidl.converters.HeadersInit(init)));
    }
    append(name, value) {
     return webidl.brandCheck(this, Headers), webidl.argumentLengthCheck(arguments, 2, {
      header: "Headers.append"
     }), appendHeader(this, name = webidl.converters.ByteString(name), value = webidl.converters.ByteString(value));
    }
    delete(name) {
     if (webidl.brandCheck(this, Headers), webidl.argumentLengthCheck(arguments, 1, {
      header: "Headers.delete"
     }), name = webidl.converters.ByteString(name), !isValidHeaderName(name)) throw webidl.errors.invalidArgument({
      prefix: "Headers.delete",
      value: name,
      type: "header name"
     });
     if ("immutable" === this[kGuard]) throw new TypeError("immutable");
     this[kGuard], this[kHeadersList].contains(name) && this[kHeadersList].delete(name);
    }
    get(name) {
     if (webidl.brandCheck(this, Headers), webidl.argumentLengthCheck(arguments, 1, {
      header: "Headers.get"
     }), name = webidl.converters.ByteString(name), !isValidHeaderName(name)) throw webidl.errors.invalidArgument({
      prefix: "Headers.get",
      value: name,
      type: "header name"
     });
     return this[kHeadersList].get(name);
    }
    has(name) {
     if (webidl.brandCheck(this, Headers), webidl.argumentLengthCheck(arguments, 1, {
      header: "Headers.has"
     }), name = webidl.converters.ByteString(name), !isValidHeaderName(name)) throw webidl.errors.invalidArgument({
      prefix: "Headers.has",
      value: name,
      type: "header name"
     });
     return this[kHeadersList].contains(name);
    }
    set(name, value) {
     if (webidl.brandCheck(this, Headers), webidl.argumentLengthCheck(arguments, 2, {
      header: "Headers.set"
     }), name = webidl.converters.ByteString(name), value = headerValueNormalize(value = webidl.converters.ByteString(value)), 
     !isValidHeaderName(name)) throw webidl.errors.invalidArgument({
      prefix: "Headers.set",
      value: name,
      type: "header name"
     });
     if (!isValidHeaderValue(value)) throw webidl.errors.invalidArgument({
      prefix: "Headers.set",
      value,
      type: "header value"
     });
     if ("immutable" === this[kGuard]) throw new TypeError("immutable");
     this[kGuard], this[kHeadersList].set(name, value);
    }
    getSetCookie() {
     webidl.brandCheck(this, Headers);
     const list = this[kHeadersList].cookies;
     return list ? [ ...list ] : [];
    }
    get [kHeadersSortedMap]() {
     if (this[kHeadersList][kHeadersSortedMap]) return this[kHeadersList][kHeadersSortedMap];
     const headers = [], names = [ ...this[kHeadersList] ].sort(((a, b) => a[0] < b[0] ? -1 : 1)), cookies = this[kHeadersList].cookies;
     for (let i = 0; i < names.length; ++i) {
      const [name, value] = names[i];
      if ("set-cookie" === name) for (let j = 0; j < cookies.length; ++j) headers.push([ name, cookies[j] ]); else assert(null !== value), 
      headers.push([ name, value ]);
     }
     return this[kHeadersList][kHeadersSortedMap] = headers, headers;
    }
    keys() {
     if (webidl.brandCheck(this, Headers), "immutable" === this[kGuard]) {
      const value = this[kHeadersSortedMap];
      return makeIterator((() => value), "Headers", "key");
     }
     return makeIterator((() => [ ...this[kHeadersSortedMap].values() ]), "Headers", "key");
    }
    values() {
     if (webidl.brandCheck(this, Headers), "immutable" === this[kGuard]) {
      const value = this[kHeadersSortedMap];
      return makeIterator((() => value), "Headers", "value");
     }
     return makeIterator((() => [ ...this[kHeadersSortedMap].values() ]), "Headers", "value");
    }
    entries() {
     if (webidl.brandCheck(this, Headers), "immutable" === this[kGuard]) {
      const value = this[kHeadersSortedMap];
      return makeIterator((() => value), "Headers", "key+value");
     }
     return makeIterator((() => [ ...this[kHeadersSortedMap].values() ]), "Headers", "key+value");
    }
    forEach(callbackFn, thisArg = globalThis) {
     if (webidl.brandCheck(this, Headers), webidl.argumentLengthCheck(arguments, 1, {
      header: "Headers.forEach"
     }), "function" != typeof callbackFn) throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
     for (const [key, value] of this) callbackFn.apply(thisArg, [ value, key, this ]);
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
     return webidl.brandCheck(this, Headers), this[kHeadersList];
    }
   }
   Headers.prototype[Symbol.iterator] = Headers.prototype.entries, Object.defineProperties(Headers.prototype, {
    append: kEnumerableProperty,
    delete: kEnumerableProperty,
    get: kEnumerableProperty,
    has: kEnumerableProperty,
    set: kEnumerableProperty,
    getSetCookie: kEnumerableProperty,
    keys: kEnumerableProperty,
    values: kEnumerableProperty,
    entries: kEnumerableProperty,
    forEach: kEnumerableProperty,
    [Symbol.iterator]: {
     enumerable: !1
    },
    [Symbol.toStringTag]: {
     value: "Headers",
     configurable: !0
    },
    [util.inspect.custom]: {
     enumerable: !1
    }
   }), webidl.converters.HeadersInit = function(V) {
    if ("Object" === webidl.util.Type(V)) return V[Symbol.iterator] ? webidl.converters["sequence<sequence<ByteString>>"](V) : webidl.converters["record<ByteString, ByteString>"](V);
    throw webidl.errors.conversionFailed({
     prefix: "Headers constructor",
     argument: "Argument 1",
     types: [ "sequence<sequence<ByteString>>", "record<ByteString, ByteString>" ]
    });
   }, module.exports = {
    fill,
    Headers,
    HeadersList
   };
  },
  5306: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {Response, makeNetworkError, makeAppropriateNetworkError, filterResponse, makeResponse} = __webpack_require__(3767), {Headers} = __webpack_require__(5472), {Request, makeRequest} = __webpack_require__(8899), zlib = __webpack_require__(3106), {bytesMatch, makePolicyContainer, clonePolicyContainer, requestBadPort, TAOCheck, appendRequestOriginHeader, responseLocationURL, requestCurrentURL, setRequestReferrerPolicyOnRedirect, tryUpgradeRequestToAPotentiallyTrustworthyURL, createOpaqueTimingInfo, appendFetchMetadata, corsCheck, crossOriginResourcePolicyCheck, determineRequestsReferrer, coarsenedSharedCurrentTime, createDeferredPromise, isBlobLike, sameOrigin, isCancelled, isAborted, isErrorLike, fullyReadBody, readableStreamClose, isomorphicEncode, urlIsLocal, urlIsHttpHttpsScheme, urlHasHttpsScheme} = __webpack_require__(8292), {kState, kHeaders, kGuard, kRealm} = __webpack_require__(9415), assert = __webpack_require__(2613), {safelyExtractBody} = __webpack_require__(2136), {redirectStatusSet, nullBodyStatus, safeMethodsSet, requestBodyHeader, subresourceSet, DOMException} = __webpack_require__(3771), {kHeadersList} = __webpack_require__(8028), EE = __webpack_require__(4434), {Readable, pipeline} = __webpack_require__(2203), {addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor} = __webpack_require__(8869), {dataURLProcessor, serializeAMimeType} = __webpack_require__(3587), {TransformStream} = __webpack_require__(3774), {getGlobalDispatcher} = __webpack_require__(5710), {webidl} = __webpack_require__(769), {STATUS_CODES} = __webpack_require__(8611), GET_OR_HEAD = [ "GET", "HEAD" ];
   let resolveObjectURL, ReadableStream = globalThis.ReadableStream;
   class Fetch extends EE {
    constructor(dispatcher) {
     super(), this.dispatcher = dispatcher, this.connection = null, this.dump = !1, this.state = "ongoing", 
     this.setMaxListeners(21);
    }
    terminate(reason) {
     "ongoing" === this.state && (this.state = "terminated", this.connection?.destroy(reason), 
     this.emit("terminated", reason));
    }
    abort(error) {
     "ongoing" === this.state && (this.state = "aborted", error || (error = new DOMException("The operation was aborted.", "AbortError")), 
     this.serializedAbortReason = error, this.connection?.destroy(error), this.emit("terminated", error));
    }
   }
   function finalizeAndReportTiming(response, initiatorType = "other") {
    if ("error" === response.type && response.aborted) return;
    if (!response.urlList?.length) return;
    const originalURL = response.urlList[0];
    let timingInfo = response.timingInfo, cacheState = response.cacheState;
    urlIsHttpHttpsScheme(originalURL) && null !== timingInfo && (response.timingAllowPassed || (timingInfo = createOpaqueTimingInfo({
     startTime: timingInfo.startTime
    }), cacheState = ""), timingInfo.endTime = coarsenedSharedCurrentTime(), response.timingInfo = timingInfo, 
    function(timingInfo, originalURL, initiatorType, globalThis, cacheState) {
     (nodeMajor > 18 || 18 === nodeMajor && nodeMinor >= 2) && performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState);
    }(timingInfo, originalURL, initiatorType, globalThis, cacheState));
   }
   function abortFetch(p, request, responseObject, error) {
    if (error || (error = new DOMException("The operation was aborted.", "AbortError")), 
    p.reject(error), null != request.body && isReadable(request.body?.stream) && request.body.stream.cancel(error).catch((err => {
     if ("ERR_INVALID_STATE" !== err.code) throw err;
    })), null == responseObject) return;
    const response = responseObject[kState];
    null != response.body && isReadable(response.body?.stream) && response.body.stream.cancel(error).catch((err => {
     if ("ERR_INVALID_STATE" !== err.code) throw err;
    }));
   }
   function fetching({request, processRequestBodyChunkLength, processRequestEndOfBody, processResponse, processResponseEndOfBody, processResponseConsumeBody, useParallelQueue = !1, dispatcher}) {
    let taskDestination = null, crossOriginIsolatedCapability = !1;
    null != request.client && (taskDestination = request.client.globalObject, crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability);
    const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability), timingInfo = createOpaqueTimingInfo({
     startTime: currenTime
    }), fetchParams = {
     controller: new Fetch(dispatcher),
     request,
     timingInfo,
     processRequestBodyChunkLength,
     processRequestEndOfBody,
     processResponse,
     processResponseConsumeBody,
     processResponseEndOfBody,
     taskDestination,
     crossOriginIsolatedCapability
    };
    if (assert(!request.body || request.body.stream), "client" === request.window && (request.window = "Window" === request.client?.globalObject?.constructor?.name ? request.client : "no-window"), 
    "client" === request.origin && (request.origin = request.client?.origin), "client" === request.policyContainer && (null != request.client ? request.policyContainer = clonePolicyContainer(request.client.policyContainer) : request.policyContainer = makePolicyContainer()), 
    !request.headersList.contains("accept")) {
     const value = "*/*";
     request.headersList.append("accept", value);
    }
    return request.headersList.contains("accept-language") || request.headersList.append("accept-language", "*"), 
    request.priority, subresourceSet.has(request.destination), mainFetch(fetchParams).catch((err => {
     fetchParams.controller.terminate(err);
    })), fetchParams.controller;
   }
   async function mainFetch(fetchParams, recursive = !1) {
    const request = fetchParams.request;
    let response = null;
    if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request)) && (response = makeNetworkError("local URLs only")), 
    tryUpgradeRequestToAPotentiallyTrustworthyURL(request), "blocked" === requestBadPort(request) && (response = makeNetworkError("bad port")), 
    "" === request.referrerPolicy && (request.referrerPolicy = request.policyContainer.referrerPolicy), 
    "no-referrer" !== request.referrer && (request.referrer = determineRequestsReferrer(request)), 
    null === response && (response = await (async () => {
     const currentURL = requestCurrentURL(request);
     return sameOrigin(currentURL, request.url) && "basic" === request.responseTainting || "data:" === currentURL.protocol || "navigate" === request.mode || "websocket" === request.mode ? (request.responseTainting = "basic", 
     await schemeFetch(fetchParams)) : "same-origin" === request.mode ? makeNetworkError('request mode cannot be "same-origin"') : "no-cors" === request.mode ? "follow" !== request.redirect ? makeNetworkError('redirect mode cannot be "follow" for "no-cors" request') : (request.responseTainting = "opaque", 
     await schemeFetch(fetchParams)) : urlIsHttpHttpsScheme(requestCurrentURL(request)) ? (request.responseTainting = "cors", 
     await httpFetch(fetchParams)) : makeNetworkError("URL scheme must be a HTTP(S) scheme");
    })()), recursive) return response;
    0 === response.status || response.internalResponse || (request.responseTainting, 
    "basic" === request.responseTainting ? response = filterResponse(response, "basic") : "cors" === request.responseTainting ? response = filterResponse(response, "cors") : "opaque" === request.responseTainting ? response = filterResponse(response, "opaque") : assert(!1));
    let internalResponse = 0 === response.status ? response : response.internalResponse;
    if (0 === internalResponse.urlList.length && internalResponse.urlList.push(...request.urlList), 
    request.timingAllowFailed || (response.timingAllowPassed = !0), "opaque" === response.type && 206 === internalResponse.status && internalResponse.rangeRequested && !request.headers.contains("range") && (response = internalResponse = makeNetworkError()), 
    0 === response.status || "HEAD" !== request.method && "CONNECT" !== request.method && !nullBodyStatus.includes(internalResponse.status) || (internalResponse.body = null, 
    fetchParams.controller.dump = !0), request.integrity) {
     const processBodyError = reason => fetchFinale(fetchParams, makeNetworkError(reason));
     if ("opaque" === request.responseTainting || null == response.body) return void processBodyError(response.error);
     const processBody = bytes => {
      bytesMatch(bytes, request.integrity) ? (response.body = safelyExtractBody(bytes)[0], 
      fetchFinale(fetchParams, response)) : processBodyError("integrity mismatch");
     };
     await fullyReadBody(response.body, processBody, processBodyError);
    } else fetchFinale(fetchParams, response);
   }
   function schemeFetch(fetchParams) {
    if (isCancelled(fetchParams) && 0 === fetchParams.request.redirectCount) return Promise.resolve(makeAppropriateNetworkError(fetchParams));
    const {request} = fetchParams, {protocol: scheme} = requestCurrentURL(request);
    switch (scheme) {
    case "about:":
     return Promise.resolve(makeNetworkError("about scheme is not supported"));

    case "blob:":
     {
      resolveObjectURL || (resolveObjectURL = __webpack_require__(181).resolveObjectURL);
      const blobURLEntry = requestCurrentURL(request);
      if (0 !== blobURLEntry.search.length) return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
      if ("GET" !== request.method || !isBlobLike(blobURLEntryObject)) return Promise.resolve(makeNetworkError("invalid method"));
      const bodyWithType = safelyExtractBody(blobURLEntryObject), body = bodyWithType[0], length = isomorphicEncode(`${body.length}`), type = bodyWithType[1] ?? "", response = makeResponse({
       statusText: "OK",
       headersList: [ [ "content-length", {
        name: "Content-Length",
        value: length
       } ], [ "content-type", {
        name: "Content-Type",
        value: type
       } ] ]
      });
      return response.body = body, Promise.resolve(response);
     }

    case "data:":
     {
      const currentURL = requestCurrentURL(request), dataURLStruct = dataURLProcessor(currentURL);
      if ("failure" === dataURLStruct) return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
      const mimeType = serializeAMimeType(dataURLStruct.mimeType);
      return Promise.resolve(makeResponse({
       statusText: "OK",
       headersList: [ [ "content-type", {
        name: "Content-Type",
        value: mimeType
       } ] ],
       body: safelyExtractBody(dataURLStruct.body)[0]
      }));
     }

    case "file:":
     return Promise.resolve(makeNetworkError("not implemented... yet..."));

    case "http:":
    case "https:":
     return httpFetch(fetchParams).catch((err => makeNetworkError(err)));

    default:
     return Promise.resolve(makeNetworkError("unknown scheme"));
    }
   }
   function finalizeResponse(fetchParams, response) {
    fetchParams.request.done = !0, null != fetchParams.processResponseDone && queueMicrotask((() => fetchParams.processResponseDone(response)));
   }
   function fetchFinale(fetchParams, response) {
    "error" === response.type && (response.urlList = [ fetchParams.request.urlList[0] ], 
    response.timingInfo = createOpaqueTimingInfo({
     startTime: fetchParams.timingInfo.startTime
    }));
    const processResponseEndOfBody = () => {
     fetchParams.request.done = !0, null != fetchParams.processResponseEndOfBody && queueMicrotask((() => fetchParams.processResponseEndOfBody(response)));
    };
    if (null != fetchParams.processResponse && queueMicrotask((() => fetchParams.processResponse(response))), 
    null == response.body) processResponseEndOfBody(); else {
     const identityTransformAlgorithm = (chunk, controller) => {
      controller.enqueue(chunk);
     }, transformStream = new TransformStream({
      start() {},
      transform: identityTransformAlgorithm,
      flush: processResponseEndOfBody
     }, {
      size: () => 1
     }, {
      size: () => 1
     });
     response.body = {
      stream: response.body.stream.pipeThrough(transformStream)
     };
    }
    if (null != fetchParams.processResponseConsumeBody) {
     const processBody = nullOrBytes => fetchParams.processResponseConsumeBody(response, nullOrBytes), processBodyError = failure => fetchParams.processResponseConsumeBody(response, failure);
     return null != response.body ? fullyReadBody(response.body, processBody, processBodyError) : (queueMicrotask((() => processBody(null))), 
     Promise.resolve());
    }
   }
   async function httpFetch(fetchParams) {
    const request = fetchParams.request;
    let response = null, actualResponse = null;
    const timingInfo = fetchParams.timingInfo;
    if (request.serviceWorkers, null === response) {
     if ("follow" === request.redirect && (request.serviceWorkers = "none"), actualResponse = response = await httpNetworkOrCacheFetch(fetchParams), 
     "cors" === request.responseTainting && "failure" === corsCheck(request, response)) return makeNetworkError("cors failure");
     "failure" === TAOCheck(request, response) && (request.timingAllowFailed = !0);
    }
    return "opaque" !== request.responseTainting && "opaque" !== response.type || "blocked" !== crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) ? (redirectStatusSet.has(actualResponse.status) && ("manual" !== request.redirect && fetchParams.controller.connection.destroy(), 
    "error" === request.redirect ? response = makeNetworkError("unexpected redirect") : "manual" === request.redirect ? response = actualResponse : "follow" === request.redirect ? response = await function(fetchParams, response) {
     const request = fetchParams.request, actualResponse = response.internalResponse ? response.internalResponse : response;
     let locationURL;
     try {
      if (locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash), 
      null == locationURL) return response;
     } catch (err) {
      return Promise.resolve(makeNetworkError(err));
     }
     if (!urlIsHttpHttpsScheme(locationURL)) return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
     if (20 === request.redirectCount) return Promise.resolve(makeNetworkError("redirect count exceeded"));
     if (request.redirectCount += 1, "cors" === request.mode && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
     if ("cors" === request.responseTainting && (locationURL.username || locationURL.password)) return Promise.resolve(makeNetworkError('URL cannot contain credentials for request mode "cors"'));
     if (303 !== actualResponse.status && null != request.body && null == request.body.source) return Promise.resolve(makeNetworkError());
     if ([ 301, 302 ].includes(actualResponse.status) && "POST" === request.method || 303 === actualResponse.status && !GET_OR_HEAD.includes(request.method)) {
      request.method = "GET", request.body = null;
      for (const headerName of requestBodyHeader) request.headersList.delete(headerName);
     }
     sameOrigin(requestCurrentURL(request), locationURL) || (request.headersList.delete("authorization"), 
     request.headersList.delete("proxy-authorization", !0), request.headersList.delete("cookie"), 
     request.headersList.delete("host"));
     null != request.body && (assert(null != request.body.source), request.body = safelyExtractBody(request.body.source)[0]);
     const timingInfo = fetchParams.timingInfo;
     timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability), 
     0 === timingInfo.redirectStartTime && (timingInfo.redirectStartTime = timingInfo.startTime);
     return request.urlList.push(locationURL), setRequestReferrerPolicyOnRedirect(request, actualResponse), 
     mainFetch(fetchParams, !0);
    }(fetchParams, response) : assert(!1)), response.timingInfo = timingInfo, response) : makeNetworkError("blocked");
   }
   async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = !1, isNewConnectionFetch = !1) {
    const request = fetchParams.request;
    let httpFetchParams = null, httpRequest = null, response = null;
    "no-window" === request.window && "error" === request.redirect ? (httpFetchParams = fetchParams, 
    httpRequest = request) : (httpRequest = makeRequest(request), httpFetchParams = {
     ...fetchParams
    }, httpFetchParams.request = httpRequest);
    const includeCredentials = "include" === request.credentials || "same-origin" === request.credentials && "basic" === request.responseTainting, contentLength = httpRequest.body ? httpRequest.body.length : null;
    let contentLengthHeaderValue = null;
    if (null == httpRequest.body && [ "POST", "PUT" ].includes(httpRequest.method) && (contentLengthHeaderValue = "0"), 
    null != contentLength && (contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)), 
    null != contentLengthHeaderValue && httpRequest.headersList.append("content-length", contentLengthHeaderValue), 
    null != contentLength && httpRequest.keepalive, httpRequest.referrer instanceof URL && httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href)), 
    appendRequestOriginHeader(httpRequest), appendFetchMetadata(httpRequest), httpRequest.headersList.contains("user-agent") || httpRequest.headersList.append("user-agent", "undefined" == typeof esbuildDetection ? "undici" : "node"), 
    "default" === httpRequest.cache && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range")) && (httpRequest.cache = "no-store"), 
    "no-cache" !== httpRequest.cache || httpRequest.preventNoCacheCacheControlHeaderModification || httpRequest.headersList.contains("cache-control") || httpRequest.headersList.append("cache-control", "max-age=0"), 
    "no-store" !== httpRequest.cache && "reload" !== httpRequest.cache || (httpRequest.headersList.contains("pragma") || httpRequest.headersList.append("pragma", "no-cache"), 
    httpRequest.headersList.contains("cache-control") || httpRequest.headersList.append("cache-control", "no-cache")), 
    httpRequest.headersList.contains("range") && httpRequest.headersList.append("accept-encoding", "identity"), 
    httpRequest.headersList.contains("accept-encoding") || (urlHasHttpsScheme(requestCurrentURL(httpRequest)) ? httpRequest.headersList.append("accept-encoding", "br, gzip, deflate") : httpRequest.headersList.append("accept-encoding", "gzip, deflate")), 
    httpRequest.headersList.delete("host"), httpRequest.cache = "no-store", "no-store" !== httpRequest.mode && httpRequest.mode, 
    null == response) {
     if ("only-if-cached" === httpRequest.mode) return makeNetworkError("only if cached");
     const forwardResponse = await async function(fetchParams) {
      assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed), 
      fetchParams.controller.connection = {
       abort: null,
       destroyed: !1,
       destroy(err) {
        this.destroyed || (this.destroyed = !0, this.abort?.(err ?? new DOMException("The operation was aborted.", "AbortError")));
       }
      };
      const request = fetchParams.request;
      let response = null;
      const timingInfo = fetchParams.timingInfo, httpCache = null;
      null == httpCache && (request.cache = "no-store");
      request.mode;
      let requestBody = null;
      if (null == request.body && fetchParams.processRequestEndOfBody) queueMicrotask((() => fetchParams.processRequestEndOfBody())); else if (null != request.body) {
       const processBodyChunk = async function*(bytes) {
        isCancelled(fetchParams) || (yield bytes, fetchParams.processRequestBodyChunkLength?.(bytes.byteLength));
       }, processEndOfBody = () => {
        isCancelled(fetchParams) || fetchParams.processRequestEndOfBody && fetchParams.processRequestEndOfBody();
       }, processBodyError = e => {
        isCancelled(fetchParams) || ("AbortError" === e.name ? fetchParams.controller.abort() : fetchParams.controller.terminate(e));
       };
       requestBody = async function*() {
        try {
         for await (const bytes of request.body.stream) yield* processBodyChunk(bytes);
         processEndOfBody();
        } catch (err) {
         processBodyError(err);
        }
       }();
      }
      try {
       const {body, status, statusText, headersList, socket} = await dispatch({
        body: requestBody
       });
       if (socket) response = makeResponse({
        status,
        statusText,
        headersList,
        socket
       }); else {
        const iterator = body[Symbol.asyncIterator]();
        fetchParams.controller.next = () => iterator.next(), response = makeResponse({
         status,
         statusText,
         headersList
        });
       }
      } catch (err) {
       return "AbortError" === err.name ? (fetchParams.controller.connection.destroy(), 
       makeAppropriateNetworkError(fetchParams, err)) : makeNetworkError(err);
      }
      const pullAlgorithm = () => {
       fetchParams.controller.resume();
      }, cancelAlgorithm = reason => {
       fetchParams.controller.abort(reason);
      };
      ReadableStream || (ReadableStream = __webpack_require__(3774).ReadableStream);
      const stream = new ReadableStream({
       async start(controller) {
        fetchParams.controller.controller = controller;
       },
       async pull(controller) {
        await pullAlgorithm(controller);
       },
       async cancel(reason) {
        await cancelAlgorithm(reason);
       }
      }, {
       highWaterMark: 0,
       size: () => 1
      });
      function onAborted(reason) {
       isAborted(fetchParams) ? (response.aborted = !0, isReadable(stream) && fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason)) : isReadable(stream) && fetchParams.controller.controller.error(new TypeError("terminated", {
        cause: isErrorLike(reason) ? reason : void 0
       })), fetchParams.controller.connection.destroy();
      }
      return response.body = {
       stream
      }, fetchParams.controller.on("terminated", onAborted), fetchParams.controller.resume = async () => {
       for (;;) {
        let bytes, isFailure;
        try {
         const {done, value} = await fetchParams.controller.next();
         if (isAborted(fetchParams)) break;
         bytes = done ? void 0 : value;
        } catch (err) {
         fetchParams.controller.ended && !timingInfo.encodedBodySize ? bytes = void 0 : (bytes = err, 
         isFailure = !0);
        }
        if (void 0 === bytes) return readableStreamClose(fetchParams.controller.controller), 
        void finalizeResponse(fetchParams, response);
        if (timingInfo.decodedBodySize += bytes?.byteLength ?? 0, isFailure) return void fetchParams.controller.terminate(bytes);
        if (fetchParams.controller.controller.enqueue(new Uint8Array(bytes)), isErrored(stream)) return void fetchParams.controller.terminate();
        if (!fetchParams.controller.controller.desiredSize) return;
       }
      }, response;
      async function dispatch({body}) {
       const url = requestCurrentURL(request), agent = fetchParams.controller.dispatcher;
       return new Promise(((resolve, reject) => agent.dispatch({
        path: url.pathname + url.search,
        origin: url.origin,
        method: request.method,
        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
        headers: request.headersList.entries,
        maxRedirections: 0,
        upgrade: "websocket" === request.mode ? "websocket" : void 0
       }, {
        body: null,
        abort: null,
        onConnect(abort) {
         const {connection} = fetchParams.controller;
         connection.destroyed ? abort(new DOMException("The operation was aborted.", "AbortError")) : (fetchParams.controller.on("terminated", abort), 
         this.abort = connection.abort = abort);
        },
        onHeaders(status, headersList, resume, statusText) {
         if (status < 200) return;
         let codings = [], location = "";
         const headers = new Headers;
         if (Array.isArray(headersList)) for (let n = 0; n < headersList.length; n += 2) {
          const key = headersList[n + 0].toString("latin1"), val = headersList[n + 1].toString("latin1");
          "content-encoding" === key.toLowerCase() ? codings = val.toLowerCase().split(",").map((x => x.trim())) : "location" === key.toLowerCase() && (location = val), 
          headers[kHeadersList].append(key, val);
         } else {
          const keys = Object.keys(headersList);
          for (const key of keys) {
           const val = headersList[key];
           "content-encoding" === key.toLowerCase() ? codings = val.toLowerCase().split(",").map((x => x.trim())).reverse() : "location" === key.toLowerCase() && (location = val), 
           headers[kHeadersList].append(key, val);
          }
         }
         this.body = new Readable({
          read: resume
         });
         const decoders = [], willFollow = "follow" === request.redirect && location && redirectStatusSet.has(status);
         if ("HEAD" !== request.method && "CONNECT" !== request.method && !nullBodyStatus.includes(status) && !willFollow) for (const coding of codings) if ("x-gzip" === coding || "gzip" === coding) decoders.push(zlib.createGunzip({
          flush: zlib.constants.Z_SYNC_FLUSH,
          finishFlush: zlib.constants.Z_SYNC_FLUSH
         })); else if ("deflate" === coding) decoders.push(zlib.createInflate()); else {
          if ("br" !== coding) {
           decoders.length = 0;
           break;
          }
          decoders.push(zlib.createBrotliDecompress());
         }
         return resolve({
          status,
          statusText,
          headersList: headers[kHeadersList],
          body: decoders.length ? pipeline(this.body, ...decoders, (() => {})) : this.body.on("error", (() => {}))
         }), !0;
        },
        onData(chunk) {
         if (fetchParams.controller.dump) return;
         const bytes = chunk;
         return timingInfo.encodedBodySize += bytes.byteLength, this.body.push(bytes);
        },
        onComplete() {
         this.abort && fetchParams.controller.off("terminated", this.abort), fetchParams.controller.ended = !0, 
         this.body.push(null);
        },
        onError(error) {
         this.abort && fetchParams.controller.off("terminated", this.abort), this.body?.destroy(error), 
         fetchParams.controller.terminate(error), reject(error);
        },
        onUpgrade(status, headersList, socket) {
         if (101 !== status) return;
         const headers = new Headers;
         for (let n = 0; n < headersList.length; n += 2) {
          const key = headersList[n + 0].toString("latin1"), val = headersList[n + 1].toString("latin1");
          headers[kHeadersList].append(key, val);
         }
         return resolve({
          status,
          statusText: STATUS_CODES[status],
          headersList: headers[kHeadersList],
          socket
         }), !0;
        }
       })));
      }
     }(httpFetchParams, includeCredentials, isNewConnectionFetch);
     !safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status, 
     null == response && (response = forwardResponse);
    }
    if (response.urlList = [ ...httpRequest.urlList ], httpRequest.headersList.contains("range") && (response.rangeRequested = !0), 
    response.requestIncludesCredentials = includeCredentials, 407 === response.status) return "no-window" === request.window ? makeNetworkError() : isCancelled(fetchParams) ? makeAppropriateNetworkError(fetchParams) : makeNetworkError("proxy authentication required");
    if (421 === response.status && !isNewConnectionFetch && (null == request.body || null != request.body.source)) {
     if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
     fetchParams.controller.connection.destroy(), response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, !0);
    }
    return response;
   }
   module.exports = {
    fetch: function(input, init = {}) {
     webidl.argumentLengthCheck(arguments, 1, {
      header: "globalThis.fetch"
     });
     const p = createDeferredPromise();
     let requestObject;
     try {
      requestObject = new Request(input, init);
     } catch (e) {
      return p.reject(e), p.promise;
     }
     const request = requestObject[kState];
     if (requestObject.signal.aborted) return abortFetch(p, request, null, requestObject.signal.reason), 
     p.promise;
     const globalObject = request.client.globalObject;
     "ServiceWorkerGlobalScope" === globalObject?.constructor?.name && (request.serviceWorkers = "none");
     let responseObject = null, locallyAborted = !1, controller = null;
     return addAbortListener(requestObject.signal, (() => {
      locallyAborted = !0, assert(null != controller), controller.abort(requestObject.signal.reason), 
      abortFetch(p, request, responseObject, requestObject.signal.reason);
     })), controller = fetching({
      request,
      processResponseEndOfBody: response => finalizeAndReportTiming(response, "fetch"),
      processResponse: response => locallyAborted ? Promise.resolve() : response.aborted ? (abortFetch(p, request, responseObject, controller.serializedAbortReason), 
      Promise.resolve()) : "error" === response.type ? (p.reject(Object.assign(new TypeError("fetch failed"), {
       cause: response.error
      })), Promise.resolve()) : (responseObject = new Response, responseObject[kState] = response, 
      responseObject[kRealm] = null, responseObject[kHeaders][kHeadersList] = response.headersList, 
      responseObject[kHeaders][kGuard] = "immutable", responseObject[kHeaders][kRealm] = null, 
      void p.resolve(responseObject)),
      dispatcher: init.dispatcher ?? getGlobalDispatcher()
     }), p.promise;
    },
    Fetch,
    fetching,
    finalizeAndReportTiming
   };
  },
  8899: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {extractBody, mixinBody, cloneBody} = __webpack_require__(2136), {Headers, fill: fillHeaders, HeadersList} = __webpack_require__(5472), {FinalizationRegistry} = __webpack_require__(383)(), util = __webpack_require__(8869), {isValidHTTPToken, sameOrigin, normalizeMethod, makePolicyContainer, normalizeMethodRecord} = __webpack_require__(8292), {forbiddenMethodsSet, corsSafeListedMethodsSet, referrerPolicy, requestRedirect, requestMode, requestCredentials, requestCache, requestDuplex} = __webpack_require__(3771), {kEnumerableProperty} = util, {kHeaders, kSignal, kState, kGuard, kRealm} = __webpack_require__(9415), {webidl} = __webpack_require__(769), {getGlobalOrigin} = __webpack_require__(6367), {URLSerializer} = __webpack_require__(3587), {kHeadersList, kConstruct} = __webpack_require__(8028), assert = __webpack_require__(2613), {getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners} = __webpack_require__(4434);
   let TransformStream = globalThis.TransformStream;
   const kAbortController = Symbol("abortController"), requestFinalizer = new FinalizationRegistry((({signal, abort}) => {
    signal.removeEventListener("abort", abort);
   }));
   class Request {
    constructor(input, init = {}) {
     if (input === kConstruct) return;
     webidl.argumentLengthCheck(arguments, 1, {
      header: "Request constructor"
     }), input = webidl.converters.RequestInfo(input), init = webidl.converters.RequestInit(init), 
     this[kRealm] = {
      settingsObject: {
       baseUrl: getGlobalOrigin(),
       get origin() {
        return this.baseUrl?.origin;
       },
       policyContainer: makePolicyContainer()
      }
     };
     let request = null, fallbackMode = null;
     const baseUrl = this[kRealm].settingsObject.baseUrl;
     let signal = null;
     if ("string" == typeof input) {
      let parsedURL;
      try {
       parsedURL = new URL(input, baseUrl);
      } catch (err) {
       throw new TypeError("Failed to parse URL from " + input, {
        cause: err
       });
      }
      if (parsedURL.username || parsedURL.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
      request = makeRequest({
       urlList: [ parsedURL ]
      }), fallbackMode = "cors";
     } else assert(input instanceof Request), request = input[kState], signal = input[kSignal];
     const origin = this[kRealm].settingsObject.origin;
     let window = "client";
     if ("EnvironmentSettingsObject" === request.window?.constructor?.name && sameOrigin(request.window, origin) && (window = request.window), 
     null != init.window) throw new TypeError(`'window' option '${window}' must be null`);
     "window" in init && (window = "no-window"), request = makeRequest({
      method: request.method,
      headersList: request.headersList,
      unsafeRequest: request.unsafeRequest,
      client: this[kRealm].settingsObject,
      window,
      priority: request.priority,
      origin: request.origin,
      referrer: request.referrer,
      referrerPolicy: request.referrerPolicy,
      mode: request.mode,
      credentials: request.credentials,
      cache: request.cache,
      redirect: request.redirect,
      integrity: request.integrity,
      keepalive: request.keepalive,
      reloadNavigation: request.reloadNavigation,
      historyNavigation: request.historyNavigation,
      urlList: [ ...request.urlList ]
     });
     const initHasKey = 0 !== Object.keys(init).length;
     if (initHasKey && ("navigate" === request.mode && (request.mode = "same-origin"), 
     request.reloadNavigation = !1, request.historyNavigation = !1, request.origin = "client", 
     request.referrer = "client", request.referrerPolicy = "", request.url = request.urlList[request.urlList.length - 1], 
     request.urlList = [ request.url ]), void 0 !== init.referrer) {
      const referrer = init.referrer;
      if ("" === referrer) request.referrer = "no-referrer"; else {
       let parsedReferrer;
       try {
        parsedReferrer = new URL(referrer, baseUrl);
       } catch (err) {
        throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, {
         cause: err
        });
       }
       "about:" === parsedReferrer.protocol && "client" === parsedReferrer.hostname || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl) ? request.referrer = "client" : request.referrer = parsedReferrer;
      }
     }
     let mode;
     if (void 0 !== init.referrerPolicy && (request.referrerPolicy = init.referrerPolicy), 
     mode = void 0 !== init.mode ? init.mode : fallbackMode, "navigate" === mode) throw webidl.errors.exception({
      header: "Request constructor",
      message: "invalid request mode navigate."
     });
     if (null != mode && (request.mode = mode), void 0 !== init.credentials && (request.credentials = init.credentials), 
     void 0 !== init.cache && (request.cache = init.cache), "only-if-cached" === request.cache && "same-origin" !== request.mode) throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
     if (void 0 !== init.redirect && (request.redirect = init.redirect), null != init.integrity && (request.integrity = String(init.integrity)), 
     void 0 !== init.keepalive && (request.keepalive = Boolean(init.keepalive)), void 0 !== init.method) {
      let method = init.method;
      if (!isValidHTTPToken(method)) throw new TypeError(`'${method}' is not a valid HTTP method.`);
      if (forbiddenMethodsSet.has(method.toUpperCase())) throw new TypeError(`'${method}' HTTP method is unsupported.`);
      method = normalizeMethodRecord[method] ?? normalizeMethod(method), request.method = method;
     }
     void 0 !== init.signal && (signal = init.signal), this[kState] = request;
     const ac = new AbortController;
     if (this[kSignal] = ac.signal, this[kSignal][kRealm] = this[kRealm], null != signal) {
      if (!signal || "boolean" != typeof signal.aborted || "function" != typeof signal.addEventListener) throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
      if (signal.aborted) ac.abort(signal.reason); else {
       this[kAbortController] = ac;
       const acRef = new WeakRef(ac), abort = function() {
        const ac = acRef.deref();
        void 0 !== ac && ac.abort(this.reason);
       };
       try {
        ("function" == typeof getMaxListeners && getMaxListeners(signal) === defaultMaxListeners || getEventListeners(signal, "abort").length >= defaultMaxListeners) && setMaxListeners(100, signal);
       } catch {}
       util.addAbortListener(signal, abort), requestFinalizer.register(ac, {
        signal,
        abort
       });
      }
     }
     if (this[kHeaders] = new Headers(kConstruct), this[kHeaders][kHeadersList] = request.headersList, 
     this[kHeaders][kGuard] = "request", this[kHeaders][kRealm] = this[kRealm], "no-cors" === mode) {
      if (!corsSafeListedMethodsSet.has(request.method)) throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);
      this[kHeaders][kGuard] = "request-no-cors";
     }
     if (initHasKey) {
      const headersList = this[kHeaders][kHeadersList], headers = void 0 !== init.headers ? init.headers : new HeadersList(headersList);
      if (headersList.clear(), headers instanceof HeadersList) {
       for (const [key, val] of headers) headersList.append(key, val);
       headersList.cookies = headers.cookies;
      } else fillHeaders(this[kHeaders], headers);
     }
     const inputBody = input instanceof Request ? input[kState].body : null;
     if (!(null == init.body && null == inputBody || "GET" !== request.method && "HEAD" !== request.method)) throw new TypeError("Request with GET/HEAD method cannot have body.");
     let initBody = null;
     if (null != init.body) {
      const [extractedBody, contentType] = extractBody(init.body, request.keepalive);
      initBody = extractedBody, contentType && !this[kHeaders][kHeadersList].contains("content-type") && this[kHeaders].append("content-type", contentType);
     }
     const inputOrInitBody = initBody ?? inputBody;
     if (null != inputOrInitBody && null == inputOrInitBody.source) {
      if (null != initBody && null == init.duplex) throw new TypeError("RequestInit: duplex option is required when sending a body.");
      if ("same-origin" !== request.mode && "cors" !== request.mode) throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
      request.useCORSPreflightFlag = !0;
     }
     let finalBody = inputOrInitBody;
     if (null == initBody && null != inputBody) {
      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
      TransformStream || (TransformStream = __webpack_require__(3774).TransformStream);
      const identityTransform = new TransformStream;
      inputBody.stream.pipeThrough(identityTransform), finalBody = {
       source: inputBody.source,
       length: inputBody.length,
       stream: identityTransform.readable
      };
     }
     this[kState].body = finalBody;
    }
    get method() {
     return webidl.brandCheck(this, Request), this[kState].method;
    }
    get url() {
     return webidl.brandCheck(this, Request), URLSerializer(this[kState].url);
    }
    get headers() {
     return webidl.brandCheck(this, Request), this[kHeaders];
    }
    get destination() {
     return webidl.brandCheck(this, Request), this[kState].destination;
    }
    get referrer() {
     return webidl.brandCheck(this, Request), "no-referrer" === this[kState].referrer ? "" : "client" === this[kState].referrer ? "about:client" : this[kState].referrer.toString();
    }
    get referrerPolicy() {
     return webidl.brandCheck(this, Request), this[kState].referrerPolicy;
    }
    get mode() {
     return webidl.brandCheck(this, Request), this[kState].mode;
    }
    get credentials() {
     return this[kState].credentials;
    }
    get cache() {
     return webidl.brandCheck(this, Request), this[kState].cache;
    }
    get redirect() {
     return webidl.brandCheck(this, Request), this[kState].redirect;
    }
    get integrity() {
     return webidl.brandCheck(this, Request), this[kState].integrity;
    }
    get keepalive() {
     return webidl.brandCheck(this, Request), this[kState].keepalive;
    }
    get isReloadNavigation() {
     return webidl.brandCheck(this, Request), this[kState].reloadNavigation;
    }
    get isHistoryNavigation() {
     return webidl.brandCheck(this, Request), this[kState].historyNavigation;
    }
    get signal() {
     return webidl.brandCheck(this, Request), this[kSignal];
    }
    get body() {
     return webidl.brandCheck(this, Request), this[kState].body ? this[kState].body.stream : null;
    }
    get bodyUsed() {
     return webidl.brandCheck(this, Request), !!this[kState].body && util.isDisturbed(this[kState].body.stream);
    }
    get duplex() {
     return webidl.brandCheck(this, Request), "half";
    }
    clone() {
     if (webidl.brandCheck(this, Request), this.bodyUsed || this.body?.locked) throw new TypeError("unusable");
     const clonedRequest = function(request) {
      const newRequest = makeRequest({
       ...request,
       body: null
      });
      null != request.body && (newRequest.body = cloneBody(request.body));
      return newRequest;
     }(this[kState]), clonedRequestObject = new Request(kConstruct);
     clonedRequestObject[kState] = clonedRequest, clonedRequestObject[kRealm] = this[kRealm], 
     clonedRequestObject[kHeaders] = new Headers(kConstruct), clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList, 
     clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard], clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
     const ac = new AbortController;
     return this.signal.aborted ? ac.abort(this.signal.reason) : util.addAbortListener(this.signal, (() => {
      ac.abort(this.signal.reason);
     })), clonedRequestObject[kSignal] = ac.signal, clonedRequestObject;
    }
   }
   function makeRequest(init) {
    const request = {
     method: "GET",
     localURLsOnly: !1,
     unsafeRequest: !1,
     body: null,
     client: null,
     reservedClient: null,
     replacesClientId: "",
     window: "client",
     keepalive: !1,
     serviceWorkers: "all",
     initiator: "",
     destination: "",
     priority: null,
     origin: "client",
     policyContainer: "client",
     referrer: "client",
     referrerPolicy: "",
     mode: "no-cors",
     useCORSPreflightFlag: !1,
     credentials: "same-origin",
     useCredentials: !1,
     cache: "default",
     redirect: "follow",
     integrity: "",
     cryptoGraphicsNonceMetadata: "",
     parserMetadata: "",
     reloadNavigation: !1,
     historyNavigation: !1,
     userActivation: !1,
     taintedOrigin: !1,
     redirectCount: 0,
     responseTainting: "basic",
     preventNoCacheCacheControlHeaderModification: !1,
     done: !1,
     timingAllowFailed: !1,
     ...init,
     headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList
    };
    return request.url = request.urlList[0], request;
   }
   mixinBody(Request), Object.defineProperties(Request.prototype, {
    method: kEnumerableProperty,
    url: kEnumerableProperty,
    headers: kEnumerableProperty,
    redirect: kEnumerableProperty,
    clone: kEnumerableProperty,
    signal: kEnumerableProperty,
    duplex: kEnumerableProperty,
    destination: kEnumerableProperty,
    body: kEnumerableProperty,
    bodyUsed: kEnumerableProperty,
    isHistoryNavigation: kEnumerableProperty,
    isReloadNavigation: kEnumerableProperty,
    keepalive: kEnumerableProperty,
    integrity: kEnumerableProperty,
    cache: kEnumerableProperty,
    credentials: kEnumerableProperty,
    attribute: kEnumerableProperty,
    referrerPolicy: kEnumerableProperty,
    referrer: kEnumerableProperty,
    mode: kEnumerableProperty,
    [Symbol.toStringTag]: {
     value: "Request",
     configurable: !0
    }
   }), webidl.converters.Request = webidl.interfaceConverter(Request), webidl.converters.RequestInfo = function(V) {
    return "string" == typeof V ? webidl.converters.USVString(V) : V instanceof Request ? webidl.converters.Request(V) : webidl.converters.USVString(V);
   }, webidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal), webidl.converters.RequestInit = webidl.dictionaryConverter([ {
    key: "method",
    converter: webidl.converters.ByteString
   }, {
    key: "headers",
    converter: webidl.converters.HeadersInit
   }, {
    key: "body",
    converter: webidl.nullableConverter(webidl.converters.BodyInit)
   }, {
    key: "referrer",
    converter: webidl.converters.USVString
   }, {
    key: "referrerPolicy",
    converter: webidl.converters.DOMString,
    allowedValues: referrerPolicy
   }, {
    key: "mode",
    converter: webidl.converters.DOMString,
    allowedValues: requestMode
   }, {
    key: "credentials",
    converter: webidl.converters.DOMString,
    allowedValues: requestCredentials
   }, {
    key: "cache",
    converter: webidl.converters.DOMString,
    allowedValues: requestCache
   }, {
    key: "redirect",
    converter: webidl.converters.DOMString,
    allowedValues: requestRedirect
   }, {
    key: "integrity",
    converter: webidl.converters.DOMString
   }, {
    key: "keepalive",
    converter: webidl.converters.boolean
   }, {
    key: "signal",
    converter: webidl.nullableConverter((signal => webidl.converters.AbortSignal(signal, {
     strict: !1
    })))
   }, {
    key: "window",
    converter: webidl.converters.any
   }, {
    key: "duplex",
    converter: webidl.converters.DOMString,
    allowedValues: requestDuplex
   } ]), module.exports = {
    Request,
    makeRequest
   };
  },
  3767: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {Headers, HeadersList, fill} = __webpack_require__(5472), {extractBody, cloneBody, mixinBody} = __webpack_require__(2136), util = __webpack_require__(8869), {kEnumerableProperty} = util, {isValidReasonPhrase, isCancelled, isAborted, isBlobLike, serializeJavascriptValueToJSONString, isErrorLike, isomorphicEncode} = __webpack_require__(8292), {redirectStatusSet, nullBodyStatus, DOMException} = __webpack_require__(3771), {kState, kHeaders, kGuard, kRealm} = __webpack_require__(9415), {webidl} = __webpack_require__(769), {FormData} = __webpack_require__(9706), {getGlobalOrigin} = __webpack_require__(6367), {URLSerializer} = __webpack_require__(3587), {kHeadersList, kConstruct} = __webpack_require__(8028), assert = __webpack_require__(2613), {types} = __webpack_require__(9023), ReadableStream = globalThis.ReadableStream || __webpack_require__(3774).ReadableStream, textEncoder = new TextEncoder("utf-8");
   class Response {
    static error() {
     const relevantRealm = {
      settingsObject: {}
     }, responseObject = new Response;
     return responseObject[kState] = makeNetworkError(), responseObject[kRealm] = relevantRealm, 
     responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList, responseObject[kHeaders][kGuard] = "immutable", 
     responseObject[kHeaders][kRealm] = relevantRealm, responseObject;
    }
    static json(data, init = {}) {
     webidl.argumentLengthCheck(arguments, 1, {
      header: "Response.json"
     }), null !== init && (init = webidl.converters.ResponseInit(init));
     const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data)), body = extractBody(bytes), relevantRealm = {
      settingsObject: {}
     }, responseObject = new Response;
     return responseObject[kRealm] = relevantRealm, responseObject[kHeaders][kGuard] = "response", 
     responseObject[kHeaders][kRealm] = relevantRealm, initializeResponse(responseObject, init, {
      body: body[0],
      type: "application/json"
     }), responseObject;
    }
    static redirect(url, status = 302) {
     const relevantRealm = {
      settingsObject: {}
     };
     let parsedURL;
     webidl.argumentLengthCheck(arguments, 1, {
      header: "Response.redirect"
     }), url = webidl.converters.USVString(url), status = webidl.converters["unsigned short"](status);
     try {
      parsedURL = new URL(url, getGlobalOrigin());
     } catch (err) {
      throw Object.assign(new TypeError("Failed to parse URL from " + url), {
       cause: err
      });
     }
     if (!redirectStatusSet.has(status)) throw new RangeError("Invalid status code " + status);
     const responseObject = new Response;
     responseObject[kRealm] = relevantRealm, responseObject[kHeaders][kGuard] = "immutable", 
     responseObject[kHeaders][kRealm] = relevantRealm, responseObject[kState].status = status;
     const value = isomorphicEncode(URLSerializer(parsedURL));
     return responseObject[kState].headersList.append("location", value), responseObject;
    }
    constructor(body = null, init = {}) {
     null !== body && (body = webidl.converters.BodyInit(body)), init = webidl.converters.ResponseInit(init), 
     this[kRealm] = {
      settingsObject: {}
     }, this[kState] = makeResponse({}), this[kHeaders] = new Headers(kConstruct), this[kHeaders][kGuard] = "response", 
     this[kHeaders][kHeadersList] = this[kState].headersList, this[kHeaders][kRealm] = this[kRealm];
     let bodyWithType = null;
     if (null != body) {
      const [extractedBody, type] = extractBody(body);
      bodyWithType = {
       body: extractedBody,
       type
      };
     }
     initializeResponse(this, init, bodyWithType);
    }
    get type() {
     return webidl.brandCheck(this, Response), this[kState].type;
    }
    get url() {
     webidl.brandCheck(this, Response);
     const urlList = this[kState].urlList, url = urlList[urlList.length - 1] ?? null;
     return null === url ? "" : URLSerializer(url, !0);
    }
    get redirected() {
     return webidl.brandCheck(this, Response), this[kState].urlList.length > 1;
    }
    get status() {
     return webidl.brandCheck(this, Response), this[kState].status;
    }
    get ok() {
     return webidl.brandCheck(this, Response), this[kState].status >= 200 && this[kState].status <= 299;
    }
    get statusText() {
     return webidl.brandCheck(this, Response), this[kState].statusText;
    }
    get headers() {
     return webidl.brandCheck(this, Response), this[kHeaders];
    }
    get body() {
     return webidl.brandCheck(this, Response), this[kState].body ? this[kState].body.stream : null;
    }
    get bodyUsed() {
     return webidl.brandCheck(this, Response), !!this[kState].body && util.isDisturbed(this[kState].body.stream);
    }
    clone() {
     if (webidl.brandCheck(this, Response), this.bodyUsed || this.body && this.body.locked) throw webidl.errors.exception({
      header: "Response.clone",
      message: "Body has already been consumed."
     });
     const clonedResponse = cloneResponse(this[kState]), clonedResponseObject = new Response;
     return clonedResponseObject[kState] = clonedResponse, clonedResponseObject[kRealm] = this[kRealm], 
     clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList, clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard], 
     clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm], clonedResponseObject;
    }
   }
   function cloneResponse(response) {
    if (response.internalResponse) return filterResponse(cloneResponse(response.internalResponse), response.type);
    const newResponse = makeResponse({
     ...response,
     body: null
    });
    return null != response.body && (newResponse.body = cloneBody(response.body)), newResponse;
   }
   function makeResponse(init) {
    return {
     aborted: !1,
     rangeRequested: !1,
     timingAllowPassed: !1,
     requestIncludesCredentials: !1,
     type: "default",
     status: 200,
     timingInfo: null,
     cacheState: "",
     statusText: "",
     ...init,
     headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList,
     urlList: init.urlList ? [ ...init.urlList ] : []
    };
   }
   function makeNetworkError(reason) {
    return makeResponse({
     type: "error",
     status: 0,
     error: isErrorLike(reason) ? reason : new Error(reason ? String(reason) : reason),
     aborted: reason && "AbortError" === reason.name
    });
   }
   function makeFilteredResponse(response, state) {
    return state = {
     internalResponse: response,
     ...state
    }, new Proxy(response, {
     get: (target, p) => p in state ? state[p] : target[p],
     set: (target, p, value) => (assert(!(p in state)), target[p] = value, !0)
    });
   }
   function filterResponse(response, type) {
    return "basic" === type ? makeFilteredResponse(response, {
     type: "basic",
     headersList: response.headersList
    }) : "cors" === type ? makeFilteredResponse(response, {
     type: "cors",
     headersList: response.headersList
    }) : "opaque" === type ? makeFilteredResponse(response, {
     type: "opaque",
     urlList: Object.freeze([]),
     status: 0,
     statusText: "",
     body: null
    }) : "opaqueredirect" === type ? makeFilteredResponse(response, {
     type: "opaqueredirect",
     status: 0,
     statusText: "",
     headersList: [],
     body: null
    }) : void assert(!1);
   }
   function initializeResponse(response, init, body) {
    if (null !== init.status && (init.status < 200 || init.status > 599)) throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
    if ("statusText" in init && null != init.statusText && !isValidReasonPhrase(String(init.statusText))) throw new TypeError("Invalid statusText");
    if ("status" in init && null != init.status && (response[kState].status = init.status), 
    "statusText" in init && null != init.statusText && (response[kState].statusText = init.statusText), 
    "headers" in init && null != init.headers && fill(response[kHeaders], init.headers), 
    body) {
     if (nullBodyStatus.includes(response.status)) throw webidl.errors.exception({
      header: "Response constructor",
      message: "Invalid response status code " + response.status
     });
     response[kState].body = body.body, null == body.type || response[kState].headersList.contains("Content-Type") || response[kState].headersList.append("content-type", body.type);
    }
   }
   mixinBody(Response), Object.defineProperties(Response.prototype, {
    type: kEnumerableProperty,
    url: kEnumerableProperty,
    status: kEnumerableProperty,
    ok: kEnumerableProperty,
    redirected: kEnumerableProperty,
    statusText: kEnumerableProperty,
    headers: kEnumerableProperty,
    clone: kEnumerableProperty,
    body: kEnumerableProperty,
    bodyUsed: kEnumerableProperty,
    [Symbol.toStringTag]: {
     value: "Response",
     configurable: !0
    }
   }), Object.defineProperties(Response, {
    json: kEnumerableProperty,
    redirect: kEnumerableProperty,
    error: kEnumerableProperty
   }), webidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream), 
   webidl.converters.FormData = webidl.interfaceConverter(FormData), webidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams), 
   webidl.converters.XMLHttpRequestBodyInit = function(V) {
    return "string" == typeof V ? webidl.converters.USVString(V) : isBlobLike(V) ? webidl.converters.Blob(V, {
     strict: !1
    }) : types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V) ? webidl.converters.BufferSource(V) : util.isFormDataLike(V) ? webidl.converters.FormData(V, {
     strict: !1
    }) : V instanceof URLSearchParams ? webidl.converters.URLSearchParams(V) : webidl.converters.DOMString(V);
   }, webidl.converters.BodyInit = function(V) {
    return V instanceof ReadableStream ? webidl.converters.ReadableStream(V) : V?.[Symbol.asyncIterator] ? V : webidl.converters.XMLHttpRequestBodyInit(V);
   }, webidl.converters.ResponseInit = webidl.dictionaryConverter([ {
    key: "status",
    converter: webidl.converters["unsigned short"],
    defaultValue: 200
   }, {
    key: "statusText",
    converter: webidl.converters.ByteString,
    defaultValue: ""
   }, {
    key: "headers",
    converter: webidl.converters.HeadersInit
   } ]), module.exports = {
    makeNetworkError,
    makeResponse,
    makeAppropriateNetworkError: function(fetchParams, err = null) {
     return assert(isCancelled(fetchParams)), isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException("The operation was aborted.", "AbortError"), {
      cause: err
     })) : makeNetworkError(Object.assign(new DOMException("Request was cancelled."), {
      cause: err
     }));
    },
    filterResponse,
    Response,
    cloneResponse
   };
  },
  9415: module => {
   "use strict";
   module.exports = {
    kUrl: Symbol("url"),
    kHeaders: Symbol("headers"),
    kSignal: Symbol("signal"),
    kState: Symbol("state"),
    kGuard: Symbol("guard"),
    kRealm: Symbol("realm")
   };
  },
  8292: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet} = __webpack_require__(3771), {getGlobalOrigin} = __webpack_require__(6367), {performance} = __webpack_require__(2987), {isBlobLike, toUSVString, ReadableStreamFrom} = __webpack_require__(8869), assert = __webpack_require__(2613), {isUint8Array} = __webpack_require__(8253);
   let crypto, supportedHashes = [];
   try {
    crypto = __webpack_require__(6982);
    const possibleRelevantHashes = [ "sha256", "sha384", "sha512" ];
    supportedHashes = crypto.getHashes().filter((hash => possibleRelevantHashes.includes(hash)));
   } catch {}
   function responseURL(response) {
    const urlList = response.urlList, length = urlList.length;
    return 0 === length ? null : urlList[length - 1].toString();
   }
   function requestCurrentURL(request) {
    return request.urlList[request.urlList.length - 1];
   }
   function isTokenCharCode(c) {
    switch (c) {
    case 34:
    case 40:
    case 41:
    case 44:
    case 47:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 91:
    case 92:
    case 93:
    case 123:
    case 125:
     return !1;

    default:
     return c >= 33 && c <= 126;
    }
   }
   function isValidHTTPToken(characters) {
    if (0 === characters.length) return !1;
    for (let i = 0; i < characters.length; ++i) if (!isTokenCharCode(characters.charCodeAt(i))) return !1;
    return !0;
   }
   function isValidHeaderValue(potentialValue) {
    return !(potentialValue.startsWith("\t") || potentialValue.startsWith(" ") || potentialValue.endsWith("\t") || potentialValue.endsWith(" ")) && !(potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n"));
   }
   function stripURLForReferrer(url, originOnly) {
    return assert(url instanceof URL), "file:" === url.protocol || "about:" === url.protocol || "blank:" === url.protocol ? "no-referrer" : (url.username = "", 
    url.password = "", url.hash = "", originOnly && (url.pathname = "", url.search = ""), 
    url);
   }
   function isURLPotentiallyTrustworthy(url) {
    return url instanceof URL && ("about:blank" === url.href || "about:srcdoc" === url.href || ("data:" === url.protocol || ("file:" === url.protocol || function(origin) {
     if (null == origin || "null" === origin) return !1;
     const originAsURL = new URL(origin);
     if ("https:" === originAsURL.protocol || "wss:" === originAsURL.protocol) return !0;
     if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || "localhost" === originAsURL.hostname || originAsURL.hostname.includes("localhost.") || originAsURL.hostname.endsWith(".localhost")) return !0;
     return !1;
    }(url.origin))));
   }
   const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
   function parseMetadata(metadata) {
    const result = [];
    let empty = !0;
    for (const token of metadata.split(" ")) {
     empty = !1;
     const parsedToken = parseHashWithOptions.exec(token);
     if (null === parsedToken || void 0 === parsedToken.groups || void 0 === parsedToken.groups.algo) continue;
     const algorithm = parsedToken.groups.algo.toLowerCase();
     supportedHashes.includes(algorithm) && result.push(parsedToken.groups);
    }
    return !0 === empty ? "no metadata" : result;
   }
   function compareBase64Mixed(actualValue, expectedValue) {
    if (actualValue.length !== expectedValue.length) return !1;
    for (let i = 0; i < actualValue.length; ++i) if (actualValue[i] !== expectedValue[i]) {
     if ("+" === actualValue[i] && "-" === expectedValue[i] || "/" === actualValue[i] && "_" === expectedValue[i]) continue;
     return !1;
    }
    return !0;
   }
   function sameOrigin(A, B) {
    return A.origin === B.origin && "null" === A.origin || A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port;
   }
   const normalizeMethodRecord = {
    delete: "DELETE",
    DELETE: "DELETE",
    get: "GET",
    GET: "GET",
    head: "HEAD",
    HEAD: "HEAD",
    options: "OPTIONS",
    OPTIONS: "OPTIONS",
    post: "POST",
    POST: "POST",
    put: "PUT",
    PUT: "PUT"
   };
   Object.setPrototypeOf(normalizeMethodRecord, null);
   const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
   let ReadableStream = globalThis.ReadableStream;
   async function readAllBytes(reader) {
    const bytes = [];
    let byteLength = 0;
    for (;;) {
     const {done, value: chunk} = await reader.read();
     if (done) return Buffer.concat(bytes, byteLength);
     if (!isUint8Array(chunk)) throw new TypeError("Received non-Uint8Array chunk");
     bytes.push(chunk), byteLength += chunk.length;
    }
   }
   function urlHasHttpsScheme(url) {
    return "string" == typeof url ? url.startsWith("https:") : "https:" === url.protocol;
   }
   function urlIsHttpHttpsScheme(url) {
    assert("protocol" in url);
    const protocol = url.protocol;
    return "http:" === protocol || "https:" === protocol;
   }
   const hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
   module.exports = {
    isAborted: function(fetchParams) {
     return "aborted" === fetchParams.controller.state;
    },
    isCancelled: function(fetchParams) {
     return "aborted" === fetchParams.controller.state || "terminated" === fetchParams.controller.state;
    },
    createDeferredPromise: function() {
     let res, rej;
     return {
      promise: new Promise(((resolve, reject) => {
       res = resolve, rej = reject;
      })),
      resolve: res,
      reject: rej
     };
    },
    ReadableStreamFrom,
    toUSVString,
    tryUpgradeRequestToAPotentiallyTrustworthyURL: function(request) {},
    coarsenedSharedCurrentTime: function(crossOriginIsolatedCapability) {
     return performance.now();
    },
    determineRequestsReferrer: function(request) {
     const policy = request.referrerPolicy;
     assert(policy);
     let referrerSource = null;
     if ("client" === request.referrer) {
      const globalOrigin = getGlobalOrigin();
      if (!globalOrigin || "null" === globalOrigin.origin) return "no-referrer";
      referrerSource = new URL(globalOrigin);
     } else request.referrer instanceof URL && (referrerSource = request.referrer);
     let referrerURL = stripURLForReferrer(referrerSource);
     const referrerOrigin = stripURLForReferrer(referrerSource, !0);
     referrerURL.toString().length > 4096 && (referrerURL = referrerOrigin);
     const areSameOrigin = sameOrigin(request, referrerURL), isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);
     switch (policy) {
     case "origin":
      return null != referrerOrigin ? referrerOrigin : stripURLForReferrer(referrerSource, !0);

     case "unsafe-url":
      return referrerURL;

     case "same-origin":
      return areSameOrigin ? referrerOrigin : "no-referrer";

     case "origin-when-cross-origin":
      return areSameOrigin ? referrerURL : referrerOrigin;

     case "strict-origin-when-cross-origin":
      {
       const currentURL = requestCurrentURL(request);
       return sameOrigin(referrerURL, currentURL) ? referrerURL : isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL) ? "no-referrer" : referrerOrigin;
      }

     default:
      return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
     }
    },
    makePolicyContainer: function() {
     return {
      referrerPolicy: "strict-origin-when-cross-origin"
     };
    },
    clonePolicyContainer: function(policyContainer) {
     return {
      referrerPolicy: policyContainer.referrerPolicy
     };
    },
    appendFetchMetadata: function(httpRequest) {
     let header = null;
     header = httpRequest.mode, httpRequest.headersList.set("sec-fetch-mode", header);
    },
    appendRequestOriginHeader: function(request) {
     let serializedOrigin = request.origin;
     if ("cors" === request.responseTainting || "websocket" === request.mode) serializedOrigin && request.headersList.append("origin", serializedOrigin); else if ("GET" !== request.method && "HEAD" !== request.method) {
      switch (request.referrerPolicy) {
      case "no-referrer":
       serializedOrigin = null;
       break;

      case "no-referrer-when-downgrade":
      case "strict-origin":
      case "strict-origin-when-cross-origin":
       request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request)) && (serializedOrigin = null);
       break;

      case "same-origin":
       sameOrigin(request, requestCurrentURL(request)) || (serializedOrigin = null);
      }
      serializedOrigin && request.headersList.append("origin", serializedOrigin);
     }
    },
    TAOCheck: function() {
     return "success";
    },
    corsCheck: function() {
     return "success";
    },
    crossOriginResourcePolicyCheck: function() {
     return "allowed";
    },
    createOpaqueTimingInfo: function(timingInfo) {
     return {
      startTime: timingInfo.startTime ?? 0,
      redirectStartTime: 0,
      redirectEndTime: 0,
      postRedirectStartTime: timingInfo.startTime ?? 0,
      finalServiceWorkerStartTime: 0,
      finalNetworkResponseStartTime: 0,
      finalNetworkRequestStartTime: 0,
      endTime: 0,
      encodedBodySize: 0,
      decodedBodySize: 0,
      finalConnectionTimingInfo: null
     };
    },
    setRequestReferrerPolicyOnRedirect: function(request, actualResponse) {
     const {headersList} = actualResponse, policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
     let policy = "";
     if (policyHeader.length > 0) for (let i = policyHeader.length; 0 !== i; i--) {
      const token = policyHeader[i - 1].trim();
      if (referrerPolicyTokens.has(token)) {
       policy = token;
       break;
      }
     }
     "" !== policy && (request.referrerPolicy = policy);
    },
    isValidHTTPToken,
    requestBadPort: function(request) {
     const url = requestCurrentURL(request);
     return urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port) ? "blocked" : "allowed";
    },
    requestCurrentURL,
    responseURL,
    responseLocationURL: function(response, requestFragment) {
     if (!redirectStatusSet.has(response.status)) return null;
     let location = response.headersList.get("location");
     return null !== location && isValidHeaderValue(location) && (location = new URL(location, responseURL(response))), 
     location && !location.hash && (location.hash = requestFragment), location;
    },
    isBlobLike,
    isURLPotentiallyTrustworthy,
    isValidReasonPhrase: function(statusText) {
     for (let i = 0; i < statusText.length; ++i) {
      const c = statusText.charCodeAt(i);
      if (!(9 === c || c >= 32 && c <= 126 || c >= 128 && c <= 255)) return !1;
     }
     return !0;
    },
    sameOrigin,
    normalizeMethod: function(method) {
     return normalizeMethodRecord[method.toLowerCase()] ?? method;
    },
    serializeJavascriptValueToJSONString: function(value) {
     const result = JSON.stringify(value);
     if (void 0 === result) throw new TypeError("Value is not JSON serializable");
     return assert("string" == typeof result), result;
    },
    makeIterator: function(iterator, name, kind) {
     const object = {
      index: 0,
      kind,
      target: iterator
     }, i = {
      next() {
       if (Object.getPrototypeOf(this) !== i) throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
       const {index, kind, target} = object, values = target();
       if (index >= values.length) return {
        value: void 0,
        done: !0
       };
       const pair = values[index];
       return object.index = index + 1, function(pair, kind) {
        let result;
        switch (kind) {
        case "key":
         result = pair[0];
         break;

        case "value":
         result = pair[1];
         break;

        case "key+value":
         result = pair;
        }
        return {
         value: result,
         done: !1
        };
       }(pair, kind);
      },
      [Symbol.toStringTag]: `${name} Iterator`
     };
     return Object.setPrototypeOf(i, esIteratorPrototype), Object.setPrototypeOf({}, i);
    },
    isValidHeaderName: function(potentialValue) {
     return isValidHTTPToken(potentialValue);
    },
    isValidHeaderValue,
    hasOwn,
    isErrorLike: function(object) {
     return object instanceof Error || "Error" === object?.constructor?.name || "DOMException" === object?.constructor?.name;
    },
    fullyReadBody: async function(body, processBody, processBodyError) {
     const successSteps = processBody, errorSteps = processBodyError;
     let reader;
     try {
      reader = body.stream.getReader();
     } catch (e) {
      return void errorSteps(e);
     }
     try {
      successSteps(await readAllBytes(reader));
     } catch (e) {
      errorSteps(e);
     }
    },
    bytesMatch: function(bytes, metadataList) {
     if (void 0 === crypto) return !0;
     const parsedMetadata = parseMetadata(metadataList);
     if ("no metadata" === parsedMetadata) return !0;
     if (0 === parsedMetadata.length) return !0;
     const strongest = function(metadataList) {
      let algorithm = metadataList[0].algo;
      if ("5" === algorithm[3]) return algorithm;
      for (let i = 1; i < metadataList.length; ++i) {
       const metadata = metadataList[i];
       if ("5" === metadata.algo[3]) {
        algorithm = "sha512";
        break;
       }
       "3" !== algorithm[3] && ("3" === metadata.algo[3] && (algorithm = "sha384"));
      }
      return algorithm;
     }(parsedMetadata), metadata = function(metadataList, algorithm) {
      if (1 === metadataList.length) return metadataList;
      let pos = 0;
      for (let i = 0; i < metadataList.length; ++i) metadataList[i].algo === algorithm && (metadataList[pos++] = metadataList[i]);
      return metadataList.length = pos, metadataList;
     }(parsedMetadata, strongest);
     for (const item of metadata) {
      const algorithm = item.algo, expectedValue = item.hash;
      let actualValue = crypto.createHash(algorithm).update(bytes).digest("base64");
      if ("=" === actualValue[actualValue.length - 1] && (actualValue = "=" === actualValue[actualValue.length - 2] ? actualValue.slice(0, -2) : actualValue.slice(0, -1)), 
      compareBase64Mixed(actualValue, expectedValue)) return !0;
     }
     return !1;
    },
    isReadableStreamLike: function(stream) {
     return ReadableStream || (ReadableStream = __webpack_require__(3774).ReadableStream), 
     stream instanceof ReadableStream || "ReadableStream" === stream[Symbol.toStringTag] && "function" == typeof stream.tee;
    },
    readableStreamClose: function(controller) {
     try {
      controller.close();
     } catch (err) {
      if (!err.message.includes("Controller is already closed")) throw err;
     }
    },
    isomorphicEncode: function(input) {
     for (let i = 0; i < input.length; i++) assert(input.charCodeAt(i) <= 255);
     return input;
    },
    isomorphicDecode: function(input) {
     return input.length < 65535 ? String.fromCharCode(...input) : input.reduce(((previous, current) => previous + String.fromCharCode(current)), "");
    },
    urlIsLocal: function(url) {
     assert("protocol" in url);
     const protocol = url.protocol;
     return "about:" === protocol || "blob:" === protocol || "data:" === protocol;
    },
    urlHasHttpsScheme,
    urlIsHttpHttpsScheme,
    readAllBytes,
    normalizeMethodRecord,
    parseMetadata
   };
  },
  769: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {types} = __webpack_require__(9023), {hasOwn, toUSVString} = __webpack_require__(8292), webidl = {
    converters: {},
    util: {},
    errors: {}
   };
   webidl.errors.exception = function(message) {
    return new TypeError(`${message.header}: ${message.message}`);
   }, webidl.errors.conversionFailed = function(context) {
    const plural = 1 === context.types.length ? "" : " one of", message = `${context.argument} could not be converted to${plural}: ${context.types.join(", ")}.`;
    return webidl.errors.exception({
     header: context.prefix,
     message
    });
   }, webidl.errors.invalidArgument = function(context) {
    return webidl.errors.exception({
     header: context.prefix,
     message: `"${context.value}" is an invalid ${context.type}.`
    });
   }, webidl.brandCheck = function(V, I, opts = void 0) {
    if (!1 === opts?.strict || V instanceof I) return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
    throw new TypeError("Illegal invocation");
   }, webidl.argumentLengthCheck = function({length}, min, ctx) {
    if (length < min) throw webidl.errors.exception({
     message: `${min} argument${1 !== min ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
     ...ctx
    });
   }, webidl.illegalConstructor = function() {
    throw webidl.errors.exception({
     header: "TypeError",
     message: "Illegal constructor"
    });
   }, webidl.util.Type = function(V) {
    switch (typeof V) {
    case "undefined":
     return "Undefined";

    case "boolean":
     return "Boolean";

    case "string":
     return "String";

    case "symbol":
     return "Symbol";

    case "number":
     return "Number";

    case "bigint":
     return "BigInt";

    case "function":
    case "object":
     return null === V ? "Null" : "Object";
    }
   }, webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
    let upperBound, lowerBound;
    64 === bitLength ? (upperBound = Math.pow(2, 53) - 1, lowerBound = "unsigned" === signedness ? 0 : Math.pow(-2, 53) + 1) : "unsigned" === signedness ? (lowerBound = 0, 
    upperBound = Math.pow(2, bitLength) - 1) : (lowerBound = Math.pow(-2, bitLength) - 1, 
    upperBound = Math.pow(2, bitLength - 1) - 1);
    let x = Number(V);
    if (0 === x && (x = 0), !0 === opts.enforceRange) {
     if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) throw webidl.errors.exception({
      header: "Integer conversion",
      message: `Could not convert ${V} to an integer.`
     });
     if (x = webidl.util.IntegerPart(x), x < lowerBound || x > upperBound) throw webidl.errors.exception({
      header: "Integer conversion",
      message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
     });
     return x;
    }
    return Number.isNaN(x) || !0 !== opts.clamp ? Number.isNaN(x) || 0 === x && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY ? 0 : (x = webidl.util.IntegerPart(x), 
    x %= Math.pow(2, bitLength), "signed" === signedness && x >= Math.pow(2, bitLength) - 1 ? x - Math.pow(2, bitLength) : x) : (x = Math.min(Math.max(x, lowerBound), upperBound), 
    x = Math.floor(x) % 2 == 0 ? Math.floor(x) : Math.ceil(x), x);
   }, webidl.util.IntegerPart = function(n) {
    const r = Math.floor(Math.abs(n));
    return n < 0 ? -1 * r : r;
   }, webidl.sequenceConverter = function(converter) {
    return V => {
     if ("Object" !== webidl.util.Type(V)) throw webidl.errors.exception({
      header: "Sequence",
      message: `Value of type ${webidl.util.Type(V)} is not an Object.`
     });
     const method = V?.[Symbol.iterator]?.(), seq = [];
     if (void 0 === method || "function" != typeof method.next) throw webidl.errors.exception({
      header: "Sequence",
      message: "Object is not an iterator."
     });
     for (;;) {
      const {done, value} = method.next();
      if (done) break;
      seq.push(converter(value));
     }
     return seq;
    };
   }, webidl.recordConverter = function(keyConverter, valueConverter) {
    return O => {
     if ("Object" !== webidl.util.Type(O)) throw webidl.errors.exception({
      header: "Record",
      message: `Value of type ${webidl.util.Type(O)} is not an Object.`
     });
     const result = {};
     if (!types.isProxy(O)) {
      const keys = Object.keys(O);
      for (const key of keys) {
       const typedKey = keyConverter(key), typedValue = valueConverter(O[key]);
       result[typedKey] = typedValue;
      }
      return result;
     }
     const keys = Reflect.ownKeys(O);
     for (const key of keys) {
      const desc = Reflect.getOwnPropertyDescriptor(O, key);
      if (desc?.enumerable) {
       const typedKey = keyConverter(key), typedValue = valueConverter(O[key]);
       result[typedKey] = typedValue;
      }
     }
     return result;
    };
   }, webidl.interfaceConverter = function(i) {
    return (V, opts = {}) => {
     if (!1 !== opts.strict && !(V instanceof i)) throw webidl.errors.exception({
      header: i.name,
      message: `Expected ${V} to be an instance of ${i.name}.`
     });
     return V;
    };
   }, webidl.dictionaryConverter = function(converters) {
    return dictionary => {
     const type = webidl.util.Type(dictionary), dict = {};
     if ("Null" === type || "Undefined" === type) return dict;
     if ("Object" !== type) throw webidl.errors.exception({
      header: "Dictionary",
      message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
     });
     for (const options of converters) {
      const {key, defaultValue, required, converter} = options;
      if (!0 === required && !hasOwn(dictionary, key)) throw webidl.errors.exception({
       header: "Dictionary",
       message: `Missing required key "${key}".`
      });
      let value = dictionary[key];
      const hasDefault = hasOwn(options, "defaultValue");
      if (hasDefault && null !== value && (value = value ?? defaultValue), required || hasDefault || void 0 !== value) {
       if (value = converter(value), options.allowedValues && !options.allowedValues.includes(value)) throw webidl.errors.exception({
        header: "Dictionary",
        message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
       });
       dict[key] = value;
      }
     }
     return dict;
    };
   }, webidl.nullableConverter = function(converter) {
    return V => null === V ? V : converter(V);
   }, webidl.converters.DOMString = function(V, opts = {}) {
    if (null === V && opts.legacyNullToEmptyString) return "";
    if ("symbol" == typeof V) throw new TypeError("Could not convert argument of type symbol to string.");
    return String(V);
   }, webidl.converters.ByteString = function(V) {
    const x = webidl.converters.DOMString(V);
    for (let index = 0; index < x.length; index++) if (x.charCodeAt(index) > 255) throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);
    return x;
   }, webidl.converters.USVString = toUSVString, webidl.converters.boolean = function(V) {
    return Boolean(V);
   }, webidl.converters.any = function(V) {
    return V;
   }, webidl.converters["long long"] = function(V) {
    return webidl.util.ConvertToInt(V, 64, "signed");
   }, webidl.converters["unsigned long long"] = function(V) {
    return webidl.util.ConvertToInt(V, 64, "unsigned");
   }, webidl.converters["unsigned long"] = function(V) {
    return webidl.util.ConvertToInt(V, 32, "unsigned");
   }, webidl.converters["unsigned short"] = function(V, opts) {
    return webidl.util.ConvertToInt(V, 16, "unsigned", opts);
   }, webidl.converters.ArrayBuffer = function(V, opts = {}) {
    if ("Object" !== webidl.util.Type(V) || !types.isAnyArrayBuffer(V)) throw webidl.errors.conversionFailed({
     prefix: `${V}`,
     argument: `${V}`,
     types: [ "ArrayBuffer" ]
    });
    if (!1 === opts.allowShared && types.isSharedArrayBuffer(V)) throw webidl.errors.exception({
     header: "ArrayBuffer",
     message: "SharedArrayBuffer is not allowed."
    });
    return V;
   }, webidl.converters.TypedArray = function(V, T, opts = {}) {
    if ("Object" !== webidl.util.Type(V) || !types.isTypedArray(V) || V.constructor.name !== T.name) throw webidl.errors.conversionFailed({
     prefix: `${T.name}`,
     argument: `${V}`,
     types: [ T.name ]
    });
    if (!1 === opts.allowShared && types.isSharedArrayBuffer(V.buffer)) throw webidl.errors.exception({
     header: "ArrayBuffer",
     message: "SharedArrayBuffer is not allowed."
    });
    return V;
   }, webidl.converters.DataView = function(V, opts = {}) {
    if ("Object" !== webidl.util.Type(V) || !types.isDataView(V)) throw webidl.errors.exception({
     header: "DataView",
     message: "Object is not a DataView."
    });
    if (!1 === opts.allowShared && types.isSharedArrayBuffer(V.buffer)) throw webidl.errors.exception({
     header: "ArrayBuffer",
     message: "SharedArrayBuffer is not allowed."
    });
    return V;
   }, webidl.converters.BufferSource = function(V, opts = {}) {
    if (types.isAnyArrayBuffer(V)) return webidl.converters.ArrayBuffer(V, opts);
    if (types.isTypedArray(V)) return webidl.converters.TypedArray(V, V.constructor);
    if (types.isDataView(V)) return webidl.converters.DataView(V, opts);
    throw new TypeError(`Could not convert ${V} to a BufferSource.`);
   }, webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(webidl.converters.ByteString), 
   webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(webidl.converters["sequence<ByteString>"]), 
   webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString), 
   module.exports = {
    webidl
   };
  },
  3435: module => {
   "use strict";
   module.exports = {
    getEncoding: function(label) {
     if (!label) return "failure";
     switch (label.trim().toLowerCase()) {
     case "unicode-1-1-utf-8":
     case "unicode11utf8":
     case "unicode20utf8":
     case "utf-8":
     case "utf8":
     case "x-unicode20utf8":
      return "UTF-8";

     case "866":
     case "cp866":
     case "csibm866":
     case "ibm866":
      return "IBM866";

     case "csisolatin2":
     case "iso-8859-2":
     case "iso-ir-101":
     case "iso8859-2":
     case "iso88592":
     case "iso_8859-2":
     case "iso_8859-2:1987":
     case "l2":
     case "latin2":
      return "ISO-8859-2";

     case "csisolatin3":
     case "iso-8859-3":
     case "iso-ir-109":
     case "iso8859-3":
     case "iso88593":
     case "iso_8859-3":
     case "iso_8859-3:1988":
     case "l3":
     case "latin3":
      return "ISO-8859-3";

     case "csisolatin4":
     case "iso-8859-4":
     case "iso-ir-110":
     case "iso8859-4":
     case "iso88594":
     case "iso_8859-4":
     case "iso_8859-4:1988":
     case "l4":
     case "latin4":
      return "ISO-8859-4";

     case "csisolatincyrillic":
     case "cyrillic":
     case "iso-8859-5":
     case "iso-ir-144":
     case "iso8859-5":
     case "iso88595":
     case "iso_8859-5":
     case "iso_8859-5:1988":
      return "ISO-8859-5";

     case "arabic":
     case "asmo-708":
     case "csiso88596e":
     case "csiso88596i":
     case "csisolatinarabic":
     case "ecma-114":
     case "iso-8859-6":
     case "iso-8859-6-e":
     case "iso-8859-6-i":
     case "iso-ir-127":
     case "iso8859-6":
     case "iso88596":
     case "iso_8859-6":
     case "iso_8859-6:1987":
      return "ISO-8859-6";

     case "csisolatingreek":
     case "ecma-118":
     case "elot_928":
     case "greek":
     case "greek8":
     case "iso-8859-7":
     case "iso-ir-126":
     case "iso8859-7":
     case "iso88597":
     case "iso_8859-7":
     case "iso_8859-7:1987":
     case "sun_eu_greek":
      return "ISO-8859-7";

     case "csiso88598e":
     case "csisolatinhebrew":
     case "hebrew":
     case "iso-8859-8":
     case "iso-8859-8-e":
     case "iso-ir-138":
     case "iso8859-8":
     case "iso88598":
     case "iso_8859-8":
     case "iso_8859-8:1988":
     case "visual":
      return "ISO-8859-8";

     case "csiso88598i":
     case "iso-8859-8-i":
     case "logical":
      return "ISO-8859-8-I";

     case "csisolatin6":
     case "iso-8859-10":
     case "iso-ir-157":
     case "iso8859-10":
     case "iso885910":
     case "l6":
     case "latin6":
      return "ISO-8859-10";

     case "iso-8859-13":
     case "iso8859-13":
     case "iso885913":
      return "ISO-8859-13";

     case "iso-8859-14":
     case "iso8859-14":
     case "iso885914":
      return "ISO-8859-14";

     case "csisolatin9":
     case "iso-8859-15":
     case "iso8859-15":
     case "iso885915":
     case "iso_8859-15":
     case "l9":
      return "ISO-8859-15";

     case "iso-8859-16":
      return "ISO-8859-16";

     case "cskoi8r":
     case "koi":
     case "koi8":
     case "koi8-r":
     case "koi8_r":
      return "KOI8-R";

     case "koi8-ru":
     case "koi8-u":
      return "KOI8-U";

     case "csmacintosh":
     case "mac":
     case "macintosh":
     case "x-mac-roman":
      return "macintosh";

     case "iso-8859-11":
     case "iso8859-11":
     case "iso885911":
     case "tis-620":
     case "windows-874":
      return "windows-874";

     case "cp1250":
     case "windows-1250":
     case "x-cp1250":
      return "windows-1250";

     case "cp1251":
     case "windows-1251":
     case "x-cp1251":
      return "windows-1251";

     case "ansi_x3.4-1968":
     case "ascii":
     case "cp1252":
     case "cp819":
     case "csisolatin1":
     case "ibm819":
     case "iso-8859-1":
     case "iso-ir-100":
     case "iso8859-1":
     case "iso88591":
     case "iso_8859-1":
     case "iso_8859-1:1987":
     case "l1":
     case "latin1":
     case "us-ascii":
     case "windows-1252":
     case "x-cp1252":
      return "windows-1252";

     case "cp1253":
     case "windows-1253":
     case "x-cp1253":
      return "windows-1253";

     case "cp1254":
     case "csisolatin5":
     case "iso-8859-9":
     case "iso-ir-148":
     case "iso8859-9":
     case "iso88599":
     case "iso_8859-9":
     case "iso_8859-9:1989":
     case "l5":
     case "latin5":
     case "windows-1254":
     case "x-cp1254":
      return "windows-1254";

     case "cp1255":
     case "windows-1255":
     case "x-cp1255":
      return "windows-1255";

     case "cp1256":
     case "windows-1256":
     case "x-cp1256":
      return "windows-1256";

     case "cp1257":
     case "windows-1257":
     case "x-cp1257":
      return "windows-1257";

     case "cp1258":
     case "windows-1258":
     case "x-cp1258":
      return "windows-1258";

     case "x-mac-cyrillic":
     case "x-mac-ukrainian":
      return "x-mac-cyrillic";

     case "chinese":
     case "csgb2312":
     case "csiso58gb231280":
     case "gb2312":
     case "gb_2312":
     case "gb_2312-80":
     case "gbk":
     case "iso-ir-58":
     case "x-gbk":
      return "GBK";

     case "gb18030":
      return "gb18030";

     case "big5":
     case "big5-hkscs":
     case "cn-big5":
     case "csbig5":
     case "x-x-big5":
      return "Big5";

     case "cseucpkdfmtjapanese":
     case "euc-jp":
     case "x-euc-jp":
      return "EUC-JP";

     case "csiso2022jp":
     case "iso-2022-jp":
      return "ISO-2022-JP";

     case "csshiftjis":
     case "ms932":
     case "ms_kanji":
     case "shift-jis":
     case "shift_jis":
     case "sjis":
     case "windows-31j":
     case "x-sjis":
      return "Shift_JIS";

     case "cseuckr":
     case "csksc56011987":
     case "euc-kr":
     case "iso-ir-149":
     case "korean":
     case "ks_c_5601-1987":
     case "ks_c_5601-1989":
     case "ksc5601":
     case "ksc_5601":
     case "windows-949":
      return "EUC-KR";

     case "csiso2022kr":
     case "hz-gb-2312":
     case "iso-2022-cn":
     case "iso-2022-cn-ext":
     case "iso-2022-kr":
     case "replacement":
      return "replacement";

     case "unicodefffe":
     case "utf-16be":
      return "UTF-16BE";

     case "csunicode":
     case "iso-10646-ucs-2":
     case "ucs-2":
     case "unicode":
     case "unicodefeff":
     case "utf-16":
     case "utf-16le":
      return "UTF-16LE";

     case "x-user-defined":
      return "x-user-defined";

     default:
      return "failure";
     }
    }
   };
  },
  2495: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {staticPropertyDescriptors, readOperation, fireAProgressEvent} = __webpack_require__(2398), {kState, kError, kResult, kEvents, kAborted} = __webpack_require__(2077), {webidl} = __webpack_require__(769), {kEnumerableProperty} = __webpack_require__(8869);
   class FileReader extends EventTarget {
    constructor() {
     super(), this[kState] = "empty", this[kResult] = null, this[kError] = null, this[kEvents] = {
      loadend: null,
      error: null,
      abort: null,
      load: null,
      progress: null,
      loadstart: null
     };
    }
    readAsArrayBuffer(blob) {
     webidl.brandCheck(this, FileReader), webidl.argumentLengthCheck(arguments, 1, {
      header: "FileReader.readAsArrayBuffer"
     }), blob = webidl.converters.Blob(blob, {
      strict: !1
     }), readOperation(this, blob, "ArrayBuffer");
    }
    readAsBinaryString(blob) {
     webidl.brandCheck(this, FileReader), webidl.argumentLengthCheck(arguments, 1, {
      header: "FileReader.readAsBinaryString"
     }), blob = webidl.converters.Blob(blob, {
      strict: !1
     }), readOperation(this, blob, "BinaryString");
    }
    readAsText(blob, encoding = void 0) {
     webidl.brandCheck(this, FileReader), webidl.argumentLengthCheck(arguments, 1, {
      header: "FileReader.readAsText"
     }), blob = webidl.converters.Blob(blob, {
      strict: !1
     }), void 0 !== encoding && (encoding = webidl.converters.DOMString(encoding)), readOperation(this, blob, "Text", encoding);
    }
    readAsDataURL(blob) {
     webidl.brandCheck(this, FileReader), webidl.argumentLengthCheck(arguments, 1, {
      header: "FileReader.readAsDataURL"
     }), blob = webidl.converters.Blob(blob, {
      strict: !1
     }), readOperation(this, blob, "DataURL");
    }
    abort() {
     "empty" !== this[kState] && "done" !== this[kState] ? ("loading" === this[kState] && (this[kState] = "done", 
     this[kResult] = null), this[kAborted] = !0, fireAProgressEvent("abort", this), "loading" !== this[kState] && fireAProgressEvent("loadend", this)) : this[kResult] = null;
    }
    get readyState() {
     switch (webidl.brandCheck(this, FileReader), this[kState]) {
     case "empty":
      return this.EMPTY;

     case "loading":
      return this.LOADING;

     case "done":
      return this.DONE;
     }
    }
    get result() {
     return webidl.brandCheck(this, FileReader), this[kResult];
    }
    get error() {
     return webidl.brandCheck(this, FileReader), this[kError];
    }
    get onloadend() {
     return webidl.brandCheck(this, FileReader), this[kEvents].loadend;
    }
    set onloadend(fn) {
     webidl.brandCheck(this, FileReader), this[kEvents].loadend && this.removeEventListener("loadend", this[kEvents].loadend), 
     "function" == typeof fn ? (this[kEvents].loadend = fn, this.addEventListener("loadend", fn)) : this[kEvents].loadend = null;
    }
    get onerror() {
     return webidl.brandCheck(this, FileReader), this[kEvents].error;
    }
    set onerror(fn) {
     webidl.brandCheck(this, FileReader), this[kEvents].error && this.removeEventListener("error", this[kEvents].error), 
     "function" == typeof fn ? (this[kEvents].error = fn, this.addEventListener("error", fn)) : this[kEvents].error = null;
    }
    get onloadstart() {
     return webidl.brandCheck(this, FileReader), this[kEvents].loadstart;
    }
    set onloadstart(fn) {
     webidl.brandCheck(this, FileReader), this[kEvents].loadstart && this.removeEventListener("loadstart", this[kEvents].loadstart), 
     "function" == typeof fn ? (this[kEvents].loadstart = fn, this.addEventListener("loadstart", fn)) : this[kEvents].loadstart = null;
    }
    get onprogress() {
     return webidl.brandCheck(this, FileReader), this[kEvents].progress;
    }
    set onprogress(fn) {
     webidl.brandCheck(this, FileReader), this[kEvents].progress && this.removeEventListener("progress", this[kEvents].progress), 
     "function" == typeof fn ? (this[kEvents].progress = fn, this.addEventListener("progress", fn)) : this[kEvents].progress = null;
    }
    get onload() {
     return webidl.brandCheck(this, FileReader), this[kEvents].load;
    }
    set onload(fn) {
     webidl.brandCheck(this, FileReader), this[kEvents].load && this.removeEventListener("load", this[kEvents].load), 
     "function" == typeof fn ? (this[kEvents].load = fn, this.addEventListener("load", fn)) : this[kEvents].load = null;
    }
    get onabort() {
     return webidl.brandCheck(this, FileReader), this[kEvents].abort;
    }
    set onabort(fn) {
     webidl.brandCheck(this, FileReader), this[kEvents].abort && this.removeEventListener("abort", this[kEvents].abort), 
     "function" == typeof fn ? (this[kEvents].abort = fn, this.addEventListener("abort", fn)) : this[kEvents].abort = null;
    }
   }
   FileReader.EMPTY = FileReader.prototype.EMPTY = 0, FileReader.LOADING = FileReader.prototype.LOADING = 1, 
   FileReader.DONE = FileReader.prototype.DONE = 2, Object.defineProperties(FileReader.prototype, {
    EMPTY: staticPropertyDescriptors,
    LOADING: staticPropertyDescriptors,
    DONE: staticPropertyDescriptors,
    readAsArrayBuffer: kEnumerableProperty,
    readAsBinaryString: kEnumerableProperty,
    readAsText: kEnumerableProperty,
    readAsDataURL: kEnumerableProperty,
    abort: kEnumerableProperty,
    readyState: kEnumerableProperty,
    result: kEnumerableProperty,
    error: kEnumerableProperty,
    onloadstart: kEnumerableProperty,
    onprogress: kEnumerableProperty,
    onload: kEnumerableProperty,
    onabort: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onloadend: kEnumerableProperty,
    [Symbol.toStringTag]: {
     value: "FileReader",
     writable: !1,
     enumerable: !1,
     configurable: !0
    }
   }), Object.defineProperties(FileReader, {
    EMPTY: staticPropertyDescriptors,
    LOADING: staticPropertyDescriptors,
    DONE: staticPropertyDescriptors
   }), module.exports = {
    FileReader
   };
  },
  7313: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {webidl} = __webpack_require__(769), kState = Symbol("ProgressEvent state");
   class ProgressEvent extends Event {
    constructor(type, eventInitDict = {}) {
     super(type = webidl.converters.DOMString(type), eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})), 
     this[kState] = {
      lengthComputable: eventInitDict.lengthComputable,
      loaded: eventInitDict.loaded,
      total: eventInitDict.total
     };
    }
    get lengthComputable() {
     return webidl.brandCheck(this, ProgressEvent), this[kState].lengthComputable;
    }
    get loaded() {
     return webidl.brandCheck(this, ProgressEvent), this[kState].loaded;
    }
    get total() {
     return webidl.brandCheck(this, ProgressEvent), this[kState].total;
    }
   }
   webidl.converters.ProgressEventInit = webidl.dictionaryConverter([ {
    key: "lengthComputable",
    converter: webidl.converters.boolean,
    defaultValue: !1
   }, {
    key: "loaded",
    converter: webidl.converters["unsigned long long"],
    defaultValue: 0
   }, {
    key: "total",
    converter: webidl.converters["unsigned long long"],
    defaultValue: 0
   }, {
    key: "bubbles",
    converter: webidl.converters.boolean,
    defaultValue: !1
   }, {
    key: "cancelable",
    converter: webidl.converters.boolean,
    defaultValue: !1
   }, {
    key: "composed",
    converter: webidl.converters.boolean,
    defaultValue: !1
   } ]), module.exports = {
    ProgressEvent
   };
  },
  2077: module => {
   "use strict";
   module.exports = {
    kState: Symbol("FileReader state"),
    kResult: Symbol("FileReader result"),
    kError: Symbol("FileReader error"),
    kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
    kEvents: Symbol("FileReader events"),
    kAborted: Symbol("FileReader aborted")
   };
  },
  2398: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {kState, kError, kResult, kAborted, kLastProgressEventFired} = __webpack_require__(2077), {ProgressEvent} = __webpack_require__(7313), {getEncoding} = __webpack_require__(3435), {DOMException} = __webpack_require__(3771), {serializeAMimeType, parseMIMEType} = __webpack_require__(3587), {types} = __webpack_require__(9023), {StringDecoder} = __webpack_require__(3193), {btoa} = __webpack_require__(181);
   function fireAProgressEvent(e, reader) {
    const event = new ProgressEvent(e, {
     bubbles: !1,
     cancelable: !1
    });
    reader.dispatchEvent(event);
   }
   function packageData(bytes, type, mimeType, encodingName) {
    switch (type) {
    case "DataURL":
     {
      let dataURL = "data:";
      const parsed = parseMIMEType(mimeType || "application/octet-stream");
      "failure" !== parsed && (dataURL += serializeAMimeType(parsed)), dataURL += ";base64,";
      const decoder = new StringDecoder("latin1");
      for (const chunk of bytes) dataURL += btoa(decoder.write(chunk));
      return dataURL += btoa(decoder.end()), dataURL;
     }

    case "Text":
     {
      let encoding = "failure";
      if (encodingName && (encoding = getEncoding(encodingName)), "failure" === encoding && mimeType) {
       const type = parseMIMEType(mimeType);
       "failure" !== type && (encoding = getEncoding(type.parameters.get("charset")));
      }
      return "failure" === encoding && (encoding = "UTF-8"), function(ioQueue, encoding) {
       const bytes = combineByteSequences(ioQueue), BOMEncoding = function(ioQueue) {
        const [a, b, c] = ioQueue;
        if (239 === a && 187 === b && 191 === c) return "UTF-8";
        if (254 === a && 255 === b) return "UTF-16BE";
        if (255 === a && 254 === b) return "UTF-16LE";
        return null;
       }(bytes);
       let slice = 0;
       null !== BOMEncoding && (encoding = BOMEncoding, slice = "UTF-8" === BOMEncoding ? 3 : 2);
       const sliced = bytes.slice(slice);
       return new TextDecoder(encoding).decode(sliced);
      }(bytes, encoding);
     }

    case "ArrayBuffer":
     return combineByteSequences(bytes).buffer;

    case "BinaryString":
     {
      let binaryString = "";
      const decoder = new StringDecoder("latin1");
      for (const chunk of bytes) binaryString += decoder.write(chunk);
      return binaryString += decoder.end(), binaryString;
     }
    }
   }
   function combineByteSequences(sequences) {
    const size = sequences.reduce(((a, b) => a + b.byteLength), 0);
    let offset = 0;
    return sequences.reduce(((a, b) => (a.set(b, offset), offset += b.byteLength, a)), new Uint8Array(size));
   }
   module.exports = {
    staticPropertyDescriptors: {
     enumerable: !0,
     writable: !1,
     configurable: !1
    },
    readOperation: function(fr, blob, type, encodingName) {
     if ("loading" === fr[kState]) throw new DOMException("Invalid state", "InvalidStateError");
     fr[kState] = "loading", fr[kResult] = null, fr[kError] = null;
     const reader = blob.stream().getReader(), bytes = [];
     let chunkPromise = reader.read(), isFirstChunk = !0;
     (async () => {
      for (;!fr[kAborted]; ) try {
       const {done, value} = await chunkPromise;
       if (isFirstChunk && !fr[kAborted] && queueMicrotask((() => {
        fireAProgressEvent("loadstart", fr);
       })), isFirstChunk = !1, !done && types.isUint8Array(value)) bytes.push(value), (void 0 === fr[kLastProgressEventFired] || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted] && (fr[kLastProgressEventFired] = Date.now(), 
       queueMicrotask((() => {
        fireAProgressEvent("progress", fr);
       }))), chunkPromise = reader.read(); else if (done) {
        queueMicrotask((() => {
         fr[kState] = "done";
         try {
          const result = packageData(bytes, type, blob.type, encodingName);
          if (fr[kAborted]) return;
          fr[kResult] = result, fireAProgressEvent("load", fr);
         } catch (error) {
          fr[kError] = error, fireAProgressEvent("error", fr);
         }
         "loading" !== fr[kState] && fireAProgressEvent("loadend", fr);
        }));
        break;
       }
      } catch (error) {
       if (fr[kAborted]) return;
       queueMicrotask((() => {
        fr[kState] = "done", fr[kError] = error, fireAProgressEvent("error", fr), "loading" !== fr[kState] && fireAProgressEvent("loadend", fr);
       }));
       break;
      }
     })();
    },
    fireAProgressEvent
   };
  },
  5710: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const globalDispatcher = Symbol.for("undici.globalDispatcher.1"), {InvalidArgumentError} = __webpack_require__(3898), Agent = __webpack_require__(1180);
   function setGlobalDispatcher(agent) {
    if (!agent || "function" != typeof agent.dispatch) throw new InvalidArgumentError("Argument agent must implement Agent");
    Object.defineProperty(globalThis, globalDispatcher, {
     value: agent,
     writable: !0,
     enumerable: !1,
     configurable: !1
    });
   }
   function getGlobalDispatcher() {
    return globalThis[globalDispatcher];
   }
   void 0 === getGlobalDispatcher() && setGlobalDispatcher(new Agent), module.exports = {
    setGlobalDispatcher,
    getGlobalDispatcher
   };
  },
  899: module => {
   "use strict";
   module.exports = class {
    constructor(handler) {
     this.handler = handler;
    }
    onConnect(...args) {
     return this.handler.onConnect(...args);
    }
    onError(...args) {
     return this.handler.onError(...args);
    }
    onUpgrade(...args) {
     return this.handler.onUpgrade(...args);
    }
    onHeaders(...args) {
     return this.handler.onHeaders(...args);
    }
    onData(...args) {
     return this.handler.onData(...args);
    }
    onComplete(...args) {
     return this.handler.onComplete(...args);
    }
    onBodySent(...args) {
     return this.handler.onBodySent(...args);
    }
   };
  },
  4386: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const util = __webpack_require__(8869), {kBodyUsed} = __webpack_require__(8028), assert = __webpack_require__(2613), {InvalidArgumentError} = __webpack_require__(3898), EE = __webpack_require__(4434), redirectableStatusCodes = [ 300, 301, 302, 303, 307, 308 ], kBody = Symbol("body");
   class BodyAsyncIterable {
    constructor(body) {
     this[kBody] = body, this[kBodyUsed] = !1;
    }
    async* [Symbol.asyncIterator]() {
     assert(!this[kBodyUsed], "disturbed"), this[kBodyUsed] = !0, yield* this[kBody];
    }
   }
   function shouldRemoveHeader(header, removeContent, unknownOrigin) {
    if (4 === header.length) return "host" === util.headerNameToString(header);
    if (removeContent && util.headerNameToString(header).startsWith("content-")) return !0;
    if (unknownOrigin && (13 === header.length || 6 === header.length || 19 === header.length)) {
     const name = util.headerNameToString(header);
     return "authorization" === name || "cookie" === name || "proxy-authorization" === name;
    }
    return !1;
   }
   module.exports = class {
    constructor(dispatch, maxRedirections, opts, handler) {
     if (null != maxRedirections && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError("maxRedirections must be a positive number");
     util.validateHandler(handler, opts.method, opts.upgrade), this.dispatch = dispatch, 
     this.location = null, this.abort = null, this.opts = {
      ...opts,
      maxRedirections: 0
     }, this.maxRedirections = maxRedirections, this.handler = handler, this.history = [], 
     util.isStream(this.opts.body) ? (0 === util.bodyLength(this.opts.body) && this.opts.body.on("data", (function() {
      assert(!1);
     })), "boolean" != typeof this.opts.body.readableDidRead && (this.opts.body[kBodyUsed] = !1, 
     EE.prototype.on.call(this.opts.body, "data", (function() {
      this[kBodyUsed] = !0;
     })))) : (this.opts.body && "function" == typeof this.opts.body.pipeTo || this.opts.body && "string" != typeof this.opts.body && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) && (this.opts.body = new BodyAsyncIterable(this.opts.body));
    }
    onConnect(abort) {
     this.abort = abort, this.handler.onConnect(abort, {
      history: this.history
     });
    }
    onUpgrade(statusCode, headers, socket) {
     this.handler.onUpgrade(statusCode, headers, socket);
    }
    onError(error) {
     this.handler.onError(error);
    }
    onHeaders(statusCode, headers, resume, statusText) {
     if (this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : function(statusCode, headers) {
      if (-1 === redirectableStatusCodes.indexOf(statusCode)) return null;
      for (let i = 0; i < headers.length; i += 2) if ("location" === headers[i].toString().toLowerCase()) return headers[i + 1];
     }(statusCode, headers), this.opts.origin && this.history.push(new URL(this.opts.path, this.opts.origin)), 
     !this.location) return this.handler.onHeaders(statusCode, headers, resume, statusText);
     const {origin, pathname, search} = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin))), path = search ? `${pathname}${search}` : pathname;
     this.opts.headers = function(headers, removeContent, unknownOrigin) {
      const ret = [];
      if (Array.isArray(headers)) for (let i = 0; i < headers.length; i += 2) shouldRemoveHeader(headers[i], removeContent, unknownOrigin) || ret.push(headers[i], headers[i + 1]); else if (headers && "object" == typeof headers) for (const key of Object.keys(headers)) shouldRemoveHeader(key, removeContent, unknownOrigin) || ret.push(key, headers[key]); else assert(null == headers, "headers must be an object or an array");
      return ret;
     }(this.opts.headers, 303 === statusCode, this.opts.origin !== origin), this.opts.path = path, 
     this.opts.origin = origin, this.opts.maxRedirections = 0, this.opts.query = null, 
     303 === statusCode && "HEAD" !== this.opts.method && (this.opts.method = "GET", 
     this.opts.body = null);
    }
    onData(chunk) {
     if (!this.location) return this.handler.onData(chunk);
    }
    onComplete(trailers) {
     this.location ? (this.location = null, this.abort = null, this.dispatch(this.opts, this)) : this.handler.onComplete(trailers);
    }
    onBodySent(chunk) {
     this.handler.onBodySent && this.handler.onBodySent(chunk);
    }
   };
  },
  3786: (module, __unused_webpack_exports, __webpack_require__) => {
   const assert = __webpack_require__(2613), {kRetryHandlerDefaultRetry} = __webpack_require__(8028), {RequestRetryError} = __webpack_require__(3898), {isDisturbed, parseHeaders, parseRangeHeader} = __webpack_require__(8869);
   class RetryHandler {
    constructor(opts, handlers) {
     const {retryOptions, ...dispatchOpts} = opts, {retry: retryFn, maxRetries, maxTimeout, minTimeout, timeoutFactor, methods, errorCodes, retryAfter, statusCodes} = retryOptions ?? {};
     this.dispatch = handlers.dispatch, this.handler = handlers.handler, this.opts = dispatchOpts, 
     this.abort = null, this.aborted = !1, this.retryOpts = {
      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
      retryAfter: retryAfter ?? !0,
      maxTimeout: maxTimeout ?? 3e4,
      timeout: minTimeout ?? 500,
      timeoutFactor: timeoutFactor ?? 2,
      maxRetries: maxRetries ?? 5,
      methods: methods ?? [ "GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE" ],
      statusCodes: statusCodes ?? [ 500, 502, 503, 504, 429 ],
      errorCodes: errorCodes ?? [ "ECONNRESET", "ECONNREFUSED", "ENOTFOUND", "ENETDOWN", "ENETUNREACH", "EHOSTDOWN", "EHOSTUNREACH", "EPIPE" ]
     }, this.retryCount = 0, this.start = 0, this.end = null, this.etag = null, this.resume = null, 
     this.handler.onConnect((reason => {
      this.aborted = !0, this.abort ? this.abort(reason) : this.reason = reason;
     }));
    }
    onRequestSent() {
     this.handler.onRequestSent && this.handler.onRequestSent();
    }
    onUpgrade(statusCode, headers, socket) {
     this.handler.onUpgrade && this.handler.onUpgrade(statusCode, headers, socket);
    }
    onConnect(abort) {
     this.aborted ? abort(this.reason) : this.abort = abort;
    }
    onBodySent(chunk) {
     if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
    }
    static [kRetryHandlerDefaultRetry](err, {state, opts}, cb) {
     const {statusCode, code, headers} = err, {method, retryOptions} = opts, {maxRetries, timeout, maxTimeout, timeoutFactor, statusCodes, errorCodes, methods} = retryOptions;
     let {counter, currentTimeout} = state;
     if (currentTimeout = null != currentTimeout && currentTimeout > 0 ? currentTimeout : timeout, 
     code && "UND_ERR_REQ_RETRY" !== code && "UND_ERR_SOCKET" !== code && !errorCodes.includes(code)) return void cb(err);
     if (Array.isArray(methods) && !methods.includes(method)) return void cb(err);
     if (null != statusCode && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) return void cb(err);
     if (counter > maxRetries) return void cb(err);
     let retryAfterHeader = null != headers && headers["retry-after"];
     retryAfterHeader && (retryAfterHeader = Number(retryAfterHeader), retryAfterHeader = isNaN(retryAfterHeader) ? function(retryAfter) {
      const current = Date.now();
      return new Date(retryAfter).getTime() - current;
     }(retryAfterHeader) : 1e3 * retryAfterHeader);
     const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
     state.currentTimeout = retryTimeout, setTimeout((() => cb(null)), retryTimeout);
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
     const headers = parseHeaders(rawHeaders);
     if (this.retryCount += 1, statusCode >= 300) return this.abort(new RequestRetryError("Request failed", statusCode, {
      headers,
      count: this.retryCount
     })), !1;
     if (null != this.resume) {
      if (this.resume = null, 206 !== statusCode) return !0;
      const contentRange = parseRangeHeader(headers["content-range"]);
      if (!contentRange) return this.abort(new RequestRetryError("Content-Range mismatch", statusCode, {
       headers,
       count: this.retryCount
      })), !1;
      if (null != this.etag && this.etag !== headers.etag) return this.abort(new RequestRetryError("ETag mismatch", statusCode, {
       headers,
       count: this.retryCount
      })), !1;
      const {start, size, end = size} = contentRange;
      return assert(this.start === start, "content-range mismatch"), assert(null == this.end || this.end === end, "content-range mismatch"), 
      this.resume = resume, !0;
     }
     if (null == this.end) {
      if (206 === statusCode) {
       const range = parseRangeHeader(headers["content-range"]);
       if (null == range) return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
       const {start, size, end = size} = range;
       assert(null != start && Number.isFinite(start) && this.start !== start, "content-range mismatch"), 
       assert(Number.isFinite(start)), assert(null != end && Number.isFinite(end) && this.end !== end, "invalid content-length"), 
       this.start = start, this.end = end;
      }
      if (null == this.end) {
       const contentLength = headers["content-length"];
       this.end = null != contentLength ? Number(contentLength) : null;
      }
      return assert(Number.isFinite(this.start)), assert(null == this.end || Number.isFinite(this.end), "invalid content-length"), 
      this.resume = resume, this.etag = null != headers.etag ? headers.etag : null, this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
     }
     const err = new RequestRetryError("Request failed", statusCode, {
      headers,
      count: this.retryCount
     });
     return this.abort(err), !1;
    }
    onData(chunk) {
     return this.start += chunk.length, this.handler.onData(chunk);
    }
    onComplete(rawTrailers) {
     return this.retryCount = 0, this.handler.onComplete(rawTrailers);
    }
    onError(err) {
     if (this.aborted || isDisturbed(this.opts.body)) return this.handler.onError(err);
     this.retryOpts.retry(err, {
      state: {
       counter: this.retryCount++,
       currentTimeout: this.retryAfter
      },
      opts: {
       retryOptions: this.retryOpts,
       ...this.opts
      }
     }, function(err) {
      if (null != err || this.aborted || isDisturbed(this.opts.body)) return this.handler.onError(err);
      0 !== this.start && (this.opts = {
       ...this.opts,
       headers: {
        ...this.opts.headers,
        range: `bytes=${this.start}-${this.end ?? ""}`
       }
      });
      try {
       this.dispatch(this.opts, this);
      } catch (err) {
       this.handler.onError(err);
      }
     }.bind(this));
    }
   }
   module.exports = RetryHandler;
  },
  8838: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const RedirectHandler = __webpack_require__(4386);
   module.exports = function({maxRedirections: defaultMaxRedirections}) {
    return dispatch => function(opts, handler) {
     const {maxRedirections = defaultMaxRedirections} = opts;
     if (!maxRedirections) return dispatch(opts, handler);
     const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
     return opts = {
      ...opts,
      maxRedirections: 0
     }, dispatch(opts, redirectHandler);
    };
   };
  },
  263: (__unused_webpack_module, exports, __webpack_require__) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
   const utils_1 = __webpack_require__(5479);
   var METHODS, HEADER_STATE;
   !function(ERROR) {
    ERROR[ERROR.OK = 0] = "OK", ERROR[ERROR.INTERNAL = 1] = "INTERNAL", ERROR[ERROR.STRICT = 2] = "STRICT", 
    ERROR[ERROR.LF_EXPECTED = 3] = "LF_EXPECTED", ERROR[ERROR.UNEXPECTED_CONTENT_LENGTH = 4] = "UNEXPECTED_CONTENT_LENGTH", 
    ERROR[ERROR.CLOSED_CONNECTION = 5] = "CLOSED_CONNECTION", ERROR[ERROR.INVALID_METHOD = 6] = "INVALID_METHOD", 
    ERROR[ERROR.INVALID_URL = 7] = "INVALID_URL", ERROR[ERROR.INVALID_CONSTANT = 8] = "INVALID_CONSTANT", 
    ERROR[ERROR.INVALID_VERSION = 9] = "INVALID_VERSION", ERROR[ERROR.INVALID_HEADER_TOKEN = 10] = "INVALID_HEADER_TOKEN", 
    ERROR[ERROR.INVALID_CONTENT_LENGTH = 11] = "INVALID_CONTENT_LENGTH", ERROR[ERROR.INVALID_CHUNK_SIZE = 12] = "INVALID_CHUNK_SIZE", 
    ERROR[ERROR.INVALID_STATUS = 13] = "INVALID_STATUS", ERROR[ERROR.INVALID_EOF_STATE = 14] = "INVALID_EOF_STATE", 
    ERROR[ERROR.INVALID_TRANSFER_ENCODING = 15] = "INVALID_TRANSFER_ENCODING", ERROR[ERROR.CB_MESSAGE_BEGIN = 16] = "CB_MESSAGE_BEGIN", 
    ERROR[ERROR.CB_HEADERS_COMPLETE = 17] = "CB_HEADERS_COMPLETE", ERROR[ERROR.CB_MESSAGE_COMPLETE = 18] = "CB_MESSAGE_COMPLETE", 
    ERROR[ERROR.CB_CHUNK_HEADER = 19] = "CB_CHUNK_HEADER", ERROR[ERROR.CB_CHUNK_COMPLETE = 20] = "CB_CHUNK_COMPLETE", 
    ERROR[ERROR.PAUSED = 21] = "PAUSED", ERROR[ERROR.PAUSED_UPGRADE = 22] = "PAUSED_UPGRADE", 
    ERROR[ERROR.PAUSED_H2_UPGRADE = 23] = "PAUSED_H2_UPGRADE", ERROR[ERROR.USER = 24] = "USER";
   }(exports.ERROR || (exports.ERROR = {})), function(TYPE) {
    TYPE[TYPE.BOTH = 0] = "BOTH", TYPE[TYPE.REQUEST = 1] = "REQUEST", TYPE[TYPE.RESPONSE = 2] = "RESPONSE";
   }(exports.TYPE || (exports.TYPE = {})), function(FLAGS) {
    FLAGS[FLAGS.CONNECTION_KEEP_ALIVE = 1] = "CONNECTION_KEEP_ALIVE", FLAGS[FLAGS.CONNECTION_CLOSE = 2] = "CONNECTION_CLOSE", 
    FLAGS[FLAGS.CONNECTION_UPGRADE = 4] = "CONNECTION_UPGRADE", FLAGS[FLAGS.CHUNKED = 8] = "CHUNKED", 
    FLAGS[FLAGS.UPGRADE = 16] = "UPGRADE", FLAGS[FLAGS.CONTENT_LENGTH = 32] = "CONTENT_LENGTH", 
    FLAGS[FLAGS.SKIPBODY = 64] = "SKIPBODY", FLAGS[FLAGS.TRAILING = 128] = "TRAILING", 
    FLAGS[FLAGS.TRANSFER_ENCODING = 512] = "TRANSFER_ENCODING";
   }(exports.FLAGS || (exports.FLAGS = {})), function(LENIENT_FLAGS) {
    LENIENT_FLAGS[LENIENT_FLAGS.HEADERS = 1] = "HEADERS", LENIENT_FLAGS[LENIENT_FLAGS.CHUNKED_LENGTH = 2] = "CHUNKED_LENGTH", 
    LENIENT_FLAGS[LENIENT_FLAGS.KEEP_ALIVE = 4] = "KEEP_ALIVE";
   }(exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {})), function(METHODS) {
    METHODS[METHODS.DELETE = 0] = "DELETE", METHODS[METHODS.GET = 1] = "GET", METHODS[METHODS.HEAD = 2] = "HEAD", 
    METHODS[METHODS.POST = 3] = "POST", METHODS[METHODS.PUT = 4] = "PUT", METHODS[METHODS.CONNECT = 5] = "CONNECT", 
    METHODS[METHODS.OPTIONS = 6] = "OPTIONS", METHODS[METHODS.TRACE = 7] = "TRACE", 
    METHODS[METHODS.COPY = 8] = "COPY", METHODS[METHODS.LOCK = 9] = "LOCK", METHODS[METHODS.MKCOL = 10] = "MKCOL", 
    METHODS[METHODS.MOVE = 11] = "MOVE", METHODS[METHODS.PROPFIND = 12] = "PROPFIND", 
    METHODS[METHODS.PROPPATCH = 13] = "PROPPATCH", METHODS[METHODS.SEARCH = 14] = "SEARCH", 
    METHODS[METHODS.UNLOCK = 15] = "UNLOCK", METHODS[METHODS.BIND = 16] = "BIND", METHODS[METHODS.REBIND = 17] = "REBIND", 
    METHODS[METHODS.UNBIND = 18] = "UNBIND", METHODS[METHODS.ACL = 19] = "ACL", METHODS[METHODS.REPORT = 20] = "REPORT", 
    METHODS[METHODS.MKACTIVITY = 21] = "MKACTIVITY", METHODS[METHODS.CHECKOUT = 22] = "CHECKOUT", 
    METHODS[METHODS.MERGE = 23] = "MERGE", METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH", 
    METHODS[METHODS.NOTIFY = 25] = "NOTIFY", METHODS[METHODS.SUBSCRIBE = 26] = "SUBSCRIBE", 
    METHODS[METHODS.UNSUBSCRIBE = 27] = "UNSUBSCRIBE", METHODS[METHODS.PATCH = 28] = "PATCH", 
    METHODS[METHODS.PURGE = 29] = "PURGE", METHODS[METHODS.MKCALENDAR = 30] = "MKCALENDAR", 
    METHODS[METHODS.LINK = 31] = "LINK", METHODS[METHODS.UNLINK = 32] = "UNLINK", METHODS[METHODS.SOURCE = 33] = "SOURCE", 
    METHODS[METHODS.PRI = 34] = "PRI", METHODS[METHODS.DESCRIBE = 35] = "DESCRIBE", 
    METHODS[METHODS.ANNOUNCE = 36] = "ANNOUNCE", METHODS[METHODS.SETUP = 37] = "SETUP", 
    METHODS[METHODS.PLAY = 38] = "PLAY", METHODS[METHODS.PAUSE = 39] = "PAUSE", METHODS[METHODS.TEARDOWN = 40] = "TEARDOWN", 
    METHODS[METHODS.GET_PARAMETER = 41] = "GET_PARAMETER", METHODS[METHODS.SET_PARAMETER = 42] = "SET_PARAMETER", 
    METHODS[METHODS.REDIRECT = 43] = "REDIRECT", METHODS[METHODS.RECORD = 44] = "RECORD", 
    METHODS[METHODS.FLUSH = 45] = "FLUSH";
   }(METHODS = exports.METHODS || (exports.METHODS = {})), exports.METHODS_HTTP = [ METHODS.DELETE, METHODS.GET, METHODS.HEAD, METHODS.POST, METHODS.PUT, METHODS.CONNECT, METHODS.OPTIONS, METHODS.TRACE, METHODS.COPY, METHODS.LOCK, METHODS.MKCOL, METHODS.MOVE, METHODS.PROPFIND, METHODS.PROPPATCH, METHODS.SEARCH, METHODS.UNLOCK, METHODS.BIND, METHODS.REBIND, METHODS.UNBIND, METHODS.ACL, METHODS.REPORT, METHODS.MKACTIVITY, METHODS.CHECKOUT, METHODS.MERGE, METHODS["M-SEARCH"], METHODS.NOTIFY, METHODS.SUBSCRIBE, METHODS.UNSUBSCRIBE, METHODS.PATCH, METHODS.PURGE, METHODS.MKCALENDAR, METHODS.LINK, METHODS.UNLINK, METHODS.PRI, METHODS.SOURCE ], 
   exports.METHODS_ICE = [ METHODS.SOURCE ], exports.METHODS_RTSP = [ METHODS.OPTIONS, METHODS.DESCRIBE, METHODS.ANNOUNCE, METHODS.SETUP, METHODS.PLAY, METHODS.PAUSE, METHODS.TEARDOWN, METHODS.GET_PARAMETER, METHODS.SET_PARAMETER, METHODS.REDIRECT, METHODS.RECORD, METHODS.FLUSH, METHODS.GET, METHODS.POST ], 
   exports.METHOD_MAP = utils_1.enumToMap(METHODS), exports.H_METHOD_MAP = {}, Object.keys(exports.METHOD_MAP).forEach((key => {
    /^H/.test(key) && (exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key]);
   })), function(FINISH) {
    FINISH[FINISH.SAFE = 0] = "SAFE", FINISH[FINISH.SAFE_WITH_CB = 1] = "SAFE_WITH_CB", 
    FINISH[FINISH.UNSAFE = 2] = "UNSAFE";
   }(exports.FINISH || (exports.FINISH = {})), exports.ALPHA = [];
   for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) exports.ALPHA.push(String.fromCharCode(i)), 
   exports.ALPHA.push(String.fromCharCode(i + 32));
   exports.NUM_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9
   }, exports.HEX_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
   }, exports.NUM = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ], exports.ALPHANUM = exports.ALPHA.concat(exports.NUM), 
   exports.MARK = [ "-", "_", ".", "!", "~", "*", "'", "(", ")" ], exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([ "%", ";", ":", "&", "=", "+", "$", "," ]), 
   exports.STRICT_URL_CHAR = [ "!", '"', "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~" ].concat(exports.ALPHANUM), 
   exports.URL_CHAR = exports.STRICT_URL_CHAR.concat([ "\t", "\f" ]);
   for (let i = 128; i <= 255; i++) exports.URL_CHAR.push(i);
   exports.HEX = exports.NUM.concat([ "a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F" ]), 
   exports.STRICT_TOKEN = [ "!", "#", "$", "%", "&", "'", "*", "+", "-", ".", "^", "_", "`", "|", "~" ].concat(exports.ALPHANUM), 
   exports.TOKEN = exports.STRICT_TOKEN.concat([ " " ]), exports.HEADER_CHARS = [ "\t" ];
   for (let i = 32; i <= 255; i++) 127 !== i && exports.HEADER_CHARS.push(i);
   exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c => 44 !== c)), exports.MAJOR = exports.NUM_MAP, 
   exports.MINOR = exports.MAJOR, function(HEADER_STATE) {
    HEADER_STATE[HEADER_STATE.GENERAL = 0] = "GENERAL", HEADER_STATE[HEADER_STATE.CONNECTION = 1] = "CONNECTION", 
    HEADER_STATE[HEADER_STATE.CONTENT_LENGTH = 2] = "CONTENT_LENGTH", HEADER_STATE[HEADER_STATE.TRANSFER_ENCODING = 3] = "TRANSFER_ENCODING", 
    HEADER_STATE[HEADER_STATE.UPGRADE = 4] = "UPGRADE", HEADER_STATE[HEADER_STATE.CONNECTION_KEEP_ALIVE = 5] = "CONNECTION_KEEP_ALIVE", 
    HEADER_STATE[HEADER_STATE.CONNECTION_CLOSE = 6] = "CONNECTION_CLOSE", HEADER_STATE[HEADER_STATE.CONNECTION_UPGRADE = 7] = "CONNECTION_UPGRADE", 
    HEADER_STATE[HEADER_STATE.TRANSFER_ENCODING_CHUNKED = 8] = "TRANSFER_ENCODING_CHUNKED";
   }(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {})), exports.SPECIAL_HEADERS = {
    connection: HEADER_STATE.CONNECTION,
    "content-length": HEADER_STATE.CONTENT_LENGTH,
    "proxy-connection": HEADER_STATE.CONNECTION,
    "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
    upgrade: HEADER_STATE.UPGRADE
   };
  },
  3265: module => {
   module.exports = "";
  },
  995: module => {
   module.exports = "";
  },
  5479: (__unused_webpack_module, exports) => {
   "use strict";
   Object.defineProperty(exports, "__esModule", {
    value: !0
   }), exports.enumToMap = void 0, exports.enumToMap = function(obj) {
    const res = {};
    return Object.keys(obj).forEach((key => {
     const value = obj[key];
     "number" == typeof value && (res[key] = value);
    })), res;
   };
  },
  992: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {kClients} = __webpack_require__(8028), Agent = __webpack_require__(1180), {kAgent, kMockAgentSet, kMockAgentGet, kDispatches, kIsMockActive, kNetConnect, kGetNetConnect, kOptions, kFactory} = __webpack_require__(6676), MockClient = __webpack_require__(1014), MockPool = __webpack_require__(7099), {matchValue, buildMockOptions} = __webpack_require__(8968), {InvalidArgumentError, UndiciError} = __webpack_require__(3898), Dispatcher = __webpack_require__(7704), Pluralizer = __webpack_require__(9720), PendingInterceptorsFormatter = __webpack_require__(831);
   class FakeWeakRef {
    constructor(value) {
     this.value = value;
    }
    deref() {
     return this.value;
    }
   }
   module.exports = class extends Dispatcher {
    constructor(opts) {
     if (super(opts), this[kNetConnect] = !0, this[kIsMockActive] = !0, opts && opts.agent && "function" != typeof opts.agent.dispatch) throw new InvalidArgumentError("Argument opts.agent must implement Agent");
     const agent = opts && opts.agent ? opts.agent : new Agent(opts);
     this[kAgent] = agent, this[kClients] = agent[kClients], this[kOptions] = buildMockOptions(opts);
    }
    get(origin) {
     let dispatcher = this[kMockAgentGet](origin);
     return dispatcher || (dispatcher = this[kFactory](origin), this[kMockAgentSet](origin, dispatcher)), 
     dispatcher;
    }
    dispatch(opts, handler) {
     return this.get(opts.origin), this[kAgent].dispatch(opts, handler);
    }
    async close() {
     await this[kAgent].close(), this[kClients].clear();
    }
    deactivate() {
     this[kIsMockActive] = !1;
    }
    activate() {
     this[kIsMockActive] = !0;
    }
    enableNetConnect(matcher) {
     if ("string" == typeof matcher || "function" == typeof matcher || matcher instanceof RegExp) Array.isArray(this[kNetConnect]) ? this[kNetConnect].push(matcher) : this[kNetConnect] = [ matcher ]; else {
      if (void 0 !== matcher) throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
      this[kNetConnect] = !0;
     }
    }
    disableNetConnect() {
     this[kNetConnect] = !1;
    }
    get isMockActive() {
     return this[kIsMockActive];
    }
    [kMockAgentSet](origin, dispatcher) {
     this[kClients].set(origin, new FakeWeakRef(dispatcher));
    }
    [kFactory](origin) {
     const mockOptions = Object.assign({
      agent: this
     }, this[kOptions]);
     return this[kOptions] && 1 === this[kOptions].connections ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
    }
    [kMockAgentGet](origin) {
     const ref = this[kClients].get(origin);
     if (ref) return ref.deref();
     if ("string" != typeof origin) {
      const dispatcher = this[kFactory]("http://localhost:9999");
      return this[kMockAgentSet](origin, dispatcher), dispatcher;
     }
     for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
      const nonExplicitDispatcher = nonExplicitRef.deref();
      if (nonExplicitDispatcher && "string" != typeof keyMatcher && matchValue(keyMatcher, origin)) {
       const dispatcher = this[kFactory](origin);
       return this[kMockAgentSet](origin, dispatcher), dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches], 
       dispatcher;
      }
     }
    }
    [kGetNetConnect]() {
     return this[kNetConnect];
    }
    pendingInterceptors() {
     const mockAgentClients = this[kClients];
     return Array.from(mockAgentClients.entries()).flatMap((([origin, scope]) => scope.deref()[kDispatches].map((dispatch => ({
      ...dispatch,
      origin
     }))))).filter((({pending}) => pending));
    }
    assertNoPendingInterceptors({pendingInterceptorsFormatter = new PendingInterceptorsFormatter} = {}) {
     const pending = this.pendingInterceptors();
     if (0 === pending.length) return;
     const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
     throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim());
    }
   };
  },
  1014: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {promisify} = __webpack_require__(9023), Client = __webpack_require__(2138), {buildMockDispatch} = __webpack_require__(8968), {kDispatches, kMockAgent, kClose, kOriginalClose, kOrigin, kOriginalDispatch, kConnected} = __webpack_require__(6676), {MockInterceptor} = __webpack_require__(3226), Symbols = __webpack_require__(8028), {InvalidArgumentError} = __webpack_require__(3898);
   class MockClient extends Client {
    constructor(origin, opts) {
     if (super(origin, opts), !opts || !opts.agent || "function" != typeof opts.agent.dispatch) throw new InvalidArgumentError("Argument opts.agent must implement Agent");
     this[kMockAgent] = opts.agent, this[kOrigin] = origin, this[kDispatches] = [], this[kConnected] = 1, 
     this[kOriginalDispatch] = this.dispatch, this[kOriginalClose] = this.close.bind(this), 
     this.dispatch = buildMockDispatch.call(this), this.close = this[kClose];
    }
    get [Symbols.kConnected]() {
     return this[kConnected];
    }
    intercept(opts) {
     return new MockInterceptor(opts, this[kDispatches]);
    }
    async [kClose]() {
     await promisify(this[kOriginalClose])(), this[kConnected] = 0, this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
    }
   }
   module.exports = MockClient;
  },
  4850: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {UndiciError} = __webpack_require__(3898);
   class MockNotMatchedError extends UndiciError {
    constructor(message) {
     super(message), Error.captureStackTrace(this, MockNotMatchedError), this.name = "MockNotMatchedError", 
     this.message = message || "The request does not match any registered mock dispatches", 
     this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
    }
   }
   module.exports = {
    MockNotMatchedError
   };
  },
  3226: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {getResponseData, buildKey, addMockDispatch} = __webpack_require__(8968), {kDispatches, kDispatchKey, kDefaultHeaders, kDefaultTrailers, kContentLength, kMockDispatch} = __webpack_require__(6676), {InvalidArgumentError} = __webpack_require__(3898), {buildURL} = __webpack_require__(8869);
   class MockScope {
    constructor(mockDispatch) {
     this[kMockDispatch] = mockDispatch;
    }
    delay(waitInMs) {
     if ("number" != typeof waitInMs || !Number.isInteger(waitInMs) || waitInMs <= 0) throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
     return this[kMockDispatch].delay = waitInMs, this;
    }
    persist() {
     return this[kMockDispatch].persist = !0, this;
    }
    times(repeatTimes) {
     if ("number" != typeof repeatTimes || !Number.isInteger(repeatTimes) || repeatTimes <= 0) throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
     return this[kMockDispatch].times = repeatTimes, this;
    }
   }
   module.exports.MockInterceptor = class {
    constructor(opts, mockDispatches) {
     if ("object" != typeof opts) throw new InvalidArgumentError("opts must be an object");
     if (void 0 === opts.path) throw new InvalidArgumentError("opts.path must be defined");
     if (void 0 === opts.method && (opts.method = "GET"), "string" == typeof opts.path) if (opts.query) opts.path = buildURL(opts.path, opts.query); else {
      const parsedURL = new URL(opts.path, "data://");
      opts.path = parsedURL.pathname + parsedURL.search;
     }
     "string" == typeof opts.method && (opts.method = opts.method.toUpperCase()), this[kDispatchKey] = buildKey(opts), 
     this[kDispatches] = mockDispatches, this[kDefaultHeaders] = {}, this[kDefaultTrailers] = {}, 
     this[kContentLength] = !1;
    }
    createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
     const responseData = getResponseData(data), contentLength = this[kContentLength] ? {
      "content-length": responseData.length
     } : {};
     return {
      statusCode,
      data,
      headers: {
       ...this[kDefaultHeaders],
       ...contentLength,
       ...responseOptions.headers
      },
      trailers: {
       ...this[kDefaultTrailers],
       ...responseOptions.trailers
      }
     };
    }
    validateReplyParameters(statusCode, data, responseOptions) {
     if (void 0 === statusCode) throw new InvalidArgumentError("statusCode must be defined");
     if (void 0 === data) throw new InvalidArgumentError("data must be defined");
     if ("object" != typeof responseOptions) throw new InvalidArgumentError("responseOptions must be an object");
    }
    reply(replyData) {
     if ("function" == typeof replyData) {
      const wrappedDefaultsCallback = opts => {
       const resolvedData = replyData(opts);
       if ("object" != typeof resolvedData) throw new InvalidArgumentError("reply options callback must return an object");
       const {statusCode, data = "", responseOptions = {}} = resolvedData;
       return this.validateReplyParameters(statusCode, data, responseOptions), {
        ...this.createMockScopeDispatchData(statusCode, data, responseOptions)
       };
      }, newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
      return new MockScope(newMockDispatch);
     }
     const [statusCode, data = "", responseOptions = {}] = [ ...arguments ];
     this.validateReplyParameters(statusCode, data, responseOptions);
     const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions), newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
     return new MockScope(newMockDispatch);
    }
    replyWithError(error) {
     if (void 0 === error) throw new InvalidArgumentError("error must be defined");
     const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], {
      error
     });
     return new MockScope(newMockDispatch);
    }
    defaultReplyHeaders(headers) {
     if (void 0 === headers) throw new InvalidArgumentError("headers must be defined");
     return this[kDefaultHeaders] = headers, this;
    }
    defaultReplyTrailers(trailers) {
     if (void 0 === trailers) throw new InvalidArgumentError("trailers must be defined");
     return this[kDefaultTrailers] = trailers, this;
    }
    replyContentLength() {
     return this[kContentLength] = !0, this;
    }
   }, module.exports.MockScope = MockScope;
  },
  7099: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {promisify} = __webpack_require__(9023), Pool = __webpack_require__(7047), {buildMockDispatch} = __webpack_require__(8968), {kDispatches, kMockAgent, kClose, kOriginalClose, kOrigin, kOriginalDispatch, kConnected} = __webpack_require__(6676), {MockInterceptor} = __webpack_require__(3226), Symbols = __webpack_require__(8028), {InvalidArgumentError} = __webpack_require__(3898);
   class MockPool extends Pool {
    constructor(origin, opts) {
     if (super(origin, opts), !opts || !opts.agent || "function" != typeof opts.agent.dispatch) throw new InvalidArgumentError("Argument opts.agent must implement Agent");
     this[kMockAgent] = opts.agent, this[kOrigin] = origin, this[kDispatches] = [], this[kConnected] = 1, 
     this[kOriginalDispatch] = this.dispatch, this[kOriginalClose] = this.close.bind(this), 
     this.dispatch = buildMockDispatch.call(this), this.close = this[kClose];
    }
    get [Symbols.kConnected]() {
     return this[kConnected];
    }
    intercept(opts) {
     return new MockInterceptor(opts, this[kDispatches]);
    }
    async [kClose]() {
     await promisify(this[kOriginalClose])(), this[kConnected] = 0, this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
    }
   }
   module.exports = MockPool;
  },
  6676: module => {
   "use strict";
   module.exports = {
    kAgent: Symbol("agent"),
    kOptions: Symbol("options"),
    kFactory: Symbol("factory"),
    kDispatches: Symbol("dispatches"),
    kDispatchKey: Symbol("dispatch key"),
    kDefaultHeaders: Symbol("default headers"),
    kDefaultTrailers: Symbol("default trailers"),
    kContentLength: Symbol("content length"),
    kMockAgent: Symbol("mock agent"),
    kMockAgentSet: Symbol("mock agent set"),
    kMockAgentGet: Symbol("mock agent get"),
    kMockDispatch: Symbol("mock dispatch"),
    kClose: Symbol("close"),
    kOriginalClose: Symbol("original agent close"),
    kOrigin: Symbol("origin"),
    kIsMockActive: Symbol("is mock active"),
    kNetConnect: Symbol("net connect"),
    kGetNetConnect: Symbol("get net connect"),
    kConnected: Symbol("connected")
   };
  },
  8968: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {MockNotMatchedError} = __webpack_require__(4850), {kDispatches, kMockAgent, kOriginalDispatch, kOrigin, kGetNetConnect} = __webpack_require__(6676), {buildURL, nop} = __webpack_require__(8869), {STATUS_CODES} = __webpack_require__(8611), {types: {isPromise}} = __webpack_require__(9023);
   function matchValue(match, value) {
    return "string" == typeof match ? match === value : match instanceof RegExp ? match.test(value) : "function" == typeof match && !0 === match(value);
   }
   function lowerCaseEntries(headers) {
    return Object.fromEntries(Object.entries(headers).map((([headerName, headerValue]) => [ headerName.toLocaleLowerCase(), headerValue ])));
   }
   function getHeaderByName(headers, key) {
    if (!Array.isArray(headers)) return "function" == typeof headers.get ? headers.get(key) : lowerCaseEntries(headers)[key.toLocaleLowerCase()];
    for (let i = 0; i < headers.length; i += 2) if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) return headers[i + 1];
   }
   function buildHeadersFromArray(headers) {
    const clone = headers.slice(), entries = [];
    for (let index = 0; index < clone.length; index += 2) entries.push([ clone[index], clone[index + 1] ]);
    return Object.fromEntries(entries);
   }
   function matchHeaders(mockDispatch, headers) {
    if ("function" == typeof mockDispatch.headers) return Array.isArray(headers) && (headers = buildHeadersFromArray(headers)), 
    mockDispatch.headers(headers ? lowerCaseEntries(headers) : {});
    if (void 0 === mockDispatch.headers) return !0;
    if ("object" != typeof headers || "object" != typeof mockDispatch.headers) return !1;
    for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {
     if (!matchValue(matchHeaderValue, getHeaderByName(headers, matchHeaderName))) return !1;
    }
    return !0;
   }
   function safeUrl(path) {
    if ("string" != typeof path) return path;
    const pathSegments = path.split("?");
    if (2 !== pathSegments.length) return path;
    const qp = new URLSearchParams(pathSegments.pop());
    return qp.sort(), [ ...pathSegments, qp.toString() ].join("?");
   }
   function getResponseData(data) {
    return Buffer.isBuffer(data) ? data : "object" == typeof data ? JSON.stringify(data) : data.toString();
   }
   function getMockDispatch(mockDispatches, key) {
    const basePath = key.query ? buildURL(key.path, key.query) : key.path, resolvedPath = "string" == typeof basePath ? safeUrl(basePath) : basePath;
    let matchedMockDispatches = mockDispatches.filter((({consumed}) => !consumed)).filter((({path}) => matchValue(safeUrl(path), resolvedPath)));
    if (0 === matchedMockDispatches.length) throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
    if (matchedMockDispatches = matchedMockDispatches.filter((({method}) => matchValue(method, key.method))), 
    0 === matchedMockDispatches.length) throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
    if (matchedMockDispatches = matchedMockDispatches.filter((({body}) => void 0 === body || matchValue(body, key.body))), 
    0 === matchedMockDispatches.length) throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
    if (matchedMockDispatches = matchedMockDispatches.filter((mockDispatch => matchHeaders(mockDispatch, key.headers))), 
    0 === matchedMockDispatches.length) throw new MockNotMatchedError(`Mock dispatch not matched for headers '${"object" == typeof key.headers ? JSON.stringify(key.headers) : key.headers}'`);
    return matchedMockDispatches[0];
   }
   function deleteMockDispatch(mockDispatches, key) {
    const index = mockDispatches.findIndex((dispatch => !!dispatch.consumed && function(mockDispatch, {path, method, body, headers}) {
     const pathMatch = matchValue(mockDispatch.path, path), methodMatch = matchValue(mockDispatch.method, method), bodyMatch = void 0 === mockDispatch.body || matchValue(mockDispatch.body, body), headersMatch = matchHeaders(mockDispatch, headers);
     return pathMatch && methodMatch && bodyMatch && headersMatch;
    }(dispatch, key)));
    -1 !== index && mockDispatches.splice(index, 1);
   }
   function buildKey(opts) {
    const {path, method, body, headers, query} = opts;
    return {
     path,
     method,
     body,
     headers,
     query
    };
   }
   function generateKeyValues(data) {
    return Object.entries(data).reduce(((keyValuePairs, [key, value]) => [ ...keyValuePairs, Buffer.from(`${key}`), Array.isArray(value) ? value.map((x => Buffer.from(`${x}`))) : Buffer.from(`${value}`) ]), []);
   }
   function getStatusText(statusCode) {
    return STATUS_CODES[statusCode] || "unknown";
   }
   function mockDispatch(opts, handler) {
    const key = buildKey(opts), mockDispatch = getMockDispatch(this[kDispatches], key);
    mockDispatch.timesInvoked++, mockDispatch.data.callback && (mockDispatch.data = {
     ...mockDispatch.data,
     ...mockDispatch.data.callback(opts)
    });
    const {data: {statusCode, data, headers, trailers, error}, delay, persist} = mockDispatch, {timesInvoked, times} = mockDispatch;
    if (mockDispatch.consumed = !persist && timesInvoked >= times, mockDispatch.pending = timesInvoked < times, 
    null !== error) return deleteMockDispatch(this[kDispatches], key), handler.onError(error), 
    !0;
    function handleReply(mockDispatches, _data = data) {
     const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers, body = "function" == typeof _data ? _data({
      ...opts,
      headers: optsHeaders
     }) : _data;
     if (isPromise(body)) return void body.then((newData => handleReply(mockDispatches, newData)));
     const responseData = getResponseData(body), responseHeaders = generateKeyValues(headers), responseTrailers = generateKeyValues(trailers);
     handler.abort = nop, handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode)), 
     handler.onData(Buffer.from(responseData)), handler.onComplete(responseTrailers), 
     deleteMockDispatch(mockDispatches, key);
    }
    function resume() {}
    return "number" == typeof delay && delay > 0 ? setTimeout((() => {
     handleReply(this[kDispatches]);
    }), delay) : handleReply(this[kDispatches]), !0;
   }
   function checkNetConnect(netConnect, origin) {
    const url = new URL(origin);
    return !0 === netConnect || !(!Array.isArray(netConnect) || !netConnect.some((matcher => matchValue(matcher, url.host))));
   }
   module.exports = {
    getResponseData,
    getMockDispatch,
    addMockDispatch: function(mockDispatches, key, data) {
     const newMockDispatch = {
      timesInvoked: 0,
      times: 1,
      persist: !1,
      consumed: !1,
      ...key,
      pending: !0,
      data: {
       error: null,
       ..."function" == typeof data ? {
        callback: data
       } : {
        ...data
       }
      }
     };
     return mockDispatches.push(newMockDispatch), newMockDispatch;
    },
    deleteMockDispatch,
    buildKey,
    generateKeyValues,
    matchValue,
    getResponse: async function(body) {
     const buffers = [];
     for await (const data of body) buffers.push(data);
     return Buffer.concat(buffers).toString("utf8");
    },
    getStatusText,
    mockDispatch,
    buildMockDispatch: function() {
     const agent = this[kMockAgent], origin = this[kOrigin], originalDispatch = this[kOriginalDispatch];
     return function(opts, handler) {
      if (agent.isMockActive) try {
       mockDispatch.call(this, opts, handler);
      } catch (error) {
       if (!(error instanceof MockNotMatchedError)) throw error;
       {
        const netConnect = agent[kGetNetConnect]();
        if (!1 === netConnect) throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
        if (!checkNetConnect(netConnect, origin)) throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
        originalDispatch.call(this, opts, handler);
       }
      } else originalDispatch.call(this, opts, handler);
     };
    },
    checkNetConnect,
    buildMockOptions: function(opts) {
     if (opts) {
      const {agent, ...mockOptions} = opts;
      return mockOptions;
     }
    },
    getHeaderByName
   };
  },
  831: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {Transform} = __webpack_require__(2203), {Console} = __webpack_require__(4236);
   module.exports = class {
    constructor({disableColors} = {}) {
     this.transform = new Transform({
      transform(chunk, _enc, cb) {
       cb(null, chunk);
      }
     }), this.logger = new Console({
      stdout: this.transform,
      inspectOptions: {
       colors: !disableColors && !process.env.CI
      }
     });
    }
    format(pendingInterceptors) {
     const withPrettyHeaders = pendingInterceptors.map((({method, path, data: {statusCode}, persist, times, timesInvoked, origin}) => ({
      Method: method,
      Origin: origin,
      Path: path,
      "Status code": statusCode,
      Persistent: persist ? "✅" : "❌",
      Invocations: timesInvoked,
      Remaining: persist ? 1 / 0 : times - timesInvoked
     })));
     return this.logger.table(withPrettyHeaders), this.transform.read().toString();
    }
   };
  },
  9720: module => {
   "use strict";
   const singulars = {
    pronoun: "it",
    is: "is",
    was: "was",
    this: "this"
   }, plurals = {
    pronoun: "they",
    is: "are",
    was: "were",
    this: "these"
   };
   module.exports = class {
    constructor(singular, plural) {
     this.singular = singular, this.plural = plural;
    }
    pluralize(count) {
     const one = 1 === count;
     return {
      ...one ? singulars : plurals,
      count,
      noun: one ? this.singular : this.plural
     };
    }
   };
  },
  1826: module => {
   "use strict";
   class FixedCircularBuffer {
    constructor() {
     this.bottom = 0, this.top = 0, this.list = new Array(2048), this.next = null;
    }
    isEmpty() {
     return this.top === this.bottom;
    }
    isFull() {
     return (this.top + 1 & 2047) === this.bottom;
    }
    push(data) {
     this.list[this.top] = data, this.top = this.top + 1 & 2047;
    }
    shift() {
     const nextItem = this.list[this.bottom];
     return void 0 === nextItem ? null : (this.list[this.bottom] = void 0, this.bottom = this.bottom + 1 & 2047, 
     nextItem);
    }
   }
   module.exports = class {
    constructor() {
     this.head = this.tail = new FixedCircularBuffer;
    }
    isEmpty() {
     return this.head.isEmpty();
    }
    push(data) {
     this.head.isFull() && (this.head = this.head.next = new FixedCircularBuffer), this.head.push(data);
    }
    shift() {
     const tail = this.tail, next = tail.shift();
     return tail.isEmpty() && null !== tail.next && (this.tail = tail.next), next;
    }
   };
  },
  333: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const DispatcherBase = __webpack_require__(524), FixedQueue = __webpack_require__(1826), {kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch} = __webpack_require__(8028), PoolStats = __webpack_require__(6141), kClients = Symbol("clients"), kNeedDrain = Symbol("needDrain"), kQueue = Symbol("queue"), kClosedResolve = Symbol("closed resolve"), kOnDrain = Symbol("onDrain"), kOnConnect = Symbol("onConnect"), kOnDisconnect = Symbol("onDisconnect"), kOnConnectionError = Symbol("onConnectionError"), kGetDispatcher = Symbol("get dispatcher"), kAddClient = Symbol("add client"), kRemoveClient = Symbol("remove client"), kStats = Symbol("stats");
   module.exports = {
    PoolBase: class extends DispatcherBase {
     constructor() {
      super(), this[kQueue] = new FixedQueue, this[kClients] = [], this[kQueued] = 0;
      const pool = this;
      this[kOnDrain] = function(origin, targets) {
       const queue = pool[kQueue];
       let needDrain = !1;
       for (;!needDrain; ) {
        const item = queue.shift();
        if (!item) break;
        pool[kQueued]--, needDrain = !this.dispatch(item.opts, item.handler);
       }
       this[kNeedDrain] = needDrain, !this[kNeedDrain] && pool[kNeedDrain] && (pool[kNeedDrain] = !1, 
       pool.emit("drain", origin, [ pool, ...targets ])), pool[kClosedResolve] && queue.isEmpty() && Promise.all(pool[kClients].map((c => c.close()))).then(pool[kClosedResolve]);
      }, this[kOnConnect] = (origin, targets) => {
       pool.emit("connect", origin, [ pool, ...targets ]);
      }, this[kOnDisconnect] = (origin, targets, err) => {
       pool.emit("disconnect", origin, [ pool, ...targets ], err);
      }, this[kOnConnectionError] = (origin, targets, err) => {
       pool.emit("connectionError", origin, [ pool, ...targets ], err);
      }, this[kStats] = new PoolStats(this);
     }
     get [kBusy]() {
      return this[kNeedDrain];
     }
     get [kConnected]() {
      return this[kClients].filter((client => client[kConnected])).length;
     }
     get [kFree]() {
      return this[kClients].filter((client => client[kConnected] && !client[kNeedDrain])).length;
     }
     get [kPending]() {
      let ret = this[kQueued];
      for (const {[kPending]: pending} of this[kClients]) ret += pending;
      return ret;
     }
     get [kRunning]() {
      let ret = 0;
      for (const {[kRunning]: running} of this[kClients]) ret += running;
      return ret;
     }
     get [kSize]() {
      let ret = this[kQueued];
      for (const {[kSize]: size} of this[kClients]) ret += size;
      return ret;
     }
     get stats() {
      return this[kStats];
     }
     async [kClose]() {
      return this[kQueue].isEmpty() ? Promise.all(this[kClients].map((c => c.close()))) : new Promise((resolve => {
       this[kClosedResolve] = resolve;
      }));
     }
     async [kDestroy](err) {
      for (;;) {
       const item = this[kQueue].shift();
       if (!item) break;
       item.handler.onError(err);
      }
      return Promise.all(this[kClients].map((c => c.destroy(err))));
     }
     [kDispatch](opts, handler) {
      const dispatcher = this[kGetDispatcher]();
      return dispatcher ? dispatcher.dispatch(opts, handler) || (dispatcher[kNeedDrain] = !0, 
      this[kNeedDrain] = !this[kGetDispatcher]()) : (this[kNeedDrain] = !0, this[kQueue].push({
       opts,
       handler
      }), this[kQueued]++), !this[kNeedDrain];
     }
     [kAddClient](client) {
      return client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]), 
      this[kClients].push(client), this[kNeedDrain] && process.nextTick((() => {
       this[kNeedDrain] && this[kOnDrain](client[kUrl], [ this, client ]);
      })), this;
     }
     [kRemoveClient](client) {
      client.close((() => {
       const idx = this[kClients].indexOf(client);
       -1 !== idx && this[kClients].splice(idx, 1);
      })), this[kNeedDrain] = this[kClients].some((dispatcher => !dispatcher[kNeedDrain] && !0 !== dispatcher.closed && !0 !== dispatcher.destroyed));
     }
    },
    kClients,
    kNeedDrain,
    kAddClient,
    kRemoveClient,
    kGetDispatcher
   };
  },
  6141: (module, __unused_webpack_exports, __webpack_require__) => {
   const {kFree, kConnected, kPending, kQueued, kRunning, kSize} = __webpack_require__(8028), kPool = Symbol("pool");
   module.exports = class {
    constructor(pool) {
     this[kPool] = pool;
    }
    get connected() {
     return this[kPool][kConnected];
    }
    get free() {
     return this[kPool][kFree];
    }
    get pending() {
     return this[kPool][kPending];
    }
    get queued() {
     return this[kPool][kQueued];
    }
    get running() {
     return this[kPool][kRunning];
    }
    get size() {
     return this[kPool][kSize];
    }
   };
  },
  7047: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {PoolBase, kClients, kNeedDrain, kAddClient, kGetDispatcher} = __webpack_require__(333), Client = __webpack_require__(2138), {InvalidArgumentError} = __webpack_require__(3898), util = __webpack_require__(8869), {kUrl, kInterceptors} = __webpack_require__(8028), buildConnector = __webpack_require__(5651), kOptions = Symbol("options"), kConnections = Symbol("connections"), kFactory = Symbol("factory");
   function defaultFactory(origin, opts) {
    return new Client(origin, opts);
   }
   module.exports = class extends PoolBase {
    constructor(origin, {connections, factory = defaultFactory, connect, connectTimeout, tls, maxCachedSessions, socketPath, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, ...options} = {}) {
     if (super(), null != connections && (!Number.isFinite(connections) || connections < 0)) throw new InvalidArgumentError("invalid connections");
     if ("function" != typeof factory) throw new InvalidArgumentError("factory must be a function.");
     if (null != connect && "function" != typeof connect && "object" != typeof connect) throw new InvalidArgumentError("connect must be a function or an object");
     "function" != typeof connect && (connect = buildConnector({
      ...tls,
      maxCachedSessions,
      allowH2,
      socketPath,
      timeout: connectTimeout,
      ...util.nodeHasAutoSelectFamily && autoSelectFamily ? {
       autoSelectFamily,
       autoSelectFamilyAttemptTimeout
      } : void 0,
      ...connect
     })), this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [], 
     this[kConnections] = connections || null, this[kUrl] = util.parseOrigin(origin), 
     this[kOptions] = {
      ...util.deepClone(options),
      connect,
      allowH2
     }, this[kOptions].interceptors = options.interceptors ? {
      ...options.interceptors
     } : void 0, this[kFactory] = factory, this.on("connectionError", ((origin, targets, error) => {
      for (const target of targets) {
       const idx = this[kClients].indexOf(target);
       -1 !== idx && this[kClients].splice(idx, 1);
      }
     }));
    }
    [kGetDispatcher]() {
     let dispatcher = this[kClients].find((dispatcher => !dispatcher[kNeedDrain]));
     return dispatcher || ((!this[kConnections] || this[kClients].length < this[kConnections]) && (dispatcher = this[kFactory](this[kUrl], this[kOptions]), 
     this[kAddClient](dispatcher)), dispatcher);
    }
   };
  },
  1133: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {kProxy, kClose, kDestroy, kInterceptors} = __webpack_require__(8028), {URL} = __webpack_require__(7016), Agent = __webpack_require__(1180), Pool = __webpack_require__(7047), DispatcherBase = __webpack_require__(524), {InvalidArgumentError, RequestAbortedError} = __webpack_require__(3898), buildConnector = __webpack_require__(5651), kAgent = Symbol("proxy agent"), kClient = Symbol("proxy client"), kProxyHeaders = Symbol("proxy headers"), kRequestTls = Symbol("request tls settings"), kProxyTls = Symbol("proxy tls settings"), kConnectEndpoint = Symbol("connect endpoint function");
   function defaultFactory(origin, opts) {
    return new Pool(origin, opts);
   }
   module.exports = class extends DispatcherBase {
    constructor(opts) {
     if (super(opts), this[kProxy] = function(opts) {
      if ("string" == typeof opts && (opts = {
       uri: opts
      }), !opts || !opts.uri) throw new InvalidArgumentError("Proxy opts.uri is mandatory");
      return {
       uri: opts.uri,
       protocol: opts.protocol || "https"
      };
     }(opts), this[kAgent] = new Agent(opts), this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [], 
     "string" == typeof opts && (opts = {
      uri: opts
     }), !opts || !opts.uri) throw new InvalidArgumentError("Proxy opts.uri is mandatory");
     const {clientFactory = defaultFactory} = opts;
     if ("function" != typeof clientFactory) throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
     this[kRequestTls] = opts.requestTls, this[kProxyTls] = opts.proxyTls, this[kProxyHeaders] = opts.headers || {};
     const resolvedUrl = new URL(opts.uri), {origin, port, host, username, password} = resolvedUrl;
     if (opts.auth && opts.token) throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
     opts.auth ? this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}` : opts.token ? this[kProxyHeaders]["proxy-authorization"] = opts.token : username && password && (this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`);
     const connect = buildConnector({
      ...opts.proxyTls
     });
     this[kConnectEndpoint] = buildConnector({
      ...opts.requestTls
     }), this[kClient] = clientFactory(resolvedUrl, {
      connect
     }), this[kAgent] = new Agent({
      ...opts,
      connect: async (opts, callback) => {
       let requestedHost = opts.host;
       opts.port || (requestedHost += ":" + ("https:" === opts.protocol ? 443 : 80));
       try {
        const {socket, statusCode} = await this[kClient].connect({
         origin,
         port,
         path: requestedHost,
         signal: opts.signal,
         headers: {
          ...this[kProxyHeaders],
          host
         }
        });
        if (200 !== statusCode && (socket.on("error", (() => {})).destroy(), callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`))), 
        "https:" !== opts.protocol) return void callback(null, socket);
        let servername;
        servername = this[kRequestTls] ? this[kRequestTls].servername : opts.servername, 
        this[kConnectEndpoint]({
         ...opts,
         servername,
         httpSocket: socket
        }, callback);
       } catch (err) {
        callback(err);
       }
      }
     });
    }
    dispatch(opts, handler) {
     const {host} = new URL(opts.origin), headers = function(headers) {
      if (Array.isArray(headers)) {
       const headersPair = {};
       for (let i = 0; i < headers.length; i += 2) headersPair[headers[i]] = headers[i + 1];
       return headersPair;
      }
      return headers;
     }(opts.headers);
     return function(headers) {
      const existProxyAuth = headers && Object.keys(headers).find((key => "proxy-authorization" === key.toLowerCase()));
      if (existProxyAuth) throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
     }(headers), this[kAgent].dispatch({
      ...opts,
      headers: {
       ...headers,
       host
      }
     }, handler);
    }
    async [kClose]() {
     await this[kAgent].close(), await this[kClient].close();
    }
    async [kDestroy]() {
     await this[kAgent].destroy(), await this[kClient].destroy();
    }
   };
  },
  6087: module => {
   "use strict";
   let fastNowTimeout, fastNow = Date.now();
   const fastTimers = [];
   function onTimeout() {
    fastNow = Date.now();
    let len = fastTimers.length, idx = 0;
    for (;idx < len; ) {
     const timer = fastTimers[idx];
     0 === timer.state ? timer.state = fastNow + timer.delay : timer.state > 0 && fastNow >= timer.state && (timer.state = -1, 
     timer.callback(timer.opaque)), -1 === timer.state ? (timer.state = -2, idx !== len - 1 ? fastTimers[idx] = fastTimers.pop() : fastTimers.pop(), 
     len -= 1) : idx += 1;
    }
    fastTimers.length > 0 && refreshTimeout();
   }
   function refreshTimeout() {
    fastNowTimeout && fastNowTimeout.refresh ? fastNowTimeout.refresh() : (clearTimeout(fastNowTimeout), 
    fastNowTimeout = setTimeout(onTimeout, 1e3), fastNowTimeout.unref && fastNowTimeout.unref());
   }
   class Timeout {
    constructor(callback, delay, opaque) {
     this.callback = callback, this.delay = delay, this.opaque = opaque, this.state = -2, 
     this.refresh();
    }
    refresh() {
     -2 === this.state && (fastTimers.push(this), fastNowTimeout && 1 !== fastTimers.length || refreshTimeout()), 
     this.state = 0;
    }
    clear() {
     this.state = -1;
    }
   }
   module.exports = {
    setTimeout: (callback, delay, opaque) => delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque),
    clearTimeout(timeout) {
     timeout instanceof Timeout ? timeout.clear() : clearTimeout(timeout);
    }
   };
  },
  4741: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const diagnosticsChannel = __webpack_require__(1637), {uid, states} = __webpack_require__(3884), {kReadyState, kSentClose, kByteParser, kReceivedClose} = __webpack_require__(1884), {fireEvent, failWebsocketConnection} = __webpack_require__(645), {CloseEvent} = __webpack_require__(6072), {makeRequest} = __webpack_require__(8899), {fetching} = __webpack_require__(5306), {Headers} = __webpack_require__(5472), {getGlobalDispatcher} = __webpack_require__(5710), {kHeadersList} = __webpack_require__(8028), channels = {};
   let crypto;
   channels.open = diagnosticsChannel.channel("undici:websocket:open"), channels.close = diagnosticsChannel.channel("undici:websocket:close"), 
   channels.socketError = diagnosticsChannel.channel("undici:websocket:socket_error");
   try {
    crypto = __webpack_require__(6982);
   } catch {}
   function onSocketData(chunk) {
    this.ws[kByteParser].write(chunk) || this.pause();
   }
   function onSocketClose() {
    const {ws} = this, wasClean = ws[kSentClose] && ws[kReceivedClose];
    let code = 1005, reason = "";
    const result = ws[kByteParser].closingInfo;
    result ? (code = result.code ?? 1005, reason = result.reason) : ws[kSentClose] || (code = 1006), 
    ws[kReadyState] = states.CLOSED, fireEvent("close", ws, CloseEvent, {
     wasClean,
     code,
     reason
    }), channels.close.hasSubscribers && channels.close.publish({
     websocket: ws,
     code,
     reason
    });
   }
   function onSocketError(error) {
    const {ws} = this;
    ws[kReadyState] = states.CLOSING, channels.socketError.hasSubscribers && channels.socketError.publish(error), 
    this.destroy();
   }
   module.exports = {
    establishWebSocketConnection: function(url, protocols, ws, onEstablish, options) {
     const requestURL = url;
     requestURL.protocol = "ws:" === url.protocol ? "http:" : "https:";
     const request = makeRequest({
      urlList: [ requestURL ],
      serviceWorkers: "none",
      referrer: "no-referrer",
      mode: "websocket",
      credentials: "include",
      cache: "no-store",
      redirect: "error"
     });
     if (options.headers) {
      const headersList = new Headers(options.headers)[kHeadersList];
      request.headersList = headersList;
     }
     const keyValue = crypto.randomBytes(16).toString("base64");
     request.headersList.append("sec-websocket-key", keyValue), request.headersList.append("sec-websocket-version", "13");
     for (const protocol of protocols) request.headersList.append("sec-websocket-protocol", protocol);
     return fetching({
      request,
      useParallelQueue: !0,
      dispatcher: options.dispatcher ?? getGlobalDispatcher(),
      processResponse(response) {
       if ("error" === response.type || 101 !== response.status) return void failWebsocketConnection(ws, "Received network error or non-101 status code.");
       if (0 !== protocols.length && !response.headersList.get("Sec-WebSocket-Protocol")) return void failWebsocketConnection(ws, "Server did not respond with sent protocols.");
       if ("websocket" !== response.headersList.get("Upgrade")?.toLowerCase()) return void failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
       if ("upgrade" !== response.headersList.get("Connection")?.toLowerCase()) return void failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
       if (response.headersList.get("Sec-WebSocket-Accept") !== crypto.createHash("sha1").update(keyValue + uid).digest("base64")) return void failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
       const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
       if (null !== secExtension && "" !== secExtension) return void failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
       const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
       null === secProtocol || secProtocol === request.headersList.get("Sec-WebSocket-Protocol") ? (response.socket.on("data", onSocketData), 
       response.socket.on("close", onSocketClose), response.socket.on("error", onSocketError), 
       channels.open.hasSubscribers && channels.open.publish({
        address: response.socket.address(),
        protocol: secProtocol,
        extensions: secExtension
       }), onEstablish(response)) : failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
      }
     });
    }
   };
  },
  3884: module => {
   "use strict";
   const emptyBuffer = Buffer.allocUnsafe(0);
   module.exports = {
    uid: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
    staticPropertyDescriptors: {
     enumerable: !0,
     writable: !1,
     configurable: !1
    },
    states: {
     CONNECTING: 0,
     OPEN: 1,
     CLOSING: 2,
     CLOSED: 3
    },
    opcodes: {
     CONTINUATION: 0,
     TEXT: 1,
     BINARY: 2,
     CLOSE: 8,
     PING: 9,
     PONG: 10
    },
    maxUnsigned16Bit: 65535,
    parserStates: {
     INFO: 0,
     PAYLOADLENGTH_16: 2,
     PAYLOADLENGTH_64: 3,
     READ_DATA: 4
    },
    emptyBuffer
   };
  },
  6072: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {webidl} = __webpack_require__(769), {kEnumerableProperty} = __webpack_require__(8869), {MessagePort} = __webpack_require__(8167);
   class MessageEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}) {
     webidl.argumentLengthCheck(arguments, 1, {
      header: "MessageEvent constructor"
     }), super(type = webidl.converters.DOMString(type), eventInitDict = webidl.converters.MessageEventInit(eventInitDict)), 
     this.#eventInit = eventInitDict;
    }
    get data() {
     return webidl.brandCheck(this, MessageEvent), this.#eventInit.data;
    }
    get origin() {
     return webidl.brandCheck(this, MessageEvent), this.#eventInit.origin;
    }
    get lastEventId() {
     return webidl.brandCheck(this, MessageEvent), this.#eventInit.lastEventId;
    }
    get source() {
     return webidl.brandCheck(this, MessageEvent), this.#eventInit.source;
    }
    get ports() {
     return webidl.brandCheck(this, MessageEvent), Object.isFrozen(this.#eventInit.ports) || Object.freeze(this.#eventInit.ports), 
     this.#eventInit.ports;
    }
    initMessageEvent(type, bubbles = !1, cancelable = !1, data = null, origin = "", lastEventId = "", source = null, ports = []) {
     return webidl.brandCheck(this, MessageEvent), webidl.argumentLengthCheck(arguments, 1, {
      header: "MessageEvent.initMessageEvent"
     }), new MessageEvent(type, {
      bubbles,
      cancelable,
      data,
      origin,
      lastEventId,
      source,
      ports
     });
    }
   }
   class CloseEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}) {
     webidl.argumentLengthCheck(arguments, 1, {
      header: "CloseEvent constructor"
     }), super(type = webidl.converters.DOMString(type), eventInitDict = webidl.converters.CloseEventInit(eventInitDict)), 
     this.#eventInit = eventInitDict;
    }
    get wasClean() {
     return webidl.brandCheck(this, CloseEvent), this.#eventInit.wasClean;
    }
    get code() {
     return webidl.brandCheck(this, CloseEvent), this.#eventInit.code;
    }
    get reason() {
     return webidl.brandCheck(this, CloseEvent), this.#eventInit.reason;
    }
   }
   class ErrorEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict) {
     webidl.argumentLengthCheck(arguments, 1, {
      header: "ErrorEvent constructor"
     }), super(type, eventInitDict), type = webidl.converters.DOMString(type), eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {}), 
     this.#eventInit = eventInitDict;
    }
    get message() {
     return webidl.brandCheck(this, ErrorEvent), this.#eventInit.message;
    }
    get filename() {
     return webidl.brandCheck(this, ErrorEvent), this.#eventInit.filename;
    }
    get lineno() {
     return webidl.brandCheck(this, ErrorEvent), this.#eventInit.lineno;
    }
    get colno() {
     return webidl.brandCheck(this, ErrorEvent), this.#eventInit.colno;
    }
    get error() {
     return webidl.brandCheck(this, ErrorEvent), this.#eventInit.error;
    }
   }
   Object.defineProperties(MessageEvent.prototype, {
    [Symbol.toStringTag]: {
     value: "MessageEvent",
     configurable: !0
    },
    data: kEnumerableProperty,
    origin: kEnumerableProperty,
    lastEventId: kEnumerableProperty,
    source: kEnumerableProperty,
    ports: kEnumerableProperty,
    initMessageEvent: kEnumerableProperty
   }), Object.defineProperties(CloseEvent.prototype, {
    [Symbol.toStringTag]: {
     value: "CloseEvent",
     configurable: !0
    },
    reason: kEnumerableProperty,
    code: kEnumerableProperty,
    wasClean: kEnumerableProperty
   }), Object.defineProperties(ErrorEvent.prototype, {
    [Symbol.toStringTag]: {
     value: "ErrorEvent",
     configurable: !0
    },
    message: kEnumerableProperty,
    filename: kEnumerableProperty,
    lineno: kEnumerableProperty,
    colno: kEnumerableProperty,
    error: kEnumerableProperty
   }), webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort), webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(webidl.converters.MessagePort);
   const eventInit = [ {
    key: "bubbles",
    converter: webidl.converters.boolean,
    defaultValue: !1
   }, {
    key: "cancelable",
    converter: webidl.converters.boolean,
    defaultValue: !1
   }, {
    key: "composed",
    converter: webidl.converters.boolean,
    defaultValue: !1
   } ];
   webidl.converters.MessageEventInit = webidl.dictionaryConverter([ ...eventInit, {
    key: "data",
    converter: webidl.converters.any,
    defaultValue: null
   }, {
    key: "origin",
    converter: webidl.converters.USVString,
    defaultValue: ""
   }, {
    key: "lastEventId",
    converter: webidl.converters.DOMString,
    defaultValue: ""
   }, {
    key: "source",
    converter: webidl.nullableConverter(webidl.converters.MessagePort),
    defaultValue: null
   }, {
    key: "ports",
    converter: webidl.converters["sequence<MessagePort>"],
    get defaultValue() {
     return [];
    }
   } ]), webidl.converters.CloseEventInit = webidl.dictionaryConverter([ ...eventInit, {
    key: "wasClean",
    converter: webidl.converters.boolean,
    defaultValue: !1
   }, {
    key: "code",
    converter: webidl.converters["unsigned short"],
    defaultValue: 0
   }, {
    key: "reason",
    converter: webidl.converters.USVString,
    defaultValue: ""
   } ]), webidl.converters.ErrorEventInit = webidl.dictionaryConverter([ ...eventInit, {
    key: "message",
    converter: webidl.converters.DOMString,
    defaultValue: ""
   }, {
    key: "filename",
    converter: webidl.converters.USVString,
    defaultValue: ""
   }, {
    key: "lineno",
    converter: webidl.converters["unsigned long"],
    defaultValue: 0
   }, {
    key: "colno",
    converter: webidl.converters["unsigned long"],
    defaultValue: 0
   }, {
    key: "error",
    converter: webidl.converters.any
   } ]), module.exports = {
    MessageEvent,
    CloseEvent,
    ErrorEvent
   };
  },
  7980: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {maxUnsigned16Bit} = __webpack_require__(3884);
   let crypto;
   try {
    crypto = __webpack_require__(6982);
   } catch {}
   module.exports = {
    WebsocketFrameSend: class {
     constructor(data) {
      this.frameData = data, this.maskKey = crypto.randomBytes(4);
     }
     createFrame(opcode) {
      const bodyLength = this.frameData?.byteLength ?? 0;
      let payloadLength = bodyLength, offset = 6;
      bodyLength > maxUnsigned16Bit ? (offset += 8, payloadLength = 127) : bodyLength > 125 && (offset += 2, 
      payloadLength = 126);
      const buffer = Buffer.allocUnsafe(bodyLength + offset);
      buffer[0] = buffer[1] = 0, buffer[0] |= 128, buffer[0] = (240 & buffer[0]) + opcode, 
      buffer[offset - 4] = this.maskKey[0], buffer[offset - 3] = this.maskKey[1], buffer[offset - 2] = this.maskKey[2], 
      buffer[offset - 1] = this.maskKey[3], buffer[1] = payloadLength, 126 === payloadLength ? buffer.writeUInt16BE(bodyLength, 2) : 127 === payloadLength && (buffer[2] = buffer[3] = 0, 
      buffer.writeUIntBE(bodyLength, 4, 6)), buffer[1] |= 128;
      for (let i = 0; i < bodyLength; i++) buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
      return buffer;
     }
    }
   };
  },
  752: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {Writable} = __webpack_require__(2203), diagnosticsChannel = __webpack_require__(1637), {parserStates, opcodes, states, emptyBuffer} = __webpack_require__(3884), {kReadyState, kSentClose, kResponse, kReceivedClose} = __webpack_require__(1884), {isValidStatusCode, failWebsocketConnection, websocketMessageReceived} = __webpack_require__(645), {WebsocketFrameSend} = __webpack_require__(7980), channels = {};
   channels.ping = diagnosticsChannel.channel("undici:websocket:ping"), channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
   module.exports = {
    ByteParser: class extends Writable {
     #buffers=[];
     #byteOffset=0;
     #state=parserStates.INFO;
     #info={};
     #fragments=[];
     constructor(ws) {
      super(), this.ws = ws;
     }
     _write(chunk, _, callback) {
      this.#buffers.push(chunk), this.#byteOffset += chunk.length, this.run(callback);
     }
     run(callback) {
      for (;;) {
       if (this.#state === parserStates.INFO) {
        if (this.#byteOffset < 2) return callback();
        const buffer = this.consume(2);
        if (this.#info.fin = !!(128 & buffer[0]), this.#info.opcode = 15 & buffer[0], this.#info.originalOpcode ??= this.#info.opcode, 
        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION, 
        this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) return void failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
        const payloadLength = 127 & buffer[1];
        if (payloadLength <= 125 ? (this.#info.payloadLength = payloadLength, this.#state = parserStates.READ_DATA) : 126 === payloadLength ? this.#state = parserStates.PAYLOADLENGTH_16 : 127 === payloadLength && (this.#state = parserStates.PAYLOADLENGTH_64), 
        this.#info.fragmented && payloadLength > 125) return void failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
        if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) return void failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
        if (this.#info.opcode === opcodes.CLOSE) {
         if (1 === payloadLength) return void failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
         const body = this.consume(payloadLength);
         if (this.#info.closeInfo = this.parseCloseBody(!1, body), !this.ws[kSentClose]) {
          const body = Buffer.allocUnsafe(2);
          body.writeUInt16BE(this.#info.closeInfo.code, 0);
          const closeFrame = new WebsocketFrameSend(body);
          this.ws[kResponse].socket.write(closeFrame.createFrame(opcodes.CLOSE), (err => {
           err || (this.ws[kSentClose] = !0);
          }));
         }
         return this.ws[kReadyState] = states.CLOSING, this.ws[kReceivedClose] = !0, void this.end();
        }
        if (this.#info.opcode === opcodes.PING) {
         const body = this.consume(payloadLength);
         if (!this.ws[kReceivedClose]) {
          const frame = new WebsocketFrameSend(body);
          this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG)), channels.ping.hasSubscribers && channels.ping.publish({
           payload: body
          });
         }
         if (this.#state = parserStates.INFO, this.#byteOffset > 0) continue;
         return void callback();
        }
        if (this.#info.opcode === opcodes.PONG) {
         const body = this.consume(payloadLength);
         if (channels.pong.hasSubscribers && channels.pong.publish({
          payload: body
         }), this.#byteOffset > 0) continue;
         return void callback();
        }
       } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
        if (this.#byteOffset < 2) return callback();
        const buffer = this.consume(2);
        this.#info.payloadLength = buffer.readUInt16BE(0), this.#state = parserStates.READ_DATA;
       } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
        if (this.#byteOffset < 8) return callback();
        const buffer = this.consume(8), upper = buffer.readUInt32BE(0);
        if (upper > 2 ** 31 - 1) return void failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
        const lower = buffer.readUInt32BE(4);
        this.#info.payloadLength = (upper << 8) + lower, this.#state = parserStates.READ_DATA;
       } else if (this.#state === parserStates.READ_DATA) {
        if (this.#byteOffset < this.#info.payloadLength) return callback();
        if (this.#byteOffset >= this.#info.payloadLength) {
         const body = this.consume(this.#info.payloadLength);
         if (this.#fragments.push(body), !this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
          const fullMessage = Buffer.concat(this.#fragments);
          websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage), this.#info = {}, 
          this.#fragments.length = 0;
         }
         this.#state = parserStates.INFO;
        }
       }
       if (!(this.#byteOffset > 0)) {
        callback();
        break;
       }
      }
     }
     consume(n) {
      if (n > this.#byteOffset) return null;
      if (0 === n) return emptyBuffer;
      if (this.#buffers[0].length === n) return this.#byteOffset -= this.#buffers[0].length, 
      this.#buffers.shift();
      const buffer = Buffer.allocUnsafe(n);
      let offset = 0;
      for (;offset !== n; ) {
       const next = this.#buffers[0], {length} = next;
       if (length + offset === n) {
        buffer.set(this.#buffers.shift(), offset);
        break;
       }
       if (length + offset > n) {
        buffer.set(next.subarray(0, n - offset), offset), this.#buffers[0] = next.subarray(n - offset);
        break;
       }
       buffer.set(this.#buffers.shift(), offset), offset += next.length;
      }
      return this.#byteOffset -= n, buffer;
     }
     parseCloseBody(onlyCode, data) {
      let code;
      if (data.length >= 2 && (code = data.readUInt16BE(0)), onlyCode) return isValidStatusCode(code) ? {
       code
      } : null;
      let reason = data.subarray(2);
      if (239 === reason[0] && 187 === reason[1] && 191 === reason[2] && (reason = reason.subarray(3)), 
      void 0 !== code && !isValidStatusCode(code)) return null;
      try {
       reason = new TextDecoder("utf-8", {
        fatal: !0
       }).decode(reason);
      } catch {
       return null;
      }
      return {
       code,
       reason
      };
     }
     get closingInfo() {
      return this.#info.closeInfo;
     }
    }
   };
  },
  1884: module => {
   "use strict";
   module.exports = {
    kWebSocketURL: Symbol("url"),
    kReadyState: Symbol("ready state"),
    kController: Symbol("controller"),
    kResponse: Symbol("response"),
    kBinaryType: Symbol("binary type"),
    kSentClose: Symbol("sent close"),
    kReceivedClose: Symbol("received close"),
    kByteParser: Symbol("byte parser")
   };
  },
  645: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {kReadyState, kController, kResponse, kBinaryType, kWebSocketURL} = __webpack_require__(1884), {states, opcodes} = __webpack_require__(3884), {MessageEvent, ErrorEvent} = __webpack_require__(6072);
   function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
    const event = new eventConstructor(e, eventInitDict);
    target.dispatchEvent(event);
   }
   function failWebsocketConnection(ws, reason) {
    const {[kController]: controller, [kResponse]: response} = ws;
    controller.abort(), response?.socket && !response.socket.destroyed && response.socket.destroy(), 
    reason && fireEvent("error", ws, ErrorEvent, {
     error: new Error(reason)
    });
   }
   module.exports = {
    isEstablished: function(ws) {
     return ws[kReadyState] === states.OPEN;
    },
    isClosing: function(ws) {
     return ws[kReadyState] === states.CLOSING;
    },
    isClosed: function(ws) {
     return ws[kReadyState] === states.CLOSED;
    },
    fireEvent,
    isValidSubprotocol: function(protocol) {
     if (0 === protocol.length) return !1;
     for (const char of protocol) {
      const code = char.charCodeAt(0);
      if (code < 33 || code > 126 || "(" === char || ")" === char || "<" === char || ">" === char || "@" === char || "," === char || ";" === char || ":" === char || "\\" === char || '"' === char || "/" === char || "[" === char || "]" === char || "?" === char || "=" === char || "{" === char || "}" === char || 32 === code || 9 === code) return !1;
     }
     return !0;
    },
    isValidStatusCode: function(code) {
     return code >= 1e3 && code < 1015 ? 1004 !== code && 1005 !== code && 1006 !== code : code >= 3e3 && code <= 4999;
    },
    failWebsocketConnection,
    websocketMessageReceived: function(ws, type, data) {
     if (ws[kReadyState] !== states.OPEN) return;
     let dataForEvent;
     if (type === opcodes.TEXT) try {
      dataForEvent = new TextDecoder("utf-8", {
       fatal: !0
      }).decode(data);
     } catch {
      return void failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
     } else type === opcodes.BINARY && (dataForEvent = "blob" === ws[kBinaryType] ? new Blob([ data ]) : new Uint8Array(data).buffer);
     fireEvent("message", ws, MessageEvent, {
      origin: ws[kWebSocketURL].origin,
      data: dataForEvent
     });
    }
   };
  },
  9658: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {webidl} = __webpack_require__(769), {DOMException} = __webpack_require__(3771), {URLSerializer} = __webpack_require__(3587), {getGlobalOrigin} = __webpack_require__(6367), {staticPropertyDescriptors, states, opcodes, emptyBuffer} = __webpack_require__(3884), {kWebSocketURL, kReadyState, kController, kBinaryType, kResponse, kSentClose, kByteParser} = __webpack_require__(1884), {isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent} = __webpack_require__(645), {establishWebSocketConnection} = __webpack_require__(4741), {WebsocketFrameSend} = __webpack_require__(7980), {ByteParser} = __webpack_require__(752), {kEnumerableProperty, isBlobLike} = __webpack_require__(8869), {getGlobalDispatcher} = __webpack_require__(5710), {types} = __webpack_require__(9023);
   let experimentalWarned = !1;
   class WebSocket extends EventTarget {
    #events={
     open: null,
     error: null,
     close: null,
     message: null
    };
    #bufferedAmount=0;
    #protocol="";
    #extensions="";
    constructor(url, protocols = []) {
     super(), webidl.argumentLengthCheck(arguments, 1, {
      header: "WebSocket constructor"
     }), experimentalWarned || (experimentalWarned = !0, process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
      code: "UNDICI-WS"
     }));
     const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
     url = webidl.converters.USVString(url), protocols = options.protocols;
     const baseURL = getGlobalOrigin();
     let urlRecord;
     try {
      urlRecord = new URL(url, baseURL);
     } catch (e) {
      throw new DOMException(e, "SyntaxError");
     }
     if ("http:" === urlRecord.protocol ? urlRecord.protocol = "ws:" : "https:" === urlRecord.protocol && (urlRecord.protocol = "wss:"), 
     "ws:" !== urlRecord.protocol && "wss:" !== urlRecord.protocol) throw new DOMException(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
     if (urlRecord.hash || urlRecord.href.endsWith("#")) throw new DOMException("Got fragment", "SyntaxError");
     if ("string" == typeof protocols && (protocols = [ protocols ]), protocols.length !== new Set(protocols.map((p => p.toLowerCase()))).size) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
     if (protocols.length > 0 && !protocols.every((p => isValidSubprotocol(p)))) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
     this[kWebSocketURL] = new URL(urlRecord.href), this[kController] = establishWebSocketConnection(urlRecord, protocols, this, (response => this.#onConnectionEstablished(response)), options), 
     this[kReadyState] = WebSocket.CONNECTING, this[kBinaryType] = "blob";
    }
    close(code = void 0, reason = void 0) {
     if (webidl.brandCheck(this, WebSocket), void 0 !== code && (code = webidl.converters["unsigned short"](code, {
      clamp: !0
     })), void 0 !== reason && (reason = webidl.converters.USVString(reason)), void 0 !== code && 1e3 !== code && (code < 3e3 || code > 4999)) throw new DOMException("invalid code", "InvalidAccessError");
     let reasonByteLength = 0;
     if (void 0 !== reason && (reasonByteLength = Buffer.byteLength(reason), reasonByteLength > 123)) throw new DOMException(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
     if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) ; else if (isEstablished(this)) if (isClosing(this)) this[kReadyState] = WebSocket.CLOSING; else {
      const frame = new WebsocketFrameSend;
      void 0 !== code && void 0 === reason ? (frame.frameData = Buffer.allocUnsafe(2), 
      frame.frameData.writeUInt16BE(code, 0)) : void 0 !== code && void 0 !== reason ? (frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength), 
      frame.frameData.writeUInt16BE(code, 0), frame.frameData.write(reason, 2, "utf-8")) : frame.frameData = emptyBuffer;
      this[kResponse].socket.write(frame.createFrame(opcodes.CLOSE), (err => {
       err || (this[kSentClose] = !0);
      })), this[kReadyState] = states.CLOSING;
     } else failWebsocketConnection(this, "Connection was closed before it was established."), 
     this[kReadyState] = WebSocket.CLOSING;
    }
    send(data) {
     if (webidl.brandCheck(this, WebSocket), webidl.argumentLengthCheck(arguments, 1, {
      header: "WebSocket.send"
     }), data = webidl.converters.WebSocketSendData(data), this[kReadyState] === WebSocket.CONNECTING) throw new DOMException("Sent before connected.", "InvalidStateError");
     if (!isEstablished(this) || isClosing(this)) return;
     const socket = this[kResponse].socket;
     if ("string" == typeof data) {
      const value = Buffer.from(data), buffer = new WebsocketFrameSend(value).createFrame(opcodes.TEXT);
      this.#bufferedAmount += value.byteLength, socket.write(buffer, (() => {
       this.#bufferedAmount -= value.byteLength;
      }));
     } else if (types.isArrayBuffer(data)) {
      const value = Buffer.from(data), buffer = new WebsocketFrameSend(value).createFrame(opcodes.BINARY);
      this.#bufferedAmount += value.byteLength, socket.write(buffer, (() => {
       this.#bufferedAmount -= value.byteLength;
      }));
     } else if (ArrayBuffer.isView(data)) {
      const ab = Buffer.from(data, data.byteOffset, data.byteLength), buffer = new WebsocketFrameSend(ab).createFrame(opcodes.BINARY);
      this.#bufferedAmount += ab.byteLength, socket.write(buffer, (() => {
       this.#bufferedAmount -= ab.byteLength;
      }));
     } else if (isBlobLike(data)) {
      const frame = new WebsocketFrameSend;
      data.arrayBuffer().then((ab => {
       const value = Buffer.from(ab);
       frame.frameData = value;
       const buffer = frame.createFrame(opcodes.BINARY);
       this.#bufferedAmount += value.byteLength, socket.write(buffer, (() => {
        this.#bufferedAmount -= value.byteLength;
       }));
      }));
     }
    }
    get readyState() {
     return webidl.brandCheck(this, WebSocket), this[kReadyState];
    }
    get bufferedAmount() {
     return webidl.brandCheck(this, WebSocket), this.#bufferedAmount;
    }
    get url() {
     return webidl.brandCheck(this, WebSocket), URLSerializer(this[kWebSocketURL]);
    }
    get extensions() {
     return webidl.brandCheck(this, WebSocket), this.#extensions;
    }
    get protocol() {
     return webidl.brandCheck(this, WebSocket), this.#protocol;
    }
    get onopen() {
     return webidl.brandCheck(this, WebSocket), this.#events.open;
    }
    set onopen(fn) {
     webidl.brandCheck(this, WebSocket), this.#events.open && this.removeEventListener("open", this.#events.open), 
     "function" == typeof fn ? (this.#events.open = fn, this.addEventListener("open", fn)) : this.#events.open = null;
    }
    get onerror() {
     return webidl.brandCheck(this, WebSocket), this.#events.error;
    }
    set onerror(fn) {
     webidl.brandCheck(this, WebSocket), this.#events.error && this.removeEventListener("error", this.#events.error), 
     "function" == typeof fn ? (this.#events.error = fn, this.addEventListener("error", fn)) : this.#events.error = null;
    }
    get onclose() {
     return webidl.brandCheck(this, WebSocket), this.#events.close;
    }
    set onclose(fn) {
     webidl.brandCheck(this, WebSocket), this.#events.close && this.removeEventListener("close", this.#events.close), 
     "function" == typeof fn ? (this.#events.close = fn, this.addEventListener("close", fn)) : this.#events.close = null;
    }
    get onmessage() {
     return webidl.brandCheck(this, WebSocket), this.#events.message;
    }
    set onmessage(fn) {
     webidl.brandCheck(this, WebSocket), this.#events.message && this.removeEventListener("message", this.#events.message), 
     "function" == typeof fn ? (this.#events.message = fn, this.addEventListener("message", fn)) : this.#events.message = null;
    }
    get binaryType() {
     return webidl.brandCheck(this, WebSocket), this[kBinaryType];
    }
    set binaryType(type) {
     webidl.brandCheck(this, WebSocket), this[kBinaryType] = "blob" !== type && "arraybuffer" !== type ? "blob" : type;
    }
    #onConnectionEstablished(response) {
     this[kResponse] = response;
     const parser = new ByteParser(this);
     parser.on("drain", (function() {
      this.ws[kResponse].socket.resume();
     })), response.socket.ws = this, this[kByteParser] = parser, this[kReadyState] = states.OPEN;
     const extensions = response.headersList.get("sec-websocket-extensions");
     null !== extensions && (this.#extensions = extensions);
     const protocol = response.headersList.get("sec-websocket-protocol");
     null !== protocol && (this.#protocol = protocol), fireEvent("open", this);
    }
   }
   WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING, WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN, 
   WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING, WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED, 
   Object.defineProperties(WebSocket.prototype, {
    CONNECTING: staticPropertyDescriptors,
    OPEN: staticPropertyDescriptors,
    CLOSING: staticPropertyDescriptors,
    CLOSED: staticPropertyDescriptors,
    url: kEnumerableProperty,
    readyState: kEnumerableProperty,
    bufferedAmount: kEnumerableProperty,
    onopen: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onclose: kEnumerableProperty,
    close: kEnumerableProperty,
    onmessage: kEnumerableProperty,
    binaryType: kEnumerableProperty,
    send: kEnumerableProperty,
    extensions: kEnumerableProperty,
    protocol: kEnumerableProperty,
    [Symbol.toStringTag]: {
     value: "WebSocket",
     writable: !1,
     enumerable: !1,
     configurable: !0
    }
   }), Object.defineProperties(WebSocket, {
    CONNECTING: staticPropertyDescriptors,
    OPEN: staticPropertyDescriptors,
    CLOSING: staticPropertyDescriptors,
    CLOSED: staticPropertyDescriptors
   }), webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(webidl.converters.DOMString), 
   webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
    return "Object" === webidl.util.Type(V) && Symbol.iterator in V ? webidl.converters["sequence<DOMString>"](V) : webidl.converters.DOMString(V);
   }, webidl.converters.WebSocketInit = webidl.dictionaryConverter([ {
    key: "protocols",
    converter: webidl.converters["DOMString or sequence<DOMString>"],
    get defaultValue() {
     return [];
    }
   }, {
    key: "dispatcher",
    converter: V => V,
    get defaultValue() {
     return getGlobalDispatcher();
    }
   }, {
    key: "headers",
    converter: webidl.nullableConverter(webidl.converters.HeadersInit)
   } ]), webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
    return "Object" !== webidl.util.Type(V) || Symbol.iterator in V ? {
     protocols: webidl.converters["DOMString or sequence<DOMString>"](V)
    } : webidl.converters.WebSocketInit(V);
   }, webidl.converters.WebSocketSendData = function(V) {
    if ("Object" === webidl.util.Type(V)) {
     if (isBlobLike(V)) return webidl.converters.Blob(V, {
      strict: !1
     });
     if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) return webidl.converters.BufferSource(V);
    }
    return webidl.converters.USVString(V);
   }, module.exports = {
    WebSocket
   };
  },
  1718: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$_actions_core_fx0i1v, node_process_process_dcpv5o, $module$string_argv_8hgmbc, node_path_path_1155cy, $module$_actions_io_79d2l8, $module$node_fs_promises_daq1pm, kotlin_kotlin, kotlin_gradle_cache_action_layered_cache, kotlin_gradle_cache_action_wrappers_actions_toolkit, kotlin_gradle_cache_action_gradle_launcher, kotlin_gradle_cache_action_wrappers_octokit_webhooks, kotlin_gradle_cache_action_cache_proxy, kotlin_gradle_cache_action_wrappers_nodejs, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js) {
    "use strict";
    var $completion, tmp, setFailed = $module$_actions_core_fx0i1v.setFailed, info = $module$_actions_core_fx0i1v.info, parseArgsStringToArgv = $module$string_argv_8hgmbc.parseArgsStringToArgv, mkdirP = $module$_actions_io_79d2l8.mkdirP, writeFile = $module$node_fs_promises_daq1pm.writeFile, warning = $module$_actions_core_fx0i1v.warning, setOutput = $module$_actions_core_fx0i1v.setOutput, Regex_init_$Create$ = kotlin_kotlin.$_$.t, ArrayList_init_$Create$ = kotlin_kotlin.$_$.h, startsWith = kotlin_kotlin.$_$.n6, contains = kotlin_kotlin.$_$.b6, Unit_instance = kotlin_kotlin.$_$.u1, collectionSizeOrDefault = kotlin_kotlin.$_$.d2, mapCapacity = kotlin_kotlin.$_$.a3, coerceAtLeast = kotlin_kotlin.$_$.s5, LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.m, getOrNull = kotlin_kotlin.$_$.o2, to = kotlin_kotlin.$_$.z7, CoroutineImpl = kotlin_kotlin.$_$.d4, stateVariable = kotlin_gradle_cache_action_layered_cache.$_$.a, values = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.d, ActionStage_POST_getInstance = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.f, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, ActionFailedException = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.c, protoOf = kotlin_kotlin.$_$.l5, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, getInput = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.a, _Char___init__impl__6a9atx = kotlin_kotlin.$_$.j1, charArrayOf = kotlin_kotlin.$_$.k4, trimEnd = kotlin_kotlin.$_$.y6, toList = kotlin_kotlin.$_$.j3, isBlank = kotlin_kotlin.$_$.f6, toBoolean = kotlin_kotlin.$_$.t6, ActionsEnvironment_getInstance = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.k, getListInput = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.b, Parameters = kotlin_gradle_cache_action_layered_cache.$_$.c, resolveDistribution = kotlin_gradle_cache_action_gradle_launcher.$_$.d, currentTrigger = kotlin_gradle_cache_action_wrappers_octokit_webhooks.$_$.a, ActionStage_MAIN_getInstance = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.e, GradleCacheAction = kotlin_gradle_cache_action_layered_cache.$_$.b, listOf = kotlin_kotlin.$_$.y2, plus = kotlin_kotlin.$_$.c3, install = kotlin_gradle_cache_action_gradle_launcher.$_$.b, LaunchParams = kotlin_gradle_cache_action_gradle_launcher.$_$.a, CacheProxy = kotlin_gradle_cache_action_cache_proxy.$_$.a, get_normalizedPath = kotlin_gradle_cache_action_wrappers_nodejs.$_$.b, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, launchGradle = kotlin_gradle_cache_action_gradle_launcher.$_$.c, get_EmptyContinuation = kotlin_kotlin.$_$.r3;
    function splitLines(_this__u8e3s4) {
     for (var tmp0 = Regex_init_$Create$("\\s*[\r\n]+\\s*").na(_this__u8e3s4, 0), destination = ArrayList_init_$Create$(), _iterator__ex2g4s = tmp0.h(); _iterator__ex2g4s.i(); ) {
      var element = _iterator__ex2g4s.j();
      !startsWith(element, "#") && contains(element, "=") && destination.e(element);
     }
     for (var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(destination, 10)), 16), destination_0 = LinkedHashMap_init_$Create$(capacity), _iterator__ex2g4s_0 = destination.h(); _iterator__ex2g4s_0.i(); ) {
      var element_0 = _iterator__ex2g4s_0.j(), values = Regex_init_$Create$("\\s*=\\s*").na(element_0, 2), tmp = values.p(0), tmp0_elvis_lhs = getOrNull(values, 1), pair = to(tmp, null == tmp0_elvis_lhs ? "" : tmp0_elvis_lhs);
      destination_0.n1(pair.af_1, pair.bf_1);
     }
     return destination_0;
    }
    function isMochaRunning() {
     var tmp$ret$4, tmp1 = [ "afterEach", "after", "beforeEach", "before", "describe", "it" ];
     $l$block: {
      for (var inductionVariable = 0, last = tmp1.length; inductionVariable < last; ) {
       var element = tmp1[inductionVariable];
       inductionVariable = inductionVariable + 1 | 0;
       var tmp = globalThis[element];
       if (null == tmp || "function" != typeof tmp) {
        tmp$ret$4 = !1;
        break $l$block;
       }
      }
      tmp$ret$4 = !0;
     }
     return tmp$ret$4;
    }
    function mainInternal(stage, $completion) {
     var tmp = new $mainInternalCOROUTINE$1(stage, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function main$lambda() {
     return "MAIN";
    }
    function $mainCOROUTINE$0(resultContinuation) {
     CoroutineImpl.call(this, resultContinuation);
    }
    function $mainInternalCOROUTINE$1(stage, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.y25_1 = stage;
    }
    initMetadataForCoroutine($mainCOROUTINE$0, CoroutineImpl), initMetadataForCoroutine($mainInternalCOROUTINE$1, CoroutineImpl), 
    protoOf($mainCOROUTINE$0).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 4, isMochaRunning()) return Unit_instance;
       this.o25_1 = stateVariable("stage", main$lambda);
       var tmp$ret$0, tmp0 = values();
       l$ret$1: do {
        for (var inductionVariable = 0, last = tmp0.length; inductionVariable < last; ) {
         var element = tmp0[inductionVariable];
         if (inductionVariable = inductionVariable + 1 | 0, element.q1_1 === this.o25_1.zk()) {
          tmp$ret$0 = element;
          break l$ret$1;
         }
        }
        tmp$ret$0 = null;
       } while (0);
       this.p25_1 = tmp$ret$0;
       var tmp_2, tmp0_subject = this.p25_1;
       switch (null == tmp0_subject ? -1 : tmp0_subject.r1_1) {
       case 1:
        tmp_2 = ActionStage_POST_getInstance();
        break;

       case -1:
        return setFailed("Unable to find action stage: " + this.o25_1.zk()), Unit_instance;

       default:
        tmp_2 = null;
       }
       var tmp2_elvis_lhs = null == tmp_2 ? null : tmp_2.q1_1;
       if (this.o25_1.y1w(null == tmp2_elvis_lhs ? "FINAL" : tmp2_elvis_lhs), this.v6_1 = 2, 
       this.u6_1 = 1, (suspendResult = mainInternal(this.p25_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.v6_1 = 4, this.u6_1 = 3;
       continue $sm;

      case 2:
       if (this.v6_1 = 4, this.x6_1 instanceof ActionFailedException) {
        var e = this.x6_1;
        setFailed(e.nq_1), this.u6_1 = 3;
        continue $sm;
       }
       throw this.x6_1;

      case 3:
       return this.v6_1 = 4, Unit_instance;

      case 4:
       throw this.x6_1;
      }
     } catch ($p) {
      var e_0 = $p;
      if (4 === this.v6_1) throw e_0;
      this.u6_1 = this.v6_1, this.x6_1 = e_0;
     }
    }, protoOf($mainInternalCOROUTINE$1).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 16, this.z25_1 = trimEnd(getInput("home-directory"), charArrayOf([ _Char___init__impl__6a9atx(47), _Char___init__impl__6a9atx(92) ])), 
       "" !== this.z25_1 && (info("Overriding home directory to " + this.z25_1), node_process_process_dcpv5o.env.HOME = this.z25_1), 
       this.a26_1 = toList(parseArgsStringToArgv(getInput("arguments")));
       var tmp_1, this_0 = getInput("remote-build-cache-proxy-enabled");
       tmp_1 = isBlank(this_0) ? "true" : this_0, this.b26_1 = toBoolean(tmp_1);
       var tmp_3, this_1 = getInput("execution-only-caches");
       tmp_3 = isBlank(this_1) ? "false" : this_1, this.c26_1 = toBoolean(tmp_3);
       var tmp_5, this_2 = getInput("gradle-build-scan-report");
       tmp_5 = isBlank(this_2) ? "true" : this_2, this.d26_1 = toBoolean(tmp_5), this.e26_1 = trimEnd(getInput("build-root-directory"), charArrayOf([ _Char___init__impl__6a9atx(47), _Char___init__impl__6a9atx(92) ])), 
       "" !== this.e26_1 && (info("changing working directory to " + this.e26_1), node_process_process_dcpv5o.chdir(this.e26_1));
       var tmp_9, tmp_7 = ActionsEnvironment_getInstance().lr() + "-" + getInput("job-id"), tmp_8 = toBoolean(getInput("debug")), this_3 = getInput("save-generated-gradle-jars");
       tmp_9 = isBlank(this_3) ? "true" : this_3;
       var tmp_11, tmp_10 = toBoolean(tmp_9);
       if (!this.b26_1 || this.a26_1.q()) {
        var tmp_12, this_4 = getInput("save-local-build-cache");
        tmp_12 = isBlank(this_4) ? "true" : this_4, tmp_11 = toBoolean(tmp_12);
       } else tmp_11 = !1;
       var tmp_14, tmp_13 = tmp_11;
       if (this.c26_1) tmp_14 = !1; else {
        var tmp_15, this_5 = getInput("save-gradle-dependencies-cache");
        tmp_15 = isBlank(this_5) ? "true" : this_5, tmp_14 = toBoolean(tmp_15);
       }
       var tmp_18, tmp_16 = tmp_14, tmp_17 = getListInput("gradle-dependencies-cache-key");
       if (this.c26_1) tmp_18 = !1; else {
        var tmp_19, this_6 = getInput("save-maven-dependencies-cache");
        tmp_19 = isBlank(this_6) ? "true" : this_6, tmp_18 = toBoolean(tmp_19);
       }
       var tmp_22, tmp_20 = tmp_18, tmp_21 = getListInput("maven-local-ignore-paths"), this_7 = getInput("concurrent");
       tmp_22 = isBlank(this_7) ? "false" : this_7;
       var tmp_24, tmp_23 = toBoolean(tmp_22), this_8 = getInput("read-only");
       tmp_24 = isBlank(this_8) ? "false" : this_8, this.f26_1 = new Parameters(tmp_7, ".", tmp_8, tmp_10, tmp_13, tmp_16, tmp_17, tmp_20, tmp_21, tmp_23, toBoolean(tmp_24)), 
       this.u6_1 = 1;
       var tmp_31, this_9 = getInput("gradle-version"), tmp_26 = isBlank(this_9) ? "wrapper" : this_9, this_10 = getInput("gradle-distribution-url"), tmp_28 = isBlank(this_10) ? null : this_10, this_11 = getInput("gradle-distribution-sha-256-sum"), tmp_30 = isBlank(this_11) ? null : this_11, this_12 = getInput("gradle-distribution-sha-256-sum-warning");
       if (tmp_31 = isBlank(this_12) ? "true" : this_12, (suspendResult = resolveDistribution(tmp_26, this.f26_1.h1s_1, tmp_28, tmp_30, toBoolean(tmp_31), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.g26_1 = suspendResult, this.y25_1.equals(ActionStage_MAIN_getInstance()) || this.y25_1.equals(ActionStage_POST_getInstance())) {
        if (this.u6_1 = 2, (suspendResult = currentTrigger(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 5;
       continue $sm;

      case 2:
       if (this.h26_1 = suspendResult, this.i26_1 = new GradleCacheAction(this.h26_1, this.f26_1, this.g26_1), 
       this.f26_1.j1s_1 || this.f26_1.k1s_1 || this.f26_1.l1s_1 || this.f26_1.n1s_1) {
        if (this.u6_1 = 3, (suspendResult = this.i26_1.x1s(this.y25_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 4;
       continue $sm;

      case 3:
       this.u6_1 = 4;
       continue $sm;

      case 4:
       this.u6_1 = 5;
       continue $sm;

      case 5:
       if (!!this.y25_1.equals(ActionStage_MAIN_getInstance()) && !this.a26_1.q()) {
        if (this.j26_1 = !0 === (this.f26_1.k1s_1 || this.b26_1) ? plus(listOf("--build-cache"), this.a26_1) : this.a26_1, 
        this.u6_1 = 6, (suspendResult = install(this.g26_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 14;
       continue $sm;

      case 6:
       this.k26_1 = suspendResult;
       var tmp_35, this_13 = getInput("daemon");
       if (tmp_35 = isBlank(this_13) ? "false" : this_13, this.l26_1 = new LaunchParams(this.k26_1, toBoolean(tmp_35), this.f26_1.h1s_1, this.j26_1, splitLines(getInput("properties"))), 
       this.m26_1 = new CacheProxy, this.b26_1) {
        if (info("Starting remote cache proxy, adding it via ~/.gradle/init.gradle"), this.u6_1 = 7, 
        (suspendResult = this.m26_1.d1f(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 10;
       continue $sm;

      case 7:
       this.n26_1 = node_path_path_1155cy.join(get_normalizedPath("~"), ".gradle");
       if (this.o26_1 = this.n26_1, this.p26_1 = this.o26_1, this.u6_1 = 8, (suspendResult = awaitPromiseLike(mkdirP(this.p26_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 8:
       this.q26_1 = node_path_path_1155cy.join(this.n26_1, "init.gradle");
       var tmp_39, this_14 = getInput("multi-cache-enabled");
       tmp_39 = isBlank(this_14) ? "true" : this_14;
       var tmp_44, tmp_40 = toBoolean(tmp_39), this_15 = getInput("multi-cache-version"), tmp_42 = isBlank(this_15) ? "1.0" : this_15, tmp_43 = getInput("multi-cache-repository"), this_16 = getInput("multi-cache-group-id-filter");
       tmp_44 = isBlank(this_16) ? "com[.]github[.]burrunan[.]multi-?cache" : this_16, 
       this.r26_1 = this.m26_1.c1f(tmp_40, tmp_42, tmp_43, tmp_44, !this.f26_1.q1s_1);
       if (this.s26_1 = "utf8", this.t26_1 = this.q26_1, this.u26_1 = this.r26_1, this.v26_1 = this.s26_1, 
       this.u6_1 = 9, (suspendResult = awaitPromiseLike(writeFile(this.t26_1, this.u26_1, this.v26_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 9:
       this.u6_1 = 10;
       continue $sm;

      case 10:
       this.u6_1 = 11;
       continue $sm;

      case 11:
       if (this.v6_1 = 15, this.u6_1 = 12, (suspendResult = launchGradle(this.l26_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 12:
       var tmp_47, result = suspendResult;
       if (this.d26_1) {
        var tmp1_safe_receiver = result.j1o_1;
        null == tmp1_safe_receiver || (warning("Gradle Build Scan: " + tmp1_safe_receiver), 
        setOutput("build-scan-url", tmp1_safe_receiver)), tmp_47 = Unit_instance;
       }
       this.w26_1 = tmp_47, this.v6_1 = 16, this.u6_1 = 13;
       continue $sm;

      case 13:
       this.v6_1 = 16, this.b26_1 && this.m26_1.e1f(), this.u6_1 = 14;
       continue $sm;

      case 14:
       return Unit_instance;

      case 15:
       this.v6_1 = 16;
       var t = this.x6_1;
       throw this.b26_1 && this.m26_1.e1f(), t;

      case 16:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (16 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, $completion = get_EmptyContinuation(), (tmp = new $mainCOROUTINE$0($completion)).w6_1 = Unit_instance, 
    tmp.x6_1 = null, tmp.c7();
   }(module.exports, __webpack_require__(4613), __webpack_require__(1708), __webpack_require__(829), __webpack_require__(6760), __webpack_require__(8599), __webpack_require__(1455), __webpack_require__(7036), __webpack_require__(3161), __webpack_require__(7361), __webpack_require__(1284), __webpack_require__(5527), __webpack_require__(3257), __webpack_require__(3138), __webpack_require__(6077));
  },
  3257: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$node_url_6t8tpx, node_path_path_1155cy, $module$node_fs_4svwsv, $module$node_fs_promises_daq1pm, node_process_process_dcpv5o, $module$node_http_1wibjg, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core, kotlin_gradle_cache_action_cache_service_mock, kotlin_gradle_cache_action_wrappers_actions_toolkit, kotlin_gradle_cache_action_wrappers_actions_cache, kotlin_gradle_cache_action_wrappers_nodejs, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js) {
    "use strict";
    var Companion_instance_1, parse = $module$node_url_6t8tpx.parse, createWriteStream = $module$node_fs_4svwsv.createWriteStream, stat = $module$node_fs_promises_daq1pm.stat, createReadStream = $module$node_fs_4svwsv.createReadStream, createServer = $module$node_http_1wibjg.createServer, protoOf = kotlin_kotlin.$_$.l5, initMetadataForCompanion = kotlin_kotlin.$_$.x4, Unit_instance = kotlin_kotlin.$_$.u1, CoroutineImpl = kotlin_kotlin.$_$.d4, THROW_CCE = kotlin_kotlin.$_$.k7, CoroutineScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.d, isInterface = kotlin_kotlin.$_$.d5, removePrefix = kotlin_kotlin.$_$.j6, Companion_instance = kotlin_gradle_cache_action_cache_service_mock.$_$.b, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, initMetadataForLambda = kotlin_kotlin.$_$.a5, VOID = kotlin_kotlin.$_$.c, ensureNotNull = kotlin_kotlin.$_$.q7, handle = kotlin_gradle_cache_action_cache_service_mock.$_$.a, listOf = kotlin_kotlin.$_$.y2, LogLevel_DEBUG_getInstance = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.g, saveAndLog = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.d, removeFiles = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.j, _Result___init__impl__xyqfz8 = (kotlin_kotlin.$_$.t1, 
    kotlin_kotlin.$_$.n1), pipeAndWait = kotlin_gradle_cache_action_wrappers_nodejs.$_$.d, GlobalScope_instance = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.b, launch = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.e, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, emptyList = kotlin_kotlin.$_$.j2, restoreAndLog = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.c, None_getInstance = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.e, equals = kotlin_kotlin.$_$.q4, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, intercepted = kotlin_kotlin.$_$.p3, SafeContinuation_init_$Create$ = kotlin_kotlin.$_$.s, returnIfSuspended = kotlin_kotlin.$_$.e, mkdir = kotlin_gradle_cache_action_wrappers_nodejs.$_$.c, replace = kotlin_kotlin.$_$.l6, trimIndent = kotlin_kotlin.$_$.z6, initMetadataForClass = kotlin_kotlin.$_$.w4;
    function Companion() {
     this.z1b_1 = "GHA_CACHE_URL", this.a1c_1 = ".cache-proxy", this.b1c_1 = "1-";
    }
    function putEntry($this, id, req, res, $completion) {
     var tmp = new $putEntryCOROUTINE$0($this, id, req, res, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function getEntry($this, id, res, $completion) {
     var tmp = new $getEntryCOROUTINE$1($this, id, res, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function CacheProxy$server$lambda$slambda($path, $req, this$0, $res, resultContinuation) {
     this.u1d_1 = $path, this.v1d_1 = $req, this.w1d_1 = this$0, this.x1d_1 = $res, CoroutineImpl.call(this, resultContinuation);
    }
    function CacheProxy$server$lambda(this$0) {
     return function(req, res) {
      var tmp0_elvis_lhs = parse(ensureNotNull(req.url), !0).pathname;
      return handle(res, function($path, $req, this$0, $res, resultContinuation) {
       var i = new CacheProxy$server$lambda$slambda($path, $req, this$0, $res, resultContinuation), l = function($this$handle, $completion) {
        return i.mt($this$handle, $completion);
       };
       return l.$arity = 1, l;
      }(null == tmp0_elvis_lhs ? "" : tmp0_elvis_lhs, req, this$0, res, null)), Unit_instance;
     };
    }
    function CacheProxy$putEntry$slambda($fileName, $id, resultContinuation) {
     this.k1e_1 = $fileName, this.l1e_1 = $id, CoroutineImpl.call(this, resultContinuation);
    }
    function CacheProxy$putEntry$slambda_0($fileName, $id, resultContinuation) {
     var i = new CacheProxy$putEntry$slambda($fileName, $id, resultContinuation), l = function($this$launch, $completion) {
      return i.mt($this$launch, $completion);
     };
     return l.$arity = 1, l;
    }
    function CacheProxy$start$lambda($cont) {
     return function() {
      var this_0 = $cont, tmp$ret$0 = _Result___init__impl__xyqfz8(null);
      return this_0.f7(tmp$ret$0), Unit_instance;
     };
    }
    function $putEntryCOROUTINE$0(_this__u8e3s4, id, req, res, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.k1c_1 = _this__u8e3s4, this.l1c_1 = id, 
     this.m1c_1 = req, this.n1c_1 = res;
    }
    function $getEntryCOROUTINE$1(_this__u8e3s4, id, res, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.y1c_1 = _this__u8e3s4, this.z1c_1 = id, 
     this.a1d_1 = res;
    }
    function $startCOROUTINE$2(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.x1e_1 = _this__u8e3s4;
    }
    function CacheProxy() {
     this.y1e_1 = null;
     this.z1e_1 = createServer(CacheProxy$server$lambda(this)), this.a1f_1 = "com.github.burrunan.multi-cache";
    }
    initMetadataForCompanion(Companion), initMetadataForLambda(CacheProxy$server$lambda$slambda, CoroutineImpl, VOID, [ 1 ]), 
    initMetadataForLambda(CacheProxy$putEntry$slambda, CoroutineImpl, VOID, [ 1 ]), 
    initMetadataForCoroutine($putEntryCOROUTINE$0, CoroutineImpl), initMetadataForCoroutine($getEntryCOROUTINE$1, CoroutineImpl), 
    initMetadataForCoroutine($startCOROUTINE$2, CoroutineImpl), initMetadataForClass(CacheProxy, "CacheProxy", CacheProxy, VOID, VOID, [ 3, 2, 0, 1 ]), 
    protoOf(CacheProxy$server$lambda$slambda).mt = function($this$handle, $completion) {
     var tmp = this.nt($this$handle, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(CacheProxy$server$lambda$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(CacheProxy$server$lambda$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 4, this.z1d_1 = removePrefix(this.u1d_1, "/"), this.a1e_1 = this.v1d_1.method, 
       "GET" === this.a1e_1) {
        if (this.u6_1 = 2, (suspendResult = getEntry(this.w1d_1, this.z1d_1, this.x1d_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       if ("PUT" === this.a1e_1) {
        if (this.u6_1 = 1, (suspendResult = putEntry(this.w1d_1, this.z1d_1, this.v1d_1, this.x1d_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.b1e_1 = Companion_instance.l12("Not implemented: " + this.v1d_1.method), this.u6_1 = 3;
       continue $sm;

      case 1:
       this.b1e_1 = Unit_instance, this.u6_1 = 3;
       continue $sm;

      case 2:
       this.b1e_1 = Unit_instance, this.u6_1 = 3;
       continue $sm;

      case 3:
       return Unit_instance;

      case 4:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (4 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(CacheProxy$server$lambda$slambda).nt = function($this$handle, completion) {
     var i = new CacheProxy$server$lambda$slambda(this.u1d_1, this.v1d_1, this.w1d_1, this.x1d_1, completion);
     return i.y1d_1 = $this$handle, i;
    }, protoOf(CacheProxy$putEntry$slambda).mt = function($this$launch, $completion) {
     var tmp = this.nt($this$launch, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(CacheProxy$putEntry$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(CacheProxy$putEntry$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 7, this.u6_1 = 1;
       continue $sm;

      case 1:
       if (this.v6_1 = 5, this.u6_1 = 2, (suspendResult = saveAndLog(listOf(this.k1e_1), this.l1e_1, Companion_instance_1.b1c_1, LogLevel_DEBUG_getInstance(), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       this.n1e_1 = suspendResult, this.v6_1 = 7, this.u6_1 = 3;
       continue $sm;

      case 3:
       if (this.v6_1 = 7, this.u6_1 = 4, (suspendResult = removeFiles(listOf(this.k1e_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 4:
       return Unit_instance;

      case 5:
       if (this.v6_1 = 7, this.o1e_1 = this.x6_1, this.u6_1 = 6, (suspendResult = removeFiles(listOf(this.k1e_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 6:
       throw this.o1e_1;

      case 7:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (7 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(CacheProxy$putEntry$slambda).nt = function($this$launch, completion) {
     var i = new CacheProxy$putEntry$slambda(this.k1e_1, this.l1e_1, completion);
     return i.m1e_1 = $this$launch, i;
    }, protoOf($putEntryCOROUTINE$0).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 5, this.o1c_1 = node_path_path_1155cy.join(".cache-proxy", "bc-" + this.l1c_1), 
       this.u6_1 = 1;
       continue $sm;

      case 1:
       if (this.v6_1 = 4, this.u6_1 = 2, (suspendResult = pipeAndWait(this.m1c_1, createWriteStream(this.o1c_1), VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       this.n1c_1.writeHead(200, "OK", undefined), this.p1c_1 = Unit_instance, this.v6_1 = 5, 
       this.u6_1 = 3;
       continue $sm;

      case 3:
       return this.v6_1 = 5, launch(GlobalScope_instance, VOID, VOID, CacheProxy$putEntry$slambda_0(this.o1c_1, this.l1c_1, null)), 
       Unit_instance;

      case 4:
       this.v6_1 = 5;
       var t = this.x6_1;
       throw launch(GlobalScope_instance, VOID, VOID, CacheProxy$putEntry$slambda_0(this.o1c_1, this.l1c_1, null)), 
       t;

      case 5:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (5 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($getEntryCOROUTINE$1).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 4, this.b1d_1 = node_path_path_1155cy.join(".cache-proxy", "bc-" + this.z1c_1), 
       this.u6_1 = 1;
       var tmp_0 = listOf(this.b1d_1);
       if ((suspendResult = restoreAndLog(tmp_0, this.z1c_1, emptyList(), Companion_instance_1.b1c_1, LogLevel_DEBUG_getInstance(), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.c1d_1 = suspendResult, equals(this.c1d_1, None_getInstance())) throw Companion_instance.m12("No cache entry found for " + this.z1c_1);
       this.d1d_1 = {}, this.e1d_1 = this.d1d_1;
       this.f1d_1 = this.e1d_1, this.g1d_1 = this.f1d_1;
       if (this.h1d_1 = this.b1d_1, this.i1d_1 = this.h1d_1, this.u6_1 = 2, (suspendResult = awaitPromiseLike(stat(this.i1d_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       if (this.j1d_1 = suspendResult, this.k1d_1 = this.j1d_1.size, this.g1d_1["content-length"] = this.k1d_1, 
       this.l1d_1 = this.e1d_1, this.a1d_1.writeHead(200, "Ok", this.l1d_1), this.u6_1 = 3, 
       (suspendResult = pipeAndWait(createReadStream(this.b1d_1), this.a1d_1, VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 3:
       return Unit_instance;

      case 4:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (4 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($startCOROUTINE$2).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 3, this.u6_1 = 1;
       var safe = SafeContinuation_init_$Create$(intercepted(this));
       if (this.x1e_1.z1e_1.listen(0, CacheProxy$start$lambda(safe)), (suspendResult = returnIfSuspended(safe.m7(), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.u6_1 = 2, (suspendResult = mkdir(".cache-proxy", this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       var url = "http://localhost:" + this.x1e_1.z1e_1.address().port + "/";
       return this.x1e_1.y1e_1 = url, node_process_process_dcpv5o.env.GHA_CACHE_URL = url, 
       Unit_instance;

      case 3:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (3 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(CacheProxy).b1f = function() {
     return this.y1e_1;
    }, protoOf(CacheProxy).c1f = function(multiCacheEnabled, multiCacheVersion, multiCacheRepository, multiCacheGroupIdFilter, push) {
     var multiCacheGroupIdFilterEscaped = replace(multiCacheGroupIdFilter, "\\", "\\\\");
     return trimIndent("\n            def pluginId = 'com.github.burrunan.multi-cache'\n            def multiCacheVersion = '1.0'\n            def multiCacheGroupIdFilter = 'com[.]github[.]burrunan[.]multi-?cache'\n            boolean multiCacheEnabled = " + multiCacheEnabled + "\n            String multiCacheRepository = '" + multiCacheRepository + "'\n            boolean gradle6Plus = org.gradle.util.GradleVersion.current() >= org.gradle.util.GradleVersion.version('6.0')\n            // beforeSettings is Gradle 6.0+\n            if (multiCacheEnabled && !gradle6Plus) {\n                println(\"Multiple remote build caches (" + this.a1f_1 + ") are supported in Gradle 6.0+ only\")\n                multiCacheEnabled = false\n            }\n            if (multiCacheEnabled) {\n                beforeSettings { settings ->\n                    def repos = settings.buildscript.repositories\n                    if (multiCacheRepository != '') {\n                        repos.add(\n                            repos.maven {\n                                url = multiCacheRepository\n                                if ('" + multiCacheGroupIdFilterEscaped + "' != '') {\n                                    content {\n                                        includeGroupByRegex('" + multiCacheGroupIdFilterEscaped + "')\n                                    }\n                                }\n                            }\n                        )\n                    } else if (repos.isEmpty()) {\n                        repos.add(repos.gradlePluginPortal())\n                    }\n                    settings.buildscript.dependencies {\n                        classpath(\"" + this.a1f_1 + ":" + this.a1f_1 + ".gradle.plugin:" + multiCacheVersion + '")\n                    }\n                }\n            }\n\n            settingsEvaluated { settings ->\n                settings.buildCache {\n                    boolean needMulticache = remote != null\n                    if (needMulticache && !multiCacheEnabled) {\n                        println("' + this.a1f_1 + ' is disabled")\n                        return\n                    }\n\n                    local {\n                        enabled = true\n                        push = ' + push + '\n                    }\n                    if (needMulticache) {\n                        settings.pluginManager.apply("' + this.a1f_1 + "\")\n                        settings.multicache.push('base')\n                    }\n                    remote(HttpBuildCache) {\n                        url = '" + this.b1f() + "'\n                        push = " + push + "\n                        // Build cache is located on localhost, so it is fine to use http protocol\n                        if (gradle6Plus) {\n                            allowInsecureProtocol = true\n                        }\n                    }\n                    if (needMulticache) {\n                        settings.multicache.pushAndConfigure('actions-cache') {\n                            loadSequentiallyWriteConcurrently('actions-cache', 'base')\n                        }\n                    }\n                }\n            }\n        ");
    }, protoOf(CacheProxy).d1f = function($completion) {
     var tmp = new $startCOROUTINE$2(this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(CacheProxy).e1f = function() {
     this.z1e_1.close();
    }, Companion_instance_1 = new Companion, _.$_$ = _.$_$ || {}, _.$_$.a = CacheProxy;
   }(module.exports, __webpack_require__(3136), __webpack_require__(6760), __webpack_require__(3024), __webpack_require__(1455), __webpack_require__(1708), __webpack_require__(7067), __webpack_require__(7036), __webpack_require__(9613), __webpack_require__(7725), __webpack_require__(7361), __webpack_require__(677), __webpack_require__(3138), __webpack_require__(6077));
  },
  7725: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core) {
    "use strict";
    var Companion_instance, protoOf = kotlin_kotlin.$_$.l5, initMetadataForCompanion = kotlin_kotlin.$_$.x4, extendThrowable = kotlin_kotlin.$_$.r4, captureStack = kotlin_kotlin.$_$.j4, initMetadataForClass = kotlin_kotlin.$_$.w4, VOID = kotlin_kotlin.$_$.c, GlobalScope_instance = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.b, launch = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.e, CoroutineImpl = kotlin_kotlin.$_$.d4, Unit_instance = kotlin_kotlin.$_$.u1, THROW_CCE = kotlin_kotlin.$_$.k7, CoroutineScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.d, isInterface = kotlin_kotlin.$_$.d5, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, initMetadataForLambda = kotlin_kotlin.$_$.a5, supervisorScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.a, printStackTrace = kotlin_kotlin.$_$.v7;
    function Companion() {}
    function HttpException(code, message) {
     extendThrowable(this, message), captureStack(this, HttpException), this.n12_1 = code;
    }
    function handle$slambda$slambda($action, resultContinuation) {
     this.w12_1 = $action, CoroutineImpl.call(this, resultContinuation);
    }
    function handle$slambda$slambda_0($action, resultContinuation) {
     var i = new handle$slambda$slambda($action, resultContinuation), l = function($this$supervisorScope, $completion) {
      return i.mt($this$supervisorScope, $completion);
     };
     return l.$arity = 1, l;
    }
    function handle$slambda($this_handle, $action, resultContinuation) {
     this.g13_1 = $this_handle, this.h13_1 = $action, CoroutineImpl.call(this, resultContinuation);
    }
    initMetadataForCompanion(Companion), initMetadataForClass(HttpException, "HttpException", VOID, Error), 
    initMetadataForLambda(handle$slambda$slambda, CoroutineImpl, VOID, [ 1 ]), initMetadataForLambda(handle$slambda, CoroutineImpl, VOID, [ 1 ]), 
    protoOf(Companion).l12 = function(message) {
     return new HttpException(501, message);
    }, protoOf(Companion).m12 = function(message) {
     return new HttpException(404, message);
    }, protoOf(handle$slambda$slambda).mt = function($this$supervisorScope, $completion) {
     var tmp = this.nt($this$supervisorScope, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(handle$slambda$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(handle$slambda$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 2, this.u6_1 = 1, (suspendResult = this.w12_1(this.x12_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       return Unit_instance;

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(handle$slambda$slambda).nt = function($this$supervisorScope, completion) {
     var i = new handle$slambda$slambda(this.w12_1, completion);
     return i.x12_1 = $this$supervisorScope, i;
    }, protoOf(handle$slambda).mt = function($this$launch, $completion) {
     var tmp = this.nt($this$launch, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(handle$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(handle$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 5, this.u6_1 = 1;
       continue $sm;

      case 1:
       if (this.v6_1 = 4, this.v6_1 = 3, this.u6_1 = 2, (suspendResult = supervisorScope(handle$slambda$slambda_0(this.h13_1, null), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       this.j13_1 = suspendResult, this.v6_1 = 5, this.u6_1 = 6;
       continue $sm;

      case 3:
       if (this.v6_1 = 4, this.x6_1 instanceof HttpException) {
        var e = this.x6_1, tmp0_elvis_lhs = e.message, tmp_2 = null == tmp0_elvis_lhs ? "no message" : tmp0_elvis_lhs;
        this.g13_1.writeHead(e.n12_1, tmp_2, undefined), this.j13_1 = Unit_instance, this.v6_1 = 5, 
        this.u6_1 = 6;
        continue $sm;
       }
       if (this.x6_1 instanceof Error) {
        var e_0 = this.x6_1;
        printStackTrace(e_0);
        var tmp_5 = "Error processing " + e_0.message;
        this.g13_1.writeHead(500, tmp_5, undefined), this.j13_1 = Unit_instance, this.v6_1 = 5, 
        this.u6_1 = 6;
        continue $sm;
       }
       throw this.x6_1;

      case 4:
       this.v6_1 = 5;
       var t = this.x6_1;
       throw this.g13_1.end(), t;

      case 5:
       throw this.x6_1;

      case 6:
       return this.v6_1 = 5, this.g13_1.end(), Unit_instance;
      }
     } catch ($p) {
      var e_1 = $p;
      if (5 === this.v6_1) throw e_1;
      this.u6_1 = this.v6_1, this.x6_1 = e_1;
     }
    }, protoOf(handle$slambda).nt = function($this$launch, completion) {
     var i = new handle$slambda(this.g13_1, this.h13_1, completion);
     return i.i13_1 = $this$launch, i;
    }, Companion_instance = new Companion, _.$_$ = _.$_$ || {}, _.$_$.a = function(_this__u8e3s4, action) {
     var i, l;
     return launch(GlobalScope_instance, VOID, VOID, (i = new handle$slambda(_this__u8e3s4, action, null), 
     (l = function($this$launch, $completion) {
      return i.mt($this$launch, $completion);
     }).$arity = 1, l));
    }, _.$_$.b = Companion_instance;
   }(module.exports, __webpack_require__(7036), __webpack_require__(9613));
  },
  1284: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$_actions_io_79d2l8, $module$_actions_tool_cache_bge9h1, $module$_actions_core_fx0i1v, node_path_path_1155cy, $module$node_os_4svwl4, $module$node_fs_promises_daq1pm, $module$_actions_http_client_ma87oy, node_process_process_dcpv5o, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js, kotlin_gradle_cache_action_hashing, kotlin_gradle_cache_action_wrappers_actions_toolkit, kotlin_gradle_cache_action_wrappers_nodejs, kotlin_gradle_cache_action_wrappers_java_properties) {
    "use strict";
    var HTTP_AGENT, properties_initialized_GradleInstaller_kt_g293ov, Companion_instance, Current_instance, ReleaseCandidate_instance, Nightly_instance, ReleaseNightly_instance, Wrapper_instance, errorHeaderValues, ErrorHeader_FAILURE_instance, ErrorHeader_WHERE_instance, ErrorHeader_WHAT_WENT_WRONG_instance, ErrorHeader_TRY_instance, ErrorHeader_entriesInitialized, properties_initialized_GradleErrorCollector_kt_b094ge, KOTLIN_COMPILE_ERROR, CHECKSTYLE_ERROR, JAVA_ERROR, properties_initialized_GradleOutErrorCollector_kt_hea2pw, imul = Math.imul, rmRF = $module$_actions_io_79d2l8.rmRF, find = $module$_actions_tool_cache_bge9h1.find, downloadTool = $module$_actions_tool_cache_bge9h1.downloadTool, info = $module$_actions_core_fx0i1v.info, extractZip = $module$_actions_tool_cache_bge9h1.extractZip, cacheDir = $module$_actions_tool_cache_bge9h1.cacheDir, platform = $module$node_os_4svwl4.platform, chmod = $module$node_fs_promises_daq1pm.chmod, HttpClient = $module$_actions_http_client_ma87oy.HttpClient, warning = $module$_actions_core_fx0i1v.warning, readFile = $module$node_fs_promises_daq1pm.readFile, setOutput = $module$_actions_core_fx0i1v.setOutput, error = $module$_actions_core_fx0i1v.error, setFailed = $module$_actions_core_fx0i1v.setFailed, protoOf = kotlin_kotlin.$_$.l5, getStringHashCode = kotlin_kotlin.$_$.u4, THROW_CCE = kotlin_kotlin.$_$.k7, initMetadataForClass = kotlin_kotlin.$_$.w4, VOID = kotlin_kotlin.$_$.c, Unit_instance = kotlin_kotlin.$_$.u1, CoroutineImpl = kotlin_kotlin.$_$.d4, noWhenBranchMatchedException = kotlin_kotlin.$_$.t7, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, CoroutineScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.d, isInterface = kotlin_kotlin.$_$.d5, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, initMetadataForLambda = kotlin_kotlin.$_$.a5, charSequenceLength = kotlin_kotlin.$_$.n4, hashFiles = kotlin_gradle_cache_action_hashing.$_$.d, ActionFailedException = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.c, GlobalScope_instance = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.b, launch = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.e, equals = kotlin_kotlin.$_$.q4, toInt = kotlin_kotlin.$_$.w6, toString = kotlin_kotlin.$_$.o5, exists = kotlin_gradle_cache_action_wrappers_nodejs.$_$.a, parseString = kotlin_gradle_cache_action_wrappers_java_properties.$_$.a, mapCapacity = kotlin_kotlin.$_$.a3, coerceAtLeast = kotlin_kotlin.$_$.s5, LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.m, ensureNotNull = kotlin_kotlin.$_$.q7, getValue = kotlin_kotlin.$_$.p2, substringAfterLast = kotlin_kotlin.$_$.p6, substringAfter = kotlin_kotlin.$_$.r6, removeSuffix = kotlin_kotlin.$_$.k6, endsWith = kotlin_kotlin.$_$.c6, removePrefix = kotlin_kotlin.$_$.j6, startsWith = kotlin_kotlin.$_$.n6, isCharSequence = kotlin_kotlin.$_$.c5, trim = kotlin_kotlin.$_$.b7, trimEnd = kotlin_kotlin.$_$.x6, listOf = kotlin_kotlin.$_$.y2, ArrayList_init_$Create$ = kotlin_kotlin.$_$.g, plus = kotlin_kotlin.$_$.c3, copyToArray = kotlin_kotlin.$_$.i2, exec = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.i, listOf_0 = kotlin_kotlin.$_$.z2, plus_0 = kotlin_kotlin.$_$.d3, initMetadataForCompanion = kotlin_kotlin.$_$.x4, initMetadataForObject = kotlin_kotlin.$_$.b5, Enum = kotlin_kotlin.$_$.e7, ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.h, StringBuilder_init_$Create$ = kotlin_kotlin.$_$.v, LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.n, Regex_init_$Create$ = kotlin_kotlin.$_$.t, toInt_0 = kotlin_kotlin.$_$.v6, _Char___init__impl__6a9atx = kotlin_kotlin.$_$.j1, isBlank = kotlin_kotlin.$_$.f6, joinToString = kotlin_kotlin.$_$.s2;
    function GradleDistribution(version, distributionUrl, distributionSha256Sum) {
     this.q1i_1 = version, this.r1i_1 = distributionUrl, this.s1i_1 = distributionSha256Sum;
    }
    function $resolveDistributionCOROUTINE$0(versionSpec, projectPath, distributionUrl, distributionSha256Sum, enableDistributionSha256SumWarning, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.b1j_1 = versionSpec, this.c1j_1 = projectPath, 
     this.d1j_1 = distributionUrl, this.e1j_1 = distributionSha256Sum, this.f1j_1 = enableDistributionSha256SumWarning;
    }
    function get_HTTP_AGENT() {
     return function() {
      if (!properties_initialized_GradleInstaller_kt_g293ov) {
       properties_initialized_GradleInstaller_kt_g293ov = !0;
       var this_0 = {
        "User-Agent": "burrunan/gradle-cache-action"
       };
       HTTP_AGENT = this_0;
      }
     }(), HTTP_AGENT;
    }
    function findUrl(_this__u8e3s4, $completion) {
     var tmp = new $findUrlCOROUTINE$2(_this__u8e3s4, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function findUrl_0(_this__u8e3s4, $completion) {
     var tmp = new $findUrlCOROUTINE$3(_this__u8e3s4, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function findVersionFromWrapper(projectPath, enableDistributionSha256SumWarning, $completion) {
     var tmp = new $findVersionFromWrapperCOROUTINE$4(projectPath, enableDistributionSha256SumWarning, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function resolveChecksum(_this__u8e3s4, $completion) {
     var tmp = new $resolveChecksumCOROUTINE$5(_this__u8e3s4, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function install$slambda($gradleZip, $extractedGradleDir, resultContinuation) {
     this.z1n_1 = $gradleZip, this.a1o_1 = $extractedGradleDir, CoroutineImpl.call(this, resultContinuation);
    }
    function install$slambda_0($gradleZip, $extractedGradleDir, resultContinuation) {
     var i = new install$slambda($gradleZip, $extractedGradleDir, resultContinuation), l = function($this$launch, $completion) {
      return i.mt($this$launch, $completion);
     };
     return l.$arity = 1, l;
    }
    function $installCOROUTINE$1(distribution, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.r1j_1 = distribution;
    }
    function $findUrlCOROUTINE$2(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.l1l_1 = _this__u8e3s4;
    }
    function $findUrlCOROUTINE$3(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.a1m_1 = _this__u8e3s4;
    }
    function $findVersionFromWrapperCOROUTINE$4(projectPath, enableDistributionSha256SumWarning, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.n1m_1 = projectPath, this.o1m_1 = enableDistributionSha256SumWarning;
    }
    function $resolveChecksumCOROUTINE$5(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.j1n_1 = _this__u8e3s4;
    }
    function GradleResult(buildScanUrl) {
     this.j1o_1 = buildScanUrl;
    }
    function launchGradle$lambda$lambda($buildScanUrl, $outCollector) {
     return function(it) {
      var str = toString(trimEnd(isCharSequence(it) ? it : THROW_CCE()));
      return startsWith(str, "https://gradle.com/s/") && (setOutput("build-scan-url", str), 
      $buildScanUrl._v = str, Unit_instance), $outCollector.c1p(str), Unit_instance;
     };
    }
    function launchGradle$lambda$lambda_0($errorCollector, $outCollector) {
     return function(it) {
      return $errorCollector.c1p(it), $outCollector.c1p(it), Unit_instance;
     };
    }
    function launchGradle$lambda($params, $buildScanUrl, $outCollector, $errorCollector) {
     return function(it) {
      var tmp0_cwd = $params.k1p_1, listeners = {
       stdline: launchGradle$lambda$lambda($buildScanUrl, $outCollector),
       errline: launchGradle$lambda$lambda_0($errorCollector, $outCollector)
      };
      return Object.assign({}, it, {
       ignoreReturnCode: !0,
       cwd: tmp0_cwd,
       listeners
      });
     };
    }
    function $launchGradleCOROUTINE$6(params, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.s1o_1 = params;
    }
    function Companion() {
     Companion_instance = this, this.s1p_1 = listOf_0([ Current_getInstance(), ReleaseCandidate_getInstance(), Nightly_getInstance(), ReleaseNightly_getInstance() ]), 
     this.t1p_1 = plus_0(this.s1p_1, function() {
      null == Wrapper_instance && new Wrapper;
      return Wrapper_instance;
     }());
    }
    function Companion_getInstance() {
     return null == Companion_instance && new Companion, Companion_instance;
    }
    function Dynamic(label, apiPath) {
     GradleVersion.call(this, label), this.i1o_1 = apiPath;
    }
    function Official(label) {
     GradleVersion.call(this, label);
    }
    function Current() {
     Current_instance = this, Dynamic.call(this, "current", "current");
    }
    function Current_getInstance() {
     return null == Current_instance && new Current, Current_instance;
    }
    function ReleaseCandidate() {
     ReleaseCandidate_instance = this, Dynamic.call(this, "rc", "release-candidate");
    }
    function ReleaseCandidate_getInstance() {
     return null == ReleaseCandidate_instance && new ReleaseCandidate, ReleaseCandidate_instance;
    }
    function Nightly() {
     Nightly_instance = this, Dynamic.call(this, "nightly", "nightly");
    }
    function Nightly_getInstance() {
     return null == Nightly_instance && new Nightly, Nightly_instance;
    }
    function ReleaseNightly() {
     ReleaseNightly_instance = this, Dynamic.call(this, "release-nightly", "release-nightly");
    }
    function ReleaseNightly_getInstance() {
     return null == ReleaseNightly_instance && new ReleaseNightly, ReleaseNightly_instance;
    }
    function Wrapper() {
     Wrapper_instance = this, GradleVersion.call(this, "wrapper");
    }
    function GradleVersion(name, unused) {
     Companion_getInstance(), unused = unused === VOID ? 0 : unused, this.g1o_1 = name;
    }
    function GradleVersion_0(version) {
     var tmp$ret$1;
     $l$block: {
      for (var _iterator__ex2g4s = Companion_getInstance().t1p_1.h(); _iterator__ex2g4s.i(); ) {
       var element = _iterator__ex2g4s.j();
       if (element.g1o_1 === version) {
        tmp$ret$1 = element;
        break $l$block;
       }
      }
      tmp$ret$1 = null;
     }
     var tmp0_elvis_lhs = tmp$ret$1;
     return null == tmp0_elvis_lhs ? new Official(version) : tmp0_elvis_lhs;
    }
    function LaunchParams(gradle, daemon, projectPath, arguments_0, properties) {
     this.i1p_1 = gradle, this.j1p_1 = daemon, this.k1p_1 = projectPath, this.l1p_1 = arguments_0, 
     this.m1p_1 = properties;
    }
    function GradleError(message, file, line, col) {
     file = file === VOID ? null : file, line = line === VOID ? null : line, col = col === VOID ? null : col, 
     this.o1p_1 = message, this.p1p_1 = file, this.q1p_1 = line, this.r1p_1 = col;
    }
    function get_errorHeaderValues() {
     return properties_initialized_GradleErrorCollector_kt_b094ge || (properties_initialized_GradleErrorCollector_kt_b094ge = !0, 
     errorHeaderValues = [ ErrorHeader_FAILURE_getInstance(), ErrorHeader_WHERE_getInstance(), ErrorHeader_WHAT_WENT_WRONG_getInstance(), ErrorHeader_TRY_getInstance() ]), 
     errorHeaderValues;
    }
    function ErrorHeader_initEntries() {
     if (ErrorHeader_entriesInitialized) return Unit_instance;
     ErrorHeader_entriesInitialized = !0, ErrorHeader_FAILURE_instance = new ErrorHeader("FAILURE", 0, "FAILURE: "), 
     ErrorHeader_WHERE_instance = new ErrorHeader("WHERE", 1, "* Where:"), ErrorHeader_WHAT_WENT_WRONG_instance = new ErrorHeader("WHAT_WENT_WRONG", 2, "* What went wrong:"), 
     ErrorHeader_TRY_instance = new ErrorHeader("TRY", 3, "* Try:");
    }
    function ErrorHeader(name, ordinal, message) {
     Enum.call(this, name, ordinal), this.w1p_1 = message;
    }
    function GradleErrorCollector() {
     this.d1p_1 = ArrayList_init_$Create$_0(), this.e1p_1 = this.d1p_1, this.f1p_1 = StringBuilder_init_$Create$(), 
     this.g1p_1 = null;
     this.h1p_1 = LinkedHashMap_init_$Create$_0();
    }
    function ErrorHeader_FAILURE_getInstance() {
     return ErrorHeader_initEntries(), ErrorHeader_FAILURE_instance;
    }
    function ErrorHeader_WHERE_getInstance() {
     return ErrorHeader_initEntries(), ErrorHeader_WHERE_instance;
    }
    function ErrorHeader_WHAT_WENT_WRONG_getInstance() {
     return ErrorHeader_initEntries(), ErrorHeader_WHAT_WENT_WRONG_instance;
    }
    function ErrorHeader_TRY_getInstance() {
     return ErrorHeader_initEntries(), ErrorHeader_TRY_instance;
    }
    function processJavaError($this, line) {
     var tmp0_safe_receiver = (_init_properties_GradleOutErrorCollector_kt__gu17ja(), 
     JAVA_ERROR).ma(line);
     if (null != tmp0_safe_receiver) return $this.n1p(), $this.a1p_1 = tmp0_safe_receiver, 
     Unit_instance;
     if (null != $this.a1p_1) {
      var errorContinuation = startsWith(line, " ");
      errorContinuation && $this.b1p_1.e(line), (!errorContinuation || $this.b1p_1.k() >= 3) && $this.n1p();
     }
    }
    function GradleOutErrorCollector() {
     this.x1o_1 = ArrayList_init_$Create$_0(), this.y1o_1 = this.x1o_1, this.z1o_1 = "Unknown task", 
     this.a1p_1 = null;
     this.b1p_1 = ArrayList_init_$Create$_0();
    }
    function _init_properties_GradleOutErrorCollector_kt__gu17ja() {
     properties_initialized_GradleOutErrorCollector_kt_hea2pw || (properties_initialized_GradleOutErrorCollector_kt_hea2pw = !0, 
     KOTLIN_COMPILE_ERROR = Regex_init_$Create$("^e: (\\S.+?):(\\d+):(?:(\\d+):)? (.+)$"), 
     CHECKSTYLE_ERROR = Regex_init_$Create$("^\\[ant:checkstyle\\] \\[ERROR\\] (\\S.+?):(\\d+):(?:(\\d+):)? (.+) \\[([^\\]]+)\\]$"), 
     JAVA_ERROR = Regex_init_$Create$("^(\\S.+?):(\\d+): error: (.+)$"));
    }
    initMetadataForClass(GradleDistribution, "GradleDistribution"), initMetadataForCoroutine($resolveDistributionCOROUTINE$0, CoroutineImpl), 
    initMetadataForLambda(install$slambda, CoroutineImpl, VOID, [ 1 ]), initMetadataForCoroutine($installCOROUTINE$1, CoroutineImpl), 
    initMetadataForCoroutine($findUrlCOROUTINE$2, CoroutineImpl), initMetadataForCoroutine($findUrlCOROUTINE$3, CoroutineImpl), 
    initMetadataForCoroutine($findVersionFromWrapperCOROUTINE$4, CoroutineImpl), initMetadataForCoroutine($resolveChecksumCOROUTINE$5, CoroutineImpl), 
    initMetadataForClass(GradleResult, "GradleResult"), initMetadataForCoroutine($launchGradleCOROUTINE$6, CoroutineImpl), 
    initMetadataForCompanion(Companion), initMetadataForClass(GradleVersion, "GradleVersion"), 
    initMetadataForClass(Dynamic, "Dynamic", VOID, GradleVersion), initMetadataForClass(Official, "Official", VOID, GradleVersion), 
    initMetadataForObject(Current, "Current", VOID, Dynamic), initMetadataForObject(ReleaseCandidate, "ReleaseCandidate", VOID, Dynamic), 
    initMetadataForObject(Nightly, "Nightly", VOID, Dynamic), initMetadataForObject(ReleaseNightly, "ReleaseNightly", VOID, Dynamic), 
    initMetadataForObject(Wrapper, "Wrapper", VOID, GradleVersion), initMetadataForClass(LaunchParams, "LaunchParams"), 
    initMetadataForClass(GradleError, "GradleError"), initMetadataForClass(ErrorHeader, "ErrorHeader", VOID, Enum), 
    initMetadataForClass(GradleErrorCollector, "GradleErrorCollector", GradleErrorCollector), 
    initMetadataForClass(GradleOutErrorCollector, "GradleOutErrorCollector", GradleOutErrorCollector), 
    protoOf(GradleDistribution).toString = function() {
     return "GradleDistribution(version=" + this.q1i_1 + ", distributionUrl=" + this.r1i_1 + ", distributionSha256Sum=" + this.s1i_1 + ")";
    }, protoOf(GradleDistribution).hashCode = function() {
     var result = getStringHashCode(this.q1i_1);
     return result = imul(result, 31) + getStringHashCode(this.r1i_1) | 0, result = imul(result, 31) + (null == this.s1i_1 ? 0 : getStringHashCode(this.s1i_1)) | 0;
    }, protoOf(GradleDistribution).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof GradleDistribution)) return !1;
     var tmp0_other_with_cast = other instanceof GradleDistribution ? other : THROW_CCE();
     return this.q1i_1 === tmp0_other_with_cast.q1i_1 && (this.r1i_1 === tmp0_other_with_cast.r1i_1 && this.s1i_1 == tmp0_other_with_cast.s1i_1);
    }, protoOf($resolveDistributionCOROUTINE$0).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 6, null != this.d1j_1) {
        var tmp0_elvis_lhs = this.e1j_1;
        this.g1j_1 = new GradleDistribution(this.b1j_1, this.d1j_1, null == tmp0_elvis_lhs ? this.d1j_1 + ".sha256" : tmp0_elvis_lhs), 
        this.u6_1 = 5;
        continue $sm;
       }
       if (this.h1j_1 = GradleVersion_0(this.b1j_1), this.h1j_1 instanceof Official) {
        if (this.u6_1 = 3, (suspendResult = findUrl(this.h1j_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       if (this.h1j_1 instanceof Dynamic) {
        if (this.u6_1 = 2, (suspendResult = findUrl_0(this.h1j_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       if (this.h1j_1 instanceof Wrapper) {
        if (this.u6_1 = 1, (suspendResult = findVersionFromWrapper(this.c1j_1, this.f1j_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       noWhenBranchMatchedException();
       break;

      case 1:
      case 2:
      case 3:
       this.i1j_1 = suspendResult, this.u6_1 = 4;
       continue $sm;

      case 4:
       this.g1j_1 = this.i1j_1, this.u6_1 = 5;
       continue $sm;

      case 5:
       return this.g1j_1;

      case 6:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (6 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(install$slambda).mt = function($this$launch, $completion) {
     var tmp = this.nt($this$launch, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(install$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(install$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 3;
       if (this.c1o_1 = this.z1n_1, this.d1o_1 = this.c1o_1, this.u6_1 = 1, (suspendResult = awaitPromiseLike(rmRF(this.d1o_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.e1o_1 = this.a1o_1, this.f1o_1 = this.e1o_1, this.u6_1 = 2, (suspendResult = awaitPromiseLike(rmRF(this.f1o_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       return Unit_instance;

      case 3:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (3 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(install$slambda).nt = function($this$launch, completion) {
     var i = new install$slambda(this.z1n_1, this.a1o_1, completion);
     return i.b1o_1 = $this$launch, i;
    }, protoOf($installCOROUTINE$1).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 9, this.s1j_1 = find("gradle", this.r1j_1.q1i_1);
       var this_0 = this.s1j_1;
       if (charSequenceLength(this_0) > 0) {
        info("Detected Gradle " + this.r1j_1.q1i_1 + " at " + this.s1j_1), this.t1j_1 = this.s1j_1, 
        this.u6_1 = 6;
        continue $sm;
       }
       this.u1j_1 = this.r1j_1.r1i_1, this.v1j_1 = this.u1j_1;
       this.w1j_1 = void 0;
       this.x1j_1 = void 0;
       if (this.y1j_1 = void 0, this.u6_1 = 1, (suspendResult = awaitPromiseLike(downloadTool(this.v1j_1, this.w1j_1, this.x1j_1, this.y1j_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.z1j_1 = suspendResult, this.a1k_1 = this.r1j_1.s1i_1, null == this.a1k_1) {
        this.b1k_1 = null, this.u6_1 = 3;
        continue $sm;
       }
       this.c1k_1 = this.a1k_1, this.d1k_1 = this.c1k_1;
       if (this.e1k_1 = this.d1k_1, this.f1k_1 = this.e1k_1, this.u6_1 = 2, (suspendResult = hashFiles([ this.z1j_1 ], "sha256", !1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       if (this.g1k_1 = suspendResult, this.h1k_1 = this.g1k_1.j1h_1, this.h1k_1 !== this.f1k_1) throw new ActionFailedException("Checksum mismatch for Gradle " + this.r1j_1.q1i_1 + " (" + this.r1j_1.r1i_1 + "). Expected: " + this.f1k_1 + ", actual: " + this.h1k_1);
       this.b1k_1 = Unit_instance, this.u6_1 = 3;
       continue $sm;

      case 3:
       this.i1k_1 = this.z1j_1, this.j1k_1 = this.i1k_1;
       if (this.k1k_1 = void 0, this.u6_1 = 4, (suspendResult = awaitPromiseLike(extractZip(this.j1k_1, this.k1k_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 4:
       this.l1k_1 = suspendResult;
       this.m1k_1 = node_path_path_1155cy.join(this.l1k_1, "gradle-" + this.r1j_1.q1i_1);
       this.n1k_1 = "gradle";
       this.o1k_1 = this.r1j_1.q1i_1, this.p1k_1 = this.m1k_1, this.q1k_1 = this.n1k_1, 
       this.r1k_1 = this.o1k_1;
       if (this.s1k_1 = void 0, this.u6_1 = 5, (suspendResult = awaitPromiseLike(cacheDir(this.p1k_1, this.q1k_1, this.r1k_1, this.s1k_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 5:
       this.t1k_1 = suspendResult;
       var this_1 = this.t1k_1;
       launch(GlobalScope_instance, VOID, VOID, install$slambda_0(this.z1j_1, this.l1k_1, null)), 
       this.t1j_1 = this_1, this.u6_1 = 6;
       continue $sm;

      case 6:
       this.u1k_1 = this.t1j_1;
       var tmp_18, tmp_17 = node_path_path_1155cy, tmp_19 = platform();
       tmp_18 = equals(tmp_19, "win32") ? "gradle.bat" : "gradle", this.v1k_1 = tmp_17.join(this.u1k_1, "bin", tmp_18), 
       this.w1k_1 = this.v1k_1;
       this.x1k_1 = this.w1k_1, this.y1k_1 = this.x1k_1;
       var tmp_21 = platform();
       if (equals(tmp_21, "win32")) {
        this.u6_1 = 8;
        continue $sm;
       }
       this.z1k_1 = this.y1k_1;
       if (this.a1l_1 = toInt("755", 8), this.b1l_1 = this.z1k_1, this.c1l_1 = this.a1l_1, 
       this.u6_1 = 7, (suspendResult = awaitPromiseLike(chmod(this.b1l_1, this.c1l_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 7:
       this.u6_1 = 8;
       continue $sm;

      case 8:
       return this.w1k_1;

      case 9:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (9 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($findUrlCOROUTINE$2).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 4, this.m1l_1 = "https://services.gradle.org/versions/all";
       if (this.n1l_1 = (new HttpClient).getJson(this.m1l_1, get_HTTP_AGENT()), this.o1l_1 = this.n1l_1, 
       this.u6_1 = 1, (suspendResult = awaitPromiseLike(this.o1l_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.p1l_1 = suspendResult;
       var this_0 = this.p1l_1.statusCode;
       if (!equals(this_0, 200)) throw new ActionFailedException("Unable to lookup " + this.m1l_1 + " Gradle version: " + toString(this.p1l_1.statusCode) + ", " + JSON.stringify(this.p1l_1.result));
       var tmp_2, tmp0_safe_receiver = this.p1l_1.result;
       if (null == tmp0_safe_receiver) tmp_2 = null; else {
        var tmp$ret$0;
        l$ret$1: do {
         for (var inductionVariable = 0, last = tmp0_safe_receiver.length; inductionVariable < last; ) {
          var element = tmp0_safe_receiver[inductionVariable];
          if (inductionVariable = inductionVariable + 1 | 0, element.version === this.l1l_1.g1o_1) {
           tmp$ret$0 = element;
           break l$ret$1;
          }
         }
         tmp$ret$0 = null;
        } while (0);
        tmp_2 = tmp$ret$0;
       }
       if (this.q1l_1 = tmp_2, null == this.q1l_1) {
        this.r1l_1 = null, this.u6_1 = 3;
        continue $sm;
       }
       if (this.u6_1 = 2, (suspendResult = resolveChecksum(this.q1l_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       this.r1l_1 = suspendResult, this.u6_1 = 3;
       continue $sm;

      case 3:
       var tmp2_elvis_lhs = this.r1l_1;
       if (null == tmp2_elvis_lhs) throw new ActionFailedException("Unable to find Gradle version " + this.l1l_1.g1o_1);
       return tmp2_elvis_lhs;

      case 4:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (4 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($findUrlCOROUTINE$3).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 6, this.b1m_1 = "https://services.gradle.org/versions/" + this.a1m_1.i1o_1;
       if (this.c1m_1 = (new HttpClient).getJson(this.b1m_1, get_HTTP_AGENT()), this.d1m_1 = this.c1m_1, 
       this.u6_1 = 1, (suspendResult = awaitPromiseLike(this.d1m_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.e1m_1 = suspendResult;
       var this_0 = this.e1m_1.statusCode;
       if (!equals(this_0, 200)) throw new ActionFailedException("Unable to lookup " + this.b1m_1 + " Gradle version: " + toString(this.e1m_1.statusCode) + ", " + JSON.stringify(this.e1m_1.result));
       var tmp0_safe_receiver = this.e1m_1.result;
       if (null != (null == tmp0_safe_receiver ? null : tmp0_safe_receiver.version)) {
        if (this.u6_1 = 5, (suspendResult = resolveChecksum(this.e1m_1.result, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 2;
       continue $sm;

      case 2:
       if (this.a1m_1 instanceof ReleaseCandidate) {
        if (this.u6_1 = 4, (suspendResult = findUrl_0(Current_getInstance(), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 3;
       continue $sm;

      case 3:
       throw new ActionFailedException("Empty result from " + this.b1m_1 + ": " + JSON.stringify(this.e1m_1.result));

      case 4:
      case 5:
       return suspendResult;

      case 6:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (6 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($findVersionFromWrapperCOROUTINE$4).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 7, this.p1m_1 = node_path_path_1155cy.join(this.n1m_1, "gradle", "wrapper", "gradle-wrapper.properties"), 
       exists(this.p1m_1)) {
        this.u6_1 = 1;
        continue $sm;
       }
       if (warning("Gradle wrapper configuration is not found at " + node_path_path_1155cy.resolve(this.p1m_1) + ".\nWill use the current release Gradle version"), 
       this.u6_1 = 6, (suspendResult = findUrl_0(Current_getInstance(), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.q1m_1 = this.p1m_1;
       if (this.r1m_1 = "utf8", this.s1m_1 = this.q1m_1, this.t1m_1 = this.r1m_1, this.u6_1 = 2, 
       (suspendResult = awaitPromiseLike(readFile(this.s1m_1, this.t1m_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       this.u1m_1 = suspendResult;
       for (var $this$run = parseString(this.u1m_1), this_0 = $this$run.getKeys(), result = LinkedHashMap_init_$Create$(coerceAtLeast(mapCapacity(this_0.length), 16)), inductionVariable = 0, last = this_0.length; inductionVariable < last; ) {
        var element = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0, result.n1(element, ensureNotNull($this$run.getFirst(element)));
       }
       if (this.v1m_1 = result, this.w1m_1 = getValue(this.v1m_1, "distributionUrl"), this.x1m_1 = this.v1m_1.j1("distributionSha256Sum"), 
       this.y1m_1 = removeSuffix(removeSuffix(removeSuffix(substringAfter(substringAfterLast(this.w1m_1, "/"), "gradle-"), "-all.zip"), "-bin.zip"), ".zip"), 
       this.o1m_1 && null == this.x1m_1 && warning("distributionSha256Sum is not set in " + this.p1m_1 + ".\nPlease consider adding the checksum, see https://docs.gradle.org/current/userguide/gradle_wrapper.html#configuring_checksum_verification"), 
       startsWith(removePrefix(removePrefix(this.w1m_1, "https"), "http"), "://services.gradle.org/")) {
        if (endsWith(this.w1m_1, "-bin.zip") && null != this.x1m_1) {
         this.a1n_1 = new GradleDistribution(this.y1m_1, this.w1m_1, this.x1m_1), this.u6_1 = 4;
         continue $sm;
        }
        if (this.u6_1 = 3, (suspendResult = findUrl(new Official(this.y1m_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.z1m_1 = new GradleDistribution(this.y1m_1, this.w1m_1, this.x1m_1), this.u6_1 = 5;
       continue $sm;

      case 3:
       this.a1n_1 = suspendResult, this.u6_1 = 4;
       continue $sm;

      case 4:
       this.z1m_1 = this.a1n_1, this.u6_1 = 5;
       continue $sm;

      case 5:
       return this.z1m_1;

      case 6:
       return suspendResult;

      case 7:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (7 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($resolveChecksumCOROUTINE$5).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 3, this.k1n_1 = this.j1n_1.version, this.l1n_1 = this.j1n_1.downloadUrl;
       if (this.m1n_1 = (new HttpClient).get(this.j1n_1.checksumUrl, get_HTTP_AGENT()), 
       this.n1n_1 = this.m1n_1, this.u6_1 = 1, (suspendResult = awaitPromiseLike(this.n1n_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.o1n_1 = suspendResult, this.p1n_1 = this.o1n_1.readBody(), this.q1n_1 = this.p1n_1, 
       this.u6_1 = 2, (suspendResult = awaitPromiseLike(this.q1n_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       var this_0 = suspendResult, ARGUMENT = toString(trim(isCharSequence(this_0) ? this_0 : THROW_CCE()));
       return new GradleDistribution(this.k1n_1, this.l1n_1, ARGUMENT);

      case 3:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (3 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($launchGradleCOROUTINE$6).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 2, this.t1o_1 = {
        _v: null
       }, this.u1o_1 = !1, this.v1o_1 = new GradleErrorCollector, this.w1o_1 = new GradleOutErrorCollector, 
       this.u6_1 = 1;
       for (var tmp_0 = listOf(this.s1o_1.j1p_1 ? "" : "--no-daemon"), this_0 = this.s1o_1.m1p_1, destination = ArrayList_init_$Create$(this_0.k()), _iterator__ex2g4s = this_0.m1().h(); _iterator__ex2g4s.i(); ) {
        var item = _iterator__ex2g4s.j();
        destination.e("-P" + item.f1() + "=" + item.g1());
       }
       var this_1 = plus(plus(tmp_0, destination), this.s1o_1.l1p_1), tmp_1 = copyToArray(this_1).slice();
       if ((suspendResult = exec(this.s1o_1.i1p_1, tmp_1, VOID, launchGradle$lambda(this.s1o_1, this.t1o_1, this.w1o_1, this.v1o_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       var result = suspendResult;
       this.v1o_1.n1p(), this.w1o_1.n1p();
       for (var _iterator__ex2g4s_0 = plus(this.v1o_1.e1p_1, this.w1o_1.y1o_1).h(); _iterator__ex2g4s_0.i(); ) {
        var error_0 = _iterator__ex2g4s_0.j();
        this.u1o_1 = !0;
        var tmp0_safe_receiver = error_0.p1p_1, shortFile = null == tmp0_safe_receiver ? null : removePrefix(tmp0_safe_receiver, node_process_process_dcpv5o.cwd()), tmp2_startLine = error_0.q1p_1, startColumn = error_0.r1p_1;
        error(error_0.o1p_1, {
         startColumn,
         startLine: tmp2_startLine,
         file: shortFile
        });
       }
       if (this.u1o_1) node_process_process_dcpv5o.exitCode = 1;
       return this.u1o_1 || 0 === result.mr_1 || setFailed("Gradle process finished with a non-zero exit code: " + result.mr_1), 
       new GradleResult(this.t1o_1._v);

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(Official).toString = function() {
     return "Official(" + this.g1o_1 + ")";
    }, protoOf(Current).toString = function() {
     return "Current";
    }, protoOf(ReleaseCandidate).toString = function() {
     return "ReleaseCandidate";
    }, protoOf(Nightly).toString = function() {
     return "Nightly";
    }, protoOf(ReleaseNightly).toString = function() {
     return "ReleaseNightly";
    }, protoOf(Wrapper).toString = function() {
     return "Wrapper";
    }, protoOf(GradleError).toString = function() {
     return "GradleError(line=" + this.q1p_1 + ", col=" + this.r1p_1 + ", file=" + this.p1p_1 + ", message='" + this.o1p_1 + "')";
    }, protoOf(GradleErrorCollector).n1p = function() {
     if (!this.h1p_1.q()) {
      var tmp, tmp0_elvis_lhs = this.h1p_1.j1(ErrorHeader_WHAT_WENT_WRONG_getInstance()), message = null == tmp0_elvis_lhs ? "Unknown error" : tmp0_elvis_lhs, tmp3 = this.d1p_1, tmp1_safe_receiver = this.h1p_1.j1(ErrorHeader_WHERE_getInstance());
      if (null == tmp1_safe_receiver) tmp = null; else {
       var tmp0_safe_receiver = Regex_init_$Create$("^Build file '(.+)' line: (\\d+)$").ma(tmp1_safe_receiver);
       tmp = null == tmp0_safe_receiver ? null : new GradleError(message, tmp0_safe_receiver.ib().p(1), toInt_0(tmp0_safe_receiver.ib().p(2)));
      }
      var tmp2_elvis_lhs = tmp, element = null == tmp2_elvis_lhs ? new GradleError(message) : tmp2_elvis_lhs;
      tmp3.e(element);
     }
     this.h1p_1.p1(), this.f1p_1.x9();
    }, protoOf(GradleErrorCollector).c1p = function(line) {
     var str = toString(trimEnd(isCharSequence(line) ? line : THROW_CCE()));
     if (startsWith(str, ErrorHeader_FAILURE_getInstance().w1p_1)) {
      this.n1p();
      var tmp1 = this.h1p_1, tmp2 = ErrorHeader_FAILURE_getInstance(), value = removePrefix(str, ErrorHeader_FAILURE_getInstance().w1p_1);
      return tmp1.n1(tmp2, value), Unit_instance;
     }
     if (startsWith(str, "* Get more help") || startsWith(str, "BUILD FAILED ")) return this.n1p(), 
     this.g1p_1 = null, Unit_instance;
     var tmp$ret$3, tmp4 = get_errorHeaderValues();
     $l$block: {
      for (var inductionVariable = 0, last = tmp4.length; inductionVariable < last; ) {
       var element = tmp4[inductionVariable];
       if (inductionVariable = inductionVariable + 1 | 0, startsWith(str, element.w1p_1)) {
        tmp$ret$3 = element;
        break $l$block;
       }
      }
      tmp$ret$3 = null;
     }
     var tmp0_safe_receiver = tmp$ret$3;
     if (null != tmp0_safe_receiver) {
      var tmp0_safe_receiver_0 = this.g1p_1;
      if (null == tmp0_safe_receiver_0) ; else {
       var tmp1_0 = this.h1p_1, this_0 = this.f1p_1.toString(), value_0 = toString(trimEnd(isCharSequence(this_0) ? this_0 : THROW_CCE()));
       tmp1_0.n1(tmp0_safe_receiver_0, value_0);
      }
      return this.f1p_1.x9(), this.g1p_1 = tmp0_safe_receiver, Unit_instance;
     }
     null != this.g1p_1 && this.f1p_1.i6(line).j6(_Char___init__impl__6a9atx(10));
    }, protoOf(GradleOutErrorCollector).c1p = function(line) {
     if (startsWith(line, "> Task ") || startsWith(line, "> Configure")) {
      this.z1o_1 = "[" + removePrefix(line, "> ") + "]";
     }
     if (startsWith(line, "e: ")) {
      var tmp0_safe_receiver = (_init_properties_GradleOutErrorCollector_kt__gu17ja(), 
      KOTLIN_COMPILE_ERROR).ma(line);
      if (null == tmp0_safe_receiver) ; else {
       var tmp_3, tmp2 = this.x1o_1, tmp_0 = this.z1o_1 + " " + tmp0_safe_receiver.ib().p(4), tmp_1 = tmp0_safe_receiver.ib().p(1), tmp_2 = toInt_0(tmp0_safe_receiver.ib().p(2)), this_0 = tmp0_safe_receiver.ib().p(3), element = (tmp_3 = isBlank(this_0) ? null : this_0, 
       new GradleError(tmp_0, tmp_1, tmp_2, null == tmp_3 ? null : toInt_0(tmp_3)));
       tmp2.e(element);
      }
      return Unit_instance;
     }
     var tmp1_safe_receiver = (_init_properties_GradleOutErrorCollector_kt__gu17ja(), 
     CHECKSTYLE_ERROR).ma(line);
     if (null == tmp1_safe_receiver) ; else {
      var tmp_7, tmp2_0 = this.x1o_1, tmp_4 = this.z1o_1 + " " + removePrefix("[" + tmp1_safe_receiver.ib().p(5) + "] ", "[] ") + tmp1_safe_receiver.ib().p(4), tmp_5 = tmp1_safe_receiver.ib().p(1), tmp_6 = toInt_0(tmp1_safe_receiver.ib().p(2)), this_1 = tmp1_safe_receiver.ib().p(3), element_0 = (tmp_7 = isBlank(this_1) ? null : this_1, 
      new GradleError(tmp_4, tmp_5, tmp_6, null == tmp_7 ? null : toInt_0(tmp_7)));
      tmp2_0.e(element_0);
     }
     processJavaError(this, line);
    }, protoOf(GradleOutErrorCollector).n1p = function() {
     var tmp0_safe_receiver = this.a1p_1;
     if (null == tmp0_safe_receiver) ; else {
      var tmp0 = this.x1o_1, element = new GradleError(this.z1o_1 + " " + tmp0_safe_receiver.ib().p(3) + "\n" + joinToString(this.b1p_1, "\n"), tmp0_safe_receiver.ib().p(1), toInt_0(tmp0_safe_receiver.ib().p(2)));
      tmp0.e(element);
     }
     this.a1p_1 = null, this.b1p_1.p1();
    }, _.$_$ = _.$_$ || {}, _.$_$.a = LaunchParams, _.$_$.b = function(distribution, $completion) {
     var tmp = new $installCOROUTINE$1(distribution, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, _.$_$.c = function(params, $completion) {
     var tmp = new $launchGradleCOROUTINE$6(params, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, _.$_$.d = function(versionSpec, projectPath, distributionUrl, distributionSha256Sum, enableDistributionSha256SumWarning, $completion) {
     var tmp = new $resolveDistributionCOROUTINE$0(versionSpec, projectPath, distributionUrl = distributionUrl === VOID ? null : distributionUrl, distributionSha256Sum = distributionSha256Sum === VOID ? null : distributionSha256Sum, enableDistributionSha256SumWarning = enableDistributionSha256SumWarning === VOID || enableDistributionSha256SumWarning, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    };
   }(module.exports, __webpack_require__(8599), __webpack_require__(8101), __webpack_require__(4613), __webpack_require__(6760), __webpack_require__(8161), __webpack_require__(1455), __webpack_require__(5001), __webpack_require__(1708), __webpack_require__(7036), __webpack_require__(9613), __webpack_require__(6077), __webpack_require__(7298), __webpack_require__(7361), __webpack_require__(3138), __webpack_require__(191));
  },
  7298: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$_actions_glob_fwy0ei, node_process_process_dcpv5o, $module$node_crypto_ke3snv, $module$node_fs_promises_daq1pm, $module$node_fs_4svwsv, $module$_actions_core_fx0i1v, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js, kotlin_gradle_cache_action_wrappers_nodejs, kotlin_gradle_cache_action_wrappers_actions_toolkit, kotlin_gradle_cache_action_wrappers_js) {
    "use strict";
    var Companion_instance, $serializer_instance, Companion_instance_0, $serializer_instance_0, $serializer_instance_1, create = $module$_actions_glob_fwy0ei.create, createHash = $module$node_crypto_ke3snv.createHash, stat = $module$node_fs_promises_daq1pm.stat, createReadStream = $module$node_fs_4svwsv.createReadStream, warning = $module$_actions_core_fx0i1v.warning, imul = Math.imul, protoOf = kotlin_kotlin.$_$.l5, initMetadataForCompanion = kotlin_kotlin.$_$.x4, PluginGeneratedSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.e1, THROW_CCE = kotlin_kotlin.$_$.k7, Long = kotlin_kotlin.$_$.i7, UnknownFieldException_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b, LongSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.j, StringSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k, IntSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.i, typeParametersSerializers = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.z, GeneratedSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a1, initMetadataForObject = kotlin_kotlin.$_$.b5, VOID = kotlin_kotlin.$_$.c, throwMissingFieldException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g1, Unit_instance = kotlin_kotlin.$_$.u1, objectCreate = kotlin_kotlin.$_$.k5, initMetadataForClass = kotlin_kotlin.$_$.w4, LinkedHashMapSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c1, LazyThreadSafetyMode_PUBLICATION_getInstance = kotlin_kotlin.$_$.d, lazy = kotlin_kotlin.$_$.s7, _Char___init__impl__6a9atx = kotlin_kotlin.$_$.j1, lastIndexOf = kotlin_kotlin.$_$.g6, padStart = kotlin_kotlin.$_$.i6, CoroutineImpl = kotlin_kotlin.$_$.d4, joinToString = kotlin_kotlin.$_$.t2, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, sort = kotlin_kotlin.$_$.h3, get_normalizedPath = kotlin_gradle_cache_action_wrappers_nodejs.$_$.b, LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.n, arrayIterator = kotlin_kotlin.$_$.h4, numberToLong = kotlin_kotlin.$_$.j5, startsWith = kotlin_kotlin.$_$.n6, replace = kotlin_kotlin.$_$.m6, pipeAndWait = kotlin_gradle_cache_action_wrappers_nodejs.$_$.d, substringAfterLast = kotlin_kotlin.$_$.o6, stackTraceToString = kotlin_kotlin.$_$.w7, ActionFailedException = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.c, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, formatBytes = kotlin_gradle_cache_action_wrappers_js.$_$.a, joinToString_0 = kotlin_kotlin.$_$.s2, ArrayList_init_$Create$ = kotlin_kotlin.$_$.h, KtMap = kotlin_kotlin.$_$.z1, isInterface = kotlin_kotlin.$_$.d5, toString = kotlin_kotlin.$_$.o5, getStringHashCode = kotlin_kotlin.$_$.u4, numberToInt = kotlin_kotlin.$_$.i5;
    function Companion() {}
    function $serializer() {
     $serializer_instance = this;
     var tmp0_serialDesc = new PluginGeneratedSerialDescriptor("com.github.burrunan.hashing.HashInfo", this, 3);
     tmp0_serialDesc.b11("totalBytes", !1), tmp0_serialDesc.b11("hash", !1), tmp0_serialDesc.b11("totalFiles", !1), 
     this.g1f_1 = tmp0_serialDesc;
    }
    function $serializer_getInstance() {
     return null == $serializer_instance && new $serializer, $serializer_instance;
    }
    function HashInfo(totalBytes, hash, totalFiles) {
     this.i1f_1 = totalBytes, this.j1f_1 = hash, this.k1f_1 = totalFiles;
    }
    function HashContents$Companion$$childSerializers$_anonymous__jfkp3y() {
     return new LinkedHashMapSerializer(StringSerializer_getInstance(), $serializer_getInstance_1());
    }
    function Companion_0() {
     Companion_instance_0 = this;
     var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
     this.l1f_1 = [ lazy(tmp_0, HashContents$Companion$$childSerializers$_anonymous__jfkp3y) ];
    }
    function Companion_getInstance_0() {
     return null == Companion_instance_0 && new Companion_0, Companion_instance_0;
    }
    function $serializer_0() {
     $serializer_instance_0 = this;
     var tmp0_serialDesc = new PluginGeneratedSerialDescriptor("com.github.burrunan.hashing.HashContents", this, 1);
     tmp0_serialDesc.b11("files", !1), this.m1f_1 = tmp0_serialDesc;
    }
    function $serializer_getInstance_0() {
     return null == $serializer_instance_0 && new $serializer_0, $serializer_instance_0;
    }
    function HashContents(files) {
     Companion_getInstance_0(), this.o1f_1 = files;
    }
    function Companion_1() {}
    function HashDetails(info, contents) {
     this.p1f_1 = info, this.q1f_1 = contents;
    }
    function Companion_2() {}
    function $serializer_1() {
     $serializer_instance_1 = this;
     var tmp0_serialDesc = new PluginGeneratedSerialDescriptor("com.github.burrunan.hashing.FileDetails", this, 2);
     tmp0_serialDesc.b11("fileSize", !1), tmp0_serialDesc.b11("hash", !1), this.y1g_1 = tmp0_serialDesc;
    }
    function $serializer_getInstance_1() {
     return null == $serializer_instance_1 && new $serializer_1, $serializer_instance_1;
    }
    function FileDetails(fileSize, hash) {
     this.a1h_1 = fileSize, this.b1h_1 = hash;
    }
    function $hashFilesDetailedCOROUTINE$0(paths, algorithm, includeFileName, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.z1f_1 = paths, this.a1g_1 = algorithm, 
     this.b1g_1 = includeFileName;
    }
    function Diff(newFiles, totalUpdated, totalDeleted, messages, updatedFiles, deletedFiles) {
     this.c1h_1 = newFiles, this.d1h_1 = totalUpdated, this.e1h_1 = totalDeleted, this.f1h_1 = messages, 
     this.g1h_1 = updatedFiles, this.h1h_1 = deletedFiles;
    }
    function HashResult(hash, numFiles, totalBytes) {
     this.j1h_1 = hash, this.k1h_1 = numFiles, this.l1h_1 = totalBytes;
    }
    function $hashFilesCOROUTINE$1(paths, algorithm, includeFileName, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.u1h_1 = paths, this.v1h_1 = algorithm, 
     this.w1h_1 = includeFileName;
    }
    initMetadataForCompanion(Companion), initMetadataForObject($serializer, "$serializer", VOID, VOID, [ GeneratedSerializer ]), 
    initMetadataForClass(HashInfo, "HashInfo", VOID, VOID, VOID, VOID, VOID, {
     0: $serializer_getInstance
    }), initMetadataForCompanion(Companion_0), initMetadataForObject($serializer_0, "$serializer", VOID, VOID, [ GeneratedSerializer ]), 
    initMetadataForClass(HashContents, "HashContents", VOID, VOID, VOID, VOID, VOID, {
     0: $serializer_getInstance_0
    }), initMetadataForCompanion(Companion_1), initMetadataForClass(HashDetails, "HashDetails"), 
    initMetadataForCompanion(Companion_2), initMetadataForObject($serializer_1, "$serializer", VOID, VOID, [ GeneratedSerializer ]), 
    initMetadataForClass(FileDetails, "FileDetails", VOID, VOID, VOID, VOID, VOID, {
     0: $serializer_getInstance_1
    }), initMetadataForCoroutine($hashFilesDetailedCOROUTINE$0, CoroutineImpl), initMetadataForClass(Diff, "Diff"), 
    initMetadataForClass(HashResult, "HashResult"), initMetadataForCoroutine($hashFilesCOROUTINE$1, CoroutineImpl), 
    protoOf(Companion).f1f = function() {
     return $serializer_getInstance();
    }, protoOf($serializer).h1f = function(encoder, value) {
     var tmp0_desc = this.g1f_1, tmp1_output = encoder.cx(tmp0_desc);
     tmp1_output.tx(tmp0_desc, 0, value.i1f_1), tmp1_output.ux(tmp0_desc, 1, value.j1f_1), 
     tmp1_output.sx(tmp0_desc, 2, value.k1f_1), tmp1_output.dx(tmp0_desc);
    }, protoOf($serializer).yv = function(encoder, value) {
     return this.h1f(encoder, value instanceof HashInfo ? value : THROW_CCE());
    }, protoOf($serializer).zv = function(decoder) {
     var tmp0_desc = this.g1f_1, tmp1_flag = !0, tmp2_index = 0, tmp3_bitMask0 = 0, tmp4_local0 = new Long(0, 0), tmp5_local1 = null, tmp6_local2 = 0, tmp7_input = decoder.cx(tmp0_desc);
     if (tmp7_input.kx()) tmp4_local0 = tmp7_input.fx(tmp0_desc, 0), tmp3_bitMask0 |= 1, 
     tmp5_local1 = tmp7_input.gx(tmp0_desc, 1), tmp3_bitMask0 |= 2, tmp6_local2 = tmp7_input.ex(tmp0_desc, 2), 
     tmp3_bitMask0 |= 4; else for (;tmp1_flag; ) switch (tmp2_index = tmp7_input.lx(tmp0_desc)) {
     case -1:
      tmp1_flag = !1;
      break;

     case 0:
      tmp4_local0 = tmp7_input.fx(tmp0_desc, 0), tmp3_bitMask0 |= 1;
      break;

     case 1:
      tmp5_local1 = tmp7_input.gx(tmp0_desc, 1), tmp3_bitMask0 |= 2;
      break;

     case 2:
      tmp6_local2 = tmp7_input.ex(tmp0_desc, 2), tmp3_bitMask0 |= 4;
      break;

     default:
      throw UnknownFieldException_init_$Create$(tmp2_index);
     }
     return tmp7_input.dx(tmp0_desc), function(seen0, totalBytes, hash, totalFiles, serializationConstructorMarker, $this) {
      return 7 & ~seen0 && throwMissingFieldException(seen0, 7, $serializer_getInstance().g1f_1), 
      $this.i1f_1 = totalBytes, $this.j1f_1 = hash, $this.k1f_1 = totalFiles, $this;
     }(tmp3_bitMask0, tmp4_local0, tmp5_local1, tmp6_local2, 0, objectCreate(protoOf(HashInfo)));
    }, protoOf($serializer).xv = function() {
     return this.g1f_1;
    }, protoOf($serializer).d11 = function() {
     return [ LongSerializer_getInstance(), StringSerializer_getInstance(), IntSerializer_getInstance() ];
    }, protoOf(Companion_0).f1f = function() {
     return $serializer_getInstance_0();
    }, protoOf($serializer_0).n1f = function(encoder, value) {
     var tmp0_desc = this.m1f_1, tmp1_output = encoder.cx(tmp0_desc), tmp2_cached = Companion_getInstance_0().l1f_1;
     tmp1_output.vx(tmp0_desc, 0, tmp2_cached[0].g1(), value.o1f_1), tmp1_output.dx(tmp0_desc);
    }, protoOf($serializer_0).yv = function(encoder, value) {
     return this.n1f(encoder, value instanceof HashContents ? value : THROW_CCE());
    }, protoOf($serializer_0).zv = function(decoder) {
     var tmp0_desc = this.m1f_1, tmp1_flag = !0, tmp2_index = 0, tmp3_bitMask0 = 0, tmp4_local0 = null, tmp5_input = decoder.cx(tmp0_desc), tmp6_cached = Companion_getInstance_0().l1f_1;
     if (tmp5_input.kx()) tmp4_local0 = tmp5_input.hx(tmp0_desc, 0, tmp6_cached[0].g1(), tmp4_local0), 
     tmp3_bitMask0 |= 1; else for (;tmp1_flag; ) switch (tmp2_index = tmp5_input.lx(tmp0_desc)) {
     case -1:
      tmp1_flag = !1;
      break;

     case 0:
      tmp4_local0 = tmp5_input.hx(tmp0_desc, 0, tmp6_cached[0].g1(), tmp4_local0), tmp3_bitMask0 |= 1;
      break;

     default:
      throw UnknownFieldException_init_$Create$(tmp2_index);
     }
     return tmp5_input.dx(tmp0_desc), function(seen0, files, serializationConstructorMarker, $this) {
      return 1 & ~seen0 && throwMissingFieldException(seen0, 1, $serializer_getInstance_0().m1f_1), 
      $this.o1f_1 = files, $this;
     }(tmp3_bitMask0, tmp4_local0, 0, objectCreate(protoOf(HashContents)));
    }, protoOf($serializer_0).xv = function() {
     return this.m1f_1;
    }, protoOf($serializer_0).d11 = function() {
     return [ Companion_getInstance_0().l1f_1[0].g1() ];
    }, protoOf($serializer_1).z1g = function(encoder, value) {
     var tmp0_desc = this.y1g_1, tmp1_output = encoder.cx(tmp0_desc);
     tmp1_output.tx(tmp0_desc, 0, value.a1h_1), tmp1_output.ux(tmp0_desc, 1, value.b1h_1), 
     tmp1_output.dx(tmp0_desc);
    }, protoOf($serializer_1).yv = function(encoder, value) {
     return this.z1g(encoder, value instanceof FileDetails ? value : THROW_CCE());
    }, protoOf($serializer_1).zv = function(decoder) {
     var tmp0_desc = this.y1g_1, tmp1_flag = !0, tmp2_index = 0, tmp3_bitMask0 = 0, tmp4_local0 = new Long(0, 0), tmp5_local1 = null, tmp6_input = decoder.cx(tmp0_desc);
     if (tmp6_input.kx()) tmp4_local0 = tmp6_input.fx(tmp0_desc, 0), tmp3_bitMask0 |= 1, 
     tmp5_local1 = tmp6_input.gx(tmp0_desc, 1), tmp3_bitMask0 |= 2; else for (;tmp1_flag; ) switch (tmp2_index = tmp6_input.lx(tmp0_desc)) {
     case -1:
      tmp1_flag = !1;
      break;

     case 0:
      tmp4_local0 = tmp6_input.fx(tmp0_desc, 0), tmp3_bitMask0 |= 1;
      break;

     case 1:
      tmp5_local1 = tmp6_input.gx(tmp0_desc, 1), tmp3_bitMask0 |= 2;
      break;

     default:
      throw UnknownFieldException_init_$Create$(tmp2_index);
     }
     return tmp6_input.dx(tmp0_desc), function(seen0, fileSize, hash, serializationConstructorMarker, $this) {
      return 3 & ~seen0 && throwMissingFieldException(seen0, 3, $serializer_getInstance_1().y1g_1), 
      $this.a1h_1 = fileSize, $this.b1h_1 = hash, $this;
     }(tmp3_bitMask0, tmp4_local0, tmp5_local1, 0, objectCreate(protoOf(FileDetails)));
    }, protoOf($serializer_1).xv = function() {
     return this.y1g_1;
    }, protoOf($serializer_1).d11 = function() {
     return [ LongSerializer_getInstance(), StringSerializer_getInstance() ];
    }, protoOf($hashFilesDetailedCOROUTINE$0).c7 = function() {
     var key, lastSlash, hashStart, tmp$ret$1, suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 12, this.v6_1 = 11;
       this.d1g_1 = joinToString(this.z1f_1, "\n"), this.e1g_1 = this.d1g_1;
       if (this.f1g_1 = void 0, this.u6_1 = 1, (suspendResult = awaitPromiseLike(create(this.e1g_1, this.f1g_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.g1g_1 = suspendResult;
       if (this.h1g_1 = this.g1g_1.glob(), this.i1g_1 = this.h1g_1, this.u6_1 = 2, (suspendResult = awaitPromiseLike(this.i1g_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       this.j1g_1 = suspendResult, sort(this.j1g_1), this.k1g_1 = node_process_process_dcpv5o.cwd(), 
       this.l1g_1 = get_normalizedPath("~"), this.m1g_1 = new Long(0, 0);
       this.n1g_1 = LinkedHashMap_init_$Create$(), this.o1g_1 = createHash(this.a1g_1), 
       this.p1g_1 = arrayIterator(this.j1g_1), this.u6_1 = 3;
       continue $sm;

      case 3:
       if (!this.p1g_1.i()) {
        this.u6_1 = 10;
        continue $sm;
       }
       this.q1g_1 = this.p1g_1.j();
       if (this.r1g_1 = this.q1g_1, this.s1g_1 = this.r1g_1, this.u6_1 = 4, (suspendResult = awaitPromiseLike(stat(this.s1g_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 4:
       if (this.t1g_1 = suspendResult, this.t1g_1.isDirectory()) {
        this.u6_1 = 3;
        continue $sm;
       }
       this.u6_1 = 5;
       continue $sm;

      case 5:
       this.u1g_1 = numberToLong(this.t1g_1.size), this.m1g_1 = this.m1g_1.x1(this.u1g_1);
       var tmp_6;
       if (startsWith(this.q1g_1, this.k1g_1)) {
        var tmp4 = this.q1g_1, startIndex = this.k1g_1.length;
        tmp_6 = "ws://" + tmp4.substring(startIndex);
       } else if (startsWith(this.q1g_1, this.l1g_1)) {
        var tmp6 = this.q1g_1, startIndex_0 = this.l1g_1.length;
        tmp_6 = "~" + tmp6.substring(startIndex_0);
       } else tmp_6 = this.q1g_1;
       if (this.v1g_1 = replace(tmp_6, _Char___init__impl__6a9atx(92), _Char___init__impl__6a9atx(47)), 
       "sha1" === this.a1g_1 && startsWith(this.v1g_1, "~/.gradle/caches/modules-2/files-2.1/")) {
        this.w1g_1 = (key = this.v1g_1, lastSlash = void 0, hashStart = void 0, tmp$ret$1 = void 0, 
        lastSlash = lastIndexOf(key, _Char___init__impl__6a9atx(47)), hashStart = lastIndexOf(key, _Char___init__impl__6a9atx(47), lastSlash - 1 | 0) + 1 | 0, 
        tmp$ret$1 = key.substring(hashStart, lastSlash), padStart(tmp$ret$1, 40, _Char___init__impl__6a9atx(48))), 
        this.u6_1 = 9;
        continue $sm;
       }
       if (startsWith(this.v1g_1, "~/.gradle/caches/build-cache-1/")) {
        this.w1g_1 = substringAfterLast(this.v1g_1, _Char___init__impl__6a9atx(47)), this.u6_1 = 9;
        continue $sm;
       }
       if (this.x1g_1 = createHash(this.a1g_1), this.v6_1 = 8, this.u6_1 = 6, (suspendResult = pipeAndWait(createReadStream(this.q1g_1), this.x1g_1, !0, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 6:
       this.v6_1 = 11, this.u6_1 = 7;
       continue $sm;

      case 7:
       this.v6_1 = 11;
       this.w1g_1 = this.x1g_1.digest("hex"), this.u6_1 = 9;
       continue $sm;

      case 8:
       if (this.v6_1 = 11, this.x6_1 instanceof Error) {
        var e = this.x6_1;
        warning("Unable to hash " + this.q1g_1 + ", will ignore the file: " + stackTraceToString(e)), 
        this.u6_1 = 3;
        continue $sm;
       }
       throw this.x6_1;

      case 9:
       var digest = this.w1g_1, tmp9 = this.n1g_1, tmp10 = this.v1g_1, value = new FileDetails(this.u1g_1, digest);
       tmp9.n1(tmp10, value), this.b1g_1 && this.o1g_1.update(this.v1g_1), this.o1g_1.update(digest), 
       this.u6_1 = 3;
       continue $sm;

      case 10:
       var tmp_10 = this.m1g_1;
       this.c1g_1 = new HashDetails(new HashInfo(tmp_10, this.o1g_1.digest("hex"), this.n1g_1.k()), new HashContents(this.n1g_1)), 
       this.v6_1 = 12, this.u6_1 = 13;
       continue $sm;

      case 11:
       if (this.v6_1 = 12, this.x6_1 instanceof Error) {
        var e_0 = this.x6_1;
        throw new ActionFailedException("Unable to hash " + joinToString(this.z1f_1, ", ") + ": " + e_0.toString(), e_0);
       }
       throw this.x6_1;

      case 12:
       throw this.x6_1;

      case 13:
       return this.v6_1 = 12, this.c1g_1;
      }
     } catch ($p) {
      var e_1 = $p;
      if (12 === this.v6_1) throw e_1;
      this.u6_1 = this.v6_1, this.x6_1 = e_1;
     }
    }, protoOf(Diff).i1h = function() {
     var tmp_1, tmp_0 = this.g1h_1.q() ? "" : this.g1h_1.k() + " updates (" + formatBytes(this.d1h_1) + ")";
     this.h1h_1.q() ? tmp_1 = "" : tmp_1 = (this.g1h_1.q() ? "" : ", ") + (this.h1h_1.k() + " deletes (") + formatBytes(this.e1h_1) + ")";
     return tmp_0 + tmp_1 + "\n  " + joinToString_0(this.f1h_1, "\n  ");
    }, protoOf(HashResult).toString = function() {
     return "HashResult(hash=" + this.j1h_1 + ", numFiles=" + this.k1h_1 + ", totalBytes=" + this.l1h_1 + ")";
    }, protoOf(HashResult).hashCode = function() {
     var result = getStringHashCode(this.j1h_1);
     return result = imul(result, 31) + this.k1h_1 | 0, result = imul(result, 31) + this.l1h_1 | 0;
    }, protoOf(HashResult).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof HashResult)) return !1;
     var tmp0_other_with_cast = other instanceof HashResult ? other : THROW_CCE();
     return this.j1h_1 === tmp0_other_with_cast.j1h_1 && (this.k1h_1 === tmp0_other_with_cast.k1h_1 && this.l1h_1 === tmp0_other_with_cast.l1h_1);
    }, protoOf($hashFilesCOROUTINE$1).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 11, this.v6_1 = 10;
       this.y1h_1 = joinToString(this.u1h_1, "\n"), this.z1h_1 = this.y1h_1;
       if (this.a1i_1 = void 0, this.u6_1 = 1, (suspendResult = awaitPromiseLike(create(this.z1h_1, this.a1i_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.b1i_1 = suspendResult;
       if (this.c1i_1 = this.b1i_1.glob(), this.d1i_1 = this.c1i_1, this.u6_1 = 2, (suspendResult = awaitPromiseLike(this.d1i_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       this.e1i_1 = suspendResult, sort(this.e1i_1), this.f1i_1 = node_process_process_dcpv5o.cwd(), 
       this.g1i_1 = get_normalizedPath("~"), this.h1i_1 = createHash(this.v1h_1), this.i1i_1 = 0, 
       this.j1i_1 = 0, this.k1i_1 = arrayIterator(this.e1i_1), this.u6_1 = 3;
       continue $sm;

      case 3:
       if (!this.k1i_1.i()) {
        this.u6_1 = 9;
        continue $sm;
       }
       this.l1i_1 = this.k1i_1.j();
       if (this.m1i_1 = this.l1i_1, this.n1i_1 = this.m1i_1, this.u6_1 = 4, (suspendResult = awaitPromiseLike(stat(this.n1i_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 4:
       if (this.o1i_1 = suspendResult, this.o1i_1.isDirectory()) {
        this.u6_1 = 3;
        continue $sm;
       }
       this.u6_1 = 5;
       continue $sm;

      case 5:
       var tmp_5;
       if (startsWith(this.l1i_1, this.f1i_1)) {
        var tmp4 = this.l1i_1, startIndex = this.f1i_1.length;
        tmp_5 = "ws://" + tmp4.substring(startIndex);
       } else if (startsWith(this.l1i_1, this.g1i_1)) {
        var tmp6 = this.l1i_1, startIndex_0 = this.g1i_1.length;
        tmp_5 = "~" + tmp6.substring(startIndex_0);
       } else tmp_5 = this.l1i_1;
       if (this.p1i_1 = replace(tmp_5, _Char___init__impl__6a9atx(92), _Char___init__impl__6a9atx(47)), 
       this.j1i_1 = this.j1i_1 + 1 | 0, this.i1i_1 = this.i1i_1 + numberToInt(this.o1i_1.size) | 0, 
       this.v6_1 = 8, this.u6_1 = 6, (suspendResult = pipeAndWait(createReadStream(this.l1i_1), this.h1i_1, !1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 6:
       this.v6_1 = 10, this.u6_1 = 7;
       continue $sm;

      case 7:
       this.v6_1 = 10, this.w1h_1 && this.h1i_1.update(this.p1i_1, "utf8"), this.u6_1 = 3;
       continue $sm;

      case 8:
       if (this.v6_1 = 10, this.x6_1 instanceof Error) {
        var e = this.x6_1;
        warning("Unable to hash " + this.l1i_1 + ", will ignore the file: " + stackTraceToString(e)), 
        this.u6_1 = 3;
        continue $sm;
       }
       throw this.x6_1;

      case 9:
       this.h1i_1.end();
       this.x1h_1 = new HashResult(this.h1i_1.digest("hex"), this.j1i_1, this.i1i_1), this.v6_1 = 11, 
       this.u6_1 = 12;
       continue $sm;

      case 10:
       if (this.v6_1 = 11, this.x6_1 instanceof Error) {
        var e_0 = this.x6_1;
        throw new ActionFailedException("Unable to hash " + joinToString(this.u1h_1, ", ") + ": " + e_0.toString(), e_0);
       }
       throw this.x6_1;

      case 11:
       throw this.x6_1;

      case 12:
       return this.v6_1 = 11, this.x1h_1;
      }
     } catch ($p) {
      var e_1 = $p;
      if (11 === this.v6_1) throw e_1;
      this.u6_1 = this.v6_1, this.x6_1 = e_1;
     }
    }, protoOf($serializer).e11 = typeParametersSerializers, protoOf($serializer_0).e11 = typeParametersSerializers, 
    protoOf($serializer_1).e11 = typeParametersSerializers, Companion_instance = new Companion, 
    new Companion_1, new Companion_2, _.$_$ = _.$_$ || {}, _.$_$.a = HashContents, _.$_$.b = function(oldContents, newContents, maxUpdatesToPrint) {
     maxUpdatesToPrint = maxUpdatesToPrint === VOID ? 50 : maxUpdatesToPrint;
     for (var messages = ArrayList_init_$Create$(), updatedFiles = ArrayList_init_$Create$(), deletedFiles = ArrayList_init_$Create$(), newFiles = 0, totalUpdated = new Long(0, 0), totalDeleted = new Long(0, 0), _iterator__ex2g4s = newContents.o1f_1.m1().h(); _iterator__ex2g4s.i(); ) {
      var tmp, _destruct__k2r9zo = _iterator__ex2g4s.j(), file = _destruct__k2r9zo.f1(), hash = _destruct__k2r9zo.g1(), oldHash = oldContents.o1f_1.j1(file);
      if ((null == oldHash ? null : oldHash.b1h_1) !== hash.b1h_1) if (updatedFiles.e(file), 
      !(messages.k() >= maxUpdatesToPrint)) null == oldHash ? (newFiles = newFiles + 1 | 0, 
      totalUpdated = totalUpdated.x1(hash.a1h_1), tmp = "N " + hash.a1h_1.toString() + " " + file + " " + hash.b1h_1) : (totalUpdated = totalUpdated.x1(hash.a1h_1), 
      tmp = "U " + hash.a1h_1.toString() + " " + file + " " + oldHash.a1h_1.toString() + " " + oldHash.b1h_1 + " => " + hash.b1h_1), 
      messages.e(tmp);
     }
     if ((oldContents.o1f_1.k() + newFiles | 0) !== newContents.o1f_1.k()) for (var _iterator__ex2g4s_0 = oldContents.o1f_1.m1().h(); _iterator__ex2g4s_0.i(); ) {
      var _destruct__k2r9zo_0 = _iterator__ex2g4s_0.j(), file_0 = _destruct__k2r9zo_0.f1(), hash_0 = _destruct__k2r9zo_0.g1(), this_0 = newContents.o1f_1;
      (isInterface(this_0, KtMap) ? this_0 : THROW_CCE()).h1(file_0) || (deletedFiles.e(file_0), 
      totalDeleted = totalDeleted.x1(hash_0.a1h_1), messages.k() < maxUpdatesToPrint && messages.e("D " + file_0 + " " + toString(hash_0)));
     }
     return new Diff(newFiles, totalUpdated, totalDeleted, messages, updatedFiles, deletedFiles);
    }, _.$_$.c = function(paths, algorithm, includeFileName, $completion) {
     var tmp = new $hashFilesDetailedCOROUTINE$0(paths, algorithm = algorithm === VOID ? "sha1" : algorithm, includeFileName = includeFileName === VOID || includeFileName, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, _.$_$.d = function(paths, algorithm, includeFileName, $completion) {
     var tmp = new $hashFilesCOROUTINE$1(paths, algorithm = algorithm === VOID ? "sha1" : algorithm, includeFileName = includeFileName === VOID || includeFileName, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, _.$_$.e = Companion_getInstance_0, _.$_$.f = Companion_instance;
   }(module.exports, __webpack_require__(3675), __webpack_require__(1708), __webpack_require__(7598), __webpack_require__(1455), __webpack_require__(3024), __webpack_require__(4613), __webpack_require__(7036), __webpack_require__(9539), __webpack_require__(6077), __webpack_require__(3138), __webpack_require__(7361), __webpack_require__(3838));
  },
  3161: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$_actions_core_fx0i1v, $module$node_fs_4svwsv, $module$node_fs_promises_daq1pm, kotlin_kotlin, kotlin_gradle_cache_action_wrappers_actions_toolkit, kotlin_gradle_cache_action_wrappers_octokit_webhooks, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core, kotlin_gradle_cache_action_wrappers_actions_cache, kotlin_gradle_cache_action_wrappers_nodejs, kotlin_gradle_cache_action_hashing, kotlin_gradle_cache_action_wrappers_js, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json) {
    "use strict";
    var Companion_instance_1, $serializer_instance, Companion_instance_2, $serializer_instance_0, Companion_instance_3, info = $module$_actions_core_fx0i1v.info, imul = Math.imul, startGroup = $module$_actions_core_fx0i1v.startGroup, endGroup = $module$_actions_core_fx0i1v.endGroup, debug = $module$_actions_core_fx0i1v.debug, isDebug = $module$_actions_core_fx0i1v.isDebug, warning = $module$_actions_core_fx0i1v.warning, mkdirSync = $module$node_fs_4svwsv.mkdirSync, existsSync = $module$node_fs_4svwsv.existsSync, rename = $module$node_fs_promises_daq1pm.rename, readFile = $module$node_fs_promises_daq1pm.readFile, writeFile = $module$node_fs_promises_daq1pm.writeFile, getState = $module$_actions_core_fx0i1v.getState, saveState = $module$_actions_core_fx0i1v.saveState, protoOf = kotlin_kotlin.$_$.l5, initMetadataForCompanion = kotlin_kotlin.$_$.x4, CoroutineImpl = kotlin_kotlin.$_$.d4, Unit_instance = kotlin_kotlin.$_$.u1, VOID = kotlin_kotlin.$_$.c, exec = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.i, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, THROW_CCE = kotlin_kotlin.$_$.k7, isCharSequence = kotlin_kotlin.$_$.c5, trim = kotlin_kotlin.$_$.b7, toString = kotlin_kotlin.$_$.o5, initMetadataForLambda = kotlin_kotlin.$_$.a5, ArrayList_init_$Create$ = kotlin_kotlin.$_$.h, ActionFailedException = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.c, roundToInt = kotlin_kotlin.$_$.q5, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, initMetadataForClass = kotlin_kotlin.$_$.w4, getStringHashCode = kotlin_kotlin.$_$.u4, getBooleanHashCode = kotlin_kotlin.$_$.s4, hashCode = kotlin_kotlin.$_$.v4, equals = kotlin_kotlin.$_$.q4, WorkflowDispatch = kotlin_gradle_cache_action_wrappers_octokit_webhooks.$_$.f, Schedule = kotlin_gradle_cache_action_wrappers_octokit_webhooks.$_$.e, noWhenBranchMatchedException = kotlin_kotlin.$_$.t7, ActionsEnvironment_getInstance = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.k, Other = kotlin_gradle_cache_action_wrappers_octokit_webhooks.$_$.c, removePrefix = kotlin_kotlin.$_$.j6, BranchPush = kotlin_gradle_cache_action_wrappers_octokit_webhooks.$_$.b, PullRequest = kotlin_gradle_cache_action_wrappers_octokit_webhooks.$_$.d, CoroutineScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.d, isInterface = kotlin_kotlin.$_$.d5, launch = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.e, supervisorScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.a, Unknown_getInstance = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.f, exists = kotlin_gradle_cache_action_wrappers_nodejs.$_$.a, restoreAndLog = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.c, Exact = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.a, startsWith = kotlin_kotlin.$_$.n6, Partial = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.b, copyToArray = kotlin_kotlin.$_$.i2, hashFilesDetailed = kotlin_gradle_cache_action_hashing.$_$.c, abs = kotlin_kotlin.$_$.p5, Long = kotlin_kotlin.$_$.i7, formatBytes = kotlin_gradle_cache_action_wrappers_js.$_$.a, saveAndLog = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.d, emptyList = kotlin_kotlin.$_$.j2, Companion_instance = kotlin_gradle_cache_action_hashing.$_$.f, Companion_getInstance = kotlin_gradle_cache_action_hashing.$_$.e, plus = kotlin_kotlin.$_$.d3, listOf = kotlin_kotlin.$_$.z2, collectionSizeOrDefault = kotlin_kotlin.$_$.d2, ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.g, None_getInstance = kotlin_gradle_cache_action_wrappers_actions_cache.$_$.e, joinToString = kotlin_kotlin.$_$.s2, withIndex = kotlin_kotlin.$_$.k3, removeFiles = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.j, checkIndexOverflow = kotlin_kotlin.$_$.c2, mapCapacity = kotlin_kotlin.$_$.a3, coerceAtLeast = kotlin_kotlin.$_$.s5, LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.m, firstOrNull = kotlin_kotlin.$_$.m2, firstOrNull_0 = kotlin_kotlin.$_$.n2, LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.n, LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.p, zip = kotlin_kotlin.$_$.l3, KtMap = kotlin_kotlin.$_$.z1, addAll = kotlin_kotlin.$_$.b2, HashContents = kotlin_gradle_cache_action_hashing.$_$.a, diff = kotlin_gradle_cache_action_hashing.$_$.b, toList = kotlin_kotlin.$_$.i3, listOf_0 = kotlin_kotlin.$_$.y2, ArrayListSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.x, StringSerializer_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k, LazyThreadSafetyMode_PUBLICATION_getInstance = kotlin_kotlin.$_$.d, lazy = kotlin_kotlin.$_$.s7, PluginGeneratedSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.e1, UnknownFieldException_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b, typeParametersSerializers = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.z, GeneratedSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a1, initMetadataForObject = kotlin_kotlin.$_$.b5, throwMissingFieldException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g1, objectCreate = kotlin_kotlin.$_$.k5, Regex_init_$Create$ = kotlin_kotlin.$_$.t, get_normalizedPath = kotlin_gradle_cache_action_wrappers_nodejs.$_$.b, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, Default_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_json.$_$.a, SerializationException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.l1, _Char___init__impl__6a9atx = kotlin_kotlin.$_$.j1, replace = kotlin_kotlin.$_$.m6, charArrayOf = kotlin_kotlin.$_$.k4, trimStart = kotlin_kotlin.$_$.a7, plus_0 = kotlin_kotlin.$_$.c3, hashFiles = kotlin_gradle_cache_action_hashing.$_$.d, isBlank = kotlin_kotlin.$_$.f6, toInt = kotlin_kotlin.$_$.v6;
    function Companion() {
     this.u1q_1 = "defaultbranch";
    }
    function GradleCacheAction$treeId$slambda(resultContinuation) {
     CoroutineImpl.call(this, resultContinuation);
    }
    function $executeCOROUTINE$0(_this__u8e3s4, stage, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.o1r_1 = _this__u8e3s4, this.p1r_1 = stage;
    }
    function GradleCacheAction(trigger, params, gradleDistribution) {
     this.c1s_1 = trigger, this.d1s_1 = params, this.e1s_1 = gradleDistribution;
     var i, l;
     this.f1s_1 = suspendingStateVariable("tree_id", (i = new GradleCacheAction$treeId$slambda(null), 
     (l = function($completion) {
      return i.d1r($completion);
     }).$arity = 0, l));
    }
    function Parameters(jobId, path, debug, generatedGradleJars, localBuildCache, gradleDependenciesCache, gradleDependenciesCacheKey, mavenDependenciesCache, mavenLocalIgnorePaths, concurrent, readOnly) {
     this.g1s_1 = jobId, this.h1s_1 = path, this.i1s_1 = debug, this.j1s_1 = generatedGradleJars, 
     this.k1s_1 = localBuildCache, this.l1s_1 = gradleDependenciesCache, this.m1s_1 = gradleDependenciesCacheKey, 
     this.n1s_1 = mavenDependenciesCache, this.o1s_1 = mavenLocalIgnorePaths, this.p1s_1 = concurrent, 
     this.q1s_1 = readOnly;
    }
    function get_cacheKey(_this__u8e3s4) {
     var tmp;
     if (_this__u8e3s4 instanceof PullRequest) tmp = "PR" + toString(_this__u8e3s4.z1p_1.pull_request.number); else if (_this__u8e3s4 instanceof BranchPush) {
      var ref = removePrefix(_this__u8e3s4.c1q_1.ref, "refs/heads/");
      tmp = ref === removePrefix(_this__u8e3s4.c1q_1.repository.default_branch, "refs/heads/") ? "defaultbranch" : ref;
     } else {
      _this__u8e3s4 instanceof Schedule || _this__u8e3s4 instanceof WorkflowDispatch ? tmp = "defaultbranch" : _this__u8e3s4 instanceof Other ? tmp = _this__u8e3s4.g1q_1 + "-" + ActionsEnvironment_getInstance().gr() + "-" + ActionsEnvironment_getInstance().kr() : noWhenBranchMatchedException();
     }
     return tmp;
    }
    function CompositeCache$save$slambda$slambda($cache, resultContinuation) {
     this.g1t_1 = $cache, CoroutineImpl.call(this, resultContinuation);
    }
    function CompositeCache$save$slambda$slambda_0($cache, resultContinuation) {
     var i = new CompositeCache$save$slambda$slambda($cache, resultContinuation), l = function($this$launch, $completion) {
      return i.mt($this$launch, $completion);
     };
     return l.$arity = 1, l;
    }
    function CompositeCache$restore$slambda$slambda($cache, resultContinuation) {
     this.q1t_1 = $cache, CoroutineImpl.call(this, resultContinuation);
    }
    function CompositeCache$restore$slambda$slambda_0($cache, resultContinuation) {
     var i = new CompositeCache$restore$slambda$slambda($cache, resultContinuation), l = function($this$launch, $completion) {
      return i.mt($this$launch, $completion);
     };
     return l.$arity = 1, l;
    }
    function CompositeCache$save$slambda(this$0, resultContinuation) {
     this.a1u_1 = this$0, CoroutineImpl.call(this, resultContinuation);
    }
    function CompositeCache$save$slambda_0(this$0, resultContinuation) {
     var i = new CompositeCache$save$slambda(this$0, resultContinuation), l = function($this$supervisorScope, $completion) {
      return i.mt($this$supervisorScope, $completion);
     };
     return l.$arity = 1, l;
    }
    function CompositeCache$restore$slambda(this$0, resultContinuation) {
     this.k1u_1 = this$0, CoroutineImpl.call(this, resultContinuation);
    }
    function CompositeCache$restore$slambda_0(this$0, resultContinuation) {
     var i = new CompositeCache$restore$slambda(this$0, resultContinuation), l = function($this$supervisorScope, $completion) {
      return i.mt($this$supervisorScope, $completion);
     };
     return l.$arity = 1, l;
    }
    function $saveCOROUTINE$1(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.u1u_1 = _this__u8e3s4;
    }
    function $restoreCOROUTINE$2(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.k1v_1 = _this__u8e3s4;
    }
    function CompositeCache(name, caches, concurrent) {
     this.s1s_1 = name, this.t1s_1 = caches, this.u1s_1 = concurrent;
    }
    function _get_restoredKey__gcgyt4($this) {
     return $this.b1w_1.zk() ? $this.r1v_1 : $this.d1w_1.zk() >= 0 ? $this.s1v_1.p($this.d1w_1.zk()) : null;
    }
    function $restoreCOROUTINE$3(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.n1w_1 = _this__u8e3s4;
    }
    function $saveCOROUTINE$4(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.m1x_1 = _this__u8e3s4;
    }
    function DefaultCache(name, primaryKey, restoreKeys, paths, readOnlyMessage, stateKey, skipRestoreIfPathExists) {
     restoreKeys = restoreKeys === VOID ? emptyList() : restoreKeys, readOnlyMessage = readOnlyMessage === VOID ? null : readOnlyMessage, 
     stateKey = stateKey === VOID ? "" : stateKey, skipRestoreIfPathExists = skipRestoreIfPathExists === VOID ? null : skipRestoreIfPathExists, 
     this.r1v_1 = primaryKey, this.s1v_1 = restoreKeys, this.t1v_1 = paths, this.u1v_1 = readOnlyMessage, 
     this.v1v_1 = skipRestoreIfPathExists, this.w1v_1 = name, this.x1v_1 = "1-", this.y1v_1 = new MetadataFile(name + "-info", Companion_instance.f1f()), 
     this.z1v_1 = new MetadataFile(name + "-contents", Companion_getInstance().f1f()), 
     this.a1w_1 = plus(plus(this.t1v_1, this.y1v_1.b1x_1), this.z1v_1.b1x_1), this.b1w_1 = toBoolean(stateVariable(name + "_" + stateKey + "_exact")), 
     this.c1w_1 = toBoolean(stateVariable(name + "_" + stateKey + "_skip")), this.d1w_1 = function(_this__u8e3s4, default_0) {
      var tmp = ($default = default_0, function(it) {
       return isBlank(it) ? $default : toInt(it);
      });
      var $default;
      return transform(_this__u8e3s4, tmp, toInt$lambda_0);
     }(stateVariable(name + "_" + stateKey + "_key"), -1), this.e1w_1 = null;
    }
    function toCache($this, _this__u8e3s4, stateKey) {
     var tmp, tmp0_name = $this.u1x_1, tmp1_primaryKey = _this__u8e3s4.e1y_1;
     if (_this__u8e3s4.f1y_1.q()) {
      for (var this_0 = $this.y1x_1, destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10)), _iterator__ex2g4s = this_0.h(); _iterator__ex2g4s.i(); ) {
       var item = _iterator__ex2g4s.j(), tmp$ret$2 = $this.a1y_1 + "-" + item;
       destination.e(tmp$ret$2);
      }
      tmp = destination;
     } else tmp = emptyList();
     var tmp2_restoreKeys = tmp, this_1 = _this__u8e3s4.f1y_1;
     return new DefaultCache(tmp0_name, tmp1_primaryKey, tmp2_restoreKeys, this_1.q() ? $this.z1x_1 : this_1, VOID, stateKey);
    }
    function saveSingleLayerCache($this, $completion) {
     var tmp = new $saveSingleLayerCacheCOROUTINE$7($this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function LayeredCache$restore$lambda(it) {
     return it.f1y_1.q() ? it.e1y_1 : it.e1y_1 + " (" + it.f1y_1.k() + " files)";
    }
    function $restoreCOROUTINE$5(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.b1z_1 = _this__u8e3s4;
    }
    function $saveCOROUTINE$6(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.w1z_1 = _this__u8e3s4;
    }
    function $saveSingleLayerCacheCOROUTINE$7(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.o1y_1 = _this__u8e3s4;
    }
    function LayeredCache(name, baseline, maxLayers, primaryKey, restoreKeys, paths) {
     maxLayers = maxLayers === VOID ? 5 : maxLayers, restoreKeys = restoreKeys === VOID ? emptyList() : restoreKeys, 
     this.u1x_1 = name, this.v1x_1 = baseline, this.w1x_1 = maxLayers, this.x1x_1 = primaryKey, 
     this.y1x_1 = restoreKeys, this.z1x_1 = paths, this.a1y_1 = "1", this.b1y_1 = new MetadataFile("layer-" + this.u1x_1, Companion_getInstance_1().f1f()), 
     this.c1y_1 = toBoolean(stateVariable(this.u1x_1 + "_exact"));
     for (var tmp_1 = this.a1y_1 + "-index-" + this.u1x_1, tmp_2 = this.a1y_1 + "-index-" + this.x1x_1, this_0 = this.y1x_1, destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10)), _iterator__ex2g4s = this_0.h(); _iterator__ex2g4s.i(); ) {
      var item = _iterator__ex2g4s.j(), tmp$ret$1 = this.a1y_1 + "-index-" + item;
      destination.e(tmp$ret$1);
     }
     this.d1y_1 = new DefaultCache(tmp_1, tmp_2, destination, listOf_0(this.b1y_1.b1x_1));
    }
    function CacheLayers$Companion$$childSerializers$_anonymous__hk40l6() {
     return new ArrayListSerializer($serializer_getInstance_0());
    }
    function CacheLayers$Companion$$childSerializers$_anonymous__hk40l6_0() {
     return new ArrayListSerializer(StringSerializer_getInstance());
    }
    function Companion_0() {
     Companion_instance_1 = this;
     var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance(), tmp_1 = lazy(tmp_0, CacheLayers$Companion$$childSerializers$_anonymous__hk40l6), tmp_2 = LazyThreadSafetyMode_PUBLICATION_getInstance();
     this.y20_1 = [ tmp_1, lazy(tmp_2, CacheLayers$Companion$$childSerializers$_anonymous__hk40l6_0) ];
    }
    function Companion_getInstance_1() {
     return null == Companion_instance_1 && new Companion_0, Companion_instance_1;
    }
    function $serializer() {
     $serializer_instance = this;
     var tmp0_serialDesc = new PluginGeneratedSerialDescriptor("com.github.burrunan.gradle.cache.CacheLayers", this, 2);
     tmp0_serialDesc.b11("layers", !1), tmp0_serialDesc.b11("deletedFiles", !1), this.z20_1 = tmp0_serialDesc;
    }
    function $serializer_getInstance() {
     return null == $serializer_instance && new $serializer, $serializer_instance;
    }
    function CacheLayers(layers, deletedFiles) {
     Companion_getInstance_1(), this.m1z_1 = layers, this.n1z_1 = deletedFiles;
    }
    function CacheLayer$Companion$$childSerializers$_anonymous__pic94r() {
     return new ArrayListSerializer(StringSerializer_getInstance());
    }
    function Companion_1() {
     Companion_instance_2 = this;
     var tmp_0 = LazyThreadSafetyMode_PUBLICATION_getInstance();
     this.b21_1 = [ null, lazy(tmp_0, CacheLayer$Companion$$childSerializers$_anonymous__pic94r) ];
    }
    function Companion_getInstance_2() {
     return null == Companion_instance_2 && new Companion_1, Companion_instance_2;
    }
    function $serializer_0() {
     $serializer_instance_0 = this;
     var tmp0_serialDesc = new PluginGeneratedSerialDescriptor("com.github.burrunan.gradle.cache.CacheLayer", this, 2);
     tmp0_serialDesc.b11("primaryKey", !1), tmp0_serialDesc.b11("paths", !1), this.c21_1 = tmp0_serialDesc;
    }
    function $serializer_getInstance_0() {
     return null == $serializer_instance_0 && new $serializer_0, $serializer_instance_0;
    }
    function CacheLayer(primaryKey, paths) {
     Companion_getInstance_2(), this.e1y_1 = primaryKey, this.f1y_1 = paths;
    }
    function Companion_2() {
     Companion_instance_3 = this, this.e21_1 = "~/.gradle-cache-action", this.f21_1 = Regex_init_$Create$("[!@#$%^&*:;'\"{}\\r\\n\\[\\]\\\\]");
     var path = get_normalizedPath("~/.gradle-cache-action");
     if (!existsSync(path)) try {
      mkdirSync(path);
     } catch ($p) {
      if (!($p instanceof Error)) throw $p;
     }
    }
    function $restoreCOROUTINE$8(_this__u8e3s4, key, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.o21_1 = _this__u8e3s4, this.p21_1 = key;
    }
    function $decodeCOROUTINE$9(_this__u8e3s4, warnOnMissing, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.e22_1 = _this__u8e3s4, this.f22_1 = warnOnMissing;
    }
    function $encodeCOROUTINE$10(_this__u8e3s4, value, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.v22_1 = _this__u8e3s4, this.w22_1 = value;
    }
    function MetadataFile(name, serializer, extension) {
     null == Companion_instance_3 && new Companion_2, extension = extension === VOID ? ".json" : extension, 
     this.z1w_1 = serializer, this.a1x_1 = extension, this.b1x_1 = "~/.gradle-cache-action/" + name + this.a1x_1, 
     this.c1x_1 = get_normalizedPath(this.b1x_1);
    }
    function gradleDependenciesCache(trigger, path, gradleDependenciesCacheKey, $completion) {
     for (var tmp = listOf([ "~/.gradle/caches/modules-2/*", "!~/.gradle/caches/modules-2/gc.properties", "!~/.gradle/caches/modules-2/modules-2.lock" ]), tmp_0 = listOf([ path + "/**/*.gradle", path + "/**/*.gradle.kts", path + "/**/gradle/dependency-locking/**", path + "/**/*.properties", path + "/**/gradle/libs.versions.toml" ]), destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(gradleDependenciesCacheKey, 10)), _iterator__ex2g4s = gradleDependenciesCacheKey.h(); _iterator__ex2g4s.i(); ) {
      var item = _iterator__ex2g4s.j(), tmp_1 = (startsWith(item, "!") ? "!" : "") + path + "/**/", tmp$ret$0 = toString(trim(isCharSequence(item) ? item : THROW_CCE())), tmp$ret$1 = tmp_1 + trimStart(tmp$ret$0, charArrayOf([ _Char___init__impl__6a9atx(33) ]));
      destination.e(tmp$ret$1);
     }
     return dependenciesCache("gradle", trigger, tmp, plus_0(plus_0(tmp_0, destination), listOf_0("!" + path + "/**/.gradle/")), $completion);
    }
    function mavenDependenciesCache(trigger, path, mavenLocalIgnorePaths, $completion) {
     for (var tmp = listOf_0("~/.m2/repository"), destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(mavenLocalIgnorePaths, 10)), _iterator__ex2g4s = mavenLocalIgnorePaths.h(); _iterator__ex2g4s.i(); ) {
      var tmp$ret$0 = "!~/.m2/repository/" + _iterator__ex2g4s.j();
      destination.e(tmp$ret$0);
     }
     return dependenciesCache("maven", trigger, plus_0(tmp, destination), listOf_0(path + "/**/pom.xml"), $completion);
    }
    function dependenciesCache(name, trigger, cacheLocation, pathDependencies, $completion) {
     var tmp = new $dependenciesCacheCOROUTINE$11(name, trigger, cacheLocation, pathDependencies, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function dependenciesCache$slambda($pathDependencies, resultContinuation) {
     this.e24_1 = $pathDependencies, CoroutineImpl.call(this, resultContinuation);
    }
    function dependenciesCache$slambda_0($pathDependencies, resultContinuation) {
     var i = new dependenciesCache$slambda($pathDependencies, resultContinuation), l = function($completion) {
      return i.d1r($completion);
     };
     return l.$arity = 0, l;
    }
    function $dependenciesCacheCOROUTINE$11(name, trigger, cacheLocation, pathDependencies, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.l23_1 = name, this.m23_1 = trigger, 
     this.n23_1 = cacheLocation, this.o23_1 = pathDependencies;
    }
    function localBuildCache(jobId, trigger, gradleVersion, treeId) {
     for (var pkPrefix = get_cacheKey(trigger), elements = [ "defaultbranch", "master", "main" ], restoreKeys = (trigger instanceof PullRequest ? [ pkPrefix, removePrefix(trigger.z1p_1.pull_request.base.ref, "refs/heads/") ] : trigger instanceof BranchPush ? [ pkPrefix ] : []).concat(elements), prefix = "gradle-build-cache-" + jobId + "-gradle-" + gradleVersion, tmp_0 = prefix + "-defaultbranch", tmp_1 = prefix + "-" + pkPrefix + "-" + treeId, destination = ArrayList_init_$Create$_0(restoreKeys.length), inductionVariable = 0, last = restoreKeys.length; inductionVariable < last; ) {
      var item = restoreKeys[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var tmp$ret$14 = prefix + "-" + item;
      destination.e(tmp$ret$14);
     }
     return new LayeredCache("local-build-cache", tmp_0, VOID, tmp_1, destination, listOf([ "~/.gradle/caches/build-cache-1/*", "!~/.gradle/caches/build-cache-1/gc.properties", "!~/.gradle/caches/build-cache-1/build-cache-1.lock" ]));
    }
    function stateVariable(name, default_0) {
     return new DefaultStateVariable(name, default_0 = default_0 === VOID ? stateVariable$lambda : default_0);
    }
    function DefaultStateVariable(name, default_0) {
     BaseStateVariable.call(this, name), this.h24_1 = default_0;
    }
    function BaseStateVariable(name) {
     this.i24_1 = name, this.j24_1 = null;
    }
    function suspendingStateVariable(name, default_0) {
     return new DefaultSuspendingStateVariable(name, default_0);
    }
    function $getCOROUTINE$12(_this__u8e3s4, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.s24_1 = _this__u8e3s4;
    }
    function DefaultSuspendingStateVariable(name, default_0) {
     BaseStateVariable.call(this, name), this.a25_1 = default_0;
    }
    function toBoolean(_this__u8e3s4) {
     return transform(_this__u8e3s4, toBoolean$lambda, toBoolean$lambda_0);
    }
    function transform(_this__u8e3s4, decode, encode) {
     return new transform$1(decode, _this__u8e3s4, encode);
    }
    function stateVariable$lambda() {
     return "";
    }
    function toBoolean$lambda(it) {
     return "Y" === it;
    }
    function toBoolean$lambda_0(it) {
     return it ? "Y" : "N";
    }
    function toInt$lambda_0(it) {
     return it.toString();
    }
    function transform$1($decode, $this_transform, $encode) {
     this.c25_1 = $decode, this.d25_1 = $this_transform, this.e25_1 = $encode;
    }
    initMetadataForCompanion(Companion), initMetadataForLambda(GradleCacheAction$treeId$slambda, CoroutineImpl, VOID, [ 0 ]), 
    initMetadataForCoroutine($executeCOROUTINE$0, CoroutineImpl), initMetadataForClass(GradleCacheAction, "GradleCacheAction", VOID, VOID, VOID, [ 1 ]), 
    initMetadataForClass(Parameters, "Parameters"), initMetadataForLambda(CompositeCache$save$slambda$slambda, CoroutineImpl, VOID, [ 1 ]), 
    initMetadataForLambda(CompositeCache$restore$slambda$slambda, CoroutineImpl, VOID, [ 1 ]), 
    initMetadataForLambda(CompositeCache$save$slambda, CoroutineImpl, VOID, [ 1 ]), 
    initMetadataForLambda(CompositeCache$restore$slambda, CoroutineImpl, VOID, [ 1 ]), 
    initMetadataForCoroutine($saveCOROUTINE$1, CoroutineImpl), initMetadataForCoroutine($restoreCOROUTINE$2, CoroutineImpl), 
    initMetadataForClass(CompositeCache, "CompositeCache", VOID, VOID, VOID, [ 0 ]), 
    initMetadataForCoroutine($restoreCOROUTINE$3, CoroutineImpl), initMetadataForCoroutine($saveCOROUTINE$4, CoroutineImpl), 
    initMetadataForClass(DefaultCache, "DefaultCache", VOID, VOID, VOID, [ 0 ]), initMetadataForCoroutine($restoreCOROUTINE$5, CoroutineImpl), 
    initMetadataForCoroutine($saveCOROUTINE$6, CoroutineImpl), initMetadataForCoroutine($saveSingleLayerCacheCOROUTINE$7, CoroutineImpl), 
    initMetadataForClass(LayeredCache, "LayeredCache", VOID, VOID, VOID, [ 0 ]), initMetadataForCompanion(Companion_0), 
    initMetadataForObject($serializer, "$serializer", VOID, VOID, [ GeneratedSerializer ]), 
    initMetadataForClass(CacheLayers, "CacheLayers", VOID, VOID, VOID, VOID, VOID, {
     0: $serializer_getInstance
    }), initMetadataForCompanion(Companion_1), initMetadataForObject($serializer_0, "$serializer", VOID, VOID, [ GeneratedSerializer ]), 
    initMetadataForClass(CacheLayer, "CacheLayer", VOID, VOID, VOID, VOID, VOID, {
     0: $serializer_getInstance_0
    }), initMetadataForCompanion(Companion_2), initMetadataForCoroutine($restoreCOROUTINE$8, CoroutineImpl), 
    initMetadataForCoroutine($decodeCOROUTINE$9, CoroutineImpl), initMetadataForCoroutine($encodeCOROUTINE$10, CoroutineImpl), 
    initMetadataForClass(MetadataFile, "MetadataFile", VOID, VOID, VOID, [ 1 ]), initMetadataForLambda(dependenciesCache$slambda, CoroutineImpl, VOID, [ 0 ]), 
    initMetadataForCoroutine($dependenciesCacheCOROUTINE$11, CoroutineImpl), initMetadataForClass(BaseStateVariable, "BaseStateVariable"), 
    initMetadataForClass(DefaultStateVariable, "DefaultStateVariable", VOID, BaseStateVariable), 
    initMetadataForCoroutine($getCOROUTINE$12, CoroutineImpl), initMetadataForClass(DefaultSuspendingStateVariable, "DefaultSuspendingStateVariable", VOID, BaseStateVariable, VOID, [ 0 ]), 
    initMetadataForClass(transform$1), protoOf(GradleCacheAction$treeId$slambda).d1r = function($completion) {
     var tmp = this.e1r($completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(GradleCacheAction$treeId$slambda).f1r = function($completion) {
     return this.d1r($completion);
    }, protoOf(GradleCacheAction$treeId$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 2, this.u6_1 = 1, (suspendResult = exec("git", [ "log", "-1", "--quiet", "--format=%T" ], !0, VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       var this_0 = suspendResult.nr_1;
       return toString(trim(isCharSequence(this_0) ? this_0 : THROW_CCE()));

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(GradleCacheAction$treeId$slambda).e1r = function(completion) {
     return new GradleCacheAction$treeId$slambda(completion);
    }, protoOf($executeCOROUTINE$0).c7 = function() {
     var gradleVersion, suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 11, this.q1r_1 = this.o1r_1.e1s_1.q1i_1;
       if (this.r1r_1 = ArrayList_init_$Create$(), this.o1r_1.d1s_1.j1s_1 && this.r1r_1.e(new DefaultCache("gradle-generated-jars", "generated-gradle-jars-gradle-" + (gradleVersion = this.q1r_1), VOID, listOf([ "~/.gradle/caches/" + gradleVersion + "/generated-gradle-jars/*", "!~/.gradle/caches/" + gradleVersion + "/generated-gradle-jars/*.lock" ]), VOID, VOID, "~/.gradle/caches/" + gradleVersion + "/generated-gradle-jars")), 
       this.o1r_1.d1s_1.k1s_1) {
        if (this.s1r_1 = this.o1r_1.d1s_1.g1s_1, this.t1r_1 = this.o1r_1.c1s_1, this.u6_1 = 1, 
        (suspendResult = this.o1r_1.f1s_1.r1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 2;
       continue $sm;

      case 1:
       this.u1r_1 = suspendResult, this.v1r_1 = localBuildCache(this.s1r_1, this.t1r_1, this.q1r_1, this.u1r_1), 
       this.r1r_1.e(this.v1r_1), this.u6_1 = 2;
       continue $sm;

      case 2:
       if (this.o1r_1.d1s_1.l1s_1) {
        if (this.u6_1 = 3, (suspendResult = gradleDependenciesCache(this.o1r_1.c1s_1, this.o1r_1.d1s_1.h1s_1, this.o1r_1.d1s_1.m1s_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 4;
       continue $sm;

      case 3:
       this.w1r_1 = suspendResult, this.r1r_1.e(this.w1r_1), this.u6_1 = 4;
       continue $sm;

      case 4:
       if (this.o1r_1.d1s_1.n1s_1) {
        if (this.u6_1 = 5, (suspendResult = mavenDependenciesCache(this.o1r_1.c1s_1, this.o1r_1.d1s_1.h1s_1, this.o1r_1.d1s_1.o1s_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 6;
       continue $sm;

      case 5:
       this.x1r_1 = suspendResult, this.r1r_1.e(this.x1r_1), this.u6_1 = 6;
       continue $sm;

      case 6:
       if (this.y1r_1 = new CompositeCache("all-caches", this.r1r_1, this.o1r_1.d1s_1.p1s_1), 
       this.z1r_1 = this.p1r_1, this.a1s_1 = this.z1r_1.r1_1, 1 === this.a1s_1) {
        if (this.b1s_1 = Date.now(), this.u6_1 = 9, (suspendResult = this.y1r_1.w1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       if (2 === this.a1s_1) {
        if (this.o1r_1.d1s_1.q1s_1) {
         info("read-only == true, so will skip cache upload"), this.u6_1 = 8;
         continue $sm;
        }
        if (this.u6_1 = 7, (suspendResult = this.y1r_1.v1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       throw new ActionFailedException("Cache action should be called in PRE or POST stages only. Current stage is " + this.p1r_1.toString());

      case 7:
       this.u6_1 = 8;
       continue $sm;

      case 8:
       this.u6_1 = 10;
       continue $sm;

      case 9:
       var elapsed = Date.now() - this.b1s_1;
       info("Cache restore took " + roundToInt(elapsed / 1e3) + " seconds"), this.u6_1 = 10;
       continue $sm;

      case 10:
       return Unit_instance;

      case 11:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (11 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(GradleCacheAction).x1s = function(stage, $completion) {
     var tmp = new $executeCOROUTINE$0(this, stage, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(Parameters).toString = function() {
     return "Parameters(jobId=" + this.g1s_1 + ", path=" + this.h1s_1 + ", debug=" + this.i1s_1 + ", generatedGradleJars=" + this.j1s_1 + ", localBuildCache=" + this.k1s_1 + ", gradleDependenciesCache=" + this.l1s_1 + ", gradleDependenciesCacheKey=" + toString(this.m1s_1) + ", mavenDependenciesCache=" + this.n1s_1 + ", mavenLocalIgnorePaths=" + toString(this.o1s_1) + ", concurrent=" + this.p1s_1 + ", readOnly=" + this.q1s_1 + ")";
    }, protoOf(Parameters).hashCode = function() {
     var result = getStringHashCode(this.g1s_1);
     return result = imul(result, 31) + getStringHashCode(this.h1s_1) | 0, result = imul(result, 31) + getBooleanHashCode(this.i1s_1) | 0, 
     result = imul(result, 31) + getBooleanHashCode(this.j1s_1) | 0, result = imul(result, 31) + getBooleanHashCode(this.k1s_1) | 0, 
     result = imul(result, 31) + getBooleanHashCode(this.l1s_1) | 0, result = imul(result, 31) + hashCode(this.m1s_1) | 0, 
     result = imul(result, 31) + getBooleanHashCode(this.n1s_1) | 0, result = imul(result, 31) + hashCode(this.o1s_1) | 0, 
     result = imul(result, 31) + getBooleanHashCode(this.p1s_1) | 0, result = imul(result, 31) + getBooleanHashCode(this.q1s_1) | 0;
    }, protoOf(Parameters).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof Parameters)) return !1;
     var tmp0_other_with_cast = other instanceof Parameters ? other : THROW_CCE();
     return this.g1s_1 === tmp0_other_with_cast.g1s_1 && (this.h1s_1 === tmp0_other_with_cast.h1s_1 && (this.i1s_1 === tmp0_other_with_cast.i1s_1 && (this.j1s_1 === tmp0_other_with_cast.j1s_1 && (this.k1s_1 === tmp0_other_with_cast.k1s_1 && (this.l1s_1 === tmp0_other_with_cast.l1s_1 && (!!equals(this.m1s_1, tmp0_other_with_cast.m1s_1) && (this.n1s_1 === tmp0_other_with_cast.n1s_1 && (!!equals(this.o1s_1, tmp0_other_with_cast.o1s_1) && (this.p1s_1 === tmp0_other_with_cast.p1s_1 && this.q1s_1 === tmp0_other_with_cast.q1s_1)))))))));
    }, protoOf(CompositeCache$save$slambda$slambda).mt = function($this$launch, $completion) {
     var tmp = this.nt($this$launch, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(CompositeCache$save$slambda$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(CompositeCache$save$slambda$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 2, this.u6_1 = 1, (suspendResult = this.g1t_1.v1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       return Unit_instance;

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(CompositeCache$save$slambda$slambda).nt = function($this$launch, completion) {
     var i = new CompositeCache$save$slambda$slambda(this.g1t_1, completion);
     return i.h1t_1 = $this$launch, i;
    }, protoOf(CompositeCache$restore$slambda$slambda).mt = function($this$launch, $completion) {
     var tmp = this.nt($this$launch, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(CompositeCache$restore$slambda$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(CompositeCache$restore$slambda$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 2, this.u6_1 = 1, (suspendResult = this.q1t_1.w1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       return Unit_instance;

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(CompositeCache$restore$slambda$slambda).nt = function($this$launch, completion) {
     var i = new CompositeCache$restore$slambda$slambda(this.q1t_1, completion);
     return i.r1t_1 = $this$launch, i;
    }, protoOf(CompositeCache$save$slambda).mt = function($this$supervisorScope, $completion) {
     var tmp = this.nt($this$supervisorScope, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(CompositeCache$save$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(CompositeCache$save$slambda).c7 = function() {
     for (this.w6_1; ;) try {
      var tmp = this.u6_1;
      if (0 === tmp) {
       this.v6_1 = 1;
       for (var _iterator__ex2g4s = this.a1u_1.t1s_1.h(); _iterator__ex2g4s.i(); ) {
        var cache = _iterator__ex2g4s.j();
        launch(this.b1u_1, VOID, VOID, CompositeCache$save$slambda$slambda_0(cache, null));
       }
       return Unit_instance;
      }
      if (1 === tmp) throw this.x6_1;
     } catch ($p) {
      throw $p;
     }
    }, protoOf(CompositeCache$save$slambda).nt = function($this$supervisorScope, completion) {
     var i = new CompositeCache$save$slambda(this.a1u_1, completion);
     return i.b1u_1 = $this$supervisorScope, i;
    }, protoOf(CompositeCache$restore$slambda).mt = function($this$supervisorScope, $completion) {
     var tmp = this.nt($this$supervisorScope, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(CompositeCache$restore$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(CompositeCache$restore$slambda).c7 = function() {
     for (this.w6_1; ;) try {
      var tmp = this.u6_1;
      if (0 === tmp) {
       this.v6_1 = 1;
       for (var _iterator__ex2g4s = this.k1u_1.t1s_1.h(); _iterator__ex2g4s.i(); ) {
        var cache = _iterator__ex2g4s.j();
        launch(this.l1u_1, VOID, VOID, CompositeCache$restore$slambda$slambda_0(cache, null));
       }
       return Unit_instance;
      }
      if (1 === tmp) throw this.x6_1;
     } catch ($p) {
      throw $p;
     }
    }, protoOf(CompositeCache$restore$slambda).nt = function($this$supervisorScope, completion) {
     var i = new CompositeCache$restore$slambda(this.k1u_1, completion);
     return i.l1u_1 = $this$supervisorScope, i;
    }, protoOf($saveCOROUTINE$1).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 13, this.u1u_1.u1s_1) {
        this.u6_1 = 1;
        continue $sm;
       }
       this.v1u_1 = this.u1u_1.t1s_1.h(), this.u6_1 = 3;
       continue $sm;

      case 1:
       if (this.u6_1 = 2, (suspendResult = supervisorScope(CompositeCache$save$slambda_0(this.u1u_1, null), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
      case 12:
       return Unit_instance;

      case 3:
       if (!this.v1u_1.i()) {
        this.u6_1 = 12;
        continue $sm;
       }
       this.w1u_1 = this.v1u_1.j();
       this.x1u_1 = "Save " + this.w1u_1.b1v(), this.u6_1 = 4;
       continue $sm;

      case 4:
       this.z1u_1 = this.x1u_1, startGroup(this.z1u_1), this.u6_1 = 5;
       continue $sm;

      case 5:
       this.u6_1 = 6;
       continue $sm;

      case 6:
       if (this.v6_1 = 11, this.u6_1 = 7, (suspendResult = this.w1u_1.v1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 7:
       this.a1v_1 = Unit_instance, this.v6_1 = 13, this.u6_1 = 8;
       continue $sm;

      case 8:
       this.v6_1 = 13;
       endGroup(), this.y1u_1 = Unit_instance, this.u6_1 = 10;
       continue $sm;

      case 9:
       this.v6_1 = 13, endGroup(), this.u6_1 = 10;
       continue $sm;

      case 10:
       this.u6_1 = 3;
       continue $sm;

      case 11:
       this.v6_1 = 13;
       var t = this.x6_1;
       throw endGroup(), t;

      case 13:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (13 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($restoreCOROUTINE$2).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 13, this.k1v_1.u1s_1) {
        this.u6_1 = 1;
        continue $sm;
       }
       this.l1v_1 = this.k1v_1.t1s_1.h(), this.u6_1 = 3;
       continue $sm;

      case 1:
       if (this.u6_1 = 2, (suspendResult = supervisorScope(CompositeCache$restore$slambda_0(this.k1v_1, null), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
      case 12:
       return Unknown_getInstance();

      case 3:
       if (!this.l1v_1.i()) {
        this.u6_1 = 12;
        continue $sm;
       }
       this.m1v_1 = this.l1v_1.j();
       this.n1v_1 = "Restore " + this.m1v_1.b1v(), this.u6_1 = 4;
       continue $sm;

      case 4:
       this.p1v_1 = this.n1v_1, startGroup(this.p1v_1), this.u6_1 = 5;
       continue $sm;

      case 5:
       this.u6_1 = 6;
       continue $sm;

      case 6:
       if (this.v6_1 = 11, this.u6_1 = 7, (suspendResult = this.m1v_1.w1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 7:
       this.q1v_1 = suspendResult, this.v6_1 = 13, this.u6_1 = 8;
       continue $sm;

      case 8:
       var tmp_2 = this.q1v_1;
       this.v6_1 = 13, endGroup(), this.o1v_1 = tmp_2, this.u6_1 = 10;
       continue $sm;

      case 9:
       this.v6_1 = 13, endGroup(), this.u6_1 = 10;
       continue $sm;

      case 10:
       this.u6_1 = 3;
       continue $sm;

      case 11:
       this.v6_1 = 13;
       var t = this.x6_1;
       throw endGroup(), t;

      case 13:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (13 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(CompositeCache).b1v = function() {
     return this.s1s_1;
    }, protoOf(CompositeCache).v1s = function($completion) {
     var tmp = new $saveCOROUTINE$1(this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(CompositeCache).w1s = function($completion) {
     var tmp = new $restoreCOROUTINE$2(this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf($restoreCOROUTINE$3).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 5;
       var tmp0_safe_receiver = this.n1w_1.v1v_1;
       if (null == tmp0_safe_receiver || exists(tmp0_safe_receiver) && (isDebug() && debug(this.n1w_1.w1v_1 + ": " + tmp0_safe_receiver + " already exists, so the cache restore and upload will be skipped"), 
       this.n1w_1.c1w_1.y1w(!0)), isDebug() && debug(this.n1w_1.w1v_1 + ": restoring " + this.n1w_1.r1v_1 + ", " + toString(this.n1w_1.s1v_1) + ", " + toString(this.n1w_1.a1w_1)), 
       this.u6_1 = 1, (suspendResult = restoreAndLog(this.n1w_1.a1w_1, this.n1w_1.r1v_1, this.n1w_1.s1v_1, this.n1w_1.x1v_1, VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.o1w_1 = suspendResult, this.p1w_1 = this.o1w_1;
       this.q1w_1 = this.p1w_1, this.r1w_1 = this.q1w_1;
       var tmp_2, tmp_1 = this.r1w_1;
       if (this.n1w_1.b1w_1.y1w(tmp_1 instanceof Exact), this.r1w_1 instanceof Partial) {
        var tmp$ret$0, tmp0 = this.n1w_1.s1v_1;
        l$ret$1: do {
         for (var index = 0, _iterator__ex2g4s = tmp0.h(); _iterator__ex2g4s.i(); ) {
          var item = _iterator__ex2g4s.j();
          if (startsWith(this.r1w_1.wv_1, item)) {
           tmp$ret$0 = index;
           break l$ret$1;
          }
          index = index + 1 | 0;
         }
         tmp$ret$0 = -1;
        } while (0);
        tmp_2 = tmp$ret$0;
       } else tmp_2 = -1;
       if (this.n1w_1.d1w_1.y1w(tmp_2), isDebug() && debug(this.n1w_1.w1v_1 + ": restore type " + toString(this.r1w_1) + ", " + this.n1w_1.b1w_1.zk() + ", " + this.n1w_1.d1w_1.zk()), 
       this.s1w_1 = _get_restoredKey__gcgyt4(this.n1w_1), null == this.s1w_1) {
        this.t1w_1 = null, this.u6_1 = 4;
        continue $sm;
       }
       this.u1w_1 = this.s1w_1, this.v1w_1 = this.u1w_1;
       if (this.w1w_1 = this.v1w_1, this.x1w_1 = this.w1w_1, this.u6_1 = 2, (suspendResult = this.n1w_1.y1v_1.d1x(this.x1w_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       if (this.u6_1 = 3, (suspendResult = this.n1w_1.z1v_1.d1x(this.x1w_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 3:
       this.t1w_1 = Unit_instance, this.u6_1 = 4;
       continue $sm;

      case 4:
       return this.p1w_1;

      case 5:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (5 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($saveCOROUTINE$4).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 6, isDebug() && debug(this.m1x_1.w1v_1 + ": saving " + this.m1x_1.b1w_1.zk() + " " + this.m1x_1.d1w_1.zk() + " " + this.m1x_1.r1v_1 + ", " + toString(this.m1x_1.s1v_1) + ", " + toString(this.m1x_1.a1w_1)), 
       this.m1x_1.c1w_1.zk()) return isDebug() && debug(this.m1x_1.w1v_1 + ": cache save skipped"), 
       Unit_instance;
       if (this.m1x_1.b1w_1.zk()) return info(this.m1x_1.w1v_1 + " loaded from exact match, no need to update the cache entry"), 
       Unit_instance;
       var tmp0_safe_receiver = this.m1x_1.u1v_1;
       if (null != tmp0_safe_receiver) return info(this.m1x_1.w1v_1 + " is configured as read-only: " + tmp0_safe_receiver), 
       Unit_instance;
       var tmp1_safe_receiver = _get_restoredKey__gcgyt4(this.m1x_1);
       if (null == tmp1_safe_receiver || (this.m1x_1.y1v_1.p1x(tmp1_safe_receiver), this.m1x_1.z1v_1.p1x(tmp1_safe_receiver)), 
       this.u6_1 = 1, (suspendResult = this.m1x_1.q1x(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.n1x_1 = suspendResult, this.u6_1 = 2;
       var this_0 = this.m1x_1.t1v_1;
       if ((suspendResult = hashFilesDetailed(copyToArray(this_0).slice(), VOID, VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       if (this.o1x_1 = suspendResult, this.m1x_1.e1w_1 = this.o1x_1, this.o1x_1.q1f_1.o1f_1.q()) return info(this.m1x_1.w1v_1 + ": no files to cache => won't upload empty cache"), 
       Unit_instance;
       if (null != this.n1x_1) {
        if (info(this.m1x_1.w1v_1 + ": comparing modifications of the cache contents"), 
        this.o1x_1.p1f_1.j1f_1 === this.n1x_1.j1f_1) return info(this.m1x_1.w1v_1 + ": contents did not change => no need to upload it"), 
        Unit_instance;
        var delta = this.o1x_1.p1f_1.i1f_1.y1(this.n1x_1.i1f_1);
        info(this.m1x_1.w1v_1 + ": hash content differs (" + abs(delta).toString() + " bytes " + (delta.b1(new Long(0, 0)) >= 0 ? "increase" : "decrease") + ")");
       }
       if (info(this.m1x_1.w1v_1 + ": uploading " + formatBytes(this.o1x_1.p1f_1.i1f_1) + ", " + this.o1x_1.q1f_1.o1f_1.k() + " files as " + this.m1x_1.r1v_1), 
       this.u6_1 = 3, (suspendResult = this.m1x_1.y1v_1.r1x(this.o1x_1.p1f_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 3:
       if (this.u6_1 = 4, (suspendResult = this.m1x_1.z1v_1.r1x(this.o1x_1.q1f_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 4:
       if (this.u6_1 = 5, (suspendResult = saveAndLog(this.m1x_1.a1w_1, this.m1x_1.r1v_1, this.m1x_1.x1v_1, VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 5:
       return Unit_instance;

      case 6:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (6 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(DefaultCache).b1v = function() {
     return this.w1v_1;
    }, protoOf(DefaultCache).q1x = function($completion) {
     var tmp0_safe_receiver = this.e1w_1, tmp1_safe_receiver = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.p1f_1;
     if (null != tmp1_safe_receiver) return tmp1_safe_receiver;
     var tmp2_safe_receiver = _get_restoredKey__gcgyt4(this);
     return null == tmp2_safe_receiver || this.z1v_1.p1x(tmp2_safe_receiver), this.b1w_1.zk() || -1 !== this.d1w_1.zk() ? this.y1v_1.s1x(VOID, $completion) : null;
    }, protoOf(DefaultCache).t1x = function($completion) {
     var tmp0_safe_receiver = this.e1w_1, tmp1_safe_receiver = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.q1f_1;
     if (null != tmp1_safe_receiver) return tmp1_safe_receiver;
     var tmp2_safe_receiver = _get_restoredKey__gcgyt4(this);
     return null == tmp2_safe_receiver || this.z1v_1.p1x(tmp2_safe_receiver), this.b1w_1.zk() || -1 !== this.d1w_1.zk() ? this.z1v_1.s1x(VOID, $completion) : null;
    }, protoOf(DefaultCache).w1s = function($completion) {
     var tmp = new $restoreCOROUTINE$3(this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(DefaultCache).v1s = function($completion) {
     var tmp = new $saveCOROUTINE$4(this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf($restoreCOROUTINE$5).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 7, this.u6_1 = 1, (suspendResult = this.b1z_1.d1y_1.w1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.c1z_1 = suspendResult, equals(this.c1z_1, None_getInstance())) return None_getInstance();
       if (this.u6_1 = 2, (suspendResult = this.b1z_1.b1y_1.s1x(VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       this.d1z_1 = suspendResult;
       var tmp_1;
       if (null == this.d1z_1) {
        var $this$run = this.b1z_1;
        return warning("Unable to restore cache " + $this$run.toString()), Unknown_getInstance();
       }
       tmp_1 = this.d1z_1, this.e1z_1 = tmp_1;
       var tmp_3, tmp1_subject = this.c1z_1;
       tmp_3 = tmp1_subject instanceof Exact ? new Exact(removePrefix(this.c1z_1.vv_1, this.b1z_1.a1y_1 + "-index-")) : tmp1_subject instanceof Partial ? new Partial(removePrefix(this.c1z_1.wv_1, this.b1z_1.a1y_1 + "-index-")) : this.c1z_1, 
       this.f1z_1 = tmp_3;
       var tmp_4 = this.b1z_1.u1x_1 + ": " + this.e1z_1.m1z_1.k() + " layers. ";
       info(joinToString(this.e1z_1.m1z_1, ", ", tmp_4, VOID, VOID, VOID, LayeredCache$restore$lambda)), 
       this.g1z_1 = withIndex(this.e1z_1.m1z_1).h(), this.u6_1 = 3;
       continue $sm;

      case 3:
       if (!this.g1z_1.i()) {
        this.u6_1 = 5;
        continue $sm;
       }
       if (this.h1z_1 = this.g1z_1.j(), this.i1z_1 = this.h1z_1.lc(), this.j1z_1 = this.h1z_1.mc(), 
       this.k1z_1 = toCache(this.b1z_1, this.j1z_1, this.i1z_1.toString()), this.u6_1 = 4, 
       (suspendResult = this.k1z_1.w1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 4:
       this.l1z_1 = suspendResult, this.l1z_1 instanceof Exact || (this.f1z_1 = Unknown_getInstance()), 
       isDebug() && debug(this.b1z_1.u1x_1 + ": layer " + this.i1z_1 + ", restore=" + toString(this.l1z_1)), 
       this.u6_1 = 3;
       continue $sm;

      case 5:
       if (this.u6_1 = 6, (suspendResult = removeFiles(this.e1z_1.n1z_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 6:
       var tmp_6 = this.f1z_1;
       return this.b1z_1.c1y_1.y1w(tmp_6 instanceof Exact), this.f1z_1;

      case 7:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (7 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($saveCOROUTINE$6).c7 = function() {
     var $this, _this__u8e3s4, suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 16, this.w1z_1.c1y_1.zk()) return info(this.w1z_1.u1x_1 + " loaded from exact match, no need to update the cache entry"), 
       Unit_instance;
       if (this.u6_1 = 1, (suspendResult = this.w1z_1.b1y_1.x20(!1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.x1z_1 = suspendResult, this.y1z_1 = startsWith(this.w1z_1.x1x_1, this.w1z_1.v1x_1), 
       null == this.x1z_1) {
        if (!this.y1z_1) return info(this.w1z_1.u1x_1 + ": old contents is not found, and the current cache " + this.w1z_1.x1x_1 + " does not start with " + this.w1z_1.v1x_1 + ", so cache saving can't be done"), 
        Unit_instance;
        if (this.u6_1 = 15, (suspendResult = saveSingleLayerCache(this.w1z_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 2;
       continue $sm;

      case 2:
       for (var this_0 = this.x1z_1.m1z_1, destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10)), index = 0, _iterator__ex2g4s = this_0.h(); _iterator__ex2g4s.i(); ) {
        var item = _iterator__ex2g4s.j(), _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        var index_0 = checkIndexOverflow(_unary__edvuaz);
        destination.e(toCache(this.w1z_1, item, index_0.toString()));
       }
       this.z1z_1 = destination;
       this.a20_1 = this.z1z_1, this.b20_1 = this.a20_1, this.c20_1 = LinkedHashMap_init_$Create$(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this.b20_1, 10)), 16));
       this.d20_1 = this.b20_1;
       this.e20_1 = this.c20_1, this.f20_1 = this.d20_1, this.g20_1 = this.e20_1, this.h20_1 = this.f20_1.h(), 
       this.u6_1 = 3;
       continue $sm;

      case 3:
       if (!this.h20_1.i()) {
        this.u6_1 = 5;
        continue $sm;
       }
       this.i20_1 = this.h20_1.j();
       if (this.j20_1 = this.i20_1, this.k20_1 = this.j20_1, this.u6_1 = 4, (suspendResult = this.k20_1.t1x(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 4:
       this.l20_1 = suspendResult, this.g20_1.n1(this.i20_1, this.l20_1), this.u6_1 = 3;
       continue $sm;

      case 5:
       if (this.m20_1 = this.g20_1, this.y1z_1) {
        for (var tmp0 = this.m20_1, destination_0 = ArrayList_init_$Create$(), _iterator__ex2g4s_0 = tmp0.m1().h(); _iterator__ex2g4s_0.i(); ) {
         var element = _iterator__ex2g4s_0.j(), cache = element.f1(), tmp0_safe_receiver = null == element.g1() ? cache.r1v_1 : null;
         null == tmp0_safe_receiver || destination_0.e(tmp0_safe_receiver);
        }
        if (this.n20_1 = destination_0, this.n20_1.q()) {
         this.u6_1 = 6;
         continue $sm;
        }
        if (info(this.w1z_1.u1x_1 + ": there are missing layers: " + toString(this.n20_1)), 
        this.u6_1 = 14, (suspendResult = saveSingleLayerCache(this.w1z_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 8;
       continue $sm;

      case 6:
       if (this.x1z_1.m1z_1.k() > this.w1z_1.w1x_1) {
        if (info(this.w1z_1.u1x_1 + ": " + this.x1z_1.m1z_1.k() + " layers reached, will create new snapshot"), 
        this.u6_1 = 13, (suspendResult = saveSingleLayerCache(this.w1z_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 7;
       continue $sm;

      case 7:
       this.u6_1 = 8;
       continue $sm;

      case 8:
       if (!this.y1z_1) {
        var tmp$ret$0, firstLayer = firstOrNull(this.x1z_1.m1z_1), tmp8 = this.z1z_1;
        l$ret$1: do {
         for (var _iterator__ex2g4s_1 = tmp8.h(); _iterator__ex2g4s_1.i(); ) {
          var element_0 = _iterator__ex2g4s_1.j();
          if (startsWith(element_0.w1v_1, this.w1z_1.v1x_1)) {
           tmp$ret$0 = element_0;
           break l$ret$1;
          }
         }
         tmp$ret$0 = null;
        } while (0);
        var firstBaseline = null == tmp$ret$0 ? null : tmp$ret$0.w1v_1, tmp2_safe_receiver = null == firstLayer ? null : firstLayer.e1y_1;
        if (!0 !== (null == tmp2_safe_receiver ? null : startsWith(tmp2_safe_receiver, this.w1z_1.a1y_1 + "-" + this.w1z_1.v1x_1))) return info(this.w1z_1.u1x_1 + ": the first baseline is not found, and the current cache " + this.w1z_1.x1x_1 + " does not start with " + this.w1z_1.a1y_1 + "-" + this.w1z_1.v1x_1 + ", so cache saving can't be done"), 
        Unit_instance;
        if (null == firstOrNull_0(this.m20_1.l1())) return info(this.w1z_1.u1x_1 + ": the first baseline " + firstBaseline + " was not received, and the current cache " + this.w1z_1.x1x_1 + " does not start with " + this.w1z_1.v1x_1 + ", so cache saving can't be done"), 
        Unit_instance;
       }
       this.u6_1 = 9;
       var this_1 = this.w1z_1.z1x_1;
       if ((suspendResult = hashFilesDetailed(copyToArray(this_1).slice(), VOID, VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 9:
       this.o20_1 = suspendResult;
       this.p20_1 = LinkedHashMap_init_$Create$_0();
       this.q20_1 = LinkedHashMap_init_$Create$_0();
       this.r20_1 = LinkedHashSet_init_$Create$();
       this.s20_1 = ArrayList_init_$Create$();
       this.t20_1 = ArrayList_init_$Create$();
       for (var _iterator__ex2g4s_2 = zip(this.x1z_1.m1z_1, this.m20_1.l1()).h(); _iterator__ex2g4s_2.i(); ) {
        var _destruct__k2r9zo = _iterator__ex2g4s_2.j(), layer = _destruct__k2r9zo.lc(), contents_0 = _destruct__k2r9zo.mc();
        if (null != contents_0) {
         for (var helpfulBytes = new Long(0, 0), wastedBytes = new Long(0, 0), helpfulLayerFiles = LinkedHashMap_init_$Create$_0(), deletedLayerFiles = ArrayList_init_$Create$(), _iterator__ex2g4s_3 = contents_0.o1f_1.m1().h(); _iterator__ex2g4s_3.i(); ) {
          var tmp_11, _destruct__k2r9zo_0 = _iterator__ex2g4s_3.j(), file = _destruct__k2r9zo_0.f1(), details = _destruct__k2r9zo_0.g1(), newDetails = this.o20_1.q1f_1.o1f_1.j1(file);
          if (details.b1h_1 === (null == newDetails ? null : newDetails.b1h_1)) {
           var this_2 = this.q20_1;
           tmp_11 = !(isInterface(this_2, KtMap) ? this_2 : THROW_CCE()).h1(file);
          } else tmp_11 = !1;
          tmp_11 ? (helpfulBytes = helpfulBytes.x1(details.a1h_1), helpfulLayerFiles.n1(file, details)) : (null == newDetails && deletedLayerFiles.e(file), 
          wastedBytes = wastedBytes.x1(details.a1h_1));
         }
         if (wastedBytes.b1(helpfulBytes) >= 0) info(this.w1z_1.u1x_1 + ": layer " + layer.e1y_1 + " has too much waste (" + formatBytes(wastedBytes) + " > " + formatBytes(helpfulBytes) + "), so the layer will be skipped"); else {
          var tmp19 = this.p20_1, map = contents_0.o1f_1;
          tmp19.o1(map), this.q20_1.o1(helpfulLayerFiles);
          var this_3 = this.r20_1;
          addAll(this_3, deletedLayerFiles), this.s20_1.e(layer);
          var tmp27 = this.t20_1, element_1 = layer.e1y_1 + " " + formatBytes(helpfulBytes.x1(wastedBytes)) + " total (" + contents_0.o1f_1.k() + " files), " + formatBytes(wastedBytes) + " outdated";
          tmp27.e(element_1);
         }
        } else info(this.w1z_1.u1x_1 + ": unknown contents for layer " + layer.e1y_1);
       }
       if (!this.y1z_1 && this.s20_1.q()) return info(this.w1z_1.u1x_1 + ": at least one layer from the default branch is needed. The new contents is " + formatBytes(this.o20_1.p1f_1.i1f_1) + " (" + this.o20_1.p1f_1.k1f_1 + " files)"), 
       Unit_instance;
       if (this.u20_1 = diff(new HashContents(this.p20_1), this.o20_1.q1f_1), this.u20_1.f1h_1.q() || info(this.w1z_1.u1x_1 + ": cache contents is changed: " + this.u20_1.i1h()), 
       this.v20_1 = ($this = this.w1z_1, _this__u8e3s4 = this.u20_1, new CacheLayer($this.a1y_1 + "-delta-" + $this.x1x_1, _this__u8e3s4.g1h_1)), 
       this.w20_1 = toCache(this.w1z_1, this.v20_1, "newlayer"), this.u6_1 = 10, (suspendResult = this.w20_1.v1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 10:
       var tmp30 = this.s20_1, element_2 = this.v20_1;
       tmp30.e(element_2);
       var tmp32 = this.t20_1, element_3 = this.v20_1.e1y_1 + " " + formatBytes(this.u20_1.d1h_1) + " total (" + this.u20_1.g1h_1.k() + " files), " + formatBytes(this.u20_1.e1h_1) + " deleted (" + this.u20_1.h1h_1.k() + " files)";
       if (tmp32.e(element_3), info(joinToString(this.t20_1, "; ", this.w1z_1.u1x_1 + ": " + this.s20_1.k() + " layers. ")), 
       this.u6_1 = 11, (suspendResult = this.w1z_1.b1y_1.r1x(new CacheLayers(this.s20_1, toList(this.r20_1)), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 11:
       if (this.u6_1 = 12, (suspendResult = this.w1z_1.d1y_1.v1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 12:
      case 13:
      case 14:
      case 15:
       return Unit_instance;

      case 16:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (16 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($saveSingleLayerCacheCOROUTINE$7).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 6, info(this.o1y_1.u1x_1 + ": creating single-layer cache image");
       var tmp_1 = this.o1y_1.a1y_1 + "-" + this.o1y_1.x1x_1;
       if (this.p1y_1 = new CacheLayer(tmp_1, emptyList()), this.q1y_1 = toCache(this.o1y_1, this.p1y_1, "single-layer"), 
       this.u6_1 = 1, (suspendResult = this.q1y_1.v1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       if (this.u6_1 = 2, (suspendResult = this.q1y_1.q1x(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       if (this.r1y_1 = suspendResult, this.s1y_1 = null == this.r1y_1 ? null : this.r1y_1.k1f_1, 
       0 === this.s1y_1) return Unit_instance;
       this.u6_1 = 3;
       continue $sm;

      case 3:
       this.u6_1 = 4;
       var tmp_2 = listOf_0(this.p1y_1);
       if ((suspendResult = this.o1y_1.b1y_1.r1x(new CacheLayers(tmp_2, emptyList()), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 4:
       if (this.u6_1 = 5, (suspendResult = this.o1y_1.d1y_1.v1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 5:
       return Unit_instance;

      case 6:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (6 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(LayeredCache).b1v = function() {
     return this.u1x_1;
    }, protoOf(LayeredCache).toString = function() {
     return "Cache " + this.u1x_1 + ", primaryKey=" + this.x1x_1 + ", restoreKeys=" + toString(this.y1x_1) + ", ";
    }, protoOf(LayeredCache).w1s = function($completion) {
     var tmp = new $restoreCOROUTINE$5(this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(LayeredCache).v1s = function($completion) {
     var tmp = new $saveCOROUTINE$6(this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(Companion_0).f1f = function() {
     return $serializer_getInstance();
    }, protoOf($serializer).a21 = function(encoder, value) {
     var tmp0_desc = this.z20_1, tmp1_output = encoder.cx(tmp0_desc), tmp2_cached = Companion_getInstance_1().y20_1;
     tmp1_output.vx(tmp0_desc, 0, tmp2_cached[0].g1(), value.m1z_1), tmp1_output.vx(tmp0_desc, 1, tmp2_cached[1].g1(), value.n1z_1), 
     tmp1_output.dx(tmp0_desc);
    }, protoOf($serializer).yv = function(encoder, value) {
     return this.a21(encoder, value instanceof CacheLayers ? value : THROW_CCE());
    }, protoOf($serializer).zv = function(decoder) {
     var tmp0_desc = this.z20_1, tmp1_flag = !0, tmp2_index = 0, tmp3_bitMask0 = 0, tmp4_local0 = null, tmp5_local1 = null, tmp6_input = decoder.cx(tmp0_desc), tmp7_cached = Companion_getInstance_1().y20_1;
     if (tmp6_input.kx()) tmp4_local0 = tmp6_input.hx(tmp0_desc, 0, tmp7_cached[0].g1(), tmp4_local0), 
     tmp3_bitMask0 |= 1, tmp5_local1 = tmp6_input.hx(tmp0_desc, 1, tmp7_cached[1].g1(), tmp5_local1), 
     tmp3_bitMask0 |= 2; else for (;tmp1_flag; ) switch (tmp2_index = tmp6_input.lx(tmp0_desc)) {
     case -1:
      tmp1_flag = !1;
      break;

     case 0:
      tmp4_local0 = tmp6_input.hx(tmp0_desc, 0, tmp7_cached[0].g1(), tmp4_local0), tmp3_bitMask0 |= 1;
      break;

     case 1:
      tmp5_local1 = tmp6_input.hx(tmp0_desc, 1, tmp7_cached[1].g1(), tmp5_local1), tmp3_bitMask0 |= 2;
      break;

     default:
      throw UnknownFieldException_init_$Create$(tmp2_index);
     }
     return tmp6_input.dx(tmp0_desc), function(seen0, layers, deletedFiles, serializationConstructorMarker, $this) {
      return 3 & ~seen0 && throwMissingFieldException(seen0, 3, $serializer_getInstance().z20_1), 
      $this.m1z_1 = layers, $this.n1z_1 = deletedFiles, $this;
     }(tmp3_bitMask0, tmp4_local0, tmp5_local1, 0, objectCreate(protoOf(CacheLayers)));
    }, protoOf($serializer).xv = function() {
     return this.z20_1;
    }, protoOf($serializer).d11 = function() {
     var tmp0_cached = Companion_getInstance_1().y20_1;
     return [ tmp0_cached[0].g1(), tmp0_cached[1].g1() ];
    }, protoOf($serializer_0).d21 = function(encoder, value) {
     var tmp0_desc = this.c21_1, tmp1_output = encoder.cx(tmp0_desc), tmp2_cached = Companion_getInstance_2().b21_1;
     tmp1_output.ux(tmp0_desc, 0, value.e1y_1), tmp1_output.vx(tmp0_desc, 1, tmp2_cached[1].g1(), value.f1y_1), 
     tmp1_output.dx(tmp0_desc);
    }, protoOf($serializer_0).yv = function(encoder, value) {
     return this.d21(encoder, value instanceof CacheLayer ? value : THROW_CCE());
    }, protoOf($serializer_0).zv = function(decoder) {
     var tmp0_desc = this.c21_1, tmp1_flag = !0, tmp2_index = 0, tmp3_bitMask0 = 0, tmp4_local0 = null, tmp5_local1 = null, tmp6_input = decoder.cx(tmp0_desc), tmp7_cached = Companion_getInstance_2().b21_1;
     if (tmp6_input.kx()) tmp4_local0 = tmp6_input.gx(tmp0_desc, 0), tmp3_bitMask0 |= 1, 
     tmp5_local1 = tmp6_input.hx(tmp0_desc, 1, tmp7_cached[1].g1(), tmp5_local1), tmp3_bitMask0 |= 2; else for (;tmp1_flag; ) switch (tmp2_index = tmp6_input.lx(tmp0_desc)) {
     case -1:
      tmp1_flag = !1;
      break;

     case 0:
      tmp4_local0 = tmp6_input.gx(tmp0_desc, 0), tmp3_bitMask0 |= 1;
      break;

     case 1:
      tmp5_local1 = tmp6_input.hx(tmp0_desc, 1, tmp7_cached[1].g1(), tmp5_local1), tmp3_bitMask0 |= 2;
      break;

     default:
      throw UnknownFieldException_init_$Create$(tmp2_index);
     }
     return tmp6_input.dx(tmp0_desc), function(seen0, primaryKey, paths, serializationConstructorMarker, $this) {
      return 3 & ~seen0 && throwMissingFieldException(seen0, 3, $serializer_getInstance_0().c21_1), 
      $this.e1y_1 = primaryKey, $this.f1y_1 = paths, $this;
     }(tmp3_bitMask0, tmp4_local0, tmp5_local1, 0, objectCreate(protoOf(CacheLayer)));
    }, protoOf($serializer_0).xv = function() {
     return this.c21_1;
    }, protoOf($serializer_0).d11 = function() {
     var tmp0_cached = Companion_getInstance_2().b21_1;
     return [ StringSerializer_getInstance(), tmp0_cached[1].g1() ];
    }, protoOf($restoreCOROUTINE$8).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 3, this.q21_1 = get_normalizedPath(this.o21_1.b1x_1), exists(this.q21_1)) {
        this.o21_1.p1x(this.p21_1);
        this.s21_1 = this.q21_1;
        if (this.t21_1 = this.o21_1.c1x_1, this.u21_1 = this.s21_1, this.v21_1 = this.t21_1, 
        this.u6_1 = 1, (suspendResult = awaitPromiseLike(rename(this.u21_1, this.v21_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       warning(this.o21_1.b1x_1 + ": " + this.q21_1 + " does not exist"), this.r21_1 = Unit_instance, 
       this.u6_1 = 2;
       continue $sm;

      case 1:
       this.r21_1 = suspendResult, this.u6_1 = 2;
       continue $sm;

      case 2:
       return Unit_instance;

      case 3:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (3 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($decodeCOROUTINE$9).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 3, !exists(this.e22_1.c1x_1)) return this.f22_1 && warning(this.e22_1.b1x_1 + ": " + this.e22_1.c1x_1 + " does not exist"), 
       null;
       this.v6_1 = 2, this.h22_1 = Default_getInstance(), this.i22_1 = this.e22_1.z1w_1;
       this.j22_1 = this.e22_1.c1x_1;
       if (this.k22_1 = "utf8", this.l22_1 = this.j22_1, this.m22_1 = this.k22_1, this.u6_1 = 1, 
       (suspendResult = awaitPromiseLike(readFile(this.l22_1, this.m22_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       var ARGUMENT = suspendResult;
       this.g22_1 = this.h22_1.o13(this.i22_1, ARGUMENT), this.v6_1 = 3, this.u6_1 = 4;
       continue $sm;

      case 2:
       if (this.v6_1 = 3, this.x6_1 instanceof SerializationException) {
        var e = this.x6_1;
        return warning(this.e22_1.b1x_1 + ": error deserializing " + this.e22_1.c1x_1 + " with " + this.e22_1.z1w_1.xv().iw() + ", message: " + e.toString()), 
        null;
       }
       throw this.x6_1;

      case 3:
       throw this.x6_1;

      case 4:
       return this.v6_1 = 3, this.g22_1;
      }
     } catch ($p) {
      var e_0 = $p;
      if (3 === this.v6_1) throw e_0;
      this.u6_1 = this.v6_1, this.x6_1 = e_0;
     }
    }, protoOf($encodeCOROUTINE$10).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 2;
       this.x22_1 = get_normalizedPath(this.v22_1.b1x_1);
       this.y22_1 = Default_getInstance().n13(this.v22_1.z1w_1, this.w22_1);
       if (this.z22_1 = "utf8", this.a23_1 = this.x22_1, this.b23_1 = this.y22_1, this.c23_1 = this.z22_1, 
       this.u6_1 = 1, (suspendResult = awaitPromiseLike(writeFile(this.a23_1, this.b23_1, this.c23_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       return Unit_instance;

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(MetadataFile).p1x = function(key) {
     this.c1x_1 = get_normalizedPath(this.b1x_1) + "." + replace(key, _Char___init__impl__6a9atx(47), _Char___init__impl__6a9atx(45));
    }, protoOf(MetadataFile).d1x = function(key, $completion) {
     var tmp = new $restoreCOROUTINE$8(this, key, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(MetadataFile).x20 = function(warnOnMissing, $completion) {
     var tmp = new $decodeCOROUTINE$9(this, warnOnMissing, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(MetadataFile).s1x = function(warnOnMissing, $completion, $super) {
     return warnOnMissing = warnOnMissing === VOID || warnOnMissing, $super === VOID ? this.x20(warnOnMissing, $completion) : $super.x20.call(this, warnOnMissing, $completion);
    }, protoOf(MetadataFile).r1x = function(value, $completion) {
     var tmp = new $encodeCOROUTINE$10(this, value, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(dependenciesCache$slambda).d1r = function($completion) {
     var tmp = this.e1r($completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(dependenciesCache$slambda).f1r = function($completion) {
     return this.d1r($completion);
    }, protoOf(dependenciesCache$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 2, this.u6_1 = 1;
       var this_0 = this.e24_1;
       if ((suspendResult = hashFiles(copyToArray(this_0).slice(), VOID, VOID, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       return suspendResult.j1h_1;

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(dependenciesCache$slambda).e1r = function(completion) {
     return new dependenciesCache$slambda(this.e24_1, completion);
    }, protoOf($dependenciesCacheCOROUTINE$11).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 4, this.p23_1 = "defaultbranch", this.q23_1 = get_cacheKey(this.m23_1), 
       this.r23_1 = "dependencies-" + this.l23_1;
       if (this.s23_1 = suspendingStateVariable(this.r23_1, dependenciesCache$slambda_0(this.o23_1, null)), 
       isDebug()) {
        if (this.u6_1 = 1, (suspendResult = this.s23_1.r1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       this.u6_1 = 2;
       continue $sm;

      case 1:
       this.t23_1 = suspendResult, this.u23_1 = this.r23_1 + ": dependencyDeclarationHash=" + this.t23_1, 
       debug(this.u23_1), this.u6_1 = 2;
       continue $sm;

      case 2:
       if (this.v23_1 = "dependencies-" + this.l23_1 + "-" + ActionsEnvironment_getInstance().lr(), 
       this.u6_1 = 3, (suspendResult = this.s23_1.r1s(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 3:
       var ARGUMENT = suspendResult, ARGUMENT_0 = this.v23_1 + "-" + this.q23_1 + "-" + ARGUMENT;
       return new LayeredCache(this.r23_1, this.v23_1, VOID, ARGUMENT_0, listOf([ this.v23_1 + "-" + this.q23_1, this.v23_1 + "-" + this.p23_1, this.v23_1 + "-master", this.v23_1 + "-main" ]), this.n23_1);

      case 4:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (4 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(DefaultStateVariable).zk = function() {
     var tmp, tmp0_elvis_lhs = this.j24_1;
     if (null == tmp0_elvis_lhs) {
      var this_0 = getState(this.i24_1), this_1 = isBlank(this_0) ? this.h24_1() : this_0;
      this.y1w(this_1), tmp = this_1;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }, protoOf(BaseStateVariable).y1w = function(value) {
     this.j24_1 = value, saveState(this.i24_1, value);
    }, protoOf($getCOROUTINE$12).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 4, this.t24_1 = this.s24_1.j24_1, null == this.t24_1) {
        if (this.v24_1 = getState(this.s24_1.i24_1), this.w24_1 = this.v24_1, isBlank(this.w24_1)) {
         if (this.u6_1 = 1, (suspendResult = this.s24_1.a25_1(this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
         continue $sm;
        }
        this.x24_1 = this.w24_1, this.u6_1 = 2;
        continue $sm;
       }
       this.u24_1 = this.t24_1, this.u6_1 = 3;
       continue $sm;

      case 1:
       this.x24_1 = suspendResult, this.u6_1 = 2;
       continue $sm;

      case 2:
       var this_0 = this.x24_1;
       this.s24_1.y1w(this_0), this.u24_1 = this_0, this.u6_1 = 3;
       continue $sm;

      case 3:
       return this.u24_1;

      case 4:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (4 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(DefaultSuspendingStateVariable).b25 = function($completion) {
     var tmp = new $getCOROUTINE$12(this, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(DefaultSuspendingStateVariable).r1s = function($completion) {
     return this.b25($completion);
    }, protoOf(transform$1).zk = function() {
     return this.c25_1(this.d25_1.zk());
    }, protoOf(transform$1).f25 = function(value) {
     this.d25_1.y1w(this.e25_1(value));
    }, protoOf(transform$1).y1w = function(value) {
     return this.f25(null != value ? value : THROW_CCE());
    }, protoOf($serializer).e11 = typeParametersSerializers, protoOf($serializer_0).e11 = typeParametersSerializers, 
    new Companion, _.$_$ = _.$_$ || {}, _.$_$.a = stateVariable, _.$_$.b = GradleCacheAction, 
    _.$_$.c = Parameters;
   }(module.exports, __webpack_require__(4613), __webpack_require__(3024), __webpack_require__(1455), __webpack_require__(7036), __webpack_require__(7361), __webpack_require__(5527), __webpack_require__(9613), __webpack_require__(677), __webpack_require__(3138), __webpack_require__(7298), __webpack_require__(3838), __webpack_require__(9539), __webpack_require__(6077), __webpack_require__(1430));
  },
  677: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$_actions_cache_3s3lfo, $module$_actions_core_fx0i1v, kotlin_kotlin, kotlin_gradle_cache_action_wrappers_actions_toolkit, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js) {
    "use strict";
    var None_instance, Unknown_instance, restoreCache = $module$_actions_cache_3s3lfo.restoreCache, warning = $module$_actions_core_fx0i1v.warning, debug = $module$_actions_core_fx0i1v.debug, isDebug = $module$_actions_core_fx0i1v.isDebug, info = $module$_actions_core_fx0i1v.info, saveCache = $module$_actions_cache_3s3lfo.saveCache, emptyList = kotlin_kotlin.$_$.j2, VOID = kotlin_kotlin.$_$.c, LogLevel_INFO_getInstance = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.h, Unit_instance = kotlin_kotlin.$_$.u1, CoroutineImpl = kotlin_kotlin.$_$.d4, copyToArray = kotlin_kotlin.$_$.i2, collectionSizeOrDefault = kotlin_kotlin.$_$.d2, ArrayList_init_$Create$ = kotlin_kotlin.$_$.g, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, removePrefix = kotlin_kotlin.$_$.j6, endsWith = kotlin_kotlin.$_$.c6, joinToString = kotlin_kotlin.$_$.s2, noWhenBranchMatchedException = kotlin_kotlin.$_$.t7, protoOf = kotlin_kotlin.$_$.l5, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, contains = kotlin_kotlin.$_$.b6, getStringHashCode = kotlin_kotlin.$_$.u4, THROW_CCE = kotlin_kotlin.$_$.k7, initMetadataForClass = kotlin_kotlin.$_$.w4, initMetadataForObject = kotlin_kotlin.$_$.b5;
    function $restoreAndLogCOROUTINE$0(paths, primaryKey, restoreKeys, version, logLevel, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.gu_1 = paths, this.hu_1 = primaryKey, 
     this.iu_1 = restoreKeys, this.ju_1 = version, this.ku_1 = logLevel;
    }
    function $saveAndLogCOROUTINE$1(paths, key, version, logLevel, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.kv_1 = paths, this.lv_1 = key, 
     this.mv_1 = version, this.nv_1 = logLevel;
    }
    function Exact(path) {
     RestoreType.call(this), this.vv_1 = path;
    }
    function Partial(path) {
     RestoreType.call(this), this.wv_1 = path;
    }
    function None() {
     None_instance = this, RestoreType.call(this);
    }
    function None_getInstance() {
     return null == None_instance && new None, None_instance;
    }
    function Unknown() {
     Unknown_instance = this, RestoreType.call(this);
    }
    function RestoreType() {}
    initMetadataForCoroutine($restoreAndLogCOROUTINE$0, CoroutineImpl), initMetadataForCoroutine($saveAndLogCOROUTINE$1, CoroutineImpl), 
    initMetadataForClass(RestoreType, "RestoreType"), initMetadataForClass(Exact, "Exact", VOID, RestoreType), 
    initMetadataForClass(Partial, "Partial", VOID, RestoreType), initMetadataForObject(None, "None", VOID, RestoreType), 
    initMetadataForObject(Unknown, "Unknown", VOID, RestoreType), protoOf($restoreAndLogCOROUTINE$0).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 5, this.v6_1 = 4, this.iu_1.q()) {
        var this_0 = this.gu_1;
        this.nu_1 = copyToArray(this_0);
        this.ou_1 = this.ju_1 + this.hu_1, this.pu_1 = this.nu_1, this.qu_1 = this.ou_1;
        this.ru_1 = void 0;
        this.su_1 = void 0;
        if (this.tu_1 = void 0, this.u6_1 = 2, (suspendResult = awaitPromiseLike(restoreCache(this.pu_1, this.qu_1, this.ru_1, this.su_1, this.tu_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       var this_1 = this.gu_1;
       this.uu_1 = copyToArray(this_1);
       this.vu_1 = this.ju_1 + this.hu_1;
       for (var this_2 = this.iu_1, destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10)), _iterator__ex2g4s = this_2.h(); _iterator__ex2g4s.i(); ) {
        var item = _iterator__ex2g4s.j();
        destination.e(this.ju_1 + item);
       }
       this.wu_1 = copyToArray(destination), this.xu_1 = this.uu_1, this.yu_1 = this.vu_1, 
       this.zu_1 = this.wu_1;
       this.av_1 = void 0;
       if (this.bv_1 = void 0, this.u6_1 = 1, (suspendResult = awaitPromiseLike(restoreCache(this.xu_1, this.yu_1, this.zu_1, this.av_1, this.bv_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
      case 2:
       this.mu_1 = suspendResult, this.u6_1 = 3;
       continue $sm;

      case 3:
       this.lu_1 = this.mu_1, this.v6_1 = 5, this.u6_1 = 6;
       continue $sm;

      case 4:
       if (this.v6_1 = 5, this.x6_1 instanceof Error) {
        var t = this.x6_1;
        if ("ValidationError" == t.name) throw t;
        return warning("Error while loading " + this.hu_1 + ": " + t.message), None_getInstance();
       }
       throw this.x6_1;

      case 5:
       throw this.x6_1;

      case 6:
       this.v6_1 = 5;
       var result = this.lu_1, tmp2_safe_receiver = null == result ? null : removePrefix(result, this.ju_1);
       if (null != tmp2_safe_receiver) return endsWith(tmp2_safe_receiver, this.hu_1) ? new Exact(tmp2_safe_receiver) : new Partial(tmp2_safe_receiver);
       switch (this.ku_1.r1_1) {
       case 0:
        isDebug() && debug("Cache was not found for version=" + this.ju_1 + ", primaryKey=" + this.hu_1 + ", restore keys=" + joinToString(this.iu_1, ", "));
        break;

       case 1:
        info("Cache was not found for version=" + this.ju_1 + ", primaryKey=" + this.hu_1 + ", restore keys=" + joinToString(this.iu_1, ", "));
        break;

       case 2:
        break;

       default:
        noWhenBranchMatchedException();
       }
       return None_getInstance();
      }
     } catch ($p) {
      var e = $p;
      if (5 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($saveAndLogCOROUTINE$1).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 3, this.v6_1 = 2;
       var this_0 = this.kv_1;
       this.pv_1 = copyToArray(this_0);
       this.qv_1 = this.mv_1 + this.lv_1, this.rv_1 = this.pv_1, this.sv_1 = this.qv_1;
       this.tv_1 = void 0;
       if (this.uv_1 = void 0, this.u6_1 = 1, (suspendResult = awaitPromiseLike(saveCache(this.rv_1, this.sv_1, this.tv_1, this.uv_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.ov_1 = suspendResult, this.v6_1 = 3, this.u6_1 = 4;
       continue $sm;

      case 2:
       if (this.v6_1 = 3, this.x6_1 instanceof Error) {
        var t = this.x6_1, tmp0_subject = t.name;
        if ("ValidationError" == tmp0_subject) throw t;
        if ("ReserveCacheError" == tmp0_subject) {
         var tmp1_elvis_lhs = t.message;
         info(null == tmp1_elvis_lhs ? "Unknown ReserveCacheError" : tmp1_elvis_lhs);
        } else {
         var tmp2_safe_receiver = t.message;
         if (!0 === (null == tmp2_safe_receiver ? null : contains(tmp2_safe_receiver, "Cache already exists"))) switch (this.nv_1.r1_1) {
         case 0:
          isDebug() && debug("Error while uploading " + this.lv_1 + ": " + t.message);
          break;

         case 1:
          info("Error while uploading " + this.lv_1 + ": " + t.message);
          break;

         case 2:
          break;

         default:
          noWhenBranchMatchedException();
         } else warning("Error while uploading " + this.lv_1 + ": " + t.message);
        }
        this.ov_1 = Unit_instance, this.u6_1 = 4;
        continue $sm;
       }
       throw this.x6_1;

      case 3:
       throw this.x6_1;

      case 4:
       return this.v6_1 = 3, Unit_instance;
      }
     } catch ($p) {
      var e = $p;
      if (3 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(Exact).toString = function() {
     return "Exact(path=" + this.vv_1 + ")";
    }, protoOf(Exact).hashCode = function() {
     return getStringHashCode(this.vv_1);
    }, protoOf(Exact).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof Exact)) return !1;
     var tmp0_other_with_cast = other instanceof Exact ? other : THROW_CCE();
     return this.vv_1 === tmp0_other_with_cast.vv_1;
    }, protoOf(Partial).toString = function() {
     return "Partial(path=" + this.wv_1 + ")";
    }, protoOf(Partial).hashCode = function() {
     return getStringHashCode(this.wv_1);
    }, protoOf(Partial).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof Partial)) return !1;
     var tmp0_other_with_cast = other instanceof Partial ? other : THROW_CCE();
     return this.wv_1 === tmp0_other_with_cast.wv_1;
    }, protoOf(None).toString = function() {
     return "None";
    }, protoOf(Unknown).toString = function() {
     return "Unknown";
    }, _.$_$ = _.$_$ || {}, _.$_$.a = Exact, _.$_$.b = Partial, _.$_$.c = function(paths, primaryKey, restoreKeys, version, logLevel, $completion) {
     var tmp_0 = new $restoreAndLogCOROUTINE$0(paths, primaryKey, restoreKeys = restoreKeys === VOID ? emptyList() : restoreKeys, version, logLevel = logLevel === VOID ? LogLevel_INFO_getInstance() : logLevel, $completion);
     return tmp_0.w6_1 = Unit_instance, tmp_0.x6_1 = null, tmp_0.c7();
    }, _.$_$.d = function(paths, key, version, logLevel, $completion) {
     var tmp = new $saveAndLogCOROUTINE$1(paths, key, version, logLevel = logLevel === VOID ? LogLevel_INFO_getInstance() : logLevel, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, _.$_$.e = None_getInstance, _.$_$.f = function() {
     return null == Unknown_instance && new Unknown, Unknown_instance;
    };
   }(module.exports, __webpack_require__(9989), __webpack_require__(4613), __webpack_require__(7036), __webpack_require__(7361), __webpack_require__(6077));
  },
  7361: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, node_process_process_dcpv5o, $module$_actions_core_fx0i1v, $module$_actions_exec_fwz1pt, $module$node_fs_promises_daq1pm, $module$_actions_glob_fwy0ei, kotlin_kotlin, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core) {
    "use strict";
    var ActionStage_PRE_instance, ActionStage_MAIN_instance, ActionStage_POST_instance, ActionStage_entriesInitialized, ActionsEnvironment_instance, Environment_instance, LogLevel_DEBUG_instance, LogLevel_INFO_instance, LogLevel_entriesInitialized, LINE_SEPARATOR, properties_initialized_InputExtensions_kt_l1mje6, getInput = $module$_actions_core_fx0i1v.getInput, exec = $module$_actions_exec_fwz1pt.exec, unlink = $module$node_fs_promises_daq1pm.unlink, create = $module$_actions_glob_fwy0ei.create, VOID = kotlin_kotlin.$_$.c, extendThrowable = kotlin_kotlin.$_$.r4, captureStack = kotlin_kotlin.$_$.j4, protoOf = kotlin_kotlin.$_$.l5, defineProp = kotlin_kotlin.$_$.p4, initMetadataForClass = kotlin_kotlin.$_$.w4, Unit_instance = kotlin_kotlin.$_$.u1, Enum = kotlin_kotlin.$_$.e7, initMetadataForObject = kotlin_kotlin.$_$.b5, KProperty1 = kotlin_kotlin.$_$.x5, getPropertyCallableRef = kotlin_kotlin.$_$.t4, collectionSizeOrDefault = kotlin_kotlin.$_$.d2, ArrayList_init_$Create$ = kotlin_kotlin.$_$.g, THROW_CCE = kotlin_kotlin.$_$.k7, isCharSequence = kotlin_kotlin.$_$.c5, trim = kotlin_kotlin.$_$.b7, toString = kotlin_kotlin.$_$.o5, ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.h, charSequenceLength = kotlin_kotlin.$_$.n4, Regex_init_$Create$ = kotlin_kotlin.$_$.t, CoroutineImpl = kotlin_kotlin.$_$.d4, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, numberToInt = kotlin_kotlin.$_$.i5, joinToString = kotlin_kotlin.$_$.s2, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, CoroutineScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.d, isInterface = kotlin_kotlin.$_$.d5, initMetadataForLambda = kotlin_kotlin.$_$.a5, launch = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.e, supervisorScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.a;
    function ActionFailedException(message, cause) {
     extendThrowable(this, message, cause = cause === VOID ? null : cause), captureStack(this, ActionFailedException), 
     this.nq_1 = message;
    }
    function ActionStage_initEntries() {
     if (ActionStage_entriesInitialized) return Unit_instance;
     ActionStage_entriesInitialized = !0, ActionStage_PRE_instance = new ActionStage("PRE", 0), 
     ActionStage_MAIN_instance = new ActionStage("MAIN", 1), ActionStage_POST_instance = new ActionStage("POST", 2);
    }
    function ActionStage(name, ordinal) {
     Enum.call(this, name, ordinal);
    }
    function ActionStage_PRE_getInstance() {
     return ActionStage_initEntries(), ActionStage_PRE_instance;
    }
    function ActionStage_MAIN_getInstance() {
     return ActionStage_initEntries(), ActionStage_MAIN_instance;
    }
    function ActionStage_POST_getInstance() {
     return ActionStage_initEntries(), ActionStage_POST_instance;
    }
    function ActionsEnvironment() {
     ActionsEnvironment_instance = this, this.oq_1 = Environment_instance, this.pq_1 = Environment_instance, 
     this.qq_1 = Environment_instance, this.rq_1 = Environment_instance, this.sq_1 = Environment_instance, 
     this.tq_1 = Environment_instance, this.uq_1 = Environment_instance, this.vq_1 = Environment_instance, 
     this.wq_1 = Environment_instance, this.xq_1 = Environment_instance, this.yq_1 = Environment_instance, 
     this.zq_1 = Environment_instance, this.ar_1 = Environment_instance, this.br_1 = Environment_instance, 
     this.cr_1 = Environment_instance, this.dr_1 = Environment_instance, this.er_1 = Environment_instance, 
     this.fr_1 = Environment_instance;
    }
    function Environment() {}
    function LogLevel_initEntries() {
     if (LogLevel_entriesInitialized) return Unit_instance;
     LogLevel_entriesInitialized = !0, LogLevel_DEBUG_instance = new LogLevel("DEBUG", 0), 
     LogLevel_INFO_instance = new LogLevel("INFO", 1), new LogLevel("NONE", 2);
    }
    function LogLevel(name, ordinal) {
     Enum.call(this, name, ordinal);
    }
    function _init_properties_InputExtensions_kt__kgrvsk() {
     properties_initialized_InputExtensions_kt_l1mje6 || (properties_initialized_InputExtensions_kt_l1mje6 = !0, 
     LINE_SEPARATOR = Regex_init_$Create$("[\r\n]+"));
    }
    function ExecResult(exitCode, stdout, stderr) {
     this.mr_1 = exitCode, this.nr_1 = stdout, this.or_1 = stderr;
    }
    function exec$lambda(it) {
     return it;
    }
    function exec$lambda_0($stdout) {
     return function(it) {
      return $stdout.e("" + it), Unit_instance;
     };
    }
    function exec$lambda_1($stderr) {
     return function(it) {
      return $stderr.e("" + it), Unit_instance;
     };
    }
    function $execCOROUTINE$0(commandLine, args, captureOutput, options, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.xr_1 = commandLine, this.yr_1 = args, 
     this.zr_1 = captureOutput, this.as_1 = options;
    }
    function removeFiles$slambda$slambda($file, resultContinuation) {
     this.it_1 = $file, CoroutineImpl.call(this, resultContinuation);
    }
    function removeFiles$slambda$slambda_0($file, resultContinuation) {
     var i = new removeFiles$slambda$slambda($file, resultContinuation), l = function($this$launch, $completion) {
      return i.mt($this$launch, $completion);
     };
     return l.$arity = 1, l;
    }
    function removeFiles$slambda($fileNames, resultContinuation) {
     this.wt_1 = $fileNames, CoroutineImpl.call(this, resultContinuation);
    }
    function removeFiles$slambda_0($fileNames, resultContinuation) {
     var i = new removeFiles$slambda($fileNames, resultContinuation), l = function($this$supervisorScope, $completion) {
      return i.mt($this$supervisorScope, $completion);
     };
     return l.$arity = 1, l;
    }
    function $removeFilesCOROUTINE$1(files, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.ss_1 = files;
    }
    initMetadataForClass(ActionFailedException, "ActionFailedException", VOID, Error), 
    initMetadataForClass(ActionStage, "ActionStage", VOID, Enum), initMetadataForObject(ActionsEnvironment, "ActionsEnvironment"), 
    initMetadataForObject(Environment, "Environment"), initMetadataForClass(LogLevel, "LogLevel", VOID, Enum), 
    initMetadataForClass(ExecResult, "ExecResult"), initMetadataForCoroutine($execCOROUTINE$0, CoroutineImpl), 
    initMetadataForLambda(removeFiles$slambda$slambda, CoroutineImpl, VOID, [ 1 ]), 
    initMetadataForLambda(removeFiles$slambda, CoroutineImpl, VOID, [ 1 ]), initMetadataForCoroutine($removeFilesCOROUTINE$1, CoroutineImpl), 
    protoOf(ActionFailedException).o7 = function() {
     return this.nq_1;
    }, protoOf(ActionsEnvironment).gr = function() {
     return this.pq_1.hr(this, getPropertyCallableRef("GITHUB_WORKFLOW", 1, KProperty1, (function(receiver) {
      return receiver.gr();
     }), null));
    }, protoOf(ActionsEnvironment).ir = function() {
     return this.vq_1.hr(this, getPropertyCallableRef("GITHUB_EVENT_NAME", 1, KProperty1, (function(receiver) {
      return receiver.ir();
     }), null));
    }, protoOf(ActionsEnvironment).jr = function() {
     return this.wq_1.hr(this, getPropertyCallableRef("GITHUB_EVENT_PATH", 1, KProperty1, (function(receiver) {
      return receiver.jr();
     }), null));
    }, protoOf(ActionsEnvironment).kr = function() {
     return this.yq_1.hr(this, getPropertyCallableRef("GITHUB_SHA", 1, KProperty1, (function(receiver) {
      return receiver.kr();
     }), null));
    }, protoOf(ActionsEnvironment).lr = function() {
     return this.fr_1.hr(this, getPropertyCallableRef("RUNNER_OS", 1, KProperty1, (function(receiver) {
      return receiver.lr();
     }), null));
    }, protoOf(Environment).hr = function(environment, property) {
     var tmp0_elvis_lhs = node_process_process_dcpv5o.env[property.callableName];
     if (null == tmp0_elvis_lhs) throw new ActionFailedException(property.callableName + " is not found in process.env");
     return tmp0_elvis_lhs;
    }, protoOf($execCOROUTINE$0).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 2;
       this.bs_1 = ArrayList_init_$Create$_0();
       this.cs_1 = ArrayList_init_$Create$_0();
       var tmp_3;
       tmp_3 = this.zr_1 ? {
        listeners: {
         stdout: exec$lambda_0(this.bs_1),
         stderr: exec$lambda_1(this.cs_1)
        }
       } : {}, this.ds_1 = tmp_3;
       this.es_1 = this.xr_1;
       this.fs_1 = this.yr_1.slice();
       if (this.gs_1 = this.as_1(this.ds_1), this.hs_1 = this.es_1, this.is_1 = this.fs_1, 
       this.js_1 = this.gs_1, this.u6_1 = 1, (suspendResult = awaitPromiseLike(exec(this.hs_1, this.is_1, this.js_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       return new ExecResult(numberToInt(suspendResult), joinToString(this.bs_1, "\n"), joinToString(this.cs_1, "\n"));

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(removeFiles$slambda$slambda).mt = function($this$launch, $completion) {
     var tmp = this.nt($this$launch, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(removeFiles$slambda$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(removeFiles$slambda$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 2;
       if (this.kt_1 = this.it_1, this.lt_1 = this.kt_1, this.u6_1 = 1, (suspendResult = awaitPromiseLike(unlink(this.lt_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       return Unit_instance;

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(removeFiles$slambda$slambda).nt = function($this$launch, completion) {
     var i = new removeFiles$slambda$slambda(this.it_1, completion);
     return i.jt_1 = $this$launch, i;
    }, protoOf(removeFiles$slambda).mt = function($this$supervisorScope, $completion) {
     var tmp = this.nt($this$supervisorScope, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(removeFiles$slambda).q7 = function(p1, $completion) {
     return this.mt(null != p1 && isInterface(p1, CoroutineScope) ? p1 : THROW_CCE(), $completion);
    }, protoOf(removeFiles$slambda).c7 = function() {
     for (this.w6_1; ;) try {
      var tmp = this.u6_1;
      if (0 === tmp) {
       this.v6_1 = 1;
       for (var indexedObject = this.wt_1, inductionVariable = 0, last = indexedObject.length; inductionVariable < last; ) {
        var file = indexedObject[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0, launch(this.xt_1, VOID, VOID, removeFiles$slambda$slambda_0(file, null));
       }
       return Unit_instance;
      }
      if (1 === tmp) throw this.x6_1;
     } catch ($p) {
      throw $p;
     }
    }, protoOf(removeFiles$slambda).nt = function($this$supervisorScope, completion) {
     var i = new removeFiles$slambda(this.wt_1, completion);
     return i.xt_1 = $this$supervisorScope, i;
    }, protoOf($removeFilesCOROUTINE$1).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 4, this.ss_1.q()) return Unit_instance;
       this.ts_1 = joinToString(this.ss_1, "\n"), this.us_1 = this.ts_1;
       if (this.vs_1 = void 0, this.u6_1 = 1, (suspendResult = awaitPromiseLike(create(this.us_1, this.vs_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.ws_1 = suspendResult;
       if (this.xs_1 = this.ws_1.glob(), this.ys_1 = this.xs_1, this.u6_1 = 2, (suspendResult = awaitPromiseLike(this.ys_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       if (this.zs_1 = suspendResult, this.u6_1 = 3, (suspendResult = supervisorScope(removeFiles$slambda_0(this.zs_1, null), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 3:
       return Unit_instance;

      case 4:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (4 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, defineProp(protoOf(ActionFailedException), "message", (function() {
     return this.o7();
    })), Environment_instance = new Environment, _.$_$ = _.$_$ || {}, _.$_$.a = function(name, required) {
     return required = required !== VOID && required, _init_properties_InputExtensions_kt__kgrvsk(), 
     getInput(name, {
      required
     });
    }, _.$_$.b = function(name, required) {
     required = required !== VOID && required, _init_properties_InputExtensions_kt__kgrvsk();
     for (var tmp2 = getInput(name, {
      required
     }), this_0 = (_init_properties_InputExtensions_kt__kgrvsk(), LINE_SEPARATOR).na(tmp2, 0), destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10)), _iterator__ex2g4s = this_0.h(); _iterator__ex2g4s.i(); ) {
      var item = _iterator__ex2g4s.j(), tmp$ret$4 = toString(trim(isCharSequence(item) ? item : THROW_CCE()));
      destination.e(tmp$ret$4);
     }
     for (var destination_0 = ArrayList_init_$Create$_0(), _iterator__ex2g4s_0 = destination.h(); _iterator__ex2g4s_0.i(); ) {
      var element = _iterator__ex2g4s_0.j();
      0 !== charSequenceLength(element) && destination_0.e(element);
     }
     return destination_0;
    }, _.$_$.c = ActionFailedException, _.$_$.d = function() {
     return [ ActionStage_PRE_getInstance(), ActionStage_MAIN_getInstance(), ActionStage_POST_getInstance() ];
    }, _.$_$.e = ActionStage_MAIN_getInstance, _.$_$.f = ActionStage_POST_getInstance, 
    _.$_$.g = function() {
     return LogLevel_initEntries(), LogLevel_DEBUG_instance;
    }, _.$_$.h = function() {
     return LogLevel_initEntries(), LogLevel_INFO_instance;
    }, _.$_$.i = function(commandLine, args, captureOutput, options, $completion) {
     var tmp_0 = new $execCOROUTINE$0(commandLine, args, captureOutput = captureOutput !== VOID && captureOutput, options = options === VOID ? exec$lambda : options, $completion);
     return tmp_0.w6_1 = Unit_instance, tmp_0.x6_1 = null, tmp_0.c7();
    }, _.$_$.j = function(files, $completion) {
     var tmp = new $removeFilesCOROUTINE$1(files, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, _.$_$.k = function() {
     return null == ActionsEnvironment_instance && new ActionsEnvironment, ActionsEnvironment_instance;
    };
   }(module.exports, __webpack_require__(1708), __webpack_require__(4613), __webpack_require__(3021), __webpack_require__(1455), __webpack_require__(3675), __webpack_require__(7036), __webpack_require__(6077), __webpack_require__(9613));
  },
  191: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$java_properties_jp8gnq, kotlin_kotlin) {
    "use strict";
    var NEWLINE, properties_initialized_parseString_kt_7cjk5o, PropertiesFile = $module$java_properties_jp8gnq.PropertiesFile, Regex_init_$Create$ = (kotlin_kotlin.$_$.u1, 
    kotlin_kotlin.$_$.t);
    function _init_properties_parseString_kt__e3ypda() {
     properties_initialized_parseString_kt_7cjk5o || (properties_initialized_parseString_kt_7cjk5o = !0, 
     NEWLINE = Regex_init_$Create$("\\s*[\r\n]+\\s*"));
    }
    _.$_$ = _.$_$ || {}, _.$_$.a = function(text) {
     _init_properties_parseString_kt__e3ypda();
     for (var this_0 = new (Function.bind.apply(PropertiesFile, [ null ])), _iterator__ex2g4s = (_init_properties_parseString_kt__e3ypda(), 
     NEWLINE).na(text, 0).h(); _iterator__ex2g4s.i(); ) {
      var line = _iterator__ex2g4s.j();
      this_0.makeKeys(line);
     }
     return this_0;
    };
   }(module.exports, __webpack_require__(7265), __webpack_require__(7036));
  },
  3838: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_kotlin) {
    "use strict";
    var Long = kotlin_kotlin.$_$.i7, toLong = kotlin_kotlin.$_$.n5;
    _.$_$ = _.$_$ || {}, _.$_$.a = function(_this__u8e3s4) {
     var tmp;
     if (_this__u8e3s4.b1(new Long(5120, 0)) < 0) tmp = _this__u8e3s4.toString() + " B"; else if (_this__u8e3s4.b1(new Long(6164480, 0)) < 0) tmp = _this__u8e3s4.x1(new Long(512, 0)).a2(new Long(1024, 0)).toString() + " KiB"; else {
      var tmp$ret$2 = new Long(5, 0).z1(toLong(1024)).z1(toLong(1204)).z1(toLong(1024));
      if (_this__u8e3s4.b1(tmp$ret$2) < 0) {
       var tmp$ret$3 = new Long(512, 0).z1(toLong(1024)), tmp_0 = _this__u8e3s4.x1(tmp$ret$3), tmp$ret$4 = new Long(1024, 0).z1(toLong(1024));
       tmp = tmp_0.a2(tmp$ret$4).toString() + " MiB";
      } else {
       var tmp$ret$6 = new Long(512, 0).z1(toLong(1024)).z1(toLong(1024)), tmp_1 = _this__u8e3s4.x1(tmp$ret$6), tmp$ret$8 = new Long(1024, 0).z1(toLong(1024)).z1(toLong(1024));
       tmp = tmp_1.a2(tmp$ret$8).toString() + " GiB";
      }
     }
     return tmp;
    };
   }(module.exports, __webpack_require__(7036));
  },
  3138: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$node_os_4svwl4, $module$node_fs_4svwsv, $module$node_fs_promises_daq1pm, $module$node_stream_promises_chc41p, kotlin_kotlin, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js, kotlin_org_jetbrains_kotlin_wrappers_kotlin_web) {
    "use strict";
    var homedir = $module$node_os_4svwl4.homedir, existsSync = $module$node_fs_4svwsv.existsSync, mkdir = $module$node_fs_promises_daq1pm.mkdir, finished = $module$node_stream_promises_chc41p.finished, startsWith = kotlin_kotlin.$_$.n6, Unit_instance = kotlin_kotlin.$_$.u1, CoroutineImpl = kotlin_kotlin.$_$.d4, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, protoOf = kotlin_kotlin.$_$.l5, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, VOID = kotlin_kotlin.$_$.c, patchAbortOptions = kotlin_org_jetbrains_kotlin_wrappers_kotlin_web.$_$.b, awaitPromiseLike_0 = kotlin_org_jetbrains_kotlin_wrappers_kotlin_web.$_$.a;
    function get_normalizedPath(_this__u8e3s4) {
     var tmp;
     startsWith(_this__u8e3s4, "~") ? tmp = homedir() + _this__u8e3s4.substring(1) : tmp = _this__u8e3s4;
     return tmp;
    }
    function exists(path) {
     return existsSync(get_normalizedPath(path));
    }
    function $mkdirCOROUTINE$0(path, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.tp_1 = path;
    }
    function $pipeAndWaitCOROUTINE$1(_this__u8e3s4, destination, end, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.gq_1 = _this__u8e3s4, this.hq_1 = destination, 
     this.iq_1 = end;
    }
    initMetadataForCoroutine($mkdirCOROUTINE$0, CoroutineImpl), initMetadataForCoroutine($pipeAndWaitCOROUTINE$1, CoroutineImpl), 
    protoOf($mkdirCOROUTINE$0).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 3, exists(this.tp_1)) {
        this.u6_1 = 2;
        continue $sm;
       }
       this.up_1 = this.tp_1;
       var this_0 = {
        recursive: !0
       };
       if (this.vp_1 = this_0, this.wp_1 = this.up_1, this.xp_1 = this.vp_1, this.u6_1 = 1, 
       (suspendResult = awaitPromiseLike(mkdir(this.wp_1, this.xp_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       this.u6_1 = 2;
       continue $sm;

      case 2:
       return Unit_instance;

      case 3:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (3 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf($pipeAndWaitCOROUTINE$1).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 2;
       var this_0 = {};
       this_0.end = this.iq_1, this.gq_1.pipe(this.hq_1, this_0);
       this.jq_1 = this.gq_1, this.kq_1 = this.jq_1;
       if (this.lq_1 = void 0, this.mq_1 = new AbortController, this.u6_1 = 1, (suspendResult = awaitPromiseLike_0(finished(this.kq_1, patchAbortOptions(this.lq_1, this.mq_1)), this.mq_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       return Unit_instance;

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, _.$_$ = _.$_$ || {}, _.$_$.a = exists, _.$_$.b = get_normalizedPath, _.$_$.c = function(path, $completion) {
     var tmp = new $mkdirCOROUTINE$0(path, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, _.$_$.d = function(_this__u8e3s4, destination, end, $completion) {
     var tmp = new $pipeAndWaitCOROUTINE$1(_this__u8e3s4, destination, end = end !== VOID && end, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    };
   }(module.exports, __webpack_require__(8161), __webpack_require__(3024), __webpack_require__(1455), __webpack_require__(6466), __webpack_require__(7036), __webpack_require__(6077), __webpack_require__(7426));
  },
  5527: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, $module$node_fs_promises_daq1pm, kotlin_kotlin, kotlin_gradle_cache_action_wrappers_actions_toolkit, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js) {
    "use strict";
    var readFile = $module$node_fs_promises_daq1pm.readFile, protoOf = kotlin_kotlin.$_$.l5, initMetadataForClass = kotlin_kotlin.$_$.w4, VOID = kotlin_kotlin.$_$.c, Unit_instance = kotlin_kotlin.$_$.u1, CoroutineImpl = kotlin_kotlin.$_$.d4, ActionsEnvironment_getInstance = kotlin_gradle_cache_action_wrappers_actions_toolkit.$_$.k, awaitPromiseLike = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.a, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, THROW_CCE = kotlin_kotlin.$_$.k7, initMetadataForCoroutine = kotlin_kotlin.$_$.y4;
    function PullRequest(event) {
     ActionsTrigger.call(this, "pull_request", event), this.z1p_1 = event;
    }
    function BranchPush(event) {
     ActionsTrigger.call(this, "push", event), this.c1q_1 = event;
    }
    function WorkflowDispatch(event) {
     ActionsTrigger.call(this, "workflow_dispatch", event), this.f1q_1 = event;
    }
    function Schedule(name, event) {
     ActionsTrigger.call(this, name, event);
    }
    function Other(name, event) {
     ActionsTrigger.call(this, name, event);
    }
    function ActionsTrigger(name, event) {
     this.g1q_1 = name, this.h1q_1 = event;
    }
    function $currentTriggerCOROUTINE$0(resultContinuation) {
     CoroutineImpl.call(this, resultContinuation);
    }
    initMetadataForClass(ActionsTrigger, "ActionsTrigger"), initMetadataForClass(PullRequest, "PullRequest", VOID, ActionsTrigger), 
    initMetadataForClass(BranchPush, "BranchPush", VOID, ActionsTrigger), initMetadataForClass(WorkflowDispatch, "WorkflowDispatch", VOID, ActionsTrigger), 
    initMetadataForClass(Schedule, "Schedule", VOID, ActionsTrigger), initMetadataForClass(Other, "Other", VOID, ActionsTrigger), 
    initMetadataForCoroutine($currentTriggerCOROUTINE$0, CoroutineImpl), protoOf($currentTriggerCOROUTINE$0).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 2;
       this.q1q_1 = ActionsEnvironment_getInstance().jr();
       if (this.r1q_1 = "utf8", this.s1q_1 = this.q1q_1, this.t1q_1 = this.r1q_1, this.u6_1 = 1, 
       (suspendResult = awaitPromiseLike(readFile(this.s1q_1, this.t1q_1), this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 1:
       var tmp_2, eventString = suspendResult, event = JSON.parse(eventString), eventName = ActionsEnvironment_getInstance().ir();
       switch (eventName) {
       case "pull_request":
        tmp_2 = new PullRequest(null != event ? event : THROW_CCE());
        break;

       case "push":
        tmp_2 = new BranchPush(null != event ? event : THROW_CCE());
        break;

       case "workflow_dispatch":
        tmp_2 = new WorkflowDispatch(null != event ? event : THROW_CCE());
        break;

       case "schedule":
        tmp_2 = new Schedule(eventName, event);
        break;

       default:
        tmp_2 = new Other(eventName, event);
       }
       return tmp_2;

      case 2:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (2 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, _.$_$ = _.$_$ || {}, _.$_$.a = function($completion) {
     var tmp = new $currentTriggerCOROUTINE$0($completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, _.$_$.b = BranchPush, _.$_$.c = Other, _.$_$.d = PullRequest, _.$_$.e = Schedule, 
    _.$_$.f = WorkflowDispatch;
   }(module.exports, __webpack_require__(1455), __webpack_require__(7036), __webpack_require__(7361), __webpack_require__(6077));
  },
  7433: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_kotlin) {
    "use strict";
    var toString = kotlin_kotlin.$_$.y7, newThrowable = kotlin_kotlin.$_$.f5;
    _.$_$ = _.$_$ || {}, _.$_$.a = function(_this__u8e3s4) {
     var tmp0_elvis_lhs = _this__u8e3s4 instanceof Error ? _this__u8e3s4 : null;
     return null == tmp0_elvis_lhs ? newThrowable("Non-Kotlin exception " + toString(_this__u8e3s4)) : tmp0_elvis_lhs;
    };
   }(module.exports, __webpack_require__(7036));
  },
  6077: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js_core) {
    "use strict";
    Symbol.hasInstance;
    var VOID = kotlin_kotlin.$_$.c, initMetadataForClass = (kotlin_kotlin.$_$.l5, kotlin_kotlin.$_$.w4), intercepted = (kotlin_kotlin.$_$.y5, 
    kotlin_kotlin.$_$.z5, kotlin_kotlin.$_$.p3), CancellableContinuationImpl = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.c, _Result___init__impl__xyqfz8 = (kotlin_kotlin.$_$.u1, 
    kotlin_kotlin.$_$.t1, kotlin_kotlin.$_$.n1), toJsError = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js_core.$_$.a, createFailure = kotlin_kotlin.$_$.p7;
    function AsyncIteratorAdapter(source) {
     this.hp_1 = source, this.ip_1 = null;
    }
    function thenToContinuation(promise, continuation) {
     var $continuation, tmp = ($continuation = continuation, function(it) {
      var this_0 = $continuation, tmp$ret$0 = _Result___init__impl__xyqfz8(it);
      return this_0.f7(tmp$ret$0), null;
     });
     promise.then(tmp, function($continuation) {
      return function(it) {
       var tmp1 = $continuation, exception = toJsError(it), tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure(exception));
       return tmp1.f7(tmp$ret$1), null;
      };
     }(continuation));
    }
    initMetadataForClass(AsyncIteratorAdapter, "AsyncIteratorAdapter", VOID, VOID, VOID, [ 0 ]), 
    _.$_$ = _.$_$ || {}, _.$_$.a = function(promise, $completion) {
     var cancellable = new CancellableContinuationImpl(intercepted($completion), 1);
     return cancellable.mi(), thenToContinuation(promise, cancellable), cancellable.wi();
    }, _.$_$.b = thenToContinuation;
   }(module.exports, __webpack_require__(7036), __webpack_require__(9613), __webpack_require__(7433));
  },
  7036: module => {
   var log, LN2;
   void 0 === Math.imul && (Math.imul = function(a, b) {
    return (4294901760 & a) * (65535 & b) + (65535 & a) * (0 | b) | 0;
   }), void 0 === ArrayBuffer.isView && (ArrayBuffer.isView = function(a) {
    return null != a && null != a.__proto__ && a.__proto__.__proto__ === Int8Array.prototype.__proto__;
   }), void 0 === Array.prototype.fill && Object.defineProperty(Array.prototype, "fill", {
    value: function(value) {
     if (null == this) throw new TypeError("this is null or not defined");
     for (var O = Object(this), len = O.length >>> 0, relativeStart = arguments[1] | 0, k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len), end = arguments[2], relativeEnd = void 0 === end ? len : end | 0, finalValue = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len); k < finalValue; ) O[k] = value, 
     k++;
     return O;
    }
   }), [ Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array ].forEach((function(TypedArray) {
    void 0 === TypedArray.prototype.fill && Object.defineProperty(TypedArray.prototype, "fill", {
     value: Array.prototype.fill
    });
   })), void 0 === Math.clz32 && (Math.clz32 = (log = Math.log, LN2 = Math.LN2, function(x) {
    var asUint = x >>> 0;
    return 0 === asUint ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
   })), void 0 === String.prototype.startsWith && Object.defineProperty(String.prototype, "startsWith", {
    value: function(searchString, position) {
     return position = position || 0, this.lastIndexOf(searchString, position) === position;
    }
   }), void 0 === String.prototype.endsWith && Object.defineProperty(String.prototype, "endsWith", {
    value: function(searchString, position) {
     var subjectString = this.toString();
     (void 0 === position || position > subjectString.length) && (position = subjectString.length), 
     position -= searchString.length;
     var lastIndex = subjectString.indexOf(searchString, position);
     return -1 !== lastIndex && lastIndex === position;
    }
   }), function(_) {
    "use strict";
    var Companion_instance_0, buf, bufFloat64, bufInt32, lowIndex, highIndex, properties_initialized_bitUtils_kt_i2bo3e, symbolMap, symbolWeakMap, ZERO, ONE, NEG_ONE, MAX_VALUE, MIN_VALUE, TWO_PWR_24_, properties_initialized_longJs_kt_4syf89, globalInterfaceId, StringCompanionObject_instance, propertyRefClassMetadataCache, properties_initialized_reflectRuntime_kt_inkhwd, VOID, Digit_instance, Unit_instance, Companion_instance_1, _stableSortingIsSupported, CompletedContinuation_instance, EmptyContinuation, properties_initialized_EmptyContinuation_kt_4jdb9w, NothingKClassImpl_instance, functionClasses, PrimitiveClasses_instance, properties_initialized_primitives_kt_jle18u, Companion_instance_3, Companion_instance_4, Companion_instance_6, Companion_instance_7, EmptyList_instance, EmptyIterator_instance, EmptyMap_instance, EmptySequence_instance, EmptySet_instance, NaturalOrderComparator_instance, Key_instance, EmptyCoroutineContext_instance, CoroutineSingletons_COROUTINE_SUSPENDED_instance, CoroutineSingletons_UNDECIDED_instance, CoroutineSingletons_RESUMED_instance, CoroutineSingletons_entriesInitialized, Companion_instance_8, Companion_instance_9, UNDEFINED_RESULT, properties_initialized_DeepRecursive_kt_5z0al2, LazyThreadSafetyMode_PUBLICATION_instance, LazyThreadSafetyMode_entriesInitialized, UNINITIALIZED_VALUE_instance, Companion_instance_10, imul = Math.imul, isView = ArrayBuffer.isView, clz32 = Math.clz32;
    function plus(context) {
     return context === EmptyCoroutineContext_getInstance() ? this : context.rd(this, CoroutineContext$plus$lambda);
    }
    function get(key) {
     return equals(this.f1(), key) ? isInterface(this, Element) ? this : THROW_CCE() : null;
    }
    function fold(initial, operation) {
     return operation(initial, this);
    }
    function minusKey(key) {
     return equals(this.f1(), key) ? EmptyCoroutineContext_getInstance() : this;
    }
    function CharSequence() {}
    function Comparable() {}
    function Number_0() {}
    function get_lastIndex(_this__u8e3s4) {
     return _this__u8e3s4.length - 1 | 0;
    }
    function contains_0(_this__u8e3s4, element) {
     return function(_this__u8e3s4, element) {
      var inductionVariable = 0, last = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable <= last) do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + 1 | 0, element === _this__u8e3s4[index]) return index;
      } while (inductionVariable <= last);
      return -1;
     }(_this__u8e3s4, element) >= 0;
    }
    function single(_this__u8e3s4) {
     var tmp;
     switch (_this__u8e3s4.length) {
     case 0:
      throw NoSuchElementException_init_$Create$_0("Array is empty.");

     case 1:
      tmp = _this__u8e3s4[0];
      break;

     default:
      throw IllegalArgumentException_init_$Create$_0("Array has more than one element.");
     }
     return tmp;
    }
    function joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
     return separator = separator === VOID ? ", " : separator, prefix = prefix === VOID ? "" : prefix, 
     postfix = postfix === VOID ? "" : postfix, limit = limit === VOID ? -1 : limit, 
     truncated = truncated === VOID ? "..." : truncated, transform = transform === VOID ? null : transform, 
     function(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
      separator = separator === VOID ? ", " : separator, prefix = prefix === VOID ? "" : prefix, 
      postfix = postfix === VOID ? "" : postfix, limit = limit === VOID ? -1 : limit, 
      truncated = truncated === VOID ? "..." : truncated, transform = transform === VOID ? null : transform, 
      buffer.f(prefix);
      var count = 0, inductionVariable = 0, last = _this__u8e3s4.length;
      $l$loop: for (;inductionVariable < last; ) {
       var element = _this__u8e3s4[inductionVariable];
       if (inductionVariable = inductionVariable + 1 | 0, (count = count + 1 | 0) > 1 && buffer.f(separator), 
       !(limit < 0 || count <= limit)) break $l$loop;
       appendElement(buffer, element, transform);
      }
      limit >= 0 && count > limit && buffer.f(truncated);
      return buffer.f(postfix), buffer;
     }(_this__u8e3s4, StringBuilder_init_$Create$_0(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function asSequence$$inlined$Sequence$1($this_asSequence) {
     this.g_1 = $this_asSequence;
    }
    function joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
     return separator = separator === VOID ? ", " : separator, prefix = prefix === VOID ? "" : prefix, 
     postfix = postfix === VOID ? "" : postfix, limit = limit === VOID ? -1 : limit, 
     truncated = truncated === VOID ? "..." : truncated, transform = transform === VOID ? null : transform, 
     joinTo_0(_this__u8e3s4, StringBuilder_init_$Create$_0(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
     separator = separator === VOID ? ", " : separator, prefix = prefix === VOID ? "" : prefix, 
     postfix = postfix === VOID ? "" : postfix, limit = limit === VOID ? -1 : limit, 
     truncated = truncated === VOID ? "..." : truncated, transform = transform === VOID ? null : transform, 
     buffer.f(prefix);
     var count = 0, _iterator__ex2g4s = _this__u8e3s4.h();
     $l$loop: for (;_iterator__ex2g4s.i(); ) {
      var element = _iterator__ex2g4s.j();
      if ((count = count + 1 | 0) > 1 && buffer.f(separator), !(limit < 0 || count <= limit)) break $l$loop;
      appendElement(buffer, element, transform);
     }
     return limit >= 0 && count > limit && buffer.f(truncated), buffer.f(postfix), buffer;
    }
    function toCollection_0(_this__u8e3s4, destination) {
     for (var _iterator__ex2g4s = _this__u8e3s4.h(); _iterator__ex2g4s.i(); ) {
      var item = _iterator__ex2g4s.j();
      destination.e(item);
     }
     return destination;
    }
    function toSet(_this__u8e3s4) {
     if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.k()) {
      case 0:
       tmp = emptySet();
       break;

      case 1:
       tmp = setOf(isInterface(_this__u8e3s4, KtList) ? _this__u8e3s4.p(0) : _this__u8e3s4.h().j());
       break;

      default:
       tmp = toCollection_0(_this__u8e3s4, LinkedHashSet_init_$Create$_0(_this__u8e3s4.k()));
      }
      return tmp;
     }
     return function(_this__u8e3s4) {
      switch (_this__u8e3s4.k()) {
      case 0:
       return emptySet();

      case 1:
       return setOf(_this__u8e3s4.h().j());

      default:
       return _this__u8e3s4;
      }
     }(toCollection_0(_this__u8e3s4, LinkedHashSet_init_$Create$()));
    }
    function toMutableList_0(_this__u8e3s4) {
     return ArrayList_init_$Create$_1(_this__u8e3s4);
    }
    function asSequence$$inlined$Sequence$1_0($this_asSequence) {
     this.r_1 = $this_asSequence;
    }
    function coerceAtLeast(_this__u8e3s4, minimumValue) {
     return _this__u8e3s4 < minimumValue ? minimumValue : _this__u8e3s4;
    }
    function coerceAtMost(_this__u8e3s4, maximumValue) {
     return _this__u8e3s4 > maximumValue ? maximumValue : _this__u8e3s4;
    }
    function map(_this__u8e3s4, transform) {
     return new TransformingSequence(_this__u8e3s4, transform);
    }
    function drop(_this__u8e3s4, n) {
     if (!(n >= 0)) throw IllegalArgumentException_init_$Create$_0(toString_1("Requested character count " + n + " is less than zero."));
     var startIndex = coerceAtMost(n, _this__u8e3s4.length);
     return _this__u8e3s4.substring(startIndex);
    }
    function dropLast(_this__u8e3s4, n) {
     if (!(n >= 0)) throw IllegalArgumentException_init_$Create$_0(toString_1("Requested character count " + n + " is less than zero."));
     return function(_this__u8e3s4, n) {
      if (!(n >= 0)) {
       throw IllegalArgumentException_init_$Create$_0(toString_1("Requested character count " + n + " is less than zero."));
      }
      var endIndex = coerceAtMost(n, _this__u8e3s4.length);
      return _this__u8e3s4.substring(0, endIndex);
     }(_this__u8e3s4, coerceAtLeast(_this__u8e3s4.length - n | 0, 0));
    }
    function _Char___init__impl__6a9atx(value) {
     return value;
    }
    function Char__compareTo_impl_ypi4mb($this, other) {
     return $this - other | 0;
    }
    function Char__minus_impl_a2frrh($this, other) {
     return $this - other | 0;
    }
    function Char__toInt_impl_vasixd($this) {
     return $this;
    }
    function toString($this) {
     return String.fromCharCode($this);
    }
    function Char() {}
    function KtList() {}
    function Collection() {}
    function KtSet() {}
    function Entry() {}
    function KtMap() {}
    function KtMutableMap() {}
    function Companion() {}
    function Enum(name, ordinal) {
     this.q1_1 = name, this.r1_1 = ordinal;
    }
    function toString_0(_this__u8e3s4) {
     var tmp1_elvis_lhs = null == _this__u8e3s4 ? null : toString_1(_this__u8e3s4);
     return null == tmp1_elvis_lhs ? "null" : tmp1_elvis_lhs;
    }
    function Companion_0() {
     Companion_instance_0 = this, this.t1_1 = new Long(0, -2147483648), this.u1_1 = new Long(-1, 2147483647), 
     this.v1_1 = 8, this.w1_1 = 64;
    }
    function Long(low, high) {
     null == Companion_instance_0 && new Companion_0, Number_0.call(this), this.y_1 = low, 
     this.z_1 = high;
    }
    function implement(interfaces) {
     for (var maxSize = 1, masks = [], inductionVariable = 0, last = interfaces.length; inductionVariable < last; ) {
      var i = interfaces[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var currentSize = maxSize, tmp0_elvis_lhs = i.prototype.$imask$, imask = null == tmp0_elvis_lhs ? i.$imask$ : tmp0_elvis_lhs;
      null != imask && (masks.push(imask), currentSize = imask.length);
      var iid = i.$metadata$.iid, iidImask = null == iid ? null : bitMaskWith(iid);
      null != iidImask && (masks.push(iidImask), currentSize = Math.max(currentSize, iidImask.length)), 
      currentSize > maxSize && (maxSize = currentSize);
     }
     return function(capacity, masks) {
      var tmp = 0, tmp_0 = new Int32Array(capacity);
      for (;tmp < capacity; ) {
       for (var tmp_1 = tmp, result = 0, inductionVariable = 0, last = masks.length; inductionVariable < last; ) {
        var mask = masks[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0, tmp_1 < mask.length && (result |= mask[tmp_1]);
       }
       tmp_0[tmp_1] = result, tmp = tmp + 1 | 0;
      }
      return tmp_0;
     }(maxSize, masks);
    }
    function bitMaskWith(activeBit) {
     var numberIndex = activeBit >> 5, intArray = new Int32Array(numberIndex + 1 | 0), numberWithSettledBit = 1 << (31 & activeBit);
     return intArray[numberIndex] = intArray[numberIndex] | numberWithSettledBit, intArray;
    }
    function arrayIterator(array) {
     return new arrayIterator$1(array);
    }
    function fillArrayVal(array, initValue) {
     var inductionVariable = 0, last = array.length - 1 | 0;
     if (inductionVariable <= last) do {
      var i = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0, array[i] = initValue;
     } while (i !== last);
     return array;
    }
    function charArrayOf(arr) {
     var array = new Uint16Array(arr);
     return array.$type$ = "CharArray", array;
    }
    function arrayIterator$1($array) {
     this.h2_1 = $array, this.g2_1 = 0;
    }
    function get_buf() {
     return _init_properties_bitUtils_kt__nfcg4k(), buf;
    }
    function get_bufFloat64() {
     return _init_properties_bitUtils_kt__nfcg4k(), bufFloat64;
    }
    function get_bufInt32() {
     return _init_properties_bitUtils_kt__nfcg4k(), bufInt32;
    }
    function get_lowIndex() {
     return _init_properties_bitUtils_kt__nfcg4k(), lowIndex;
    }
    function getNumberHashCode(obj) {
     return _init_properties_bitUtils_kt__nfcg4k(), (0 | obj) === obj ? numberToInt(obj) : (get_bufFloat64()[0] = obj, 
     imul(get_bufInt32()[(_init_properties_bitUtils_kt__nfcg4k(), highIndex)], 31) + get_bufInt32()[get_lowIndex()] | 0);
    }
    function _init_properties_bitUtils_kt__nfcg4k() {
     properties_initialized_bitUtils_kt_i2bo3e || (properties_initialized_bitUtils_kt_i2bo3e = !0, 
     buf = new ArrayBuffer(8), bufFloat64 = new Float64Array(get_buf()), new Float32Array(get_buf()), 
     bufInt32 = new Int32Array(get_buf()), get_bufFloat64()[0] = -1, lowIndex = 0 !== get_bufInt32()[0] ? 1 : 0, 
     highIndex = 1 - get_lowIndex() | 0);
    }
    function charSequenceGet(a, index) {
     var tmp;
     isString(a) ? tmp = numberToChar(a.charCodeAt(index)) : tmp = a.b(index);
     return tmp;
    }
    function isString(a) {
     return "string" == typeof a;
    }
    function charSequenceLength(a) {
     return isString(a) ? a.length : a.a();
    }
    function charSequenceSubSequence(a, startIndex, endIndex) {
     return isString(a) ? a.substring(startIndex, endIndex) : a.c(startIndex, endIndex);
    }
    function arrayToString$lambda(it) {
     return toString_1(it);
    }
    function compareTo(a, b) {
     var tmp;
     switch (typeof a) {
     case "number":
      tmp = "number" == typeof b ? doubleCompareTo(a, b) : b instanceof Long ? doubleCompareTo(a, b.f2()) : primitiveCompareTo(a, b);
      break;

     case "string":
     case "boolean":
      tmp = primitiveCompareTo(a, b);
      break;

     default:
      tmp = function(a, b) {
       return a.d(b);
      }(a, b);
     }
     return tmp;
    }
    function doubleCompareTo(a, b) {
     var tmp;
     if (a < b) tmp = -1; else if (a > b) tmp = 1; else if (a === b) {
      var tmp_0;
      if (0 !== a) tmp_0 = 0; else {
       var ia = 1 / a;
       tmp_0 = ia === 1 / b ? 0 : ia < 0 ? -1 : 1;
      }
      tmp = tmp_0;
     } else tmp = a != a ? b != b ? 0 : 1 : -1;
     return tmp;
    }
    function primitiveCompareTo(a, b) {
     return a < b ? -1 : a > b ? 1 : 0;
    }
    function getObjectHashCode(obj) {
     if (!("kotlinHashCodeValue$" in obj)) {
      var hash = calculateRandomHash(), descriptor = new Object;
      descriptor.value = hash, descriptor.enumerable = !1, Object.defineProperty(obj, "kotlinHashCodeValue$", descriptor);
     }
     return obj.kotlinHashCodeValue$;
    }
    function calculateRandomHash() {
     return 4294967296 * Math.random() | 0;
    }
    function objectCreate(proto) {
     return proto = proto === VOID ? null : proto, Object.create(proto);
    }
    function toString_1(o) {
     return null == o ? "null" : isArrayish(o) ? "[...]" : "function" != typeof o.toString ? anyToString(o) : o.toString();
    }
    function equals(obj1, obj2) {
     if (null == obj1) return null == obj2;
     if (null == obj2) return !1;
     if ("object" == typeof obj1 && "function" == typeof obj1.equals) return obj1.equals(obj2);
     if (obj1 != obj1) return obj2 != obj2;
     if ("number" == typeof obj1 && "number" == typeof obj2) {
      var tmp;
      if (obj1 === obj2) {
       var tmp_0;
       if (0 !== obj1) tmp_0 = !0; else tmp_0 = 1 / obj1 === 1 / obj2;
       tmp = tmp_0;
      } else tmp = !1;
      return tmp;
     }
     return obj1 === obj2;
    }
    function hashCode(obj) {
     if (null == obj) return 0;
     var tmp, typeOf = typeof obj;
     switch (typeOf) {
     case "object":
      tmp = "function" == typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);
      break;

     case "function":
      tmp = getObjectHashCode(obj);
      break;

     case "number":
      tmp = getNumberHashCode(obj);
      break;

     case "boolean":
      tmp = getBooleanHashCode(obj);
      break;

     case "string":
      tmp = getStringHashCode(String(obj));
      break;

     case "bigint":
      tmp = function(value) {
       var shiftNumber = BigInt(32), MASK = BigInt(4294967295), bigNumber = value < 0 ? -value : value, hashCode = 0, signum = value < 0 ? -1 : 1;
       for (;0 != bigNumber; ) {
        var chunk = Number(bigNumber & MASK);
        hashCode = imul(31, hashCode) + chunk | 0, bigNumber >>= shiftNumber;
       }
       return imul(hashCode, signum);
      }(obj);
      break;

     case "symbol":
      tmp = function(value) {
       var hashCodeMap = (symbol = value, Symbol.keyFor(symbol) != VOID ? function() {
        symbolMap === VOID && (symbolMap = new Map);
        return symbolMap;
       }() : function() {
        symbolWeakMap === VOID && (symbolWeakMap = new WeakMap);
        return symbolWeakMap;
       }()), cachedHashCode = hashCodeMap.get(value);
       var symbol;
       if (cachedHashCode !== VOID) return cachedHashCode;
       var hash = calculateRandomHash();
       return hashCodeMap.set(value, hash), hash;
      }(obj);
      break;

     default:
      tmp = function() {
       throw new Error("Unexpected typeof `" + typeOf + "`");
      }();
     }
     return tmp;
    }
    function anyToString(o) {
     return Object.prototype.toString.call(o);
    }
    function getBooleanHashCode(value) {
     return value ? 1231 : 1237;
    }
    function getStringHashCode(str) {
     var hash = 0, inductionVariable = 0, last = str.length - 1 | 0;
     if (inductionVariable <= last) do {
      var i = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0;
      var code = str.charCodeAt(i);
      hash = imul(hash, 31) + code | 0;
     } while (i !== last);
     return hash;
    }
    function captureStack(instance, constructorFunction) {
     null != Error.captureStackTrace ? Error.captureStackTrace(instance, constructorFunction) : instance.stack = (new Error).stack;
    }
    function protoOf(constructor) {
     return constructor.prototype;
    }
    function isUndefined(value) {
     return value === VOID;
    }
    function extendThrowable(this_, message, cause) {
     Error.call(this_), function(this_, message, cause) {
      var errorInfo = calculateErrorInfo(Object.getPrototypeOf(this_));
      if (!(1 & errorInfo)) {
       var tmp;
       if (null == message) {
        var tmp_0;
        if (null !== message) {
         var tmp1_elvis_lhs = null == cause ? null : cause.toString();
         tmp_0 = null == tmp1_elvis_lhs ? VOID : tmp1_elvis_lhs;
        } else tmp_0 = VOID;
        tmp = tmp_0;
       } else tmp = message;
       this_.message = tmp;
      }
      2 & errorInfo || (this_.cause = cause);
      this_.name = Object.getPrototypeOf(this_).constructor.name;
     }(this_, message, cause);
    }
    function ensureNotNull(v) {
     var tmp;
     return null == v ? function() {
      throw NullPointerException_init_$Create$();
     }() : tmp = v, tmp;
    }
    function THROW_CCE() {
     throw ClassCastException_init_$Create$();
    }
    function get_ZERO() {
     return _init_properties_longJs_kt__elc2w5(), ZERO;
    }
    function get_ONE() {
     return _init_properties_longJs_kt__elc2w5(), ONE;
    }
    function get_NEG_ONE() {
     return _init_properties_longJs_kt__elc2w5(), NEG_ONE;
    }
    function get_MIN_VALUE() {
     return _init_properties_longJs_kt__elc2w5(), MIN_VALUE;
    }
    function get_TWO_PWR_24_() {
     return _init_properties_longJs_kt__elc2w5(), TWO_PWR_24_;
    }
    function compare(_this__u8e3s4, other) {
     if (_init_properties_longJs_kt__elc2w5(), equalsLong(_this__u8e3s4, other)) return 0;
     var thisNeg = isNegative(_this__u8e3s4), otherNeg = isNegative(other);
     return thisNeg && !otherNeg ? -1 : !thisNeg && otherNeg ? 1 : isNegative(subtract(_this__u8e3s4, other)) ? -1 : 1;
    }
    function add(_this__u8e3s4, other) {
     _init_properties_longJs_kt__elc2w5();
     var a48 = _this__u8e3s4.z_1 >>> 16 | 0, a32 = 65535 & _this__u8e3s4.z_1, a16 = _this__u8e3s4.y_1 >>> 16 | 0, a00 = 65535 & _this__u8e3s4.y_1, b48 = other.z_1 >>> 16 | 0, b32 = 65535 & other.z_1, b16 = other.y_1 >>> 16 | 0, c48 = 0, c32 = 0, c16 = 0, c00 = 0;
     return c48 = (c48 = c48 + ((c32 = (c32 = c32 + ((c16 = (c16 = c16 + ((c00 = c00 + (a00 + (65535 & other.y_1) | 0) | 0) >>> 16 | 0) | 0) + (a16 + b16 | 0) | 0) >>> 16 | 0) | 0) + (a32 + b32 | 0) | 0) >>> 16 | 0) | 0) + (a48 + b48 | 0) | 0, 
     new Long((c16 &= 65535) << 16 | (c00 &= 65535), (c48 &= 65535) << 16 | (c32 &= 65535));
    }
    function subtract(_this__u8e3s4, other) {
     return _init_properties_longJs_kt__elc2w5(), add(_this__u8e3s4, other.b2());
    }
    function multiply(_this__u8e3s4, other) {
     if (_init_properties_longJs_kt__elc2w5(), isZero(_this__u8e3s4)) return get_ZERO();
     if (isZero(other)) return get_ZERO();
     if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) return isOdd(other) ? get_MIN_VALUE() : get_ZERO();
     if (equalsLong(other, get_MIN_VALUE())) return isOdd(_this__u8e3s4) ? get_MIN_VALUE() : get_ZERO();
     if (isNegative(_this__u8e3s4)) return isNegative(other) ? multiply(negate(_this__u8e3s4), negate(other)) : negate(multiply(negate(_this__u8e3s4), other));
     if (isNegative(other)) return negate(multiply(_this__u8e3s4, negate(other)));
     if (lessThan(_this__u8e3s4, get_TWO_PWR_24_()) && lessThan(other, get_TWO_PWR_24_())) return fromNumber(toNumber(_this__u8e3s4) * toNumber(other));
     var a48 = _this__u8e3s4.z_1 >>> 16 | 0, a32 = 65535 & _this__u8e3s4.z_1, a16 = _this__u8e3s4.y_1 >>> 16 | 0, a00 = 65535 & _this__u8e3s4.y_1, b48 = other.z_1 >>> 16 | 0, b32 = 65535 & other.z_1, b16 = other.y_1 >>> 16 | 0, b00 = 65535 & other.y_1, c48 = 0, c32 = 0, c16 = 0, c00 = 0;
     return c16 = c16 + ((c00 = c00 + imul(a00, b00) | 0) >>> 16 | 0) | 0, c00 &= 65535, 
     c32 = (c32 = c32 + ((c16 = c16 + imul(a16, b00) | 0) >>> 16 | 0) | 0) + ((c16 = (c16 &= 65535) + imul(a00, b16) | 0) >>> 16 | 0) | 0, 
     c16 &= 65535, c48 = (c48 = (c48 = c48 + ((c32 = c32 + imul(a32, b00) | 0) >>> 16 | 0) | 0) + ((c32 = (c32 &= 65535) + imul(a16, b16) | 0) >>> 16 | 0) | 0) + ((c32 = (c32 &= 65535) + imul(a00, b32) | 0) >>> 16 | 0) | 0, 
     c32 &= 65535, c48 = c48 + (((imul(a48, b00) + imul(a32, b16) | 0) + imul(a16, b32) | 0) + imul(a00, b48) | 0) | 0, 
     new Long(c16 << 16 | c00, (c48 &= 65535) << 16 | c32);
    }
    function shiftLeft(_this__u8e3s4, numBits) {
     _init_properties_longJs_kt__elc2w5();
     var numBits_0 = 63 & numBits;
     return 0 === numBits_0 ? _this__u8e3s4 : numBits_0 < 32 ? new Long(_this__u8e3s4.y_1 << numBits_0, _this__u8e3s4.z_1 << numBits_0 | _this__u8e3s4.y_1 >>> (32 - numBits_0 | 0)) : new Long(0, _this__u8e3s4.y_1 << numBits_0 - 32);
    }
    function toNumber(_this__u8e3s4) {
     return _init_properties_longJs_kt__elc2w5(), 4294967296 * _this__u8e3s4.z_1 + function(_this__u8e3s4) {
      return _init_properties_longJs_kt__elc2w5(), _this__u8e3s4.y_1 >= 0 ? _this__u8e3s4.y_1 : 4294967296 + _this__u8e3s4.y_1;
     }(_this__u8e3s4);
    }
    function toStringImpl(_this__u8e3s4, radix) {
     if (_init_properties_longJs_kt__elc2w5(), radix < 2 || 36 < radix) throw Exception_init_$Create$_0("radix out of range: " + radix);
     if (isZero(_this__u8e3s4)) return "0";
     if (isNegative(_this__u8e3s4)) {
      if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
       var radixLong = fromInt(radix), div = _this__u8e3s4.a2(radixLong), rem = subtract(multiply(div, radixLong), _this__u8e3s4).a1();
       return toStringImpl(div, radix) + rem.toString(radix);
      }
      return "-" + toStringImpl(negate(_this__u8e3s4), radix);
     }
     for (var digitsPerTime = 2 === radix ? 31 : radix <= 10 ? 9 : radix <= 21 ? 7 : radix <= 35 ? 6 : 5, radixToPower = fromNumber(Math.pow(radix, digitsPerTime)), rem_0 = _this__u8e3s4, result = ""; ;) {
      var remDiv = rem_0.a2(radixToPower), digits = subtract(rem_0, multiply(remDiv, radixToPower)).a1().toString(radix);
      if (isZero(rem_0 = remDiv)) return digits + result;
      for (;digits.length < digitsPerTime; ) digits = "0" + digits;
      result = digits + result;
     }
    }
    function equalsLong(_this__u8e3s4, other) {
     return _init_properties_longJs_kt__elc2w5(), _this__u8e3s4.z_1 === other.z_1 && _this__u8e3s4.y_1 === other.y_1;
    }
    function fromInt(value) {
     return _init_properties_longJs_kt__elc2w5(), new Long(value, value < 0 ? -1 : 0);
    }
    function isNegative(_this__u8e3s4) {
     return _init_properties_longJs_kt__elc2w5(), _this__u8e3s4.z_1 < 0;
    }
    function isZero(_this__u8e3s4) {
     return _init_properties_longJs_kt__elc2w5(), 0 === _this__u8e3s4.z_1 && 0 === _this__u8e3s4.y_1;
    }
    function isOdd(_this__u8e3s4) {
     return _init_properties_longJs_kt__elc2w5(), !(1 & ~_this__u8e3s4.y_1);
    }
    function negate(_this__u8e3s4) {
     return _init_properties_longJs_kt__elc2w5(), _this__u8e3s4.b2();
    }
    function lessThan(_this__u8e3s4, other) {
     return _init_properties_longJs_kt__elc2w5(), compare(_this__u8e3s4, other) < 0;
    }
    function fromNumber(value) {
     if (_init_properties_longJs_kt__elc2w5(), isNaN_0(value)) return get_ZERO();
     if (value <= -0x8000000000000000) return get_MIN_VALUE();
     if (value + 1 >= 0x8000000000000000) return _init_properties_longJs_kt__elc2w5(), 
     MAX_VALUE;
     if (value < 0) return negate(fromNumber(-value));
     return new Long(value % 4294967296 | 0, value / 4294967296 | 0);
    }
    function greaterThan(_this__u8e3s4, other) {
     return _init_properties_longJs_kt__elc2w5(), compare(_this__u8e3s4, other) > 0;
    }
    function greaterThanOrEqual(_this__u8e3s4, other) {
     return _init_properties_longJs_kt__elc2w5(), compare(_this__u8e3s4, other) >= 0;
    }
    function _init_properties_longJs_kt__elc2w5() {
     properties_initialized_longJs_kt_4syf89 || (properties_initialized_longJs_kt_4syf89 = !0, 
     ZERO = fromInt(0), ONE = fromInt(1), NEG_ONE = fromInt(-1), MAX_VALUE = new Long(-1, 2147483647), 
     MIN_VALUE = new Long(0, -2147483648), TWO_PWR_24_ = fromInt(16777216));
    }
    function createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {
     return {
      kind,
      simpleName: name,
      associatedObjectKey,
      associatedObjects,
      suspendArity,
      $kClass$: VOID,
      defaultConstructor,
      iid: "interface" === kind ? function() {
       globalInterfaceId === VOID && (globalInterfaceId = 0);
       return globalInterfaceId = globalInterfaceId + 1 | 0;
      }() : VOID
     };
    }
    function initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
     null != parent && (ctor.prototype = Object.create(parent.prototype), ctor.prototype.constructor = ctor);
     var metadata = createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity);
     (ctor.$metadata$ = metadata, null != interfaces) && ((equals(metadata.iid, VOID) ? ctor.prototype : ctor).$imask$ = implement(interfaces));
    }
    function initMetadataForClass(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
     initMetadataFor("class", ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
    }
    function initMetadataForObject(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
     initMetadataFor("object", ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
    }
    function initMetadataForInterface(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
     initMetadataFor("interface", ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
    }
    function initMetadataForCompanion(ctor, parent, interfaces, suspendArity) {
     initMetadataForObject(ctor, "Companion", VOID, parent, interfaces, suspendArity, VOID, VOID);
    }
    function numberToInt(a) {
     return a instanceof Long ? a.a1() : function(a) {
      var tmp;
      tmp = a > 2147483647 ? 2147483647 : a < -2147483648 ? -2147483648 : 0 | a;
      return tmp;
     }(a);
    }
    function numberToChar(a) {
     var tmp$ret$0 = function(a) {
      return a << 16 >> 16;
     }(numberToInt(a));
     return 65535 & tmp$ret$0;
    }
    function StringCompanionObject() {}
    function numberRangeToNumber(start, endInclusive) {
     return new IntRange(start, endInclusive);
    }
    function metadataObject() {
     return _init_properties_reflectRuntime_kt__5r4uu3(), createMetadata("class", VOID, VOID, VOID, VOID, VOID);
    }
    function _init_properties_reflectRuntime_kt__5r4uu3() {
     if (!properties_initialized_reflectRuntime_kt_inkhwd) {
      properties_initialized_reflectRuntime_kt_inkhwd = !0;
      var tmp = [ metadataObject(), metadataObject() ], tmp_0 = [ metadataObject(), metadataObject() ];
      propertyRefClassMetadataCache = [ tmp, tmp_0, [ metadataObject(), metadataObject() ] ];
     }
    }
    function isArrayish(o) {
     return isJsArray(o) || isView(o);
    }
    function isJsArray(obj) {
     return Array.isArray(obj);
    }
    function isInterface(obj, iface) {
     return isInterfaceImpl(obj, iface.$metadata$.iid);
    }
    function isInterfaceImpl(obj, iface) {
     var tmp0_elvis_lhs = obj.$imask$;
     return null != tmp0_elvis_lhs && function(_this__u8e3s4, possibleActiveBit) {
      var numberIndex = possibleActiveBit >> 5;
      if (numberIndex > _this__u8e3s4.length) return !1;
      var numberWithSettledBit = 1 << (31 & possibleActiveBit);
      return !!(_this__u8e3s4[numberIndex] & numberWithSettledBit);
     }(tmp0_elvis_lhs, iface);
    }
    function isArray(obj) {
     return !!isJsArray(obj) && !obj.$type$;
    }
    function isNumber(a) {
     return "number" == typeof a || a instanceof Long;
    }
    function isComparable(value) {
     var type = typeof value;
     return "string" === type || "boolean" === type || isNumber(value) || isInterface(value, Comparable);
    }
    function isCharSequence(value) {
     return "string" == typeof value || isInterface(value, CharSequence);
    }
    function isBooleanArray(a) {
     return isJsArray(a) && "BooleanArray" === a.$type$;
    }
    function isByteArray(a) {
     return a instanceof Int8Array;
    }
    function isShortArray(a) {
     return a instanceof Int16Array;
    }
    function isCharArray(a) {
     return a instanceof Uint16Array && "CharArray" === a.$type$;
    }
    function isIntArray(a) {
     return a instanceof Int32Array;
    }
    function isFloatArray(a) {
     return a instanceof Float32Array;
    }
    function isLongArray(a) {
     return isJsArray(a) && "LongArray" === a.$type$;
    }
    function isDoubleArray(a) {
     return a instanceof Float64Array;
    }
    function jsIsType(obj, jsClass) {
     if (jsClass === Object) return null != obj;
     var objType = typeof obj;
     if (null == obj || null == jsClass || "object" !== objType && "function" !== objType) return !1;
     var constructor = "object" === typeof jsClass ? function(jsClass) {
      return Object.getPrototypeOf(jsClass);
     }(jsClass) : jsClass, klassMetadata = constructor.$metadata$;
     if ("interface" === (null == klassMetadata ? null : klassMetadata.kind)) {
      var tmp0_elvis_lhs = klassMetadata.iid;
      return null != tmp0_elvis_lhs && isInterfaceImpl(obj, tmp0_elvis_lhs);
     }
     return obj instanceof constructor;
    }
    function calculateErrorInfo(proto) {
     var tmp0_safe_receiver = proto.constructor, metadata = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.$metadata$, tmp2_safe_receiver = null == metadata ? null : metadata.errorInfo;
     if (null != tmp2_safe_receiver) return tmp2_safe_receiver;
     var obj, result = 0;
     if (hasProp(proto, "message") && (result |= 1), hasProp(proto, "cause") && (result |= 2), 
     3 !== result) {
      var parentProto = (obj = proto, Object.getPrototypeOf(obj));
      parentProto != Error.prototype && (result |= calculateErrorInfo(parentProto));
     }
     return null != metadata && (metadata.errorInfo = result), result;
    }
    function hasProp(proto, propName) {
     return proto.hasOwnProperty(propName);
    }
    function copyOf(_this__u8e3s4, newSize) {
     if (!(newSize >= 0)) throw IllegalArgumentException_init_$Create$_0(toString_1("Invalid new array size: " + newSize + "."));
     return function(src, dst) {
      var srcLen = src.length, dstLen = dst.length, index = 0, arr = dst;
      for (;index < srcLen && index < dstLen; ) {
       var tmp = index, _unary__edvuaz = index;
       index = _unary__edvuaz + 1 | 0, arr[tmp] = src[_unary__edvuaz];
      }
      return dst;
     }(_this__u8e3s4, new Int32Array(newSize));
    }
    function fill(_this__u8e3s4, element, fromIndex, toIndex) {
     fromIndex = fromIndex === VOID ? 0 : fromIndex, toIndex = toIndex === VOID ? _this__u8e3s4.length : toIndex, 
     Companion_instance_4.j2(fromIndex, toIndex, _this__u8e3s4.length), _this__u8e3s4.fill(element, fromIndex, toIndex);
    }
    function copyOf_0(_this__u8e3s4, newSize) {
     if (!(newSize >= 0)) throw IllegalArgumentException_init_$Create$_0(toString_1("Invalid new array size: " + newSize + "."));
     return function(source, newSize, defaultValue) {
      var result = source.slice(0, newSize);
      void 0 !== source.$type$ && (result.$type$ = source.$type$);
      var index = source.length;
      if (newSize > index) for (result.length = newSize; index < newSize; ) {
       var _unary__edvuaz = index;
       index = _unary__edvuaz + 1 | 0, result[_unary__edvuaz] = defaultValue;
      }
      return result;
     }(_this__u8e3s4, newSize, null);
    }
    function Digit() {
     Digit_instance = this;
     this.k2_1 = new Int32Array([ 48, 1632, 1776, 1984, 2406, 2534, 2662, 2790, 2918, 3046, 3174, 3302, 3430, 3558, 3664, 3792, 3872, 4160, 4240, 6112, 6160, 6470, 6608, 6784, 6800, 6992, 7088, 7232, 7248, 42528, 43216, 43264, 43472, 43504, 43600, 44016, 65296 ]);
    }
    function Digit_getInstance() {
     return null == Digit_instance && new Digit, Digit_instance;
    }
    function Comparator() {}
    function isNaN_0(_this__u8e3s4) {
     return !(_this__u8e3s4 == _this__u8e3s4);
    }
    function countTrailingZeroBits_0(_this__u8e3s4) {
     return 32 - clz32(~(_this__u8e3s4 | -_this__u8e3s4)) | 0;
    }
    function Unit() {}
    function collectionToArray(collection) {
     return function(collection) {
      if (collection.q()) return [];
      var size = collection.k(), destination = Array(size), iterator = collection.h(), index = 0;
      for (;iterator.i(); ) {
       var _unary__edvuaz = index;
       index = _unary__edvuaz + 1 | 0, destination[_unary__edvuaz] = iterator.j();
      }
      return destination;
     }(collection);
    }
    function listOf(element) {
     return 0 === (elements = [ element ]).length ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, !0));
     var elements;
    }
    function mapCapacity(expectedSize) {
     return expectedSize;
    }
    function copyToArray(collection) {
     return void 0 !== collection.toArray ? collection.toArray() : collectionToArray(collection);
    }
    function setOf(element) {
     return function(_this__u8e3s4, destination) {
      for (var inductionVariable = 0, last = _this__u8e3s4.length; inductionVariable < last; ) {
       var item = _this__u8e3s4[inductionVariable];
       inductionVariable = inductionVariable + 1 | 0, destination.e(item);
      }
      return destination;
     }(elements = [ element ], HashSet_init_$Create$_0(elements.length));
     var elements;
    }
    function arrayCopy(source, destination, destinationOffset, startIndex, endIndex) {
     Companion_instance_4.j2(startIndex, endIndex, source.length);
     var rangeSize = endIndex - startIndex | 0;
     if (Companion_instance_4.j2(destinationOffset, destinationOffset + rangeSize | 0, destination.length), 
     isView(destination) && isView(source)) {
      var subrange = source.subarray(startIndex, endIndex);
      destination.set(subrange, destinationOffset);
     } else if (source !== destination || destinationOffset <= startIndex) {
      var inductionVariable = 0;
      if (inductionVariable < rangeSize) do {
       var index = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0, destination[destinationOffset + index | 0] = source[startIndex + index | 0];
      } while (inductionVariable < rangeSize);
     } else {
      var inductionVariable_0 = rangeSize - 1 | 0;
      if (0 <= inductionVariable_0) do {
       var index_0 = inductionVariable_0;
       inductionVariable_0 = inductionVariable_0 + -1 | 0, destination[destinationOffset + index_0 | 0] = source[startIndex + index_0 | 0];
      } while (0 <= inductionVariable_0);
     }
    }
    function checkIndexOverflow(index) {
     return index < 0 && function() {
      throw ArithmeticException_init_$Create$_0("Index overflow has happened.");
     }(), index;
    }
    function AbstractMutableCollection() {
     AbstractCollection.call(this);
    }
    function IteratorImpl($outer) {
     this.p2_1 = $outer, this.n2_1 = 0, this.o2_1 = -1;
    }
    function ListIteratorImpl($outer, index) {
     this.v2_1 = $outer, IteratorImpl.call(this, $outer), Companion_instance_4.w2(index, this.v2_1.k()), 
     this.n2_1 = index;
    }
    function AbstractMutableList() {
     AbstractMutableCollection.call(this), this.q2_1 = 0;
    }
    function AbstractMutableMap() {
     AbstractMap.call(this), this.f3_1 = null, this.g3_1 = null;
    }
    function AbstractMutableSet() {
     AbstractMutableCollection.call(this);
    }
    function arrayOfUninitializedElements(capacity) {
     if (!(capacity >= 0)) {
      throw IllegalArgumentException_init_$Create$_0(toString_1("capacity must be non-negative."));
     }
     return Array(capacity);
    }
    function resetRange(_this__u8e3s4, fromIndex, toIndex) {
     _this__u8e3s4.fill(null, fromIndex, toIndex);
    }
    function copyOfUninitializedElements(_this__u8e3s4, newSize) {
     return copyOf_0(_this__u8e3s4, newSize);
    }
    function resetAt(_this__u8e3s4, index) {
     _this__u8e3s4[index] = null;
    }
    function Companion_1() {
     Companion_instance_1 = this;
     var this_0 = ArrayList_init_$Create$_0(0);
     this_0.n_1 = !0, this.o3_1 = this_0;
    }
    function ArrayList_init_$Create$() {
     return $this = objectCreate(protoOf(ArrayList)), ArrayList.call($this, []), $this;
     var $this;
    }
    function ArrayList_init_$Create$_0(initialCapacity) {
     return function(initialCapacity, $this) {
      if (ArrayList.call($this, []), !(initialCapacity >= 0)) throw IllegalArgumentException_init_$Create$_0(toString_1("Negative initial capacity: " + initialCapacity));
      return $this;
     }(initialCapacity, objectCreate(protoOf(ArrayList)));
    }
    function ArrayList_init_$Create$_1(elements) {
     return function(elements, $this) {
      var tmp$ret$0 = copyToArray(elements);
      return ArrayList.call($this, tmp$ret$0), $this;
     }(elements, objectCreate(protoOf(ArrayList)));
    }
    function rangeCheck($this, index) {
     return Companion_instance_4.p3(index, $this.k()), index;
    }
    function ArrayList(array) {
     null == Companion_instance_1 && new Companion_1, AbstractMutableList.call(this), 
     this.m_1 = array, this.n_1 = !1;
    }
    function mergeSort_0(array, buffer, start, end, comparator) {
     if (start === end) return array;
     var median = (start + end | 0) / 2 | 0, left = mergeSort_0(array, buffer, start, median, comparator), right = mergeSort_0(array, buffer, median + 1 | 0, end, comparator), target = left === buffer ? array : buffer, leftIndex = start, rightIndex = median + 1 | 0, inductionVariable = start;
     if (inductionVariable <= end) do {
      var i = inductionVariable;
      if (inductionVariable = inductionVariable + 1 | 0, leftIndex <= median && rightIndex <= end) {
       var leftValue = left[leftIndex], rightValue = right[rightIndex];
       comparator.compare(leftValue, rightValue) <= 0 ? (target[i] = leftValue, leftIndex = leftIndex + 1 | 0) : (target[i] = rightValue, 
       rightIndex = rightIndex + 1 | 0);
      } else leftIndex <= median ? (target[i] = left[leftIndex], leftIndex = leftIndex + 1 | 0) : (target[i] = right[rightIndex], 
      rightIndex = rightIndex + 1 | 0);
     } while (i !== end);
     return target;
    }
    function sortArray$lambda(a, b) {
     return compareTo(a, b);
    }
    function getStableSortingIsSupported$lambda(a, b) {
     return (3 & a) - (3 & b) | 0;
    }
    function HashMap_init_$Init$(internalMap, $this) {
     return AbstractMutableMap.call($this), HashMap.call($this), $this.w3_1 = internalMap, 
     $this;
    }
    function HashMap_init_$Init$_0($this) {
     return HashMap_init_$Init$(InternalHashMap_init_$Create$(), $this), $this;
    }
    function HashMap_init_$Create$() {
     return HashMap_init_$Init$_0(objectCreate(protoOf(HashMap)));
    }
    function HashMap_init_$Init$_2(initialCapacity, $this) {
     return function(initialCapacity, loadFactor, $this) {
      HashMap_init_$Init$(InternalHashMap_init_$Create$_1(initialCapacity, loadFactor), $this);
     }(initialCapacity, 1, $this), $this;
    }
    function HashMap_init_$Init$_3(original, $this) {
     return HashMap_init_$Init$(function(original) {
      return function(original, $this) {
       return InternalHashMap_init_$Init$_0(original.k(), $this), $this.o1(original), $this;
      }(original, objectCreate(protoOf(InternalHashMap)));
     }(original), $this), $this;
    }
    function HashMap() {
     this.x3_1 = null;
    }
    function HashMapKeys(backing) {
     AbstractMutableSet.call(this), this.z3_1 = backing;
    }
    function HashMapValues(backing) {
     AbstractMutableCollection.call(this), this.c4_1 = backing;
    }
    function HashMapEntrySet(backing) {
     HashMapEntrySetBase.call(this, backing);
    }
    function HashMapEntrySetBase(backing) {
     AbstractMutableSet.call(this), this.i4_1 = backing;
    }
    function HashMapKeysDefault$iterator$1($entryIterator) {
     this.o4_1 = $entryIterator;
    }
    function HashMapKeysDefault(backingMap) {
     AbstractMutableSet.call(this), this.p4_1 = backingMap;
    }
    function HashMapValuesDefault$iterator$1($entryIterator) {
     this.r4_1 = $entryIterator;
    }
    function HashMapValuesDefault(backingMap) {
     AbstractMutableCollection.call(this), this.s4_1 = backingMap;
    }
    function HashSet_init_$Init$(map, $this) {
     return AbstractMutableSet.call($this), HashSet.call($this), $this.t4_1 = map, $this;
    }
    function HashSet_init_$Init$_0($this) {
     return HashSet_init_$Init$(InternalHashMap_init_$Create$(), $this), $this;
    }
    function HashSet_init_$Init$_1(initialCapacity, loadFactor, $this) {
     return HashSet_init_$Init$(InternalHashMap_init_$Create$_1(initialCapacity, loadFactor), $this), 
     $this;
    }
    function HashSet_init_$Create$_0(initialCapacity) {
     return function(initialCapacity, $this) {
      return HashSet_init_$Init$_1(initialCapacity, 1, $this), $this;
     }(initialCapacity, objectCreate(protoOf(HashSet)));
    }
    function HashSet() {}
    function computeHashSize($this, capacity) {
     return 0 === (_this__u8e3s4 = imul(coerceAtLeast(capacity, 1), 3)) ? 0 : 1 << 31 - clz32(_this__u8e3s4);
     var _this__u8e3s4;
    }
    function computeShift($this, hashSize) {
     return clz32(hashSize) + 1 | 0;
    }
    function checkForComodification($this) {
     if ($this.e5_1.b5_1 !== $this.g5_1) throw ConcurrentModificationException_init_$Create$_0("The backing map has been modified after this entry was obtained.");
    }
    function InternalHashMap_init_$Create$() {
     return InternalHashMap_init_$Init$_0(8, $this = objectCreate(protoOf(InternalHashMap))), 
     $this;
     var $this;
    }
    function InternalHashMap_init_$Init$_0(initialCapacity, $this) {
     return InternalHashMap.call($this, arrayOfUninitializedElements(initialCapacity), null, new Int32Array(initialCapacity), new Int32Array(computeHashSize(0, initialCapacity)), 2, 0), 
     $this;
    }
    function InternalHashMap_init_$Create$_1(initialCapacity, loadFactor) {
     return function(initialCapacity, loadFactor, $this) {
      if (InternalHashMap_init_$Init$_0(initialCapacity, $this), !(loadFactor > 0)) throw IllegalArgumentException_init_$Create$_0(toString_1("Non-positive load factor: " + loadFactor));
      return $this;
     }(initialCapacity, loadFactor, objectCreate(protoOf(InternalHashMap)));
    }
    function _get_capacity__a9k9f3($this) {
     return $this.u4_1.length;
    }
    function _get_hashSize__tftcho($this) {
     return $this.x4_1.length;
    }
    function registerModification($this) {
     $this.b5_1 = $this.b5_1 + 1 | 0;
    }
    function ensureExtraCapacity($this, n) {
     !function($this, extraCapacity) {
      var spareCapacity = _get_capacity__a9k9f3($this) - $this.z4_1 | 0, gaps = $this.z4_1 - $this.k() | 0;
      return spareCapacity < extraCapacity && (gaps + spareCapacity | 0) >= extraCapacity && gaps >= (_get_capacity__a9k9f3($this) / 4 | 0);
     }($this, n) ? function($this, minCapacity) {
      if (minCapacity < 0) throw RuntimeException_init_$Create$_0("too many elements");
      if (minCapacity > _get_capacity__a9k9f3($this)) {
       var newSize = Companion_instance_4.h5(_get_capacity__a9k9f3($this), minCapacity);
       $this.u4_1 = copyOfUninitializedElements($this.u4_1, newSize);
       var tmp = $this, tmp0_safe_receiver = $this.v4_1;
       tmp.v4_1 = null == tmp0_safe_receiver ? null : copyOfUninitializedElements(tmp0_safe_receiver, newSize), 
       $this.w4_1 = copyOf($this.w4_1, newSize);
       var newHashSize = computeHashSize(0, newSize);
       newHashSize > _get_hashSize__tftcho($this) && rehash($this, newHashSize);
      }
     }($this, $this.z4_1 + n | 0) : compact($this, !0);
    }
    function allocateValuesArray($this) {
     var curValuesArray = $this.v4_1;
     if (null != curValuesArray) return curValuesArray;
     var newValuesArray = arrayOfUninitializedElements(_get_capacity__a9k9f3($this));
     return $this.v4_1 = newValuesArray, newValuesArray;
    }
    function hash($this, key) {
     return null == key ? 0 : imul(hashCode(key), -1640531527) >>> $this.a5_1 | 0;
    }
    function compact($this, updateHashArray) {
     for (var i = 0, j = 0, valuesArray = $this.v4_1; i < $this.z4_1; ) {
      var hash = $this.w4_1[i];
      hash >= 0 && ($this.u4_1[j] = $this.u4_1[i], null != valuesArray && (valuesArray[j] = valuesArray[i]), 
      updateHashArray && ($this.w4_1[j] = hash, $this.x4_1[hash] = j + 1 | 0), j = j + 1 | 0), 
      i = i + 1 | 0;
     }
     resetRange($this.u4_1, j, $this.z4_1), null == valuesArray || resetRange(valuesArray, j, $this.z4_1), 
     $this.z4_1 = j;
    }
    function rehash($this, newHashSize) {
     registerModification($this), $this.z4_1 > $this.c5_1 && compact($this, !1), $this.x4_1 = new Int32Array(newHashSize), 
     $this.a5_1 = computeShift(0, newHashSize);
     for (var i = 0; i < $this.z4_1; ) {
      var _unary__edvuaz = i;
      if (i = _unary__edvuaz + 1 | 0, !putRehash($this, _unary__edvuaz)) throw IllegalStateException_init_$Create$_0("This cannot happen with fixed magic multiplier and grow-only hash array. Have object hashCodes changed?");
     }
    }
    function putRehash($this, i) {
     for (var hash_0 = hash($this, $this.u4_1[i]), probesLeft = $this.y4_1; ;) {
      if (0 === $this.x4_1[hash_0]) return $this.x4_1[hash_0] = i + 1 | 0, $this.w4_1[i] = hash_0, 
      !0;
      if ((probesLeft = probesLeft - 1 | 0) < 0) return !1;
      var _unary__edvuaz = hash_0;
      hash_0 = _unary__edvuaz - 1 | 0, 0 === _unary__edvuaz && (hash_0 = _get_hashSize__tftcho($this) - 1 | 0);
     }
    }
    function findKey($this, key) {
     for (var hash_0 = hash($this, key), probesLeft = $this.y4_1; ;) {
      var index = $this.x4_1[hash_0];
      if (0 === index) return -1;
      if (index > 0 && equals($this.u4_1[index - 1 | 0], key)) return index - 1 | 0;
      if ((probesLeft = probesLeft - 1 | 0) < 0) return -1;
      var _unary__edvuaz = hash_0;
      hash_0 = _unary__edvuaz - 1 | 0, 0 === _unary__edvuaz && (hash_0 = _get_hashSize__tftcho($this) - 1 | 0);
     }
    }
    function addKey($this, key) {
     $this.b4();
     retry: for (;;) for (var hash_0 = hash($this, key), tentativeMaxProbeDistance = coerceAtMost(imul($this.y4_1, 2), _get_hashSize__tftcho($this) / 2 | 0), probeDistance = 0; ;) {
      var index = $this.x4_1[hash_0];
      if (index <= 0) {
       if ($this.z4_1 >= _get_capacity__a9k9f3($this)) {
        ensureExtraCapacity($this, 1);
        continue retry;
       }
       var _unary__edvuaz = $this.z4_1;
       $this.z4_1 = _unary__edvuaz + 1 | 0;
       var putIndex = _unary__edvuaz;
       return $this.u4_1[putIndex] = key, $this.w4_1[putIndex] = hash_0, $this.x4_1[hash_0] = putIndex + 1 | 0, 
       $this.c5_1 = $this.c5_1 + 1 | 0, registerModification($this), probeDistance > $this.y4_1 && ($this.y4_1 = probeDistance), 
       putIndex;
      }
      if (equals($this.u4_1[index - 1 | 0], key)) return 0 | -index;
      if ((probeDistance = probeDistance + 1 | 0) > tentativeMaxProbeDistance) {
       rehash($this, imul(_get_hashSize__tftcho($this), 2));
       continue retry;
      }
      var _unary__edvuaz_0 = hash_0;
      hash_0 = _unary__edvuaz_0 - 1 | 0, 0 === _unary__edvuaz_0 && (hash_0 = _get_hashSize__tftcho($this) - 1 | 0);
     }
    }
    function removeEntryAt($this, index) {
     resetAt($this.u4_1, index);
     var tmp0_safe_receiver = $this.v4_1;
     null == tmp0_safe_receiver || resetAt(tmp0_safe_receiver, index), function($this, removedHash) {
      var hash_0 = removedHash, hole = removedHash, probeDistance = 0, patchAttemptsLeft = coerceAtMost(imul($this.y4_1, 2), _get_hashSize__tftcho($this) / 2 | 0);
      for (;;) {
       var _unary__edvuaz = hash_0;
       if (hash_0 = _unary__edvuaz - 1 | 0, 0 === _unary__edvuaz && (hash_0 = _get_hashSize__tftcho($this) - 1 | 0), 
       (probeDistance = probeDistance + 1 | 0) > $this.y4_1) return $this.x4_1[hole] = 0, 
       Unit_instance;
       var index = $this.x4_1[hash_0];
       if (0 === index) return $this.x4_1[hole] = 0, Unit_instance;
       if (index < 0) $this.x4_1[hole] = -1, hole = hash_0, probeDistance = 0; else (hash($this, $this.u4_1[index - 1 | 0]) - hash_0 & _get_hashSize__tftcho($this) - 1) >= probeDistance && ($this.x4_1[hole] = index, 
       $this.w4_1[index - 1 | 0] = hole, hole = hash_0, probeDistance = 0);
       if ((patchAttemptsLeft = patchAttemptsLeft - 1 | 0) < 0) return $this.x4_1[hole] = -1, 
       Unit_instance;
      }
     }($this, $this.w4_1[index]), $this.w4_1[index] = -1, $this.c5_1 = $this.c5_1 - 1 | 0, 
     registerModification($this);
    }
    function putEntry($this, entry) {
     var index = addKey($this, entry.f1()), valuesArray = allocateValuesArray($this);
     if (index >= 0) return valuesArray[index] = entry.g1(), !0;
     var oldValue = valuesArray[(0 | -index) - 1 | 0];
     return !equals(entry.g1(), oldValue) && (valuesArray[(0 | -index) - 1 | 0] = entry.g1(), 
     !0);
    }
    function Companion_2() {
     this.i5_1 = -1640531527, this.j5_1 = 8, this.k5_1 = 2, this.l5_1 = -1;
    }
    function Itr(map) {
     this.m5_1 = map, this.n5_1 = 0, this.o5_1 = -1, this.p5_1 = this.m5_1.b5_1, this.q5();
    }
    function KeysItr(map) {
     Itr.call(this, map);
    }
    function ValuesItr(map) {
     Itr.call(this, map);
    }
    function EntriesItr(map) {
     Itr.call(this, map);
    }
    function EntryRef(map, index) {
     this.e5_1 = map, this.f5_1 = index, this.g5_1 = this.e5_1.b5_1;
    }
    function InternalHashMap(keysArray, valuesArray, presenceArray, hashArray, maxProbeDistance, length) {
     this.u4_1 = keysArray, this.v4_1 = valuesArray, this.w4_1 = presenceArray, this.x4_1 = hashArray, 
     this.y4_1 = maxProbeDistance, this.z4_1 = length, this.a5_1 = computeShift(0, _get_hashSize__tftcho(this)), 
     this.b5_1 = 0, this.c5_1 = 0, this.d5_1 = !1;
    }
    function InternalMap() {}
    function LinkedHashMap_init_$Create$() {
     return HashMap_init_$Init$_0($this = objectCreate(protoOf(LinkedHashMap))), LinkedHashMap.call($this), 
     $this;
     var $this;
    }
    function LinkedHashMap() {}
    function LinkedHashSet_init_$Create$() {
     return HashSet_init_$Init$_0($this = objectCreate(protoOf(LinkedHashSet))), LinkedHashSet.call($this), 
     $this;
     var $this;
    }
    function LinkedHashSet_init_$Init$_1(initialCapacity, $this) {
     return function(initialCapacity, loadFactor, $this) {
      HashSet_init_$Init$_1(initialCapacity, loadFactor, $this), LinkedHashSet.call($this);
     }(initialCapacity, 1, $this), $this;
    }
    function LinkedHashSet_init_$Create$_0(initialCapacity) {
     return LinkedHashSet_init_$Init$_1(initialCapacity, objectCreate(protoOf(LinkedHashSet)));
    }
    function LinkedHashSet() {}
    function CoroutineImpl(resultContinuation) {
     InterceptedCoroutine.call(this), this.t6_1 = resultContinuation, this.u6_1 = 0, 
     this.v6_1 = 0, this.w6_1 = null, this.x6_1 = null, this.y6_1 = null;
     var tmp0_safe_receiver = this.t6_1;
     this.z6_1 = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.a7();
    }
    function CompletedContinuation() {}
    function InterceptedCoroutine() {
     this.d7_1 = null;
    }
    function SafeContinuation(delegate, initialResult) {
     this.k7_1 = delegate, this.l7_1 = initialResult;
    }
    function CancellationException() {
     captureStack(this, CancellationException);
    }
    function intercepted(_this__u8e3s4) {
     var tmp0_safe_receiver = _this__u8e3s4 instanceof InterceptedCoroutine ? _this__u8e3s4 : null, tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.g7();
     return null == tmp1_elvis_lhs ? _this__u8e3s4 : tmp1_elvis_lhs;
    }
    function createCoroutineUnintercepted(_this__u8e3s4, receiver, completion) {
     return new createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$1(completion, _this__u8e3s4, receiver, completion);
    }
    function createSimpleCoroutineForSuspendFunction(completion) {
     return new createSimpleCoroutineForSuspendFunction$1(completion);
    }
    function startCoroutineUninterceptedOrReturnNonGeneratorVersion_0(_this__u8e3s4, receiver, param, completion) {
     var wrappedCompletion = completion instanceof InterceptedCoroutine ? completion : createSimpleCoroutineForSuspendFunction(completion);
     return "function" == typeof _this__u8e3s4 ? _this__u8e3s4(receiver, param, wrappedCompletion) : _this__u8e3s4.r7(receiver, param, wrappedCompletion);
    }
    function createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$1($completion, $this_createCoroutineUnintercepted, $receiver, $completion$1) {
     this.a8_1 = $this_createCoroutineUnintercepted, this.b8_1 = $receiver, this.c8_1 = $completion$1, 
     CoroutineImpl.call(this, isInterface($completion, Continuation) ? $completion : THROW_CCE());
    }
    function createSimpleCoroutineForSuspendFunction$1($completion) {
     CoroutineImpl.call(this, isInterface($completion, Continuation) ? $completion : THROW_CCE());
    }
    function EmptyContinuation$$inlined$Continuation$1($context) {
     this.l8_1 = $context;
    }
    function Exception_init_$Init$($this) {
     return extendThrowable($this), Exception.call($this), $this;
    }
    function Exception_init_$Init$_0(message, $this) {
     return extendThrowable($this, message), Exception.call($this), $this;
    }
    function Exception_init_$Create$_0(message) {
     var tmp = Exception_init_$Init$_0(message, objectCreate(protoOf(Exception)));
     return captureStack(tmp, Exception_init_$Create$_0), tmp;
    }
    function Exception_init_$Init$_1(message, cause, $this) {
     return extendThrowable($this, message, cause), Exception.call($this), $this;
    }
    function Exception() {
     captureStack(this, Exception);
    }
    function IllegalArgumentException_init_$Init$($this) {
     return RuntimeException_init_$Init$($this), IllegalArgumentException.call($this), 
     $this;
    }
    function IllegalArgumentException_init_$Init$_0(message, $this) {
     return RuntimeException_init_$Init$_0(message, $this), IllegalArgumentException.call($this), 
     $this;
    }
    function IllegalArgumentException_init_$Create$_0(message) {
     var tmp = IllegalArgumentException_init_$Init$_0(message, objectCreate(protoOf(IllegalArgumentException)));
     return captureStack(tmp, IllegalArgumentException_init_$Create$_0), tmp;
    }
    function IllegalArgumentException() {
     captureStack(this, IllegalArgumentException);
    }
    function IllegalStateException_init_$Init$($this) {
     return RuntimeException_init_$Init$($this), IllegalStateException.call($this), $this;
    }
    function IllegalStateException_init_$Init$_0(message, $this) {
     return RuntimeException_init_$Init$_0(message, $this), IllegalStateException.call($this), 
     $this;
    }
    function IllegalStateException_init_$Create$_0(message) {
     var tmp = IllegalStateException_init_$Init$_0(message, objectCreate(protoOf(IllegalStateException)));
     return captureStack(tmp, IllegalStateException_init_$Create$_0), tmp;
    }
    function IllegalStateException_init_$Init$_1(message, cause, $this) {
     return RuntimeException_init_$Init$_1(message, cause, $this), IllegalStateException.call($this), 
     $this;
    }
    function IllegalStateException() {
     captureStack(this, IllegalStateException);
    }
    function UnsupportedOperationException_init_$Create$() {
     var $this, tmp = (RuntimeException_init_$Init$($this = objectCreate(protoOf(UnsupportedOperationException))), 
     UnsupportedOperationException.call($this), $this);
     return captureStack(tmp, UnsupportedOperationException_init_$Create$), tmp;
    }
    function UnsupportedOperationException_init_$Create$_0(message) {
     var tmp = function(message, $this) {
      return RuntimeException_init_$Init$_0(message, $this), UnsupportedOperationException.call($this), 
      $this;
     }(message, objectCreate(protoOf(UnsupportedOperationException)));
     return captureStack(tmp, UnsupportedOperationException_init_$Create$_0), tmp;
    }
    function UnsupportedOperationException() {
     captureStack(this, UnsupportedOperationException);
    }
    function RuntimeException_init_$Init$($this) {
     return Exception_init_$Init$($this), RuntimeException.call($this), $this;
    }
    function RuntimeException_init_$Init$_0(message, $this) {
     return Exception_init_$Init$_0(message, $this), RuntimeException.call($this), $this;
    }
    function RuntimeException_init_$Create$_0(message) {
     var tmp = RuntimeException_init_$Init$_0(message, objectCreate(protoOf(RuntimeException)));
     return captureStack(tmp, RuntimeException_init_$Create$_0), tmp;
    }
    function RuntimeException_init_$Init$_1(message, cause, $this) {
     return Exception_init_$Init$_1(message, cause, $this), RuntimeException.call($this), 
     $this;
    }
    function RuntimeException() {
     captureStack(this, RuntimeException);
    }
    function NoSuchElementException_init_$Create$() {
     var $this, tmp = (RuntimeException_init_$Init$($this = objectCreate(protoOf(NoSuchElementException))), 
     NoSuchElementException.call($this), $this);
     return captureStack(tmp, NoSuchElementException_init_$Create$), tmp;
    }
    function NoSuchElementException_init_$Create$_0(message) {
     var tmp = function(message, $this) {
      return RuntimeException_init_$Init$_0(message, $this), NoSuchElementException.call($this), 
      $this;
     }(message, objectCreate(protoOf(NoSuchElementException)));
     return captureStack(tmp, NoSuchElementException_init_$Create$_0), tmp;
    }
    function NoSuchElementException() {
     captureStack(this, NoSuchElementException);
    }
    function Error_0() {
     captureStack(this, Error_0);
    }
    function IndexOutOfBoundsException_init_$Create$_0(message) {
     var tmp = function(message, $this) {
      return RuntimeException_init_$Init$_0(message, $this), IndexOutOfBoundsException.call($this), 
      $this;
     }(message, objectCreate(protoOf(IndexOutOfBoundsException)));
     return captureStack(tmp, IndexOutOfBoundsException_init_$Create$_0), tmp;
    }
    function IndexOutOfBoundsException() {
     captureStack(this, IndexOutOfBoundsException);
    }
    function ConcurrentModificationException_init_$Create$() {
     var $this, tmp = (RuntimeException_init_$Init$($this = objectCreate(protoOf(ConcurrentModificationException))), 
     ConcurrentModificationException.call($this), $this);
     return captureStack(tmp, ConcurrentModificationException_init_$Create$), tmp;
    }
    function ConcurrentModificationException_init_$Create$_0(message) {
     var tmp = function(message, $this) {
      return RuntimeException_init_$Init$_0(message, $this), ConcurrentModificationException.call($this), 
      $this;
     }(message, objectCreate(protoOf(ConcurrentModificationException)));
     return captureStack(tmp, ConcurrentModificationException_init_$Create$_0), tmp;
    }
    function ConcurrentModificationException() {
     captureStack(this, ConcurrentModificationException);
    }
    function NumberFormatException_init_$Create$_0(message) {
     var tmp = function(message, $this) {
      return IllegalArgumentException_init_$Init$_0(message, $this), NumberFormatException.call($this), 
      $this;
     }(message, objectCreate(protoOf(NumberFormatException)));
     return captureStack(tmp, NumberFormatException_init_$Create$_0), tmp;
    }
    function NumberFormatException() {
     captureStack(this, NumberFormatException);
    }
    function ArithmeticException_init_$Create$_0(message) {
     var tmp = function(message, $this) {
      return RuntimeException_init_$Init$_0(message, $this), ArithmeticException.call($this), 
      $this;
     }(message, objectCreate(protoOf(ArithmeticException)));
     return captureStack(tmp, ArithmeticException_init_$Create$_0), tmp;
    }
    function ArithmeticException() {
     captureStack(this, ArithmeticException);
    }
    function NullPointerException_init_$Create$() {
     var $this, tmp = (RuntimeException_init_$Init$($this = objectCreate(protoOf(NullPointerException))), 
     NullPointerException.call($this), $this);
     return captureStack(tmp, NullPointerException_init_$Create$), tmp;
    }
    function NullPointerException() {
     captureStack(this, NullPointerException);
    }
    function NoWhenBranchMatchedException_init_$Create$() {
     var $this, tmp = (RuntimeException_init_$Init$($this = objectCreate(protoOf(NoWhenBranchMatchedException))), 
     NoWhenBranchMatchedException.call($this), $this);
     return captureStack(tmp, NoWhenBranchMatchedException_init_$Create$), tmp;
    }
    function NoWhenBranchMatchedException() {
     captureStack(this, NoWhenBranchMatchedException);
    }
    function ClassCastException_init_$Create$() {
     var $this, tmp = (RuntimeException_init_$Init$($this = objectCreate(protoOf(ClassCastException))), 
     ClassCastException.call($this), $this);
     return captureStack(tmp, ClassCastException_init_$Create$), tmp;
    }
    function ClassCastException() {
     captureStack(this, ClassCastException);
    }
    function UninitializedPropertyAccessException_init_$Create$_0(message) {
     var tmp = function(message, $this) {
      return RuntimeException_init_$Init$_0(message, $this), UninitializedPropertyAccessException.call($this), 
      $this;
     }(message, objectCreate(protoOf(UninitializedPropertyAccessException)));
     return captureStack(tmp, UninitializedPropertyAccessException_init_$Create$_0), 
     tmp;
    }
    function UninitializedPropertyAccessException() {
     captureStack(this, UninitializedPropertyAccessException);
    }
    function KClass() {}
    function KClassImpl(jClass) {
     this.o8_1 = jClass;
    }
    function NothingKClassImpl() {
     NothingKClassImpl_instance = this, KClassImpl.call(this, Object), this.r8_1 = "Nothing";
    }
    function NothingKClassImpl_getInstance() {
     return null == NothingKClassImpl_instance && new NothingKClassImpl, NothingKClassImpl_instance;
    }
    function ErrorKClass() {}
    function PrimitiveKClassImpl(jClass, givenSimpleName, isInstanceFunction) {
     KClassImpl.call(this, jClass), this.t8_1 = givenSimpleName, this.u8_1 = isInstanceFunction;
    }
    function SimpleKClassImpl(jClass) {
     KClassImpl.call(this, jClass);
     var tmp0_safe_receiver = jClass.$metadata$;
     this.w8_1 = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.simpleName;
    }
    function KProperty1() {}
    function get_functionClasses() {
     return properties_initialized_primitives_kt_jle18u || (properties_initialized_primitives_kt_jle18u = !0, 
     functionClasses = Array(0)), functionClasses;
    }
    function PrimitiveClasses$anyClass$lambda(it) {
     return !(null == it);
    }
    function PrimitiveClasses$numberClass$lambda(it) {
     return isNumber(it);
    }
    function PrimitiveClasses$booleanClass$lambda(it) {
     return null != it && "boolean" == typeof it;
    }
    function PrimitiveClasses$byteClass$lambda(it) {
     return null != it && "number" == typeof it;
    }
    function PrimitiveClasses$shortClass$lambda(it) {
     return null != it && "number" == typeof it;
    }
    function PrimitiveClasses$intClass$lambda(it) {
     return null != it && "number" == typeof it;
    }
    function PrimitiveClasses$floatClass$lambda(it) {
     return null != it && "number" == typeof it;
    }
    function PrimitiveClasses$doubleClass$lambda(it) {
     return null != it && "number" == typeof it;
    }
    function PrimitiveClasses$arrayClass$lambda(it) {
     return null != it && isArray(it);
    }
    function PrimitiveClasses$stringClass$lambda(it) {
     return null != it && "string" == typeof it;
    }
    function PrimitiveClasses$throwableClass$lambda(it) {
     return it instanceof Error;
    }
    function PrimitiveClasses$booleanArrayClass$lambda(it) {
     return null != it && isBooleanArray(it);
    }
    function PrimitiveClasses$charArrayClass$lambda(it) {
     return null != it && isCharArray(it);
    }
    function PrimitiveClasses$byteArrayClass$lambda(it) {
     return null != it && isByteArray(it);
    }
    function PrimitiveClasses$shortArrayClass$lambda(it) {
     return null != it && isShortArray(it);
    }
    function PrimitiveClasses$intArrayClass$lambda(it) {
     return null != it && isIntArray(it);
    }
    function PrimitiveClasses$longArrayClass$lambda(it) {
     return null != it && isLongArray(it);
    }
    function PrimitiveClasses$floatArrayClass$lambda(it) {
     return null != it && isFloatArray(it);
    }
    function PrimitiveClasses$doubleArrayClass$lambda(it) {
     return null != it && isDoubleArray(it);
    }
    function PrimitiveClasses() {
     PrimitiveClasses_instance = this;
     var tmp_0 = Object;
     this.anyClass = new PrimitiveKClassImpl(tmp_0, "Any", PrimitiveClasses$anyClass$lambda);
     var tmp_2 = Number;
     this.numberClass = new PrimitiveKClassImpl(tmp_2, "Number", PrimitiveClasses$numberClass$lambda), 
     this.nothingClass = NothingKClassImpl_getInstance();
     var tmp_4 = Boolean;
     this.booleanClass = new PrimitiveKClassImpl(tmp_4, "Boolean", PrimitiveClasses$booleanClass$lambda);
     var tmp_6 = Number;
     this.byteClass = new PrimitiveKClassImpl(tmp_6, "Byte", PrimitiveClasses$byteClass$lambda);
     var tmp_8 = Number;
     this.shortClass = new PrimitiveKClassImpl(tmp_8, "Short", PrimitiveClasses$shortClass$lambda);
     var tmp_10 = Number;
     this.intClass = new PrimitiveKClassImpl(tmp_10, "Int", PrimitiveClasses$intClass$lambda);
     var tmp_12 = Number;
     this.floatClass = new PrimitiveKClassImpl(tmp_12, "Float", PrimitiveClasses$floatClass$lambda);
     var tmp_14 = Number;
     this.doubleClass = new PrimitiveKClassImpl(tmp_14, "Double", PrimitiveClasses$doubleClass$lambda);
     var tmp_16 = Array;
     this.arrayClass = new PrimitiveKClassImpl(tmp_16, "Array", PrimitiveClasses$arrayClass$lambda);
     var tmp_18 = String;
     this.stringClass = new PrimitiveKClassImpl(tmp_18, "String", PrimitiveClasses$stringClass$lambda);
     var tmp_20 = Error;
     this.throwableClass = new PrimitiveKClassImpl(tmp_20, "Throwable", PrimitiveClasses$throwableClass$lambda);
     var tmp_22 = Array;
     this.booleanArrayClass = new PrimitiveKClassImpl(tmp_22, "BooleanArray", PrimitiveClasses$booleanArrayClass$lambda);
     var tmp_24 = Uint16Array;
     this.charArrayClass = new PrimitiveKClassImpl(tmp_24, "CharArray", PrimitiveClasses$charArrayClass$lambda);
     var tmp_26 = Int8Array;
     this.byteArrayClass = new PrimitiveKClassImpl(tmp_26, "ByteArray", PrimitiveClasses$byteArrayClass$lambda);
     var tmp_28 = Int16Array;
     this.shortArrayClass = new PrimitiveKClassImpl(tmp_28, "ShortArray", PrimitiveClasses$shortArrayClass$lambda);
     var tmp_30 = Int32Array;
     this.intArrayClass = new PrimitiveKClassImpl(tmp_30, "IntArray", PrimitiveClasses$intArrayClass$lambda);
     var tmp_32 = Array;
     this.longArrayClass = new PrimitiveKClassImpl(tmp_32, "LongArray", PrimitiveClasses$longArrayClass$lambda);
     var tmp_34 = Float32Array;
     this.floatArrayClass = new PrimitiveKClassImpl(tmp_34, "FloatArray", PrimitiveClasses$floatArrayClass$lambda);
     var tmp_36 = Float64Array;
     this.doubleArrayClass = new PrimitiveKClassImpl(tmp_36, "DoubleArray", PrimitiveClasses$doubleArrayClass$lambda);
    }
    function PrimitiveClasses_getInstance() {
     return null == PrimitiveClasses_instance && new PrimitiveClasses, PrimitiveClasses_instance;
    }
    function getKClass(jClass) {
     return Array.isArray(jClass) ? function(jClasses) {
      var tmp;
      switch (jClasses.length) {
      case 1:
       tmp = getKClass1(jClasses[0]);
       break;

      case 0:
       tmp = NothingKClassImpl_getInstance();
       break;

      default:
       tmp = new ErrorKClass;
      }
      return tmp;
     }(jClass) : getKClass1(jClass);
    }
    function getKClass1(jClass) {
     if (jClass === String) return PrimitiveClasses_getInstance().stringClass;
     var tmp, metadata = jClass.$metadata$;
     if (null != metadata) {
      var tmp_0;
      if (null == metadata.$kClass$) {
       var kClass = new SimpleKClassImpl(jClass);
       metadata.$kClass$ = kClass, tmp_0 = kClass;
      } else tmp_0 = metadata.$kClass$;
      tmp = tmp_0;
     } else tmp = new SimpleKClassImpl(jClass);
     return tmp;
    }
    function ConstrainedOnceSequence(sequence) {
     this.r9_1 = sequence;
    }
    function StringBuilder_init_$Create$(capacity) {
     return StringBuilder_init_$Init$_0($this = objectCreate(protoOf(StringBuilder))), 
     $this;
     var $this;
    }
    function StringBuilder_init_$Init$_0($this) {
     return StringBuilder.call($this, ""), $this;
    }
    function StringBuilder_init_$Create$_0() {
     return StringBuilder_init_$Init$_0(objectCreate(protoOf(StringBuilder)));
    }
    function StringBuilder(content) {
     this.g6_1 = content;
    }
    function uppercaseChar(_this__u8e3s4) {
     var uppercase = toString(_this__u8e3s4).toUpperCase();
     return uppercase.length > 1 ? _this__u8e3s4 : charSequenceGet(uppercase, 0);
    }
    function isWhitespace(_this__u8e3s4) {
     return function(_this__u8e3s4) {
      return 9 <= _this__u8e3s4 && _this__u8e3s4 <= 13 || 28 <= _this__u8e3s4 && _this__u8e3s4 <= 32 || 160 === _this__u8e3s4 || _this__u8e3s4 > 4096 && (5760 === _this__u8e3s4 || 8192 <= _this__u8e3s4 && _this__u8e3s4 <= 8202 || 8232 === _this__u8e3s4 || 8233 === _this__u8e3s4 || 8239 === _this__u8e3s4 || 8287 === _this__u8e3s4 || 12288 === _this__u8e3s4);
     }(_this__u8e3s4);
    }
    function digitOf(char, radix) {
     var ch, index, diff, it = Char__compareTo_impl_ypi4mb(char, 48) >= 0 && Char__compareTo_impl_ypi4mb(char, 57) <= 0 ? Char__minus_impl_a2frrh(char, 48) : Char__compareTo_impl_ypi4mb(char, 65) >= 0 && Char__compareTo_impl_ypi4mb(char, 90) <= 0 ? Char__minus_impl_a2frrh(char, 65) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, 97) >= 0 && Char__compareTo_impl_ypi4mb(char, 122) <= 0 ? Char__minus_impl_a2frrh(char, 97) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, 128) < 0 ? -1 : Char__compareTo_impl_ypi4mb(char, 65313) >= 0 && Char__compareTo_impl_ypi4mb(char, 65338) <= 0 ? Char__minus_impl_a2frrh(char, 65313) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, 65345) >= 0 && Char__compareTo_impl_ypi4mb(char, 65370) <= 0 ? Char__minus_impl_a2frrh(char, 65345) + 10 | 0 : (ch = char, 
     index = function(array, needle) {
      for (var bottom = 0, top = array.length - 1 | 0, middle = -1, value = 0; bottom <= top; ) if (needle > (value = array[middle = (bottom + top | 0) / 2 | 0])) bottom = middle + 1 | 0; else {
       if (needle === value) return middle;
       top = middle - 1 | 0;
      }
      return middle - (needle < value ? 1 : 0) | 0;
     }(Digit_getInstance().k2_1, ch), (diff = ch - Digit_getInstance().k2_1[index] | 0) < 10 ? diff : -1);
     return it >= radix ? -1 : it;
    }
    function initMatchesEntirePattern($this) {
     var tmp, _this__u8e3s4, char, ignoreCase, tmp0_elvis_lhs = $this.da_1;
     if (null == tmp0_elvis_lhs) {
      if (_this__u8e3s4 = $this.z9_1, char = 94, ignoreCase = ignoreCase !== VOID && ignoreCase, 
      !(charSequenceLength(_this__u8e3s4) > 0 && equals_0(charSequenceGet(_this__u8e3s4, 0), char, ignoreCase) && function(_this__u8e3s4, char, ignoreCase) {
       return ignoreCase = ignoreCase !== VOID && ignoreCase, charSequenceLength(_this__u8e3s4) > 0 && equals_0(charSequenceGet(_this__u8e3s4, get_lastIndex_3(_this__u8e3s4)), char, ignoreCase);
      }($this.z9_1, 36))) return new RegExp("^" + trimEnd(trimStart($this.z9_1, charArrayOf([ 94 ])), charArrayOf([ 36 ])) + "$", toFlags($this.aa_1, "gu"));
      var this_0 = $this.ba_1;
      $this.da_1 = this_0, tmp = this_0;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }
    function Companion_3() {
     Companion_instance_3 = this, this.ea_1 = new RegExp("[\\\\^$*+?.()|[\\]{}]", "g"), 
     this.fa_1 = new RegExp("[\\\\$]", "g"), this.ga_1 = new RegExp("\\$", "g");
    }
    function Companion_getInstance_3() {
     return null == Companion_instance_3 && new Companion_3, Companion_instance_3;
    }
    function Regex$findAll$lambda_0(match) {
     return match.j();
    }
    function Regex(pattern, options) {
     Companion_getInstance_3(), this.z9_1 = pattern, this.aa_1 = toSet(options), this.ba_1 = new RegExp(pattern, toFlags(options, "gu")), 
     this.ca_1 = null, this.da_1 = null;
    }
    function toFlags(_this__u8e3s4, prepend) {
     return joinToString_0(_this__u8e3s4, "", prepend, VOID, VOID, VOID, toFlags$lambda);
    }
    function findNext(_this__u8e3s4, input, from, nextPattern) {
     _this__u8e3s4.lastIndex = from;
     var match = _this__u8e3s4.exec(input);
     return null == match ? null : new findNext$1(numberRangeToNumber(match.index, _this__u8e3s4.lastIndex - 1 | 0), match, nextPattern, input);
    }
    function MatchGroup(value) {
     this.ua_1 = value;
    }
    function toFlags$lambda(it) {
     return it.xa_1;
    }
    function findNext$1$groups$1($match, this$0) {
     this.ya_1 = $match, this.za_1 = this$0, AbstractCollection.call(this);
    }
    function findNext$1$groupValues$1($match) {
     this.hb_1 = $match, AbstractList.call(this);
    }
    function findNext$1($range, $match, $nextPattern, $input) {
     this.db_1 = $range, this.eb_1 = $match, this.fb_1 = $nextPattern, this.gb_1 = $input, 
     this.ab_1 = $range;
     this.bb_1 = new findNext$1$groups$1($match, this), this.cb_1 = null;
    }
    function startsWith(_this__u8e3s4, prefix, ignoreCase) {
     return (ignoreCase = ignoreCase !== VOID && ignoreCase) ? regionMatches(_this__u8e3s4, 0, prefix, 0, prefix.length, ignoreCase) : _this__u8e3s4.startsWith(prefix, 0);
    }
    function regionMatches(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
     return regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase = ignoreCase !== VOID && ignoreCase);
    }
    function endsWith(_this__u8e3s4, suffix, ignoreCase) {
     return (ignoreCase = ignoreCase !== VOID && ignoreCase) ? regionMatches(_this__u8e3s4, _this__u8e3s4.length - suffix.length | 0, suffix, 0, suffix.length, ignoreCase) : _this__u8e3s4.endsWith(suffix);
    }
    function stackTraceToString(_this__u8e3s4) {
     return (new ExceptionTraceBuilder).nb(_this__u8e3s4);
    }
    function dumpFullTrace($this, _this__u8e3s4, indent, qualifier) {
     if (!dumpSelfTrace($this, _this__u8e3s4, indent, qualifier)) return Unit_instance;
     for (var cause = _this__u8e3s4.cause; null != cause; ) {
      if (!dumpSelfTrace($this, cause, indent, "Caused by: ")) return Unit_instance;
      cause = cause.cause;
     }
    }
    function dumpSelfTrace($this, _this__u8e3s4, indent, qualifier) {
     $this.jb_1.i6(indent).i6(qualifier);
     var shortInfo = _this__u8e3s4.toString();
     if (function($this, exception) {
      var tmp$ret$1, tmp0 = $this.kb_1;
      $l$block: {
       for (var inductionVariable = 0, last = tmp0.length; inductionVariable < last; ) {
        var element = tmp0[inductionVariable];
        if (inductionVariable = inductionVariable + 1 | 0, element === exception) {
         tmp$ret$1 = !0;
         break $l$block;
        }
       }
       tmp$ret$1 = !1;
      }
      return tmp$ret$1;
     }($this, _this__u8e3s4)) return $this.jb_1.i6("[CIRCULAR REFERENCE, SEE ABOVE: ").i6(shortInfo).i6("]\n"), 
     !1;
     $this.kb_1.push(_this__u8e3s4);
     var tmp = _this__u8e3s4.stack, stack = null == tmp || "string" == typeof tmp ? tmp : THROW_CCE();
     if (null != stack) {
      var it = indexOf_2(stack, shortInfo), stackStart = it < 0 ? 0 : it + shortInfo.length | 0;
      if (0 === stackStart && $this.jb_1.i6(shortInfo).i6("\n"), 0 === charSequenceLength($this.lb_1) ? ($this.lb_1 = stack, 
      $this.mb_1 = stackStart) : stack = function($this, stack, stackStart) {
       var commonFrames = 0, lastBreak = 0, preLastBreak = 0, inductionVariable = 0, tmp0 = $this.lb_1.length - $this.mb_1 | 0, b = stack.length - stackStart | 0, last = Math.min(tmp0, b);
       if (inductionVariable < last) $l$loop: do {
        var pos = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var c = charSequenceGet(stack, get_lastIndex_3(stack) - pos | 0);
        if (c !== charSequenceGet($this.lb_1, get_lastIndex_3($this.lb_1) - pos | 0)) break $l$loop;
        10 === c && (commonFrames = commonFrames + 1 | 0, preLastBreak = lastBreak, lastBreak = pos);
       } while (inductionVariable < last);
       if (commonFrames <= 1) return stack;
       for (;preLastBreak > 0 && 32 === charSequenceGet(stack, get_lastIndex_3(stack) - (preLastBreak - 1 | 0) | 0); ) preLastBreak = preLastBreak - 1 | 0;
       return dropLast(stack, preLastBreak) + "... and " + (commonFrames - 1 | 0) + " more common stack frames skipped";
      }($this, stack, stackStart), charSequenceLength(indent) > 0) {
       var tmp_0;
       if (0 === stackStart) tmp_0 = 0; else {
        for (var count = 0, inductionVariable = 0; inductionVariable < charSequenceLength(shortInfo); ) {
         var element = charSequenceGet(shortInfo, inductionVariable);
         inductionVariable = inductionVariable + 1 | 0, 10 === element && (count = count + 1 | 0);
        }
        tmp_0 = 1 + count | 0;
       }
       for (var messageLines = tmp_0, index = 0, _iterator__ex2g4s = lineSequence(stack).h(); _iterator__ex2g4s.i(); ) {
        var item = _iterator__ex2g4s.j(), _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0, checkIndexOverflow(_unary__edvuaz) >= messageLines && $this.jb_1.i6(indent), 
        $this.jb_1.i6(item).i6("\n");
       }
      } else $this.jb_1.i6(stack).i6("\n");
     } else $this.jb_1.i6(shortInfo).i6("\n");
     var suppressed = function(_this__u8e3s4) {
      var tmp, tmp0_safe_receiver = _this__u8e3s4._suppressed;
      tmp = null == tmp0_safe_receiver ? null : tmp0_safe_receiver;
      var tmp1_elvis_lhs = tmp;
      return null == tmp1_elvis_lhs ? emptyList() : tmp1_elvis_lhs;
     }(_this__u8e3s4);
     if (!suppressed.q()) for (var suppressedIndent = indent + "    ", _iterator__ex2g4s_0 = suppressed.h(); _iterator__ex2g4s_0.i(); ) {
      dumpFullTrace($this, _iterator__ex2g4s_0.j(), suppressedIndent, "Suppressed: ");
     }
     return !0;
    }
    function ExceptionTraceBuilder() {
     this.jb_1 = StringBuilder_init_$Create$_0();
     this.kb_1 = [], this.lb_1 = "", this.mb_1 = 0;
    }
    function AbstractCollection() {}
    function IteratorImpl_0($outer) {
     this.pb_1 = $outer, this.ob_1 = 0;
    }
    function Companion_4() {
     this.i2_1 = 2147483639;
    }
    function AbstractList() {
     AbstractCollection.call(this);
    }
    function AbstractMap$keys$1$iterator$1($entryIterator) {
     this.qb_1 = $entryIterator;
    }
    function AbstractMap$values$1$iterator$1($entryIterator) {
     this.rb_1 = $entryIterator;
    }
    function toString_3($this, o) {
     return o === $this ? "(this Map)" : toString_0(o);
    }
    function implFindEntry($this, key) {
     var tmp$ret$1;
     $l$block: {
      for (var _iterator__ex2g4s = $this.m1().h(); _iterator__ex2g4s.i(); ) {
       var element = _iterator__ex2g4s.j();
       if (equals(element.f1(), key)) {
        tmp$ret$1 = element;
        break $l$block;
       }
      }
      tmp$ret$1 = null;
     }
     return tmp$ret$1;
    }
    function Companion_5() {}
    function AbstractMap$keys$1(this$0) {
     this.sb_1 = this$0, AbstractSet.call(this);
    }
    function AbstractMap$toString$lambda(this$0) {
     return function(it) {
      return toString_3($this = this$0, (entry = it).f1()) + "=" + toString_3($this, entry.g1());
      var $this, entry;
     };
    }
    function AbstractMap$values$1(this$0) {
     this.tb_1 = this$0, AbstractCollection.call(this);
    }
    function AbstractMap() {
     this.j3_1 = null, this.k3_1 = null;
    }
    function Companion_6() {}
    function AbstractSet() {
     AbstractCollection.call(this);
    }
    function ArrayDeque_init_$Create$() {
     return $this = objectCreate(protoOf(ArrayDeque)), AbstractMutableList.call($this), 
     ArrayDeque.call($this), $this.wb_1 = Companion_getInstance_7().yb_1, $this;
     var $this;
    }
    function ensureCapacity_0($this, minCapacity) {
     if (minCapacity < 0) throw IllegalStateException_init_$Create$_0("Deque is too big.");
     if (minCapacity <= $this.wb_1.length) return Unit_instance;
     if ($this.wb_1 === Companion_getInstance_7().yb_1) {
      var tmp = $this, size = coerceAtLeast(minCapacity, 10);
      return tmp.wb_1 = Array(size), Unit_instance;
     }
     !function($this, newCapacity) {
      var newElements = Array(newCapacity), tmp1 = $this.wb_1, tmp4 = $this.vb_1, endIndex = $this.wb_1.length;
      arrayCopy(tmp1, newElements, 0, tmp4, endIndex);
      var tmp6 = $this.wb_1, tmp8 = $this.wb_1.length - $this.vb_1 | 0, endIndex_0 = $this.vb_1;
      arrayCopy(tmp6, newElements, tmp8, 0, endIndex_0), $this.vb_1 = 0, $this.wb_1 = newElements;
     }($this, Companion_instance_4.h5($this.wb_1.length, minCapacity));
    }
    function positiveMod($this, index) {
     return index >= $this.wb_1.length ? index - $this.wb_1.length | 0 : index;
    }
    function negativeMod($this, index) {
     return index < 0 ? index + $this.wb_1.length | 0 : index;
    }
    function incremented($this, index) {
     return index === get_lastIndex($this.wb_1) ? 0 : index + 1 | 0;
    }
    function decremented($this, index) {
     return 0 === index ? get_lastIndex($this.wb_1) : index - 1 | 0;
    }
    function nullifyNonEmpty($this, internalFromIndex, internalToIndex) {
     internalFromIndex < internalToIndex ? fill($this.wb_1, null, internalFromIndex, internalToIndex) : (fill($this.wb_1, null, internalFromIndex, $this.wb_1.length), 
     fill($this.wb_1, null, 0, internalToIndex));
    }
    function registerModification_0($this) {
     $this.q2_1 = $this.q2_1 + 1 | 0;
    }
    function Companion_7() {
     Companion_instance_7 = this;
     this.yb_1 = [], this.zb_1 = 10;
    }
    function Companion_getInstance_7() {
     return null == Companion_instance_7 && new Companion_7, Companion_instance_7;
    }
    function ArrayDeque() {
     Companion_getInstance_7(), this.vb_1 = 0, this.xb_1 = 0;
    }
    function emptyList() {
     return EmptyList_getInstance();
    }
    function get_lastIndex_2(_this__u8e3s4) {
     return _this__u8e3s4.k() - 1 | 0;
    }
    function EmptyList() {
     EmptyList_instance = this, this.gc_1 = new Long(-1478467534, -1720727600);
    }
    function EmptyList_getInstance() {
     return null == EmptyList_instance && new EmptyList, EmptyList_instance;
    }
    function ArrayAsCollection(values, isVarargs) {
     this.hc_1 = values, this.ic_1 = isVarargs;
    }
    function EmptyIterator() {}
    function IndexedValue(index, value) {
     this.jc_1 = index, this.kc_1 = value;
    }
    function collectionSizeOrDefault(_this__u8e3s4, default_0) {
     return isInterface(_this__u8e3s4, Collection) ? _this__u8e3s4.k() : default_0;
    }
    function IndexingIterable(iteratorFactory) {
     this.nc_1 = iteratorFactory;
    }
    function IndexingIterator(iterator) {
     this.oc_1 = iterator, this.pc_1 = 0;
    }
    function MapWithDefault() {}
    function EmptyMap() {
     EmptyMap_instance = this, this.rc_1 = new Long(-888910638, 1920087921);
    }
    function addAll(_this__u8e3s4, elements) {
     if (isInterface(elements, Collection)) return _this__u8e3s4.o(elements);
     for (var result = !1, _iterator__ex2g4s = elements.h(); _iterator__ex2g4s.i(); ) {
      var item = _iterator__ex2g4s.j();
      _this__u8e3s4.e(item) && (result = !0);
     }
     return result;
    }
    function IntIterator() {}
    function calcNext($this) {
     $this.vc_1 = -2 === $this.wc_1 ? $this.xc_1.yc_1() : $this.xc_1.zc_1(ensureNotNull($this.vc_1)), 
     $this.wc_1 = null == $this.vc_1 ? 0 : 1;
    }
    function GeneratorSequence$iterator$1(this$0) {
     this.xc_1 = this$0, this.vc_1 = null, this.wc_1 = -2;
    }
    function GeneratorSequence(getInitialValue, getNextValue) {
     this.yc_1 = getInitialValue, this.zc_1 = getNextValue;
    }
    function emptySequence() {
     return EmptySequence_instance;
    }
    function DropTakeSequence() {}
    function TakeSequence$iterator$1(this$0) {
     this.ad_1 = this$0.dd_1, this.bd_1 = this$0.cd_1.h();
    }
    function TakeSequence(sequence, count) {
     if (this.cd_1 = sequence, this.dd_1 = count, !(this.dd_1 >= 0)) throw IllegalArgumentException_init_$Create$_0(toString_1("count must be non-negative, but was " + this.dd_1 + "."));
    }
    function TransformingSequence$iterator$1(this$0) {
     this.fd_1 = this$0, this.ed_1 = this$0.gd_1.h();
    }
    function TransformingSequence(sequence, transformer) {
     this.gd_1 = sequence, this.hd_1 = transformer;
    }
    function EmptySequence() {}
    function emptySet() {
     return EmptySet_getInstance();
    }
    function EmptySet() {
     EmptySet_instance = this, this.id_1 = new Long(1993859828, 793161749);
    }
    function EmptySet_getInstance() {
     return null == EmptySet_instance && new EmptySet, EmptySet_instance;
    }
    function NaturalOrderComparator() {}
    function Continuation() {}
    function Key() {}
    function ContinuationInterceptor() {}
    function Element() {}
    function CoroutineContext$plus$lambda(acc, element) {
     var tmp, removed = acc.qd(element.f1());
     if (removed === EmptyCoroutineContext_getInstance()) tmp = element; else {
      var tmp_0, interceptor = removed.h7(Key_instance);
      if (null == interceptor) tmp_0 = new CombinedContext(removed, element); else {
       var left = removed.qd(Key_instance);
       tmp_0 = left === EmptyCoroutineContext_getInstance() ? new CombinedContext(element, interceptor) : new CombinedContext(new CombinedContext(left, element), interceptor);
      }
      tmp = tmp_0;
     }
     return tmp;
    }
    function CoroutineContext() {}
    function EmptyCoroutineContext() {
     EmptyCoroutineContext_instance = this, this.td_1 = new Long(0, 0);
    }
    function EmptyCoroutineContext_getInstance() {
     return null == EmptyCoroutineContext_instance && new EmptyCoroutineContext, EmptyCoroutineContext_instance;
    }
    function size($this) {
     for (var cur = $this, size = 2; ;) {
      var tmp = cur.ud_1, tmp0_elvis_lhs = tmp instanceof CombinedContext ? tmp : null;
      if (null == tmp0_elvis_lhs) return size;
      cur = tmp0_elvis_lhs, size = size + 1 | 0;
     }
    }
    function contains_2($this, element) {
     return equals($this.h7(element.f1()), element);
    }
    function CombinedContext$toString$lambda(acc, element) {
     return 0 === charSequenceLength(acc) ? toString_1(element) : acc + ", " + toString_1(element);
    }
    function CombinedContext(left, element) {
     this.ud_1 = left, this.vd_1 = element;
    }
    function AbstractCoroutineContextKey(baseKey, safeCast) {
     this.md_1 = safeCast;
     var tmp_0;
     tmp_0 = baseKey instanceof AbstractCoroutineContextKey ? baseKey.nd_1 : baseKey, 
     this.nd_1 = tmp_0;
    }
    function AbstractCoroutineContextElement(key) {
     this.wd_1 = key;
    }
    function get_COROUTINE_SUSPENDED() {
     return CoroutineSingletons_initEntries(), CoroutineSingletons_COROUTINE_SUSPENDED_instance;
    }
    function CoroutineSingletons_initEntries() {
     if (CoroutineSingletons_entriesInitialized) return Unit_instance;
     CoroutineSingletons_entriesInitialized = !0, CoroutineSingletons_COROUTINE_SUSPENDED_instance = new CoroutineSingletons("COROUTINE_SUSPENDED", 0), 
     CoroutineSingletons_UNDECIDED_instance = new CoroutineSingletons("UNDECIDED", 1), 
     CoroutineSingletons_RESUMED_instance = new CoroutineSingletons("RESUMED", 2);
    }
    function CoroutineSingletons(name, ordinal) {
     Enum.call(this, name, ordinal);
    }
    function CoroutineSingletons_UNDECIDED_getInstance() {
     return CoroutineSingletons_initEntries(), CoroutineSingletons_UNDECIDED_instance;
    }
    function CoroutineSingletons_RESUMED_getInstance() {
     return CoroutineSingletons_initEntries(), CoroutineSingletons_RESUMED_instance;
    }
    function EnumEntriesList(entries) {
     AbstractList.call(this), this.xd_1 = entries;
    }
    function differenceModulo(a, b, c) {
     return mod(mod(a, c) - mod(b, c) | 0, c);
    }
    function mod(a, b) {
     var mod = a % b | 0;
     return mod >= 0 ? mod : mod + b | 0;
    }
    function Companion_8() {
     Companion_instance_8 = this, this.s_1 = new IntRange(1, 0);
    }
    function Companion_getInstance_8() {
     return null == Companion_instance_8 && new Companion_8, Companion_instance_8;
    }
    function IntRange(start, endInclusive) {
     Companion_getInstance_8(), IntProgression.call(this, start, endInclusive, 1);
    }
    function IntProgressionIterator(first, last, step) {
     IntIterator.call(this), this.ae_1 = step, this.be_1 = last, this.ce_1 = this.ae_1 > 0 ? first <= last : first >= last, 
     this.de_1 = this.ce_1 ? first : this.be_1;
    }
    function Companion_9() {}
    function IntProgression(start, endInclusive, step) {
     if (0 === step) throw IllegalArgumentException_init_$Create$_0("Step must be non-zero.");
     if (-2147483648 === step) throw IllegalArgumentException_init_$Create$_0("Step must be greater than Int.MIN_VALUE to avoid overflow on negation.");
     this.u_1 = start, this.v_1 = function(start, end, step) {
      var tmp;
      if (step > 0) tmp = start >= end ? end : end - differenceModulo(end, start, step) | 0; else {
       if (!(step < 0)) throw IllegalArgumentException_init_$Create$_0("Step is zero.");
       tmp = start <= end ? end : end + differenceModulo(start, end, 0 | -step) | 0;
      }
      return tmp;
     }(start, endInclusive, step), this.w_1 = step;
    }
    function ClosedRange() {}
    function appendElement(_this__u8e3s4, element, transform) {
     null != transform ? _this__u8e3s4.f(transform(element)) : null == element || isCharSequence(element) ? _this__u8e3s4.f(element) : element instanceof Char ? _this__u8e3s4.j6(element.ee_1) : _this__u8e3s4.f(toString_1(element));
    }
    function equals_0(_this__u8e3s4, other, ignoreCase) {
     if (_this__u8e3s4 === other) return !0;
     if (!(ignoreCase = ignoreCase !== VOID && ignoreCase)) return !1;
     var tmp, thisUpper = uppercaseChar(_this__u8e3s4), otherUpper = uppercaseChar(other);
     thisUpper === otherUpper ? tmp = !0 : tmp = charSequenceGet(toString(thisUpper).toLowerCase(), 0) === charSequenceGet(toString(otherUpper).toLowerCase(), 0);
     return tmp;
    }
    function indentWidth(_this__u8e3s4) {
     var tmp$ret$1;
     $l$block: {
      var inductionVariable = 0, last = charSequenceLength(_this__u8e3s4) - 1 | 0;
      if (inductionVariable <= last) do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + 1 | 0, !isWhitespace(charSequenceGet(_this__u8e3s4, index))) {
        tmp$ret$1 = index;
        break $l$block;
       }
      } while (inductionVariable <= last);
      tmp$ret$1 = -1;
     }
     var it_0 = tmp$ret$1;
     return -1 === it_0 ? _this__u8e3s4.length : it_0;
    }
    function getIndentFunction$lambda(line) {
     return line;
    }
    function toIntOrNull(_this__u8e3s4) {
     return toIntOrNull_0(_this__u8e3s4, 10);
    }
    function toIntOrNull_0(_this__u8e3s4, radix) {
     !function(radix) {
      if (!(2 <= radix && radix <= 36)) throw IllegalArgumentException_init_$Create$_0("radix " + radix + " was not in valid range 2..36");
     }(radix);
     var start, isNegative, limit, length = _this__u8e3s4.length;
     if (0 === length) return null;
     var firstChar = charSequenceGet(_this__u8e3s4, 0);
     if (Char__compareTo_impl_ypi4mb(firstChar, 48) < 0) {
      if (1 === length) return null;
      if (start = 1, 45 === firstChar) isNegative = !0, limit = -2147483648; else {
       if (43 !== firstChar) return null;
       isNegative = !1, limit = -2147483647;
      }
     } else start = 0, isNegative = !1, limit = -2147483647;
     var limitBeforeMul = -59652323, result = 0, inductionVariable = start;
     if (inductionVariable < length) do {
      var i = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0;
      var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
      if (digit < 0) return null;
      if (result < limitBeforeMul) {
       if (-59652323 !== limitBeforeMul) return null;
       if (result < (limitBeforeMul = limit / radix | 0)) return null;
      }
      if ((result = imul(result, radix)) < (limit + digit | 0)) return null;
      result = result - digit | 0;
     } while (inductionVariable < length);
     return isNegative ? result : 0 | -result;
    }
    function numberFormatError(input) {
     throw NumberFormatException_init_$Create$_0("Invalid number format: '" + input + "'");
    }
    function trimEnd(_this__u8e3s4, chars) {
     var tmp$ret$1, tmp0 = isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE();
     $l$block: {
      var inductionVariable = charSequenceLength(tmp0) - 1 | 0;
      if (0 <= inductionVariable) do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + -1 | 0, !contains_0(chars, charSequenceGet(tmp0, index))) {
        tmp$ret$1 = charSequenceSubSequence(tmp0, 0, index + 1 | 0);
        break $l$block;
       }
      } while (0 <= inductionVariable);
      tmp$ret$1 = "";
     }
     return toString_1(tmp$ret$1);
    }
    function get_lastIndex_3(_this__u8e3s4) {
     return charSequenceLength(_this__u8e3s4) - 1 | 0;
    }
    function isBlank(_this__u8e3s4) {
     var tmp$ret$1;
     $l$block: {
      for (var inductionVariable = 0; inductionVariable < charSequenceLength(_this__u8e3s4); ) {
       var element = charSequenceGet(_this__u8e3s4, inductionVariable);
       if (inductionVariable = inductionVariable + 1 | 0, !isWhitespace(element)) {
        tmp$ret$1 = !1;
        break $l$block;
       }
      }
      tmp$ret$1 = !0;
     }
     return tmp$ret$1;
    }
    function trimStart(_this__u8e3s4, chars) {
     var tmp$ret$1, tmp0 = isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE();
     $l$block: {
      var inductionVariable = 0, last = charSequenceLength(tmp0) - 1 | 0;
      if (inductionVariable <= last) do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + 1 | 0, !contains_0(chars, charSequenceGet(tmp0, index))) {
        tmp$ret$1 = charSequenceSubSequence(tmp0, index, charSequenceLength(tmp0));
        break $l$block;
       }
      } while (inductionVariable <= last);
      tmp$ret$1 = "";
     }
     return toString_1(tmp$ret$1);
    }
    function indexOf_1(_this__u8e3s4, char, startIndex, ignoreCase) {
     var tmp;
     if (startIndex = startIndex === VOID ? 0 : startIndex, !!(ignoreCase = ignoreCase !== VOID && ignoreCase) || !("string" == typeof _this__u8e3s4)) {
      tmp = function(_this__u8e3s4, chars, startIndex, ignoreCase) {
       var tmp;
       startIndex = startIndex === VOID ? 0 : startIndex, ignoreCase = ignoreCase !== VOID && ignoreCase, 
       tmp = !ignoreCase && 1 === chars.length && "string" == typeof _this__u8e3s4;
       if (tmp) {
        var str = toString(single(chars));
        return _this__u8e3s4.indexOf(str, startIndex);
       }
       var inductionVariable = coerceAtLeast(startIndex, 0), last = get_lastIndex_3(_this__u8e3s4);
       if (inductionVariable <= last) do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp$ret$4, charAtIndex = charSequenceGet(_this__u8e3s4, index);
        $l$block: {
         for (var inductionVariable_0 = 0, last_0 = chars.length; inductionVariable_0 < last_0; ) {
          var element = chars[inductionVariable_0];
          if (inductionVariable_0 = inductionVariable_0 + 1 | 0, equals_0(element, charAtIndex, ignoreCase)) {
           tmp$ret$4 = !0;
           break $l$block;
          }
         }
         tmp$ret$4 = !1;
        }
        if (tmp$ret$4) return index;
       } while (index !== last);
       return -1;
      }(_this__u8e3s4, charArrayOf([ char ]), startIndex, ignoreCase);
     } else {
      var str = toString(char);
      tmp = _this__u8e3s4.indexOf(str, startIndex);
     }
     return tmp;
    }
    function indexOf_2(_this__u8e3s4, string, startIndex, ignoreCase) {
     return startIndex = startIndex === VOID ? 0 : startIndex, !!(ignoreCase = ignoreCase !== VOID && ignoreCase) || !("string" == typeof _this__u8e3s4) ? indexOf_3(_this__u8e3s4, string, startIndex, charSequenceLength(_this__u8e3s4), ignoreCase) : _this__u8e3s4.indexOf(string, startIndex);
    }
    function indexOf_3(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last) {
     var indices = (last = last !== VOID && last) ? function(_this__u8e3s4, to) {
      return Companion_instance_9.t(_this__u8e3s4, to, -1);
     }(coerceAtMost(startIndex, get_lastIndex_3(_this__u8e3s4)), coerceAtLeast(endIndex, 0)) : numberRangeToNumber(coerceAtLeast(startIndex, 0), coerceAtMost(endIndex, charSequenceLength(_this__u8e3s4)));
     if ("string" == typeof _this__u8e3s4 && "string" == typeof other) {
      var inductionVariable = indices.u_1, last_0 = indices.v_1, step = indices.w_1;
      if (step > 0 && inductionVariable <= last_0 || step < 0 && last_0 <= inductionVariable) do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + step | 0, regionMatches(other, 0, _this__u8e3s4, index, other.length, ignoreCase)) return index;
      } while (index !== last_0);
     } else {
      var inductionVariable_0 = indices.u_1, last_1 = indices.v_1, step_0 = indices.w_1;
      if (step_0 > 0 && inductionVariable_0 <= last_1 || step_0 < 0 && last_1 <= inductionVariable_0) do {
       var index_0 = inductionVariable_0;
       if (inductionVariable_0 = inductionVariable_0 + step_0 | 0, regionMatchesImpl(other, 0, _this__u8e3s4, index_0, charSequenceLength(other), ignoreCase)) return index_0;
      } while (index_0 !== last_1);
     }
     return -1;
    }
    function lineSequence(_this__u8e3s4) {
     return new lineSequence$$inlined$Sequence$1(_this__u8e3s4);
    }
    function regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
     if (otherOffset < 0 || thisOffset < 0 || thisOffset > (charSequenceLength(_this__u8e3s4) - length | 0) || otherOffset > (charSequenceLength(other) - length | 0)) return !1;
     var inductionVariable = 0;
     if (inductionVariable < length) do {
      var index = inductionVariable;
      if (inductionVariable = inductionVariable + 1 | 0, !equals_0(charSequenceGet(_this__u8e3s4, thisOffset + index | 0), charSequenceGet(other, otherOffset + index | 0), ignoreCase)) return !1;
     } while (inductionVariable < length);
     return !0;
    }
    function State() {
     this.fe_1 = 0, this.ge_1 = 1, this.he_1 = 2;
    }
    function LinesIterator(string) {
     this.ie_1 = string, this.je_1 = 0, this.ke_1 = 0, this.le_1 = 0, this.me_1 = 0;
    }
    function lastIndexOf(_this__u8e3s4, string, startIndex, ignoreCase) {
     return startIndex = startIndex === VOID ? get_lastIndex_3(_this__u8e3s4) : startIndex, 
     !!(ignoreCase = ignoreCase !== VOID && ignoreCase) || !("string" == typeof _this__u8e3s4) ? indexOf_3(_this__u8e3s4, string, startIndex, 0, ignoreCase, !0) : _this__u8e3s4.lastIndexOf(string, startIndex);
    }
    function lastIndexOf_0(_this__u8e3s4, char, startIndex, ignoreCase) {
     var tmp;
     if (startIndex = startIndex === VOID ? get_lastIndex_3(_this__u8e3s4) : startIndex, 
     !!(ignoreCase = ignoreCase !== VOID && ignoreCase) || !("string" == typeof _this__u8e3s4)) {
      tmp = function(_this__u8e3s4, chars, startIndex, ignoreCase) {
       var tmp;
       startIndex = startIndex === VOID ? get_lastIndex_3(_this__u8e3s4) : startIndex, 
       ignoreCase = ignoreCase !== VOID && ignoreCase, tmp = !ignoreCase && 1 === chars.length && "string" == typeof _this__u8e3s4;
       if (tmp) {
        var str = toString(single(chars));
        return _this__u8e3s4.lastIndexOf(str, startIndex);
       }
       var inductionVariable = coerceAtMost(startIndex, get_lastIndex_3(_this__u8e3s4));
       if (0 <= inductionVariable) do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp$ret$4, charAtIndex = charSequenceGet(_this__u8e3s4, index);
        $l$block: {
         for (var inductionVariable_0 = 0, last = chars.length; inductionVariable_0 < last; ) {
          var element = chars[inductionVariable_0];
          if (inductionVariable_0 = inductionVariable_0 + 1 | 0, equals_0(element, charAtIndex, ignoreCase)) {
           tmp$ret$4 = !0;
           break $l$block;
          }
         }
         tmp$ret$4 = !1;
        }
        if (tmp$ret$4) return index;
       } while (0 <= inductionVariable);
       return -1;
      }(_this__u8e3s4, charArrayOf([ char ]), startIndex, ignoreCase);
     } else {
      var str = toString(char);
      tmp = _this__u8e3s4.lastIndexOf(str, startIndex);
     }
     return tmp;
    }
    function lineSequence$$inlined$Sequence$1($this_lineSequence) {
     this.ne_1 = $this_lineSequence;
    }
    function get_UNDEFINED_RESULT() {
     return _init_properties_DeepRecursive_kt__zbwcac(), UNDEFINED_RESULT;
    }
    function DeepRecursiveScope() {}
    function DeepRecursiveFunction(block) {
     this.pe_1 = block;
    }
    function DeepRecursiveScopeImpl(block, value) {
     DeepRecursiveScope.call(this);
     this.qe_1 = function(obj, arity) {
      if ("function" == typeof obj) return obj.$arity === arity;
      var tmp1_safe_receiver = null == obj ? null : obj.constructor, tmp2_safe_receiver = null == tmp1_safe_receiver ? null : tmp1_safe_receiver.$metadata$, tmp3_elvis_lhs = null == tmp2_safe_receiver ? null : tmp2_safe_receiver.suspendArity;
      if (null == tmp3_elvis_lhs) return !1;
      var suspendArity = tmp3_elvis_lhs, result = !1, inductionVariable = 0, last = suspendArity.length;
      $l$loop: for (;inductionVariable < last; ) {
       var item = suspendArity[inductionVariable];
       if (inductionVariable = inductionVariable + 1 | 0, arity === item) {
        result = !0;
        break $l$loop;
       }
      }
      return result;
     }(block, 2) ? block : THROW_CCE(), this.re_1 = value;
     this.se_1 = isInterface(this, Continuation) ? this : THROW_CCE(), this.te_1 = get_UNDEFINED_RESULT();
    }
    function _init_properties_DeepRecursive_kt__zbwcac() {
     if (!properties_initialized_DeepRecursive_kt_5z0al2) {
      properties_initialized_DeepRecursive_kt_5z0al2 = !0;
      var value = get_COROUTINE_SUSPENDED();
      UNDEFINED_RESULT = value;
     }
    }
    function LazyThreadSafetyMode(name, ordinal) {
     Enum.call(this, name, ordinal);
    }
    function UnsafeLazyImpl(initializer) {
     this.we_1 = initializer, this.xe_1 = UNINITIALIZED_VALUE_instance;
    }
    function UNINITIALIZED_VALUE() {}
    function _Result___init__impl__xyqfz8(value) {
     return value;
    }
    function _Result___get_value__impl__bjfvqg($this) {
     return $this;
    }
    function Result__exceptionOrNull_impl_p6xea9($this) {
     return $this instanceof Failure ? $this.n7_1 : null;
    }
    function Companion_10() {}
    function Failure(exception) {
     this.n7_1 = exception;
    }
    function Result(value) {
     this.ze_1 = value;
    }
    function createFailure(exception) {
     return new Failure(exception);
    }
    function throwOnFailure(_this__u8e3s4) {
     if (_this__u8e3s4 instanceof Failure) throw _this__u8e3s4.n7_1;
    }
    function NotImplementedError(message) {
     (function(message, $this) {
      extendThrowable($this, message), Error_0.call($this);
     })(message = message === VOID ? "An operation is not implemented." : message, this), 
     captureStack(this, NotImplementedError);
    }
    function Pair(first, second) {
     this.af_1 = first, this.bf_1 = second;
    }
    function to(_this__u8e3s4, that) {
     return new Pair(_this__u8e3s4, that);
    }
    initMetadataForInterface(CharSequence, "CharSequence"), initMetadataForInterface(Comparable, "Comparable"), 
    initMetadataForClass(Number_0, "Number"), initMetadataForClass(asSequence$$inlined$Sequence$1), 
    initMetadataForClass(asSequence$$inlined$Sequence$1_0), initMetadataForClass(Char, "Char", VOID, VOID, [ Comparable ]), 
    initMetadataForInterface(Collection, "Collection"), initMetadataForInterface(KtList, "List", VOID, VOID, [ Collection ]), 
    initMetadataForInterface(KtSet, "Set", VOID, VOID, [ Collection ]), initMetadataForInterface(Entry, "Entry"), 
    initMetadataForInterface(KtMap, "Map"), initMetadataForInterface(KtMutableMap, "MutableMap", VOID, VOID, [ KtMap ]), 
    initMetadataForCompanion(Companion), initMetadataForClass(Enum, "Enum", VOID, VOID, [ Comparable ]), 
    initMetadataForCompanion(Companion_0), initMetadataForClass(Long, "Long", VOID, Number_0, [ Number_0, Comparable ]), 
    initMetadataForClass(arrayIterator$1), initMetadataForObject(StringCompanionObject, "StringCompanionObject"), 
    initMetadataForObject(Digit, "Digit"), initMetadataForInterface(Comparator, "Comparator"), 
    initMetadataForObject(Unit, "Unit"), initMetadataForClass(AbstractCollection, "AbstractCollection", VOID, VOID, [ Collection ]), 
    initMetadataForClass(AbstractMutableCollection, "AbstractMutableCollection", VOID, AbstractCollection, [ AbstractCollection, Collection ]), 
    initMetadataForClass(IteratorImpl, "IteratorImpl"), initMetadataForClass(ListIteratorImpl, "ListIteratorImpl", VOID, IteratorImpl), 
    initMetadataForClass(AbstractMutableList, "AbstractMutableList", VOID, AbstractMutableCollection, [ AbstractMutableCollection, KtList, Collection ]), 
    initMetadataForClass(AbstractMap, "AbstractMap", VOID, VOID, [ KtMap ]), initMetadataForClass(AbstractMutableMap, "AbstractMutableMap", VOID, AbstractMap, [ AbstractMap, KtMutableMap ]), 
    initMetadataForClass(AbstractMutableSet, "AbstractMutableSet", VOID, AbstractMutableCollection, [ AbstractMutableCollection, Collection, KtSet ]), 
    initMetadataForCompanion(Companion_1), initMetadataForClass(ArrayList, "ArrayList", ArrayList_init_$Create$, AbstractMutableList, [ AbstractMutableList, KtList, Collection ]), 
    initMetadataForClass(HashMap, "HashMap", HashMap_init_$Create$, AbstractMutableMap, [ AbstractMutableMap, KtMutableMap ]), 
    initMetadataForClass(HashMapKeys, "HashMapKeys", VOID, AbstractMutableSet, [ Collection, KtSet, AbstractMutableSet ]), 
    initMetadataForClass(HashMapValues, "HashMapValues", VOID, AbstractMutableCollection, [ Collection, AbstractMutableCollection ]), 
    initMetadataForClass(HashMapEntrySetBase, "HashMapEntrySetBase", VOID, AbstractMutableSet, [ Collection, KtSet, AbstractMutableSet ]), 
    initMetadataForClass(HashMapEntrySet, "HashMapEntrySet", VOID, HashMapEntrySetBase), 
    initMetadataForClass(HashMapKeysDefault$iterator$1), initMetadataForClass(HashMapKeysDefault, "HashMapKeysDefault", VOID, AbstractMutableSet), 
    initMetadataForClass(HashMapValuesDefault$iterator$1), initMetadataForClass(HashMapValuesDefault, "HashMapValuesDefault", VOID, AbstractMutableCollection), 
    initMetadataForClass(HashSet, "HashSet", (function() {
     return HashSet_init_$Init$_0(objectCreate(protoOf(HashSet)));
    }), AbstractMutableSet, [ AbstractMutableSet, Collection, KtSet ]), initMetadataForCompanion(Companion_2), 
    initMetadataForClass(Itr, "Itr"), initMetadataForClass(KeysItr, "KeysItr", VOID, Itr), 
    initMetadataForClass(ValuesItr, "ValuesItr", VOID, Itr), initMetadataForClass(EntriesItr, "EntriesItr", VOID, Itr), 
    initMetadataForClass(EntryRef, "EntryRef", VOID, VOID, [ Entry ]), initMetadataForInterface(InternalMap, "InternalMap"), 
    initMetadataForClass(InternalHashMap, "InternalHashMap", InternalHashMap_init_$Create$, VOID, [ InternalMap ]), 
    initMetadataForClass(LinkedHashMap, "LinkedHashMap", LinkedHashMap_init_$Create$, HashMap, [ HashMap, KtMutableMap ]), 
    initMetadataForClass(LinkedHashSet, "LinkedHashSet", LinkedHashSet_init_$Create$, HashSet, [ HashSet, Collection, KtSet ]), 
    initMetadataForInterface(Continuation, "Continuation"), initMetadataForClass(InterceptedCoroutine, "InterceptedCoroutine", VOID, VOID, [ Continuation ]), 
    initMetadataForClass(CoroutineImpl, "CoroutineImpl", VOID, InterceptedCoroutine, [ InterceptedCoroutine, Continuation ]), 
    initMetadataForObject(CompletedContinuation, "CompletedContinuation", VOID, VOID, [ Continuation ]), 
    initMetadataForClass(SafeContinuation, "SafeContinuation", VOID, VOID, [ Continuation ]), 
    initMetadataForClass(Exception, "Exception", (function Exception_init_$Create$() {
     var tmp = Exception_init_$Init$(objectCreate(protoOf(Exception)));
     return captureStack(tmp, Exception_init_$Create$), tmp;
    }), Error), initMetadataForClass(RuntimeException, "RuntimeException", (function RuntimeException_init_$Create$() {
     var tmp = RuntimeException_init_$Init$(objectCreate(protoOf(RuntimeException)));
     return captureStack(tmp, RuntimeException_init_$Create$), tmp;
    }), Exception), initMetadataForClass(IllegalStateException, "IllegalStateException", (function IllegalStateException_init_$Create$() {
     var tmp = IllegalStateException_init_$Init$(objectCreate(protoOf(IllegalStateException)));
     return captureStack(tmp, IllegalStateException_init_$Create$), tmp;
    }), RuntimeException), initMetadataForClass(CancellationException, "CancellationException", (function CancellationException_init_$Create$() {
     var tmp = ($this = objectCreate(protoOf(CancellationException)), IllegalStateException_init_$Init$($this), 
     CancellationException.call($this), $this);
     var $this;
     return captureStack(tmp, CancellationException_init_$Create$), tmp;
    }), IllegalStateException), initMetadataForClass(createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$1, VOID, VOID, CoroutineImpl), 
    initMetadataForClass(createSimpleCoroutineForSuspendFunction$1, VOID, VOID, CoroutineImpl), 
    initMetadataForClass(EmptyContinuation$$inlined$Continuation$1, VOID, VOID, VOID, [ Continuation ]), 
    initMetadataForClass(IllegalArgumentException, "IllegalArgumentException", (function IllegalArgumentException_init_$Create$() {
     var tmp = IllegalArgumentException_init_$Init$(objectCreate(protoOf(IllegalArgumentException)));
     return captureStack(tmp, IllegalArgumentException_init_$Create$), tmp;
    }), RuntimeException), initMetadataForClass(UnsupportedOperationException, "UnsupportedOperationException", UnsupportedOperationException_init_$Create$, RuntimeException), 
    initMetadataForClass(NoSuchElementException, "NoSuchElementException", NoSuchElementException_init_$Create$, RuntimeException), 
    initMetadataForClass(Error_0, "Error", (function Error_init_$Create$() {
     var tmp = ($this = objectCreate(protoOf(Error_0)), extendThrowable($this), Error_0.call($this), 
     $this);
     var $this;
     return captureStack(tmp, Error_init_$Create$), tmp;
    }), Error), initMetadataForClass(IndexOutOfBoundsException, "IndexOutOfBoundsException", (function IndexOutOfBoundsException_init_$Create$() {
     var tmp = ($this = objectCreate(protoOf(IndexOutOfBoundsException)), RuntimeException_init_$Init$($this), 
     IndexOutOfBoundsException.call($this), $this);
     var $this;
     return captureStack(tmp, IndexOutOfBoundsException_init_$Create$), tmp;
    }), RuntimeException), initMetadataForClass(ConcurrentModificationException, "ConcurrentModificationException", ConcurrentModificationException_init_$Create$, RuntimeException), 
    initMetadataForClass(NumberFormatException, "NumberFormatException", (function NumberFormatException_init_$Create$() {
     var tmp = ($this = objectCreate(protoOf(NumberFormatException)), IllegalArgumentException_init_$Init$($this), 
     NumberFormatException.call($this), $this);
     var $this;
     return captureStack(tmp, NumberFormatException_init_$Create$), tmp;
    }), IllegalArgumentException), initMetadataForClass(ArithmeticException, "ArithmeticException", (function ArithmeticException_init_$Create$() {
     var tmp = ($this = objectCreate(protoOf(ArithmeticException)), RuntimeException_init_$Init$($this), 
     ArithmeticException.call($this), $this);
     var $this;
     return captureStack(tmp, ArithmeticException_init_$Create$), tmp;
    }), RuntimeException), initMetadataForClass(NullPointerException, "NullPointerException", NullPointerException_init_$Create$, RuntimeException), 
    initMetadataForClass(NoWhenBranchMatchedException, "NoWhenBranchMatchedException", NoWhenBranchMatchedException_init_$Create$, RuntimeException), 
    initMetadataForClass(ClassCastException, "ClassCastException", ClassCastException_init_$Create$, RuntimeException), 
    initMetadataForClass(UninitializedPropertyAccessException, "UninitializedPropertyAccessException", (function UninitializedPropertyAccessException_init_$Create$() {
     var tmp = ($this = objectCreate(protoOf(UninitializedPropertyAccessException)), 
     RuntimeException_init_$Init$($this), UninitializedPropertyAccessException.call($this), 
     $this);
     var $this;
     return captureStack(tmp, UninitializedPropertyAccessException_init_$Create$), tmp;
    }), RuntimeException), initMetadataForInterface(KClass, "KClass"), initMetadataForClass(KClassImpl, "KClassImpl", VOID, VOID, [ KClass ]), 
    initMetadataForObject(NothingKClassImpl, "NothingKClassImpl", VOID, KClassImpl), 
    initMetadataForClass(ErrorKClass, "ErrorKClass", ErrorKClass, VOID, [ KClass ]), 
    initMetadataForClass(PrimitiveKClassImpl, "PrimitiveKClassImpl", VOID, KClassImpl), 
    initMetadataForClass(SimpleKClassImpl, "SimpleKClassImpl", VOID, KClassImpl), initMetadataForInterface(KProperty1, "KProperty1"), 
    initMetadataForObject(PrimitiveClasses, "PrimitiveClasses"), initMetadataForClass(ConstrainedOnceSequence, "ConstrainedOnceSequence"), 
    initMetadataForClass(StringBuilder, "StringBuilder", StringBuilder_init_$Create$_0, VOID, [ CharSequence ]), 
    initMetadataForCompanion(Companion_3), initMetadataForClass(Regex, "Regex"), initMetadataForClass(MatchGroup, "MatchGroup"), 
    initMetadataForClass(findNext$1$groups$1, VOID, VOID, AbstractCollection, [ Collection, AbstractCollection ]), 
    initMetadataForClass(AbstractList, "AbstractList", VOID, AbstractCollection, [ AbstractCollection, KtList ]), 
    initMetadataForClass(findNext$1$groupValues$1, VOID, VOID, AbstractList), initMetadataForClass(findNext$1), 
    initMetadataForClass(ExceptionTraceBuilder, "ExceptionTraceBuilder", ExceptionTraceBuilder), 
    initMetadataForClass(IteratorImpl_0, "IteratorImpl"), initMetadataForCompanion(Companion_4), 
    initMetadataForClass(AbstractMap$keys$1$iterator$1), initMetadataForClass(AbstractMap$values$1$iterator$1), 
    initMetadataForCompanion(Companion_5), initMetadataForClass(AbstractSet, "AbstractSet", VOID, AbstractCollection, [ AbstractCollection, KtSet ]), 
    initMetadataForClass(AbstractMap$keys$1, VOID, VOID, AbstractSet), initMetadataForClass(AbstractMap$values$1, VOID, VOID, AbstractCollection), 
    initMetadataForCompanion(Companion_6), initMetadataForCompanion(Companion_7), initMetadataForClass(ArrayDeque, "ArrayDeque", ArrayDeque_init_$Create$, AbstractMutableList), 
    initMetadataForObject(EmptyList, "EmptyList", VOID, VOID, [ KtList ]), initMetadataForClass(ArrayAsCollection, "ArrayAsCollection", VOID, VOID, [ Collection ]), 
    initMetadataForObject(EmptyIterator, "EmptyIterator"), initMetadataForClass(IndexedValue, "IndexedValue"), 
    initMetadataForClass(IndexingIterable, "IndexingIterable"), initMetadataForClass(IndexingIterator, "IndexingIterator"), 
    initMetadataForInterface(MapWithDefault, "MapWithDefault", VOID, VOID, [ KtMap ]), 
    initMetadataForObject(EmptyMap, "EmptyMap", VOID, VOID, [ KtMap ]), initMetadataForClass(IntIterator, "IntIterator"), 
    initMetadataForClass(GeneratorSequence$iterator$1), initMetadataForClass(GeneratorSequence, "GeneratorSequence"), 
    initMetadataForInterface(DropTakeSequence, "DropTakeSequence"), initMetadataForClass(TakeSequence$iterator$1), 
    initMetadataForClass(TakeSequence, "TakeSequence", VOID, VOID, [ DropTakeSequence ]), 
    initMetadataForClass(TransformingSequence$iterator$1), initMetadataForClass(TransformingSequence, "TransformingSequence"), 
    initMetadataForObject(EmptySequence, "EmptySequence", VOID, VOID, [ DropTakeSequence ]), 
    initMetadataForObject(EmptySet, "EmptySet", VOID, VOID, [ KtSet ]), initMetadataForObject(NaturalOrderComparator, "NaturalOrderComparator", VOID, VOID, [ Comparator ]), 
    initMetadataForObject(Key, "Key"), initMetadataForInterface(CoroutineContext, "CoroutineContext"), 
    initMetadataForInterface(Element, "Element", VOID, VOID, [ CoroutineContext ]), 
    initMetadataForInterface(ContinuationInterceptor, "ContinuationInterceptor", VOID, VOID, [ Element ]), 
    initMetadataForObject(EmptyCoroutineContext, "EmptyCoroutineContext", VOID, VOID, [ CoroutineContext ]), 
    initMetadataForClass(CombinedContext, "CombinedContext", VOID, VOID, [ CoroutineContext ]), 
    initMetadataForClass(AbstractCoroutineContextKey, "AbstractCoroutineContextKey"), 
    initMetadataForClass(AbstractCoroutineContextElement, "AbstractCoroutineContextElement", VOID, VOID, [ Element ]), 
    initMetadataForClass(CoroutineSingletons, "CoroutineSingletons", VOID, Enum), initMetadataForClass(EnumEntriesList, "EnumEntriesList", VOID, AbstractList, [ KtList, AbstractList ]), 
    initMetadataForCompanion(Companion_8), initMetadataForClass(IntProgression, "IntProgression"), 
    initMetadataForInterface(ClosedRange, "ClosedRange"), initMetadataForClass(IntRange, "IntRange", VOID, IntProgression, [ IntProgression, ClosedRange ]), 
    initMetadataForClass(IntProgressionIterator, "IntProgressionIterator", VOID, IntIterator), 
    initMetadataForCompanion(Companion_9), initMetadataForObject(State, "State"), initMetadataForClass(LinesIterator, "LinesIterator"), 
    initMetadataForClass(lineSequence$$inlined$Sequence$1), initMetadataForClass(DeepRecursiveScope, "DeepRecursiveScope", VOID, VOID, VOID, [ 1 ]), 
    initMetadataForClass(DeepRecursiveFunction, "DeepRecursiveFunction"), initMetadataForClass(DeepRecursiveScopeImpl, "DeepRecursiveScopeImpl", VOID, DeepRecursiveScope, [ DeepRecursiveScope, Continuation ], [ 1 ]), 
    initMetadataForClass(LazyThreadSafetyMode, "LazyThreadSafetyMode", VOID, Enum), 
    initMetadataForClass(UnsafeLazyImpl, "UnsafeLazyImpl"), initMetadataForObject(UNINITIALIZED_VALUE, "UNINITIALIZED_VALUE"), 
    initMetadataForCompanion(Companion_10), initMetadataForClass(Failure, "Failure"), 
    initMetadataForClass(Result, "Result"), initMetadataForClass(NotImplementedError, "NotImplementedError", NotImplementedError, Error_0), 
    initMetadataForClass(Pair, "Pair"), protoOf(asSequence$$inlined$Sequence$1).h = function() {
     return arrayIterator(this.g_1);
    }, protoOf(asSequence$$inlined$Sequence$1_0).h = function() {
     return this.r_1.h();
    }, protoOf(Enum).s1 = function(other) {
     return compareTo(this.r1_1, other.r1_1);
    }, protoOf(Enum).d = function(other) {
     return this.s1(other instanceof Enum ? other : THROW_CCE());
    }, protoOf(Enum).equals = function(other) {
     return this === other;
    }, protoOf(Enum).hashCode = function() {
     return getObjectHashCode(this);
    }, protoOf(Enum).toString = function() {
     return this.q1_1;
    }, protoOf(Long).b1 = function(other) {
     return compare(this, other);
    }, protoOf(Long).d = function(other) {
     return this.b1(other instanceof Long ? other : THROW_CCE());
    }, protoOf(Long).x1 = function(other) {
     return add(this, other);
    }, protoOf(Long).y1 = function(other) {
     return subtract(this, other);
    }, protoOf(Long).z1 = function(other) {
     return multiply(this, other);
    }, protoOf(Long).a2 = function(other) {
     return function(_this__u8e3s4, other) {
      if (_init_properties_longJs_kt__elc2w5(), isZero(other)) throw Exception_init_$Create$_0("division by zero");
      if (isZero(_this__u8e3s4)) return get_ZERO();
      if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
       if (equalsLong(other, get_ONE()) || equalsLong(other, get_NEG_ONE())) return get_MIN_VALUE();
       if (equalsLong(other, get_MIN_VALUE())) return get_ONE();
       var halfThis = function(_this__u8e3s4, numBits) {
        _init_properties_longJs_kt__elc2w5();
        var numBits_0 = 63 & numBits;
        return 0 === numBits_0 ? _this__u8e3s4 : numBits_0 < 32 ? new Long(_this__u8e3s4.y_1 >>> numBits_0 | _this__u8e3s4.z_1 << 32 - numBits_0, _this__u8e3s4.z_1 >> numBits_0) : new Long(_this__u8e3s4.z_1 >> numBits_0 - 32, _this__u8e3s4.z_1 >= 0 ? 0 : -1);
       }(_this__u8e3s4, 1), approx = shiftLeft(halfThis.a2(other), 1);
       return equalsLong(approx, get_ZERO()) ? isNegative(other) ? get_ONE() : get_NEG_ONE() : add(approx, subtract(_this__u8e3s4, multiply(other, approx)).a2(other));
      }
      if (equalsLong(other, get_MIN_VALUE())) return get_ZERO();
      if (isNegative(_this__u8e3s4)) return isNegative(other) ? negate(_this__u8e3s4).a2(negate(other)) : negate(negate(_this__u8e3s4).a2(other));
      if (isNegative(other)) return negate(_this__u8e3s4.a2(negate(other)));
      var res = get_ZERO(), rem_0 = _this__u8e3s4;
      for (;greaterThanOrEqual(rem_0, other); ) {
       for (var approxDouble = toNumber(rem_0) / toNumber(other), approx2 = Math.max(1, Math.floor(approxDouble)), log2 = Math.ceil(Math.log(approx2) / Math.LN2), delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48), approxRes = fromNumber(approx2), approxRem = multiply(approxRes, other); isNegative(approxRem) || greaterThan(approxRem, rem_0); ) approxRem = multiply(approxRes = fromNumber(approx2 -= delta), other);
       isZero(approxRes) && (approxRes = get_ONE()), res = add(res, approxRes), rem_0 = subtract(rem_0, approxRem);
      }
      return res;
     }(this, other);
    }, protoOf(Long).b2 = function() {
     return this.c2().x1(new Long(1, 0));
    }, protoOf(Long).d2 = function(bitCount) {
     return shiftLeft(this, bitCount);
    }, protoOf(Long).e2 = function(other) {
     return new Long(this.y_1 | other.y_1, this.z_1 | other.z_1);
    }, protoOf(Long).c2 = function() {
     return new Long(~this.y_1, ~this.z_1);
    }, protoOf(Long).a1 = function() {
     return this.y_1;
    }, protoOf(Long).f2 = function() {
     return toNumber(this);
    }, protoOf(Long).toString = function() {
     return toStringImpl(this, 10);
    }, protoOf(Long).equals = function(other) {
     return other instanceof Long && equalsLong(this, other);
    }, protoOf(Long).hashCode = function() {
     return l = this, _init_properties_longJs_kt__elc2w5(), l.y_1 ^ l.z_1;
     var l;
    }, protoOf(Long).valueOf = function() {
     return this.f2();
    }, protoOf(arrayIterator$1).i = function() {
     return !(this.g2_1 === this.h2_1.length);
    }, protoOf(arrayIterator$1).j = function() {
     if (this.g2_1 === this.h2_1.length) throw NoSuchElementException_init_$Create$_0("" + this.g2_1);
     var _unary__edvuaz = this.g2_1;
     return this.g2_1 = _unary__edvuaz + 1 | 0, this.h2_1[_unary__edvuaz];
    }, protoOf(Unit).toString = function() {
     return "kotlin.Unit";
    }, protoOf(AbstractMutableCollection).o = function(elements) {
     this.l2();
     for (var modified = !1, _iterator__ex2g4s = elements.h(); _iterator__ex2g4s.i(); ) {
      var element = _iterator__ex2g4s.j();
      this.e(element) && (modified = !0);
     }
     return modified;
    }, protoOf(AbstractMutableCollection).p1 = function() {
     this.l2();
     for (var iterator = this.h(); iterator.i(); ) iterator.j(), iterator.m2();
    }, protoOf(AbstractMutableCollection).toJSON = function() {
     return this.toArray();
    }, protoOf(AbstractMutableCollection).l2 = function() {}, protoOf(IteratorImpl).i = function() {
     return this.n2_1 < this.p2_1.k();
    }, protoOf(IteratorImpl).j = function() {
     if (!this.i()) throw NoSuchElementException_init_$Create$();
     var _unary__edvuaz = this.n2_1;
     return this.n2_1 = _unary__edvuaz + 1 | 0, this.o2_1 = _unary__edvuaz, this.p2_1.p(this.o2_1);
    }, protoOf(IteratorImpl).m2 = function() {
     if (-1 === this.o2_1) {
      throw IllegalStateException_init_$Create$_0(toString_1("Call next() or previous() before removing element from the iterator."));
     }
     this.p2_1.r2(this.o2_1), this.n2_1 = this.o2_1, this.o2_1 = -1;
    }, protoOf(AbstractMutableList).e = function(element) {
     return this.l2(), this.x2(this.k(), element), !0;
    }, protoOf(AbstractMutableList).p1 = function() {
     this.l2(), this.y2(0, this.k());
    }, protoOf(AbstractMutableList).h = function() {
     return new IteratorImpl(this);
    }, protoOf(AbstractMutableList).d1 = function(element) {
     return this.z2(element) >= 0;
    }, protoOf(AbstractMutableList).z2 = function(element) {
     var tmp$ret$1;
     $l$block: {
      for (var index = 0, _iterator__ex2g4s = this.h(); _iterator__ex2g4s.i(); ) {
       if (equals(_iterator__ex2g4s.j(), element)) {
        tmp$ret$1 = index;
        break $l$block;
       }
       index = index + 1 | 0;
      }
      tmp$ret$1 = -1;
     }
     return tmp$ret$1;
    }, protoOf(AbstractMutableList).a3 = function(index) {
     return new ListIteratorImpl(this, index);
    }, protoOf(AbstractMutableList).y2 = function(fromIndex, toIndex) {
     var iterator = this.a3(fromIndex), times = toIndex - fromIndex | 0, inductionVariable = 0;
     if (inductionVariable < times) do {
      inductionVariable = inductionVariable + 1 | 0, iterator.j(), iterator.m2();
     } while (inductionVariable < times);
    }, protoOf(AbstractMutableList).equals = function(other) {
     return other === this || !(null == other || !isInterface(other, KtList)) && Companion_instance_4.b3(this, other);
    }, protoOf(AbstractMutableList).hashCode = function() {
     return Companion_instance_4.c3(this);
    }, protoOf(AbstractMutableMap).h3 = function() {
     return new HashMapKeysDefault(this);
    }, protoOf(AbstractMutableMap).i3 = function() {
     return new HashMapValuesDefault(this);
    }, protoOf(AbstractMutableMap).k1 = function() {
     var tmp, tmp0_elvis_lhs = this.f3_1;
     if (null == tmp0_elvis_lhs) {
      var this_0 = this.h3();
      this.f3_1 = this_0, tmp = this_0;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }, protoOf(AbstractMutableMap).l1 = function() {
     var tmp, tmp0_elvis_lhs = this.g3_1;
     if (null == tmp0_elvis_lhs) {
      var this_0 = this.i3();
      this.g3_1 = this_0, tmp = this_0;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }, protoOf(AbstractMutableMap).p1 = function() {
     this.m1().p1();
    }, protoOf(AbstractMutableMap).o1 = function(from) {
     this.l2();
     for (var _iterator__ex2g4s = from.m1().h(); _iterator__ex2g4s.i(); ) {
      var _destruct__k2r9zo = _iterator__ex2g4s.j(), key = _destruct__k2r9zo.f1(), value = _destruct__k2r9zo.g1();
      this.n1(key, value);
     }
    }, protoOf(AbstractMutableMap).l2 = function() {}, protoOf(AbstractMutableSet).equals = function(other) {
     return other === this || !(null == other || !isInterface(other, KtSet)) && Companion_instance_6.m3(this, other);
    }, protoOf(AbstractMutableSet).hashCode = function() {
     return Companion_instance_6.n3(this);
    }, protoOf(ArrayList).q3 = function(minCapacity) {}, protoOf(ArrayList).k = function() {
     return this.m_1.length;
    }, protoOf(ArrayList).p = function(index) {
     var tmp = this.m_1[rangeCheck(this, index)];
     return null == tmp || null != tmp ? tmp : THROW_CCE();
    }, protoOf(ArrayList).e = function(element) {
     return this.l2(), this.m_1.push(element), this.q2_1 = this.q2_1 + 1 | 0, !0;
    }, protoOf(ArrayList).x2 = function(index, element) {
     this.l2(), this.m_1.splice(function($this, index) {
      return Companion_instance_4.w2(index, $this.k()), index;
     }(this, index), 0, element), this.q2_1 = this.q2_1 + 1 | 0;
    }, protoOf(ArrayList).o = function(elements) {
     if (this.l2(), elements.q()) return !1;
     for (var $this, amount, previous, offset = ($this = this, amount = elements.k(), 
     previous = $this.k(), $this.m_1.length = $this.k() + amount | 0, previous), index = 0, _iterator__ex2g4s = elements.h(); _iterator__ex2g4s.i(); ) {
      var item = _iterator__ex2g4s.j(), _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      var index_0 = checkIndexOverflow(_unary__edvuaz);
      this.m_1[offset + index_0 | 0] = item;
     }
     return this.q2_1 = this.q2_1 + 1 | 0, !0;
    }, protoOf(ArrayList).r2 = function(index) {
     return this.l2(), rangeCheck(this, index), this.q2_1 = this.q2_1 + 1 | 0, index === get_lastIndex_2(this) ? this.m_1.pop() : this.m_1.splice(index, 1)[0];
    }, protoOf(ArrayList).y2 = function(fromIndex, toIndex) {
     this.l2(), this.q2_1 = this.q2_1 + 1 | 0, this.m_1.splice(fromIndex, toIndex - fromIndex | 0);
    }, protoOf(ArrayList).p1 = function() {
     this.l2();
     this.m_1 = [], this.q2_1 = this.q2_1 + 1 | 0;
    }, protoOf(ArrayList).z2 = function(element) {
     return function(_this__u8e3s4, element) {
      if (null == element) {
       var inductionVariable = 0, last = _this__u8e3s4.length - 1 | 0;
       if (inductionVariable <= last) do {
        var index = inductionVariable;
        if (inductionVariable = inductionVariable + 1 | 0, null == _this__u8e3s4[index]) return index;
       } while (inductionVariable <= last);
      } else {
       var inductionVariable_0 = 0, last_0 = _this__u8e3s4.length - 1 | 0;
       if (inductionVariable_0 <= last_0) do {
        var index_0 = inductionVariable_0;
        if (inductionVariable_0 = inductionVariable_0 + 1 | 0, equals(element, _this__u8e3s4[index_0])) return index_0;
       } while (inductionVariable_0 <= last_0);
      }
      return -1;
     }(this.m_1, element);
    }, protoOf(ArrayList).toString = function() {
     return joinToString(this.m_1, ", ", "[", "]", VOID, VOID, arrayToString$lambda);
    }, protoOf(ArrayList).r3 = function() {
     return [].slice.call(this.m_1);
    }, protoOf(ArrayList).toArray = function() {
     return this.r3();
    }, protoOf(ArrayList).l2 = function() {
     if (this.n_1) throw UnsupportedOperationException_init_$Create$();
    }, protoOf(HashMap).p1 = function() {
     this.w3_1.p1();
    }, protoOf(HashMap).h1 = function(key) {
     return this.w3_1.y3(key);
    }, protoOf(HashMap).i1 = function(value) {
     return this.w3_1.i1(value);
    }, protoOf(HashMap).h3 = function() {
     return new HashMapKeys(this.w3_1);
    }, protoOf(HashMap).i3 = function() {
     return new HashMapValues(this.w3_1);
    }, protoOf(HashMap).m1 = function() {
     var tmp, tmp0_elvis_lhs = this.x3_1;
     if (null == tmp0_elvis_lhs) {
      var this_0 = new HashMapEntrySet(this.w3_1);
      this.x3_1 = this_0, tmp = this_0;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }, protoOf(HashMap).j1 = function(key) {
     return this.w3_1.j1(key);
    }, protoOf(HashMap).n1 = function(key, value) {
     return this.w3_1.n1(key, value);
    }, protoOf(HashMap).k = function() {
     return this.w3_1.k();
    }, protoOf(HashMap).o1 = function(from) {
     return this.w3_1.o1(from);
    }, protoOf(HashMapKeys).k = function() {
     return this.z3_1.k();
    }, protoOf(HashMapKeys).q = function() {
     return 0 === this.z3_1.k();
    }, protoOf(HashMapKeys).d1 = function(element) {
     return this.z3_1.y3(element);
    }, protoOf(HashMapKeys).p1 = function() {
     return this.z3_1.p1();
    }, protoOf(HashMapKeys).e = function(element) {
     throw UnsupportedOperationException_init_$Create$();
    }, protoOf(HashMapKeys).o = function(elements) {
     throw UnsupportedOperationException_init_$Create$();
    }, protoOf(HashMapKeys).h = function() {
     return this.z3_1.a4();
    }, protoOf(HashMapKeys).l2 = function() {
     return this.z3_1.b4();
    }, protoOf(HashMapValues).k = function() {
     return this.c4_1.k();
    }, protoOf(HashMapValues).q = function() {
     return 0 === this.c4_1.k();
    }, protoOf(HashMapValues).d4 = function(element) {
     return this.c4_1.i1(element);
    }, protoOf(HashMapValues).d1 = function(element) {
     return (null == element || null != element) && this.d4(null == element || null != element ? element : THROW_CCE());
    }, protoOf(HashMapValues).e4 = function(element) {
     throw UnsupportedOperationException_init_$Create$();
    }, protoOf(HashMapValues).e = function(element) {
     return this.e4(null == element || null != element ? element : THROW_CCE());
    }, protoOf(HashMapValues).f4 = function(elements) {
     throw UnsupportedOperationException_init_$Create$();
    }, protoOf(HashMapValues).o = function(elements) {
     return this.f4(elements);
    }, protoOf(HashMapValues).h = function() {
     return this.c4_1.g4();
    }, protoOf(HashMapValues).l2 = function() {
     return this.c4_1.b4();
    }, protoOf(HashMapEntrySet).h = function() {
     return this.i4_1.j4();
    }, protoOf(HashMapEntrySetBase).k = function() {
     return this.i4_1.k();
    }, protoOf(HashMapEntrySetBase).q = function() {
     return 0 === this.i4_1.k();
    }, protoOf(HashMapEntrySetBase).k4 = function(element) {
     return this.i4_1.m4(element);
    }, protoOf(HashMapEntrySetBase).d1 = function(element) {
     return !(null == element || !isInterface(element, Entry)) && this.k4(null != element && isInterface(element, Entry) ? element : THROW_CCE());
    }, protoOf(HashMapEntrySetBase).p1 = function() {
     return this.i4_1.p1();
    }, protoOf(HashMapEntrySetBase).l4 = function(element) {
     throw UnsupportedOperationException_init_$Create$();
    }, protoOf(HashMapEntrySetBase).e = function(element) {
     return this.l4(null != element && isInterface(element, Entry) ? element : THROW_CCE());
    }, protoOf(HashMapEntrySetBase).o = function(elements) {
     throw UnsupportedOperationException_init_$Create$();
    }, protoOf(HashMapEntrySetBase).e1 = function(elements) {
     return this.i4_1.n4(elements);
    }, protoOf(HashMapEntrySetBase).l2 = function() {
     return this.i4_1.b4();
    }, protoOf(HashMapKeysDefault$iterator$1).i = function() {
     return this.o4_1.i();
    }, protoOf(HashMapKeysDefault$iterator$1).j = function() {
     return this.o4_1.j().f1();
    }, protoOf(HashMapKeysDefault$iterator$1).m2 = function() {
     return this.o4_1.m2();
    }, protoOf(HashMapKeysDefault).q4 = function(element) {
     throw UnsupportedOperationException_init_$Create$_0("Add is not supported on keys");
    }, protoOf(HashMapKeysDefault).e = function(element) {
     return this.q4(null == element || null != element ? element : THROW_CCE());
    }, protoOf(HashMapKeysDefault).p1 = function() {
     return this.p4_1.p1();
    }, protoOf(HashMapKeysDefault).y3 = function(element) {
     return this.p4_1.h1(element);
    }, protoOf(HashMapKeysDefault).d1 = function(element) {
     return (null == element || null != element) && this.y3(null == element || null != element ? element : THROW_CCE());
    }, protoOf(HashMapKeysDefault).h = function() {
     return new HashMapKeysDefault$iterator$1(this.p4_1.m1().h());
    }, protoOf(HashMapKeysDefault).k = function() {
     return this.p4_1.k();
    }, protoOf(HashMapKeysDefault).l2 = function() {
     return this.p4_1.l2();
    }, protoOf(HashMapValuesDefault$iterator$1).i = function() {
     return this.r4_1.i();
    }, protoOf(HashMapValuesDefault$iterator$1).j = function() {
     return this.r4_1.j().g1();
    }, protoOf(HashMapValuesDefault$iterator$1).m2 = function() {
     return this.r4_1.m2();
    }, protoOf(HashMapValuesDefault).e4 = function(element) {
     throw UnsupportedOperationException_init_$Create$_0("Add is not supported on values");
    }, protoOf(HashMapValuesDefault).e = function(element) {
     return this.e4(null == element || null != element ? element : THROW_CCE());
    }, protoOf(HashMapValuesDefault).d4 = function(element) {
     return this.s4_1.i1(element);
    }, protoOf(HashMapValuesDefault).d1 = function(element) {
     return (null == element || null != element) && this.d4(null == element || null != element ? element : THROW_CCE());
    }, protoOf(HashMapValuesDefault).h = function() {
     return new HashMapValuesDefault$iterator$1(this.s4_1.m1().h());
    }, protoOf(HashMapValuesDefault).k = function() {
     return this.s4_1.k();
    }, protoOf(HashMapValuesDefault).l2 = function() {
     return this.s4_1.l2();
    }, protoOf(HashSet).e = function(element) {
     return null == this.t4_1.n1(element, !0);
    }, protoOf(HashSet).p1 = function() {
     this.t4_1.p1();
    }, protoOf(HashSet).d1 = function(element) {
     return this.t4_1.y3(element);
    }, protoOf(HashSet).q = function() {
     return 0 === this.t4_1.k();
    }, protoOf(HashSet).h = function() {
     return this.t4_1.a4();
    }, protoOf(HashSet).k = function() {
     return this.t4_1.k();
    }, protoOf(Itr).q5 = function() {
     for (;this.n5_1 < this.m5_1.z4_1 && this.m5_1.w4_1[this.n5_1] < 0; ) this.n5_1 = this.n5_1 + 1 | 0;
    }, protoOf(Itr).i = function() {
     return this.n5_1 < this.m5_1.z4_1;
    }, protoOf(Itr).m2 = function() {
     if (this.r5(), -1 === this.o5_1) {
      throw IllegalStateException_init_$Create$_0(toString_1("Call next() before removing element from the iterator."));
     }
     this.m5_1.b4(), removeEntryAt(this.m5_1, this.o5_1), this.o5_1 = -1, this.p5_1 = this.m5_1.b5_1;
    }, protoOf(Itr).r5 = function() {
     if (this.m5_1.b5_1 !== this.p5_1) throw ConcurrentModificationException_init_$Create$();
    }, protoOf(KeysItr).j = function() {
     if (this.r5(), this.n5_1 >= this.m5_1.z4_1) throw NoSuchElementException_init_$Create$();
     var _unary__edvuaz = this.n5_1;
     this.n5_1 = _unary__edvuaz + 1 | 0, this.o5_1 = _unary__edvuaz;
     var result = this.m5_1.u4_1[this.o5_1];
     return this.q5(), result;
    }, protoOf(ValuesItr).j = function() {
     if (this.r5(), this.n5_1 >= this.m5_1.z4_1) throw NoSuchElementException_init_$Create$();
     var _unary__edvuaz = this.n5_1;
     this.n5_1 = _unary__edvuaz + 1 | 0, this.o5_1 = _unary__edvuaz;
     var result = ensureNotNull(this.m5_1.v4_1)[this.o5_1];
     return this.q5(), result;
    }, protoOf(EntriesItr).j = function() {
     if (this.r5(), this.n5_1 >= this.m5_1.z4_1) throw NoSuchElementException_init_$Create$();
     var _unary__edvuaz = this.n5_1;
     this.n5_1 = _unary__edvuaz + 1 | 0, this.o5_1 = _unary__edvuaz;
     var result = new EntryRef(this.m5_1, this.o5_1);
     return this.q5(), result;
    }, protoOf(EntriesItr).e6 = function() {
     if (this.n5_1 >= this.m5_1.z4_1) throw NoSuchElementException_init_$Create$();
     var _unary__edvuaz = this.n5_1;
     this.n5_1 = _unary__edvuaz + 1 | 0, this.o5_1 = _unary__edvuaz;
     var tmp0_safe_receiver = this.m5_1.u4_1[this.o5_1], tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : hashCode(tmp0_safe_receiver), tmp_0 = null == tmp1_elvis_lhs ? 0 : tmp1_elvis_lhs, tmp0_safe_receiver_0 = ensureNotNull(this.m5_1.v4_1)[this.o5_1], tmp1_elvis_lhs_0 = null == tmp0_safe_receiver_0 ? null : hashCode(tmp0_safe_receiver_0), result = tmp_0 ^ (null == tmp1_elvis_lhs_0 ? 0 : tmp1_elvis_lhs_0);
     return this.q5(), result;
    }, protoOf(EntriesItr).f6 = function(sb) {
     if (this.n5_1 >= this.m5_1.z4_1) throw NoSuchElementException_init_$Create$();
     var _unary__edvuaz = this.n5_1;
     this.n5_1 = _unary__edvuaz + 1 | 0, this.o5_1 = _unary__edvuaz;
     var key = this.m5_1.u4_1[this.o5_1];
     equals(key, this.m5_1) ? sb.i6("(this Map)") : sb.h6(key), sb.j6(61);
     var value = ensureNotNull(this.m5_1.v4_1)[this.o5_1];
     equals(value, this.m5_1) ? sb.i6("(this Map)") : sb.h6(value), this.q5();
    }, protoOf(EntryRef).f1 = function() {
     return checkForComodification(this), this.e5_1.u4_1[this.f5_1];
    }, protoOf(EntryRef).g1 = function() {
     return checkForComodification(this), ensureNotNull(this.e5_1.v4_1)[this.f5_1];
    }, protoOf(EntryRef).equals = function(other) {
     return !!(!(null == other || !isInterface(other, Entry)) && equals(other.f1(), this.f1())) && equals(other.g1(), this.g1());
    }, protoOf(EntryRef).hashCode = function() {
     var tmp0_safe_receiver = this.f1(), tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : hashCode(tmp0_safe_receiver), tmp = null == tmp1_elvis_lhs ? 0 : tmp1_elvis_lhs, tmp0_safe_receiver_0 = this.g1(), tmp1_elvis_lhs_0 = null == tmp0_safe_receiver_0 ? null : hashCode(tmp0_safe_receiver_0);
     return tmp ^ (null == tmp1_elvis_lhs_0 ? 0 : tmp1_elvis_lhs_0);
    }, protoOf(EntryRef).toString = function() {
     return toString_0(this.f1()) + "=" + toString_0(this.g1());
    }, protoOf(InternalHashMap).k = function() {
     return this.c5_1;
    }, protoOf(InternalHashMap).i1 = function(value) {
     return function($this, value) {
      var i = $this.z4_1;
      for (;(i = i - 1 | 0) >= 0; ) if ($this.w4_1[i] >= 0 && equals(ensureNotNull($this.v4_1)[i], value)) return i;
      return -1;
     }(this, value) >= 0;
    }, protoOf(InternalHashMap).j1 = function(key) {
     var index = findKey(this, key);
     return index < 0 ? null : ensureNotNull(this.v4_1)[index];
    }, protoOf(InternalHashMap).y3 = function(key) {
     return findKey(this, key) >= 0;
    }, protoOf(InternalHashMap).n1 = function(key, value) {
     var index = addKey(this, key), valuesArray = allocateValuesArray(this);
     if (index < 0) {
      var oldValue = valuesArray[(0 | -index) - 1 | 0];
      return valuesArray[(0 | -index) - 1 | 0] = value, oldValue;
     }
     return valuesArray[index] = value, null;
    }, protoOf(InternalHashMap).o1 = function(from) {
     this.b4(), function($this, from) {
      if (from.q()) return !1;
      ensureExtraCapacity($this, from.k());
      for (var it = from.h(), updated = !1; it.i(); ) putEntry($this, it.j()) && (updated = !0);
     }(this, from.m1());
    }, protoOf(InternalHashMap).p1 = function() {
     this.b4();
     var inductionVariable = 0, last = this.z4_1 - 1 | 0;
     if (inductionVariable <= last) do {
      var i = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0;
      var hash = this.w4_1[i];
      hash >= 0 && (this.x4_1[hash] = 0, this.w4_1[i] = -1);
     } while (i !== last);
     resetRange(this.u4_1, 0, this.z4_1);
     var tmp0_safe_receiver = this.v4_1;
     null == tmp0_safe_receiver || resetRange(tmp0_safe_receiver, 0, this.z4_1), this.c5_1 = 0, 
     this.z4_1 = 0, registerModification(this);
    }, protoOf(InternalHashMap).equals = function(other) {
     var tmp, tmp_0;
     other === this ? tmp = !0 : (tmp_0 = !(null == other || !isInterface(other, KtMap)) && function($this, other) {
      return $this.c5_1 === other.k() && $this.n4(other.m1());
     }(this, other), tmp = tmp_0);
     return tmp;
    }, protoOf(InternalHashMap).hashCode = function() {
     for (var result = 0, it = this.j4(); it.i(); ) result = result + it.e6() | 0;
     return result;
    }, protoOf(InternalHashMap).toString = function() {
     var sb = StringBuilder_init_$Create$(2 + imul(this.c5_1, 3) | 0);
     sb.i6("{");
     for (var i = 0, it = this.j4(); it.i(); ) i > 0 && sb.i6(", "), it.f6(sb), i = i + 1 | 0;
     return sb.i6("}"), sb.toString();
    }, protoOf(InternalHashMap).b4 = function() {
     if (this.d5_1) throw UnsupportedOperationException_init_$Create$();
    }, protoOf(InternalHashMap).m4 = function(entry) {
     var index = findKey(this, entry.f1());
     return !(index < 0) && equals(ensureNotNull(this.v4_1)[index], entry.g1());
    }, protoOf(InternalHashMap).k6 = function(entry) {
     return this.m4(isInterface(entry, Entry) ? entry : THROW_CCE());
    }, protoOf(InternalHashMap).a4 = function() {
     return new KeysItr(this);
    }, protoOf(InternalHashMap).g4 = function() {
     return new ValuesItr(this);
    }, protoOf(InternalHashMap).j4 = function() {
     return new EntriesItr(this);
    }, protoOf(LinkedHashMap).l2 = function() {
     return this.w3_1.b4();
    }, protoOf(LinkedHashSet).l2 = function() {
     return this.t4_1.b4();
    }, protoOf(CoroutineImpl).a7 = function() {
     return ensureNotNull(this.z6_1);
    }, protoOf(CoroutineImpl).b7 = function(result) {
     var tmp, current = this;
     if (function($this) {
      var tmp = $this;
      return tmp instanceof Failure;
     }(result)) tmp = null; else {
      tmp = null == result || null != result ? result : THROW_CCE();
     }
     for (var currentResult = tmp, currentException = Result__exceptionOrNull_impl_p6xea9(result); ;) {
      var $this$with = current;
      null == currentException ? $this$with.w6_1 = currentResult : ($this$with.u6_1 = $this$with.v6_1, 
      $this$with.x6_1 = currentException);
      try {
       var outcome = $this$with.c7();
       if (outcome === get_COROUTINE_SUSPENDED()) return Unit_instance;
       currentResult = outcome, currentException = null;
      } catch ($p) {
       currentResult = null, currentException = $p;
      }
      $this$with.e7();
      var completion = ensureNotNull($this$with.t6_1);
      if (!(completion instanceof CoroutineImpl)) {
       if (null != currentException) {
        var tmp$ret$2 = createFailure(ensureNotNull(currentException));
        completion.f7(tmp$ret$2);
       } else {
        var tmp$ret$4 = currentResult;
        completion.f7(tmp$ret$4);
       }
       return Unit_instance;
      }
      current = completion;
     }
    }, protoOf(CoroutineImpl).f7 = function(result) {
     return this.b7(result);
    }, protoOf(CompletedContinuation).a7 = function() {
     throw IllegalStateException_init_$Create$_0(toString_1("This continuation is already complete"));
    }, protoOf(CompletedContinuation).b7 = function(result) {
     throw IllegalStateException_init_$Create$_0(toString_1("This continuation is already complete"));
    }, protoOf(CompletedContinuation).f7 = function(result) {
     return this.b7(result);
    }, protoOf(CompletedContinuation).toString = function() {
     return "This continuation is already complete";
    }, protoOf(InterceptedCoroutine).g7 = function() {
     var tmp, tmp0_elvis_lhs = this.d7_1;
     if (null == tmp0_elvis_lhs) {
      var tmp1_safe_receiver = this.a7().h7(Key_instance), tmp2_elvis_lhs = null == tmp1_safe_receiver ? null : tmp1_safe_receiver.i7(this), this_0 = null == tmp2_elvis_lhs ? this : tmp2_elvis_lhs;
      this.d7_1 = this_0, tmp = this_0;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }, protoOf(InterceptedCoroutine).e7 = function() {
     var intercepted = this.d7_1;
     null != intercepted && intercepted !== this && ensureNotNull(this.a7().h7(Key_instance)).j7(intercepted), 
     this.d7_1 = CompletedContinuation_instance;
    }, protoOf(SafeContinuation).a7 = function() {
     return this.k7_1.a7();
    }, protoOf(SafeContinuation).f7 = function(result) {
     var cur = this.l7_1;
     if (cur === CoroutineSingletons_UNDECIDED_getInstance()) this.l7_1 = result; else {
      if (cur !== get_COROUTINE_SUSPENDED()) throw IllegalStateException_init_$Create$_0("Already resumed");
      this.l7_1 = CoroutineSingletons_RESUMED_getInstance(), this.k7_1.f7(result);
     }
    }, protoOf(SafeContinuation).m7 = function() {
     if (this.l7_1 === CoroutineSingletons_UNDECIDED_getInstance()) return this.l7_1 = get_COROUTINE_SUSPENDED(), 
     get_COROUTINE_SUSPENDED();
     var tmp, result = this.l7_1;
     if (result === CoroutineSingletons_RESUMED_getInstance()) tmp = get_COROUTINE_SUSPENDED(); else {
      if (result instanceof Failure) throw result.n7_1;
      tmp = result;
     }
     return tmp;
    }, protoOf(createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$1).c7 = function() {
     if (null != this.x6_1) throw this.x6_1;
     var a = this.a8_1;
     return "function" == typeof a ? a(this.b8_1, this.c8_1) : this.a8_1.q7(this.b8_1, this.c8_1);
    }, protoOf(createSimpleCoroutineForSuspendFunction$1).c7 = function() {
     if (null != this.x6_1) throw this.x6_1;
     return this.w6_1;
    }, protoOf(EmptyContinuation$$inlined$Continuation$1).a7 = function() {
     return this.l8_1;
    }, protoOf(EmptyContinuation$$inlined$Continuation$1).b7 = function(result) {
     throwOnFailure(result);
     return null == result || null != result || THROW_CCE(), Unit_instance;
    }, protoOf(EmptyContinuation$$inlined$Continuation$1).f7 = function(result) {
     return this.b7(result);
    }, protoOf(KClassImpl).p8 = function() {
     return this.o8_1;
    }, protoOf(KClassImpl).equals = function(other) {
     return !(other instanceof NothingKClassImpl) && (!(other instanceof ErrorKClass) && (other instanceof KClassImpl && equals(this.p8(), other.p8())));
    }, protoOf(KClassImpl).hashCode = function() {
     var tmp0_safe_receiver = this.m8(), tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : getStringHashCode(tmp0_safe_receiver);
     return null == tmp1_elvis_lhs ? 0 : tmp1_elvis_lhs;
    }, protoOf(KClassImpl).toString = function() {
     return "class " + this.m8();
    }, protoOf(NothingKClassImpl).m8 = function() {
     return this.r8_1;
    }, protoOf(NothingKClassImpl).n8 = function(value) {
     return !1;
    }, protoOf(NothingKClassImpl).p8 = function() {
     throw UnsupportedOperationException_init_$Create$_0("There's no native JS class for Nothing type");
    }, protoOf(NothingKClassImpl).equals = function(other) {
     return other === this;
    }, protoOf(NothingKClassImpl).hashCode = function() {
     return 0;
    }, protoOf(ErrorKClass).m8 = function() {
     throw IllegalStateException_init_$Create$_0(toString_1("Unknown simpleName for ErrorKClass"));
    }, protoOf(ErrorKClass).n8 = function(value) {
     throw IllegalStateException_init_$Create$_0(toString_1("Can's check isInstance on ErrorKClass"));
    }, protoOf(ErrorKClass).equals = function(other) {
     return other === this;
    }, protoOf(ErrorKClass).hashCode = function() {
     return 0;
    }, protoOf(PrimitiveKClassImpl).equals = function(other) {
     return other instanceof PrimitiveKClassImpl && (protoOf(KClassImpl).equals.call(this, other) && this.t8_1 === other.t8_1);
    }, protoOf(PrimitiveKClassImpl).m8 = function() {
     return this.t8_1;
    }, protoOf(PrimitiveKClassImpl).n8 = function(value) {
     return this.u8_1(value);
    }, protoOf(SimpleKClassImpl).m8 = function() {
     return this.w8_1;
    }, protoOf(SimpleKClassImpl).n8 = function(value) {
     return jsIsType(value, this.p8());
    }, protoOf(PrimitiveClasses).x8 = function() {
     return this.anyClass;
    }, protoOf(PrimitiveClasses).y8 = function() {
     return this.numberClass;
    }, protoOf(PrimitiveClasses).z8 = function() {
     return this.nothingClass;
    }, protoOf(PrimitiveClasses).a9 = function() {
     return this.booleanClass;
    }, protoOf(PrimitiveClasses).b9 = function() {
     return this.byteClass;
    }, protoOf(PrimitiveClasses).c9 = function() {
     return this.shortClass;
    }, protoOf(PrimitiveClasses).d9 = function() {
     return this.intClass;
    }, protoOf(PrimitiveClasses).e9 = function() {
     return this.floatClass;
    }, protoOf(PrimitiveClasses).f9 = function() {
     return this.doubleClass;
    }, protoOf(PrimitiveClasses).g9 = function() {
     return this.arrayClass;
    }, protoOf(PrimitiveClasses).h9 = function() {
     return this.stringClass;
    }, protoOf(PrimitiveClasses).i9 = function() {
     return this.throwableClass;
    }, protoOf(PrimitiveClasses).j9 = function() {
     return this.booleanArrayClass;
    }, protoOf(PrimitiveClasses).k9 = function() {
     return this.charArrayClass;
    }, protoOf(PrimitiveClasses).l9 = function() {
     return this.byteArrayClass;
    }, protoOf(PrimitiveClasses).m9 = function() {
     return this.shortArrayClass;
    }, protoOf(PrimitiveClasses).n9 = function() {
     return this.intArrayClass;
    }, protoOf(PrimitiveClasses).o9 = function() {
     return this.longArrayClass;
    }, protoOf(PrimitiveClasses).p9 = function() {
     return this.floatArrayClass;
    }, protoOf(PrimitiveClasses).q9 = function() {
     return this.doubleArrayClass;
    }, protoOf(PrimitiveClasses).functionClass = function(arity) {
     var tmp, $arity, tmp0_elvis_lhs = get_functionClasses()[arity];
     if (null == tmp0_elvis_lhs) {
      var result = new PrimitiveKClassImpl(Function, "Function" + arity, ($arity = arity, 
      function(it) {
       return "function" == typeof it && it.length === $arity;
      }));
      get_functionClasses()[arity] = result, tmp = result;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }, protoOf(ConstrainedOnceSequence).h = function() {
     var tmp0_elvis_lhs = this.r9_1;
     if (null == tmp0_elvis_lhs) throw IllegalStateException_init_$Create$_0("This sequence can be consumed only once.");
     var sequence = tmp0_elvis_lhs;
     return this.r9_1 = null, sequence.h();
    }, protoOf(StringBuilder).a = function() {
     return this.g6_1.length;
    }, protoOf(StringBuilder).b = function(index) {
     var this_0 = this.g6_1;
     if (!(0 <= index && index <= (charSequenceLength(this_0) - 1 | 0))) throw IndexOutOfBoundsException_init_$Create$_0("index: " + index + ", length: " + this.a() + "}");
     return charSequenceGet(this_0, index);
    }, protoOf(StringBuilder).c = function(startIndex, endIndex) {
     return this.g6_1.substring(startIndex, endIndex);
    }, protoOf(StringBuilder).j6 = function(value) {
     return this.g6_1 = this.g6_1 + toString(value), this;
    }, protoOf(StringBuilder).f = function(value) {
     return this.g6_1 = this.g6_1 + toString_0(value), this;
    }, protoOf(StringBuilder).s9 = function(value, startIndex, endIndex) {
     return this.t9(null == value ? "null" : value, startIndex, endIndex);
    }, protoOf(StringBuilder).h6 = function(value) {
     return this.g6_1 = this.g6_1 + toString_0(value), this;
    }, protoOf(StringBuilder).u9 = function(value) {
     return this.i6(value.toString());
    }, protoOf(StringBuilder).v9 = function(value) {
     return this.i6(value.toString());
    }, protoOf(StringBuilder).i6 = function(value) {
     var tmp_0 = this.g6_1;
     return this.g6_1 = tmp_0 + (null == value ? "null" : value), this;
    }, protoOf(StringBuilder).w9 = function(newLength) {
     if (newLength < 0) throw IllegalArgumentException_init_$Create$_0("Negative new length: " + newLength + ".");
     if (newLength <= this.a()) {
      this.g6_1 = this.g6_1.substring(0, newLength);
     } else {
      var inductionVariable = this.a();
      if (inductionVariable < newLength) do {
       inductionVariable = inductionVariable + 1 | 0, this.g6_1 = this.g6_1 + toString(0);
      } while (inductionVariable < newLength);
     }
    }, protoOf(StringBuilder).toString = function() {
     return this.g6_1;
    }, protoOf(StringBuilder).x9 = function() {
     return this.g6_1 = "", this;
    }, protoOf(StringBuilder).t9 = function(value, startIndex, endIndex) {
     var stringCsq = toString_1(value);
     Companion_instance_4.y9(startIndex, endIndex, stringCsq.length);
     var tmp_0 = this.g6_1;
     return this.g6_1 = tmp_0 + stringCsq.substring(startIndex, endIndex), this;
    }, protoOf(Companion_3).ha = function(literal) {
     var pattern = this.ea_1;
     return literal.replace(pattern, "\\$&");
    }, protoOf(Companion_3).ia = function(literal) {
     var pattern = this.ga_1;
     return literal.replace(pattern, "$$$$");
    }, protoOf(Regex).ja = function(input, startIndex) {
     if (startIndex < 0 || startIndex > charSequenceLength(input)) throw IndexOutOfBoundsException_init_$Create$_0("Start index out of bounds: " + startIndex + ", input length: " + charSequenceLength(input));
     return findNext(this.ba_1, toString_1(input), startIndex, this.ba_1);
    }, protoOf(Regex).ka = function(input, startIndex) {
     if (startIndex < 0 || startIndex > charSequenceLength(input)) throw IndexOutOfBoundsException_init_$Create$_0("Start index out of bounds: " + startIndex + ", input length: " + charSequenceLength(input));
     var this$0, $input, $startIndex, tmp = (this$0 = this, $input = input, $startIndex = startIndex, 
     function() {
      return this$0.ja($input, $startIndex);
     });
     return new GeneratorSequence(tmp, Regex$findAll$lambda_0);
    }, protoOf(Regex).la = function(input, startIndex, $super) {
     return startIndex = startIndex === VOID ? 0 : startIndex, $super === VOID ? this.ka(input, startIndex) : $super.ka.call(this, input, startIndex);
    }, protoOf(Regex).ma = function(input) {
     return findNext(initMatchesEntirePattern(this), toString_1(input), 0, this.ba_1);
    }, protoOf(Regex).na = function(input, limit) {
     !function(limit) {
      if (!(limit >= 0)) {
       throw IllegalArgumentException_init_$Create$_0(toString_1("Limit must be non-negative, but was " + limit));
      }
     }(limit);
     for (var it = this.la(input), matches = 0 === limit ? it : function(_this__u8e3s4, n) {
      if (!(n >= 0)) throw IllegalArgumentException_init_$Create$_0(toString_1("Requested element count " + n + " is less than zero."));
      return 0 === n ? emptySequence() : isInterface(_this__u8e3s4, DropTakeSequence) ? _this__u8e3s4.c1(n) : new TakeSequence(_this__u8e3s4, n);
     }(it, limit - 1 | 0), result = ArrayList_init_$Create$(), lastStart = 0, _iterator__ex2g4s = matches.h(); _iterator__ex2g4s.i(); ) {
      var match = _iterator__ex2g4s.j();
      result.e(toString_1(charSequenceSubSequence(input, lastStart, match.oa().sa()))), 
      lastStart = match.oa().ta() + 1 | 0;
     }
     return result.e(toString_1(charSequenceSubSequence(input, lastStart, charSequenceLength(input)))), 
     result;
    }, protoOf(Regex).toString = function() {
     return this.ba_1.toString();
    }, protoOf(MatchGroup).toString = function() {
     return "MatchGroup(value=" + this.ua_1 + ")";
    }, protoOf(MatchGroup).hashCode = function() {
     return getStringHashCode(this.ua_1);
    }, protoOf(MatchGroup).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof MatchGroup)) return !1;
     var tmp0_other_with_cast = other instanceof MatchGroup ? other : THROW_CCE();
     return this.ua_1 === tmp0_other_with_cast.ua_1;
    }, protoOf(findNext$1$groups$1).k = function() {
     return this.ya_1.length;
    }, protoOf(findNext$1$groups$1).h = function() {
     var this$0;
     return map(function(_this__u8e3s4) {
      return new asSequence$$inlined$Sequence$1_0(_this__u8e3s4);
     }(numberRangeToNumber(0, this.k() - 1 | 0)), (this$0 = this, function(it) {
      return this$0.p(it);
     })).h();
    }, protoOf(findNext$1$groups$1).p = function(index) {
     var tmp0_safe_receiver = this.ya_1[index];
     return null == tmp0_safe_receiver ? null : new MatchGroup(tmp0_safe_receiver);
    }, protoOf(findNext$1$groupValues$1).k = function() {
     return this.hb_1.length;
    }, protoOf(findNext$1$groupValues$1).p = function(index) {
     var tmp0_elvis_lhs = this.hb_1[index];
     return null == tmp0_elvis_lhs ? "" : tmp0_elvis_lhs;
    }, protoOf(findNext$1).oa = function() {
     return this.ab_1;
    }, protoOf(findNext$1).ib = function() {
     if (null == this.cb_1) {
      this.cb_1 = new findNext$1$groupValues$1(this.eb_1);
     }
     return ensureNotNull(this.cb_1);
    }, protoOf(findNext$1).j = function() {
     return findNext(this.fb_1, this.gb_1, this.db_1.q() ? function($this, index) {
      if (index < get_lastIndex_3($this.gb_1)) {
       var code1 = $this.gb_1.charCodeAt(index);
       if (55296 <= code1 && code1 <= 56319) {
        var code2 = $this.gb_1.charCodeAt(index + 1 | 0);
        if (56320 <= code2 && code2 <= 57343) return index + 2 | 0;
       }
      }
      return index + 1 | 0;
     }(this, this.db_1.sa()) : this.db_1.ta() + 1 | 0, this.fb_1);
    }, protoOf(ExceptionTraceBuilder).nb = function(exception) {
     return dumpFullTrace(this, exception, "", ""), this.jb_1.toString();
    }, protoOf(AbstractCollection).d1 = function(element) {
     var tmp$ret$0;
     $l$block_0: {
      if (!!isInterface(this, Collection) && this.q()) tmp$ret$0 = !1; else {
       for (var _iterator__ex2g4s = this.h(); _iterator__ex2g4s.i(); ) {
        if (equals(_iterator__ex2g4s.j(), element)) {
         tmp$ret$0 = !0;
         break $l$block_0;
        }
       }
       tmp$ret$0 = !1;
      }
     }
     return tmp$ret$0;
    }, protoOf(AbstractCollection).e1 = function(elements) {
     var tmp$ret$0;
     $l$block_0: {
      if (!!isInterface(elements, Collection) && elements.q()) tmp$ret$0 = !0; else {
       for (var _iterator__ex2g4s = elements.h(); _iterator__ex2g4s.i(); ) {
        var element = _iterator__ex2g4s.j();
        if (!this.d1(element)) {
         tmp$ret$0 = !1;
         break $l$block_0;
        }
       }
       tmp$ret$0 = !0;
      }
     }
     return tmp$ret$0;
    }, protoOf(AbstractCollection).q = function() {
     return 0 === this.k();
    }, protoOf(AbstractCollection).toString = function() {
     return joinToString_0(this, ", ", "[", "]", VOID, VOID, (this$0 = this, function(it) {
      return it === this$0 ? "(this Collection)" : toString_0(it);
     }));
     var this$0;
    }, protoOf(AbstractCollection).toArray = function() {
     return collectionToArray(this);
    }, protoOf(IteratorImpl_0).i = function() {
     return this.ob_1 < this.pb_1.k();
    }, protoOf(IteratorImpl_0).j = function() {
     if (!this.i()) throw NoSuchElementException_init_$Create$();
     var _unary__edvuaz = this.ob_1;
     return this.ob_1 = _unary__edvuaz + 1 | 0, this.pb_1.p(_unary__edvuaz);
    }, protoOf(Companion_4).p3 = function(index, size) {
     if (index < 0 || index >= size) throw IndexOutOfBoundsException_init_$Create$_0("index: " + index + ", size: " + size);
    }, protoOf(Companion_4).w2 = function(index, size) {
     if (index < 0 || index > size) throw IndexOutOfBoundsException_init_$Create$_0("index: " + index + ", size: " + size);
    }, protoOf(Companion_4).j2 = function(fromIndex, toIndex, size) {
     if (fromIndex < 0 || toIndex > size) throw IndexOutOfBoundsException_init_$Create$_0("fromIndex: " + fromIndex + ", toIndex: " + toIndex + ", size: " + size);
     if (fromIndex > toIndex) throw IllegalArgumentException_init_$Create$_0("fromIndex: " + fromIndex + " > toIndex: " + toIndex);
    }, protoOf(Companion_4).y9 = function(startIndex, endIndex, size) {
     if (startIndex < 0 || endIndex > size) throw IndexOutOfBoundsException_init_$Create$_0("startIndex: " + startIndex + ", endIndex: " + endIndex + ", size: " + size);
     if (startIndex > endIndex) throw IllegalArgumentException_init_$Create$_0("startIndex: " + startIndex + " > endIndex: " + endIndex);
    }, protoOf(Companion_4).h5 = function(oldCapacity, minCapacity) {
     var newCapacity = oldCapacity + (oldCapacity >> 1) | 0;
     return (newCapacity - minCapacity | 0) < 0 && (newCapacity = minCapacity), (newCapacity - 2147483639 | 0) > 0 && (newCapacity = minCapacity > 2147483639 ? 2147483647 : 2147483639), 
     newCapacity;
    }, protoOf(Companion_4).c3 = function(c) {
     for (var hashCode_0 = 1, _iterator__ex2g4s = c.h(); _iterator__ex2g4s.i(); ) {
      var e = _iterator__ex2g4s.j(), tmp = imul(31, hashCode_0), tmp1_elvis_lhs = null == e ? null : hashCode(e);
      hashCode_0 = tmp + (null == tmp1_elvis_lhs ? 0 : tmp1_elvis_lhs) | 0;
     }
     return hashCode_0;
    }, protoOf(Companion_4).b3 = function(c, other) {
     if (c.k() !== other.k()) return !1;
     for (var otherIterator = other.h(), _iterator__ex2g4s = c.h(); _iterator__ex2g4s.i(); ) {
      if (!equals(_iterator__ex2g4s.j(), otherIterator.j())) return !1;
     }
     return !0;
    }, protoOf(AbstractList).h = function() {
     return new IteratorImpl_0(this);
    }, protoOf(AbstractList).equals = function(other) {
     return other === this || !(null == other || !isInterface(other, KtList)) && Companion_instance_4.b3(this, other);
    }, protoOf(AbstractList).hashCode = function() {
     return Companion_instance_4.c3(this);
    }, protoOf(AbstractMap$keys$1$iterator$1).i = function() {
     return this.qb_1.i();
    }, protoOf(AbstractMap$keys$1$iterator$1).j = function() {
     return this.qb_1.j().f1();
    }, protoOf(AbstractMap$values$1$iterator$1).i = function() {
     return this.rb_1.i();
    }, protoOf(AbstractMap$values$1$iterator$1).j = function() {
     return this.rb_1.j().g1();
    }, protoOf(AbstractMap$keys$1).y3 = function(element) {
     return this.sb_1.h1(element);
    }, protoOf(AbstractMap$keys$1).d1 = function(element) {
     return (null == element || null != element) && this.y3(null == element || null != element ? element : THROW_CCE());
    }, protoOf(AbstractMap$keys$1).h = function() {
     return new AbstractMap$keys$1$iterator$1(this.sb_1.m1().h());
    }, protoOf(AbstractMap$keys$1).k = function() {
     return this.sb_1.k();
    }, protoOf(AbstractMap$values$1).d4 = function(element) {
     return this.tb_1.i1(element);
    }, protoOf(AbstractMap$values$1).d1 = function(element) {
     return (null == element || null != element) && this.d4(null == element || null != element ? element : THROW_CCE());
    }, protoOf(AbstractMap$values$1).h = function() {
     return new AbstractMap$values$1$iterator$1(this.tb_1.m1().h());
    }, protoOf(AbstractMap$values$1).k = function() {
     return this.tb_1.k();
    }, protoOf(AbstractMap).h1 = function(key) {
     return !(null == implFindEntry(this, key));
    }, protoOf(AbstractMap).i1 = function(value) {
     var tmp$ret$0, tmp0 = this.m1();
     $l$block_0: {
      if (!!isInterface(tmp0, Collection) && tmp0.q()) tmp$ret$0 = !1; else {
       for (var _iterator__ex2g4s = tmp0.h(); _iterator__ex2g4s.i(); ) {
        if (equals(_iterator__ex2g4s.j().g1(), value)) {
         tmp$ret$0 = !0;
         break $l$block_0;
        }
       }
       tmp$ret$0 = !1;
      }
     }
     return tmp$ret$0;
    }, protoOf(AbstractMap).l3 = function(entry) {
     if (null == entry || !isInterface(entry, Entry)) return !1;
     var key = entry.f1(), value = entry.g1(), ourValue = (isInterface(this, KtMap) ? this : THROW_CCE()).j1(key);
     return !!equals(value, ourValue) && !(null == ourValue && !(isInterface(this, KtMap) ? this : THROW_CCE()).h1(key));
    }, protoOf(AbstractMap).equals = function(other) {
     if (other === this) return !0;
     if (null == other || !isInterface(other, KtMap)) return !1;
     if (this.k() !== other.k()) return !1;
     var tmp$ret$0, tmp0 = other.m1();
     $l$block_0: {
      if (!!isInterface(tmp0, Collection) && tmp0.q()) tmp$ret$0 = !0; else {
       for (var _iterator__ex2g4s = tmp0.h(); _iterator__ex2g4s.i(); ) {
        var element = _iterator__ex2g4s.j();
        if (!this.l3(element)) {
         tmp$ret$0 = !1;
         break $l$block_0;
        }
       }
       tmp$ret$0 = !0;
      }
     }
     return tmp$ret$0;
    }, protoOf(AbstractMap).j1 = function(key) {
     var tmp0_safe_receiver = implFindEntry(this, key);
     return null == tmp0_safe_receiver ? null : tmp0_safe_receiver.g1();
    }, protoOf(AbstractMap).hashCode = function() {
     return hashCode(this.m1());
    }, protoOf(AbstractMap).q = function() {
     return 0 === this.k();
    }, protoOf(AbstractMap).k = function() {
     return this.m1().k();
    }, protoOf(AbstractMap).k1 = function() {
     if (null == this.j3_1) {
      this.j3_1 = new AbstractMap$keys$1(this);
     }
     return ensureNotNull(this.j3_1);
    }, protoOf(AbstractMap).toString = function() {
     return joinToString_0(this.m1(), ", ", "{", "}", VOID, VOID, AbstractMap$toString$lambda(this));
    }, protoOf(AbstractMap).l1 = function() {
     if (null == this.k3_1) {
      this.k3_1 = new AbstractMap$values$1(this);
     }
     return ensureNotNull(this.k3_1);
    }, protoOf(Companion_6).n3 = function(c) {
     for (var hashCode_0 = 0, _iterator__ex2g4s = c.h(); _iterator__ex2g4s.i(); ) {
      var element = _iterator__ex2g4s.j(), tmp = hashCode_0, tmp1_elvis_lhs = null == element ? null : hashCode(element);
      hashCode_0 = tmp + (null == tmp1_elvis_lhs ? 0 : tmp1_elvis_lhs) | 0;
     }
     return hashCode_0;
    }, protoOf(Companion_6).m3 = function(c, other) {
     return c.k() === other.k() && c.e1(other);
    }, protoOf(AbstractSet).equals = function(other) {
     return other === this || !(null == other || !isInterface(other, KtSet)) && Companion_instance_6.m3(this, other);
    }, protoOf(AbstractSet).hashCode = function() {
     return Companion_instance_6.n3(this);
    }, protoOf(ArrayDeque).k = function() {
     return this.xb_1;
    }, protoOf(ArrayDeque).q = function() {
     return 0 === this.xb_1;
    }, protoOf(ArrayDeque).ac = function(element) {
     registerModification_0(this), ensureCapacity_0(this, this.xb_1 + 1 | 0), this.vb_1 = decremented(this, this.vb_1), 
     this.wb_1[this.vb_1] = element, this.xb_1 = this.xb_1 + 1 | 0;
    }, protoOf(ArrayDeque).bc = function(element) {
     registerModification_0(this), ensureCapacity_0(this, this.xb_1 + 1 | 0);
     var tmp = this.wb_1, index = this.xb_1;
     tmp[positiveMod(this, this.vb_1 + index | 0)] = element, this.xb_1 = this.xb_1 + 1 | 0;
    }, protoOf(ArrayDeque).cc = function() {
     if (this.q()) throw NoSuchElementException_init_$Create$_0("ArrayDeque is empty.");
     registerModification_0(this);
     var internalIndex = this.vb_1, tmp = this.wb_1[internalIndex], element = null == tmp || null != tmp ? tmp : THROW_CCE();
     return this.wb_1[this.vb_1] = null, this.vb_1 = incremented(this, this.vb_1), this.xb_1 = this.xb_1 - 1 | 0, 
     element;
    }, protoOf(ArrayDeque).dc = function() {
     return this.q() ? null : this.cc();
    }, protoOf(ArrayDeque).ec = function() {
     if (this.q()) throw NoSuchElementException_init_$Create$_0("ArrayDeque is empty.");
     registerModification_0(this);
     var index = get_lastIndex_2(this), internalLastIndex = positiveMod(this, this.vb_1 + index | 0), tmp = this.wb_1[internalLastIndex], element = null == tmp || null != tmp ? tmp : THROW_CCE();
     return this.wb_1[internalLastIndex] = null, this.xb_1 = this.xb_1 - 1 | 0, element;
    }, protoOf(ArrayDeque).e = function(element) {
     return this.bc(element), !0;
    }, protoOf(ArrayDeque).x2 = function(index, element) {
     if (Companion_instance_4.w2(index, this.xb_1), index === this.xb_1) return this.bc(element), 
     Unit_instance;
     if (0 === index) return this.ac(element), Unit_instance;
     registerModification_0(this), ensureCapacity_0(this, this.xb_1 + 1 | 0);
     var internalIndex = positiveMod(this, this.vb_1 + index | 0);
     if (index < this.xb_1 + 1 >> 1) {
      var decrementedInternalIndex = decremented(this, internalIndex), decrementedHead = decremented(this, this.vb_1);
      if (decrementedInternalIndex >= this.vb_1) this.wb_1[decrementedHead] = this.wb_1[this.vb_1], 
      arrayCopy(this.wb_1, this.wb_1, this.vb_1, this.vb_1 + 1 | 0, decrementedInternalIndex + 1 | 0); else arrayCopy(this.wb_1, this.wb_1, this.vb_1 - 1 | 0, this.vb_1, this.wb_1.length), 
      this.wb_1[this.wb_1.length - 1 | 0] = this.wb_1[0], arrayCopy(this.wb_1, this.wb_1, 0, 1, decrementedInternalIndex + 1 | 0);
      this.wb_1[decrementedInternalIndex] = element, this.vb_1 = decrementedHead;
     } else {
      var index_0 = this.xb_1, tail = positiveMod(this, this.vb_1 + index_0 | 0);
      if (internalIndex < tail) arrayCopy(this.wb_1, this.wb_1, internalIndex + 1 | 0, internalIndex, tail); else arrayCopy(this.wb_1, this.wb_1, 1, 0, tail), 
      this.wb_1[0] = this.wb_1[this.wb_1.length - 1 | 0], arrayCopy(this.wb_1, this.wb_1, internalIndex + 1 | 0, internalIndex, this.wb_1.length - 1 | 0);
      this.wb_1[internalIndex] = element;
     }
     this.xb_1 = this.xb_1 + 1 | 0;
    }, protoOf(ArrayDeque).o = function(elements) {
     if (elements.q()) return !1;
     registerModification_0(this), ensureCapacity_0(this, this.xb_1 + elements.k() | 0);
     var index = this.xb_1;
     return function($this, internalIndex, elements) {
      var iterator = elements.h(), inductionVariable = internalIndex, last = $this.wb_1.length;
      if (inductionVariable < last) $l$loop: do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + 1 | 0, !iterator.i()) break $l$loop;
       $this.wb_1[index] = iterator.j();
      } while (inductionVariable < last);
      var inductionVariable_0 = 0, last_0 = $this.vb_1;
      if (inductionVariable_0 < last_0) $l$loop_0: do {
       var index_0 = inductionVariable_0;
       if (inductionVariable_0 = inductionVariable_0 + 1 | 0, !iterator.i()) break $l$loop_0;
       $this.wb_1[index_0] = iterator.j();
      } while (inductionVariable_0 < last_0);
      $this.xb_1 = $this.xb_1 + elements.k() | 0;
     }(this, positiveMod(this, this.vb_1 + index | 0), elements), !0;
    }, protoOf(ArrayDeque).p = function(index) {
     Companion_instance_4.p3(index, this.xb_1);
     var internalIndex = positiveMod(this, this.vb_1 + index | 0), tmp = this.wb_1[internalIndex];
     return null == tmp || null != tmp ? tmp : THROW_CCE();
    }, protoOf(ArrayDeque).d1 = function(element) {
     return !(-1 === this.z2(element));
    }, protoOf(ArrayDeque).z2 = function(element) {
     var index = this.xb_1, tail = positiveMod(this, this.vb_1 + index | 0);
     if (this.vb_1 < tail) {
      var inductionVariable = this.vb_1;
      if (inductionVariable < tail) do {
       var index_0 = inductionVariable;
       if (inductionVariable = inductionVariable + 1 | 0, equals(element, this.wb_1[index_0])) return index_0 - this.vb_1 | 0;
      } while (inductionVariable < tail);
     } else if (this.vb_1 >= tail) {
      var inductionVariable_0 = this.vb_1, last = this.wb_1.length;
      if (inductionVariable_0 < last) do {
       var index_1 = inductionVariable_0;
       if (inductionVariable_0 = inductionVariable_0 + 1 | 0, equals(element, this.wb_1[index_1])) return index_1 - this.vb_1 | 0;
      } while (inductionVariable_0 < last);
      var inductionVariable_1 = 0;
      if (inductionVariable_1 < tail) do {
       var index_2 = inductionVariable_1;
       if (inductionVariable_1 = inductionVariable_1 + 1 | 0, equals(element, this.wb_1[index_2])) return (index_2 + this.wb_1.length | 0) - this.vb_1 | 0;
      } while (inductionVariable_1 < tail);
     }
     return -1;
    }, protoOf(ArrayDeque).r2 = function(index) {
     if (Companion_instance_4.p3(index, this.xb_1), index === get_lastIndex_2(this)) return this.ec();
     if (0 === index) return this.cc();
     registerModification_0(this);
     var internalIndex = positiveMod(this, this.vb_1 + index | 0), tmp = this.wb_1[internalIndex], element = null == tmp || null != tmp ? tmp : THROW_CCE();
     if (index < this.xb_1 >> 1) {
      if (internalIndex >= this.vb_1) arrayCopy(this.wb_1, this.wb_1, this.vb_1 + 1 | 0, this.vb_1, internalIndex); else arrayCopy(this.wb_1, this.wb_1, 1, 0, internalIndex), 
      this.wb_1[0] = this.wb_1[this.wb_1.length - 1 | 0], arrayCopy(this.wb_1, this.wb_1, this.vb_1 + 1 | 0, this.vb_1, this.wb_1.length - 1 | 0);
      this.wb_1[this.vb_1] = null, this.vb_1 = incremented(this, this.vb_1);
     } else {
      var index_0 = get_lastIndex_2(this), internalLastIndex = positiveMod(this, this.vb_1 + index_0 | 0);
      if (internalIndex <= internalLastIndex) arrayCopy(this.wb_1, this.wb_1, internalIndex, internalIndex + 1 | 0, internalLastIndex + 1 | 0); else arrayCopy(this.wb_1, this.wb_1, internalIndex, internalIndex + 1 | 0, this.wb_1.length), 
      this.wb_1[this.wb_1.length - 1 | 0] = this.wb_1[0], arrayCopy(this.wb_1, this.wb_1, 0, 1, internalLastIndex + 1 | 0);
      this.wb_1[internalLastIndex] = null;
     }
     return this.xb_1 = this.xb_1 - 1 | 0, element;
    }, protoOf(ArrayDeque).p1 = function() {
     if (!this.q()) {
      registerModification_0(this);
      var index = this.xb_1, tail = positiveMod(this, this.vb_1 + index | 0);
      nullifyNonEmpty(this, this.vb_1, tail);
     }
     this.vb_1 = 0, this.xb_1 = 0;
    }, protoOf(ArrayDeque).fc = function(array) {
     var tmp = array.length >= this.xb_1 ? array : function(reference, size) {
      return Array(size);
     }(0, this.xb_1), dest = isArray(tmp) ? tmp : THROW_CCE(), index = this.xb_1, tail = positiveMod(this, this.vb_1 + index | 0);
     this.vb_1 < tail ? arrayCopy(this.wb_1, dest, 0, this.vb_1, tail) : this.q() || (arrayCopy(this.wb_1, dest, 0, this.vb_1, this.wb_1.length), 
     arrayCopy(this.wb_1, dest, this.wb_1.length - this.vb_1 | 0, 0, tail));
     var tmp_0 = function(collectionSize, array) {
      return array;
     }(this.xb_1, dest);
     return isArray(tmp_0) ? tmp_0 : THROW_CCE();
    }, protoOf(ArrayDeque).r3 = function() {
     var size = this.xb_1, tmp$ret$0 = Array(size);
     return this.fc(tmp$ret$0);
    }, protoOf(ArrayDeque).toArray = function() {
     return this.r3();
    }, protoOf(ArrayDeque).y2 = function(fromIndex, toIndex) {
     Companion_instance_4.j2(fromIndex, toIndex, this.xb_1);
     var length = toIndex - fromIndex | 0;
     if (0 === length) return Unit_instance;
     if (length === this.xb_1) return this.p1(), Unit_instance;
     if (1 === length) return this.r2(fromIndex), Unit_instance;
     if (registerModification_0(this), fromIndex < (this.xb_1 - toIndex | 0)) {
      !function($this, fromIndex, toIndex) {
       for (var index = fromIndex - 1 | 0, copyFromIndex = positiveMod($this, $this.vb_1 + index | 0), index_0 = toIndex - 1 | 0, copyToIndex = positiveMod($this, $this.vb_1 + index_0 | 0), copyCount = fromIndex; copyCount > 0; ) {
        var tmp0 = copyCount, tmp1 = copyFromIndex + 1 | 0, c = copyToIndex + 1 | 0, segmentLength = Math.min(tmp0, tmp1, c);
        arrayCopy($this.wb_1, $this.wb_1, 1 + (copyToIndex - segmentLength | 0) | 0, 1 + (copyFromIndex - segmentLength | 0) | 0, copyFromIndex + 1 | 0), 
        copyFromIndex = negativeMod($this, copyFromIndex - segmentLength | 0), copyToIndex = negativeMod($this, copyToIndex - segmentLength | 0), 
        copyCount = copyCount - segmentLength | 0;
       }
      }(this, fromIndex, toIndex);
      var newHead = positiveMod(this, this.vb_1 + length | 0);
      nullifyNonEmpty(this, this.vb_1, newHead), this.vb_1 = newHead;
     } else {
      !function($this, fromIndex, toIndex) {
       for (var copyFromIndex = positiveMod($this, $this.vb_1 + toIndex | 0), copyToIndex = positiveMod($this, $this.vb_1 + fromIndex | 0), copyCount = $this.xb_1 - toIndex | 0; copyCount > 0; ) {
        var tmp0 = copyCount, tmp1 = $this.wb_1.length - copyFromIndex | 0, c = $this.wb_1.length - copyToIndex | 0, segmentLength = Math.min(tmp0, tmp1, c);
        arrayCopy($this.wb_1, $this.wb_1, copyToIndex, copyFromIndex, copyFromIndex + segmentLength | 0), 
        copyFromIndex = positiveMod($this, copyFromIndex + segmentLength | 0), copyToIndex = positiveMod($this, copyToIndex + segmentLength | 0), 
        copyCount = copyCount - segmentLength | 0;
       }
      }(this, fromIndex, toIndex);
      var index = this.xb_1, tail = positiveMod(this, this.vb_1 + index | 0);
      nullifyNonEmpty(this, negativeMod(this, tail - length | 0), tail);
     }
     this.xb_1 = this.xb_1 - length | 0;
    }, protoOf(EmptyList).equals = function(other) {
     return !(null == other || !isInterface(other, KtList)) && other.q();
    }, protoOf(EmptyList).hashCode = function() {
     return 1;
    }, protoOf(EmptyList).toString = function() {
     return "[]";
    }, protoOf(EmptyList).k = function() {
     return 0;
    }, protoOf(EmptyList).q = function() {
     return !0;
    }, protoOf(EmptyList).p = function(index) {
     throw IndexOutOfBoundsException_init_$Create$_0("Empty list doesn't contain element at index " + index + ".");
    }, protoOf(EmptyList).h = function() {
     return EmptyIterator_instance;
    }, protoOf(ArrayAsCollection).k = function() {
     return this.hc_1.length;
    }, protoOf(ArrayAsCollection).q = function() {
     return 0 === this.hc_1.length;
    }, protoOf(ArrayAsCollection).h = function() {
     return arrayIterator(this.hc_1);
    }, protoOf(EmptyIterator).i = function() {
     return !1;
    }, protoOf(EmptyIterator).j = function() {
     throw NoSuchElementException_init_$Create$();
    }, protoOf(IndexedValue).lc = function() {
     return this.jc_1;
    }, protoOf(IndexedValue).mc = function() {
     return this.kc_1;
    }, protoOf(IndexedValue).toString = function() {
     return "IndexedValue(index=" + this.jc_1 + ", value=" + toString_0(this.kc_1) + ")";
    }, protoOf(IndexedValue).hashCode = function() {
     var result = this.jc_1;
     return result = imul(result, 31) + (null == this.kc_1 ? 0 : hashCode(this.kc_1)) | 0;
    }, protoOf(IndexedValue).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof IndexedValue)) return !1;
     var tmp0_other_with_cast = other instanceof IndexedValue ? other : THROW_CCE();
     return this.jc_1 === tmp0_other_with_cast.jc_1 && !!equals(this.kc_1, tmp0_other_with_cast.kc_1);
    }, protoOf(IndexingIterable).h = function() {
     return new IndexingIterator(this.nc_1());
    }, protoOf(IndexingIterator).i = function() {
     return this.oc_1.i();
    }, protoOf(IndexingIterator).j = function() {
     var _unary__edvuaz = this.pc_1;
     return this.pc_1 = _unary__edvuaz + 1 | 0, new IndexedValue(checkIndexOverflow(_unary__edvuaz), this.oc_1.j());
    }, protoOf(EmptyMap).equals = function(other) {
     return !(null == other || !isInterface(other, KtMap)) && other.q();
    }, protoOf(EmptyMap).hashCode = function() {
     return 0;
    }, protoOf(EmptyMap).toString = function() {
     return "{}";
    }, protoOf(EmptyMap).k = function() {
     return 0;
    }, protoOf(EmptyMap).q = function() {
     return !0;
    }, protoOf(EmptyMap).sc = function(key) {
     return !1;
    }, protoOf(EmptyMap).h1 = function(key) {
     return (null == key || null != key) && this.sc(null == key || null != key ? key : THROW_CCE());
    }, protoOf(EmptyMap).tc = function(key) {
     return null;
    }, protoOf(EmptyMap).j1 = function(key) {
     return null != key && null == key ? null : this.tc(null == key || null != key ? key : THROW_CCE());
    }, protoOf(EmptyMap).m1 = function() {
     return EmptySet_getInstance();
    }, protoOf(EmptyMap).k1 = function() {
     return EmptySet_getInstance();
    }, protoOf(EmptyMap).l1 = function() {
     return EmptyList_getInstance();
    }, protoOf(IntIterator).j = function() {
     return this.uc();
    }, protoOf(GeneratorSequence$iterator$1).j = function() {
     if (this.wc_1 < 0 && calcNext(this), 0 === this.wc_1) throw NoSuchElementException_init_$Create$();
     var tmp = this.vc_1, result = null != tmp ? tmp : THROW_CCE();
     return this.wc_1 = -1, result;
    }, protoOf(GeneratorSequence$iterator$1).i = function() {
     return this.wc_1 < 0 && calcNext(this), 1 === this.wc_1;
    }, protoOf(GeneratorSequence).h = function() {
     return new GeneratorSequence$iterator$1(this);
    }, protoOf(TakeSequence$iterator$1).j = function() {
     if (0 === this.ad_1) throw NoSuchElementException_init_$Create$();
     return this.ad_1 = this.ad_1 - 1 | 0, this.bd_1.j();
    }, protoOf(TakeSequence$iterator$1).i = function() {
     return this.ad_1 > 0 && this.bd_1.i();
    }, protoOf(TakeSequence).c1 = function(n) {
     return n >= this.dd_1 ? this : new TakeSequence(this.cd_1, n);
    }, protoOf(TakeSequence).h = function() {
     return new TakeSequence$iterator$1(this);
    }, protoOf(TransformingSequence$iterator$1).j = function() {
     return this.fd_1.hd_1(this.ed_1.j());
    }, protoOf(TransformingSequence$iterator$1).i = function() {
     return this.ed_1.i();
    }, protoOf(TransformingSequence).h = function() {
     return new TransformingSequence$iterator$1(this);
    }, protoOf(EmptySequence).h = function() {
     return EmptyIterator_instance;
    }, protoOf(EmptySequence).c1 = function(n) {
     return EmptySequence_instance;
    }, protoOf(EmptySet).equals = function(other) {
     return !(null == other || !isInterface(other, KtSet)) && other.q();
    }, protoOf(EmptySet).hashCode = function() {
     return 0;
    }, protoOf(EmptySet).toString = function() {
     return "[]";
    }, protoOf(EmptySet).k = function() {
     return 0;
    }, protoOf(EmptySet).q = function() {
     return !0;
    }, protoOf(EmptySet).jd = function(element) {
     return !1;
    }, protoOf(EmptySet).d1 = function(element) {
     return !1;
    }, protoOf(EmptySet).kd = function(elements) {
     return elements.q();
    }, protoOf(EmptySet).e1 = function(elements) {
     return this.kd(elements);
    }, protoOf(EmptySet).h = function() {
     return EmptyIterator_instance;
    }, protoOf(NaturalOrderComparator).ld = function(a, b) {
     return compareTo(a, b);
    }, protoOf(NaturalOrderComparator).compare = function(a, b) {
     var tmp = null != a && isComparable(a) ? a : THROW_CCE();
     return this.ld(tmp, null != b && isComparable(b) ? b : THROW_CCE());
    }, protoOf(EmptyCoroutineContext).h7 = function(key) {
     return null;
    }, protoOf(EmptyCoroutineContext).rd = function(initial, operation) {
     return initial;
    }, protoOf(EmptyCoroutineContext).sd = function(context) {
     return context;
    }, protoOf(EmptyCoroutineContext).qd = function(key) {
     return this;
    }, protoOf(EmptyCoroutineContext).hashCode = function() {
     return 0;
    }, protoOf(EmptyCoroutineContext).toString = function() {
     return "EmptyCoroutineContext";
    }, protoOf(CombinedContext).h7 = function(key) {
     for (var cur = this; ;) {
      var tmp0_safe_receiver = cur.vd_1.h7(key);
      if (null != tmp0_safe_receiver) return tmp0_safe_receiver;
      var next = cur.ud_1;
      if (!(next instanceof CombinedContext)) return next.h7(key);
      cur = next;
     }
    }, protoOf(CombinedContext).rd = function(initial, operation) {
     return operation(this.ud_1.rd(initial, operation), this.vd_1);
    }, protoOf(CombinedContext).qd = function(key) {
     if (null != this.vd_1.h7(key)) return this.ud_1;
     var newLeft = this.ud_1.qd(key);
     return newLeft === this.ud_1 ? this : newLeft === EmptyCoroutineContext_getInstance() ? this.vd_1 : new CombinedContext(newLeft, this.vd_1);
    }, protoOf(CombinedContext).equals = function(other) {
     var tmp;
     this === other ? tmp = !0 : tmp = !!(other instanceof CombinedContext && size(other) === size(this)) && function($this, context) {
      for (var cur = context; ;) {
       if (!contains_2($this, cur.vd_1)) return !1;
       var next = cur.ud_1;
       if (!(next instanceof CombinedContext)) return contains_2($this, isInterface(next, Element) ? next : THROW_CCE());
       cur = next;
      }
     }(other, this);
     return tmp;
    }, protoOf(CombinedContext).hashCode = function() {
     return hashCode(this.ud_1) + hashCode(this.vd_1) | 0;
    }, protoOf(CombinedContext).toString = function() {
     return "[" + this.rd("", CombinedContext$toString$lambda) + "]";
    }, protoOf(AbstractCoroutineContextKey).od = function(element) {
     return this.md_1(element);
    }, protoOf(AbstractCoroutineContextKey).pd = function(key) {
     return key === this || this.nd_1 === key;
    }, protoOf(AbstractCoroutineContextElement).f1 = function() {
     return this.wd_1;
    }, protoOf(EnumEntriesList).k = function() {
     return this.xd_1.length;
    }, protoOf(EnumEntriesList).p = function(index) {
     return Companion_instance_4.p3(index, this.xd_1.length), this.xd_1[index];
    }, protoOf(EnumEntriesList).yd = function(element) {
     return null !== element && (_this__u8e3s4 = this.xd_1, 0 <= (index = element.r1_1) && index <= (_this__u8e3s4.length - 1 | 0) ? _this__u8e3s4[index] : null) === element;
     var _this__u8e3s4, index;
    }, protoOf(EnumEntriesList).d1 = function(element) {
     return element instanceof Enum && this.yd(element instanceof Enum ? element : THROW_CCE());
    }, protoOf(IntRange).sa = function() {
     return this.u_1;
    }, protoOf(IntRange).ta = function() {
     return this.v_1;
    }, protoOf(IntRange).zd = function(value) {
     return this.u_1 <= value && value <= this.v_1;
    }, protoOf(IntRange).x = function(value) {
     return this.zd("number" == typeof value ? value : THROW_CCE());
    }, protoOf(IntRange).q = function() {
     return this.u_1 > this.v_1;
    }, protoOf(IntRange).equals = function(other) {
     return other instanceof IntRange && (this.q() && other.q() || this.u_1 === other.u_1 && this.v_1 === other.v_1);
    }, protoOf(IntRange).hashCode = function() {
     return this.q() ? -1 : imul(31, this.u_1) + this.v_1 | 0;
    }, protoOf(IntRange).toString = function() {
     return this.u_1 + ".." + this.v_1;
    }, protoOf(IntProgressionIterator).i = function() {
     return this.ce_1;
    }, protoOf(IntProgressionIterator).uc = function() {
     var value = this.de_1;
     if (value === this.be_1) {
      if (!this.ce_1) throw NoSuchElementException_init_$Create$();
      this.ce_1 = !1;
     } else this.de_1 = this.de_1 + this.ae_1 | 0;
     return value;
    }, protoOf(Companion_9).t = function(rangeStart, rangeEnd, step) {
     return new IntProgression(rangeStart, rangeEnd, step);
    }, protoOf(IntProgression).h = function() {
     return new IntProgressionIterator(this.u_1, this.v_1, this.w_1);
    }, protoOf(IntProgression).q = function() {
     return this.w_1 > 0 ? this.u_1 > this.v_1 : this.u_1 < this.v_1;
    }, protoOf(IntProgression).equals = function(other) {
     return other instanceof IntProgression && (this.q() && other.q() || this.u_1 === other.u_1 && this.v_1 === other.v_1 && this.w_1 === other.w_1);
    }, protoOf(IntProgression).hashCode = function() {
     return this.q() ? -1 : imul(31, imul(31, this.u_1) + this.v_1 | 0) + this.w_1 | 0;
    }, protoOf(IntProgression).toString = function() {
     return this.w_1 > 0 ? this.u_1 + ".." + this.v_1 + " step " + this.w_1 : this.u_1 + " downTo " + this.v_1 + " step " + (0 | -this.w_1);
    }, protoOf(LinesIterator).i = function() {
     if (0 !== this.je_1) return 1 === this.je_1;
     if (this.me_1 < 0) return this.je_1 = 2, !1;
     var _delimiterLength = -1, _delimiterStartIndex = charSequenceLength(this.ie_1), inductionVariable = this.ke_1, last = charSequenceLength(this.ie_1);
     if (inductionVariable < last) $l$loop: do {
      var idx = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0;
      var c = charSequenceGet(this.ie_1, idx);
      if (10 === c || 13 === c) {
       _delimiterLength = 13 === c && (idx + 1 | 0) < charSequenceLength(this.ie_1) && 10 === charSequenceGet(this.ie_1, idx + 1 | 0) ? 2 : 1, 
       _delimiterStartIndex = idx;
       break $l$loop;
      }
     } while (inductionVariable < last);
     return this.je_1 = 1, this.me_1 = _delimiterLength, this.le_1 = _delimiterStartIndex, 
     !0;
    }, protoOf(LinesIterator).j = function() {
     if (!this.i()) throw NoSuchElementException_init_$Create$();
     this.je_1 = 0;
     var lastIndex = this.le_1, firstIndex = this.ke_1;
     return this.ke_1 = this.le_1 + this.me_1 | 0, toString_1(charSequenceSubSequence(this.ie_1, firstIndex, lastIndex));
    }, protoOf(lineSequence$$inlined$Sequence$1).h = function() {
     return new LinesIterator(this.ne_1);
    }, protoOf(DeepRecursiveScopeImpl).a7 = function() {
     return EmptyCoroutineContext_getInstance();
    }, protoOf(DeepRecursiveScopeImpl).ve = function(result) {
     this.se_1 = null, this.te_1 = result;
    }, protoOf(DeepRecursiveScopeImpl).f7 = function(result) {
     return this.ve(result);
    }, protoOf(DeepRecursiveScopeImpl).oe = function(value, $completion) {
     return this.se_1 = isInterface($completion, Continuation) ? $completion : THROW_CCE(), 
     this.re_1 = value, get_COROUTINE_SUSPENDED();
    }, protoOf(DeepRecursiveScopeImpl).ue = function() {
     $l$loop: for (;;) {
      var result = this.te_1, tmp0_elvis_lhs = this.se_1;
      if (null == tmp0_elvis_lhs) {
       var this_0 = new Result(result) instanceof Result ? result : THROW_CCE();
       throwOnFailure(this_0);
       return null == this_0 || null != this_0 ? this_0 : THROW_CCE();
      }
      var cont = tmp0_elvis_lhs;
      if (equals(get_UNDEFINED_RESULT(), result)) {
       var tmp_1;
       try {
        tmp_1 = startCoroutineUninterceptedOrReturnNonGeneratorVersion_0(this.qe_1, this, this.re_1, cont);
       } catch ($p) {
        if ($p instanceof Error) {
         var tmp$ret$2 = createFailure($p);
         cont.f7(tmp$ret$2);
         continue $l$loop;
        }
        throw $p;
       }
       var r = tmp_1;
       if (r !== get_COROUTINE_SUSPENDED()) {
        var tmp$ret$4 = null == r || null != r ? r : THROW_CCE();
        cont.f7(tmp$ret$4);
       }
      } else this.te_1 = get_UNDEFINED_RESULT(), cont.f7(result);
     }
    }, protoOf(UnsafeLazyImpl).g1 = function() {
     this.xe_1 === UNINITIALIZED_VALUE_instance && (this.xe_1 = ensureNotNull(this.we_1)(), 
     this.we_1 = null);
     var tmp = this.xe_1;
     return null == tmp || null != tmp ? tmp : THROW_CCE();
    }, protoOf(UnsafeLazyImpl).ye = function() {
     return !(this.xe_1 === UNINITIALIZED_VALUE_instance);
    }, protoOf(UnsafeLazyImpl).toString = function() {
     return this.ye() ? toString_0(this.g1()) : "Lazy value not initialized yet.";
    }, protoOf(Failure).equals = function(other) {
     return other instanceof Failure && equals(this.n7_1, other.n7_1);
    }, protoOf(Failure).hashCode = function() {
     return hashCode(this.n7_1);
    }, protoOf(Failure).toString = function() {
     return "Failure(" + this.n7_1.toString() + ")";
    }, protoOf(Result).toString = function() {
     return ($this = this.ze_1) instanceof Failure ? $this.toString() : "Success(" + toString_0($this) + ")";
     var $this;
    }, protoOf(Result).hashCode = function() {
     return null == ($this = this.ze_1) ? 0 : hashCode($this);
     var $this;
    }, protoOf(Result).equals = function(other) {
     return function($this, other) {
      return other instanceof Result && !!equals($this, other instanceof Result ? other.ze_1 : THROW_CCE());
     }(this.ze_1, other);
    }, protoOf(Pair).toString = function() {
     return "(" + toString_0(this.af_1) + ", " + toString_0(this.bf_1) + ")";
    }, protoOf(Pair).lc = function() {
     return this.af_1;
    }, protoOf(Pair).mc = function() {
     return this.bf_1;
    }, protoOf(Pair).hashCode = function() {
     var result = null == this.af_1 ? 0 : hashCode(this.af_1);
     return result = imul(result, 31) + (null == this.bf_1 ? 0 : hashCode(this.bf_1)) | 0;
    }, protoOf(Pair).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof Pair)) return !1;
     var tmp0_other_with_cast = other instanceof Pair ? other : THROW_CCE();
     return !!equals(this.af_1, tmp0_other_with_cast.af_1) && !!equals(this.bf_1, tmp0_other_with_cast.bf_1);
    }, protoOf(InternalHashMap).n4 = function(m) {
     var tmp$ret$0;
     $l$block_0: {
      if (!!isInterface(m, Collection) && m.q()) tmp$ret$0 = !0; else {
       for (var _iterator__ex2g4s = m.h(); _iterator__ex2g4s.i(); ) {
        var entry = _iterator__ex2g4s.j();
        if (!(!(null == entry || !isInterface(entry, Entry)) && this.k6(entry))) {
         tmp$ret$0 = !1;
         break $l$block_0;
        }
       }
       tmp$ret$0 = !0;
      }
     }
     return tmp$ret$0;
    }, protoOf(CombinedContext).sd = plus, protoOf(AbstractCoroutineContextElement).h7 = get, 
    protoOf(AbstractCoroutineContextElement).rd = fold, protoOf(AbstractCoroutineContextElement).qd = minusKey, 
    protoOf(AbstractCoroutineContextElement).sd = plus, new Companion, StringCompanionObject_instance = new StringCompanionObject, 
    Unit_instance = new Unit, _stableSortingIsSupported = null, new Companion_2, CompletedContinuation_instance = new CompletedContinuation, 
    Companion_instance_4 = new Companion_4, new Companion_5, Companion_instance_6 = new Companion_6, 
    EmptyIterator_instance = new EmptyIterator, EmptySequence_instance = new EmptySequence, 
    NaturalOrderComparator_instance = new NaturalOrderComparator, Key_instance = new Key, 
    Companion_instance_9 = new Companion_9, new State, UNINITIALIZED_VALUE_instance = new UNINITIALIZED_VALUE, 
    Companion_instance_10 = new Companion_10, _.$_$ = _.$_$ || {}, _.$_$.a = function(e) {
     var tmp;
     switch (typeof e) {
     case "string":
      tmp = PrimitiveClasses_getInstance().stringClass;
      break;

     case "number":
      tmp = (0 | e) === e ? PrimitiveClasses_getInstance().intClass : PrimitiveClasses_getInstance().doubleClass;
      break;

     case "boolean":
      tmp = PrimitiveClasses_getInstance().booleanClass;
      break;

     case "function":
      tmp = PrimitiveClasses_getInstance().functionClass(e.length);
      break;

     default:
      var tmp_2;
      if (isBooleanArray(e)) tmp_2 = PrimitiveClasses_getInstance().booleanArrayClass; else if (isCharArray(e)) tmp_2 = PrimitiveClasses_getInstance().charArrayClass; else if (isByteArray(e)) tmp_2 = PrimitiveClasses_getInstance().byteArrayClass; else if (isShortArray(e)) tmp_2 = PrimitiveClasses_getInstance().shortArrayClass; else if (isIntArray(e)) tmp_2 = PrimitiveClasses_getInstance().intArrayClass; else if (isLongArray(e)) tmp_2 = PrimitiveClasses_getInstance().longArrayClass; else if (isFloatArray(e)) tmp_2 = PrimitiveClasses_getInstance().floatArrayClass; else if (isDoubleArray(e)) tmp_2 = PrimitiveClasses_getInstance().doubleArrayClass; else if (isInterface(e, KClass)) tmp_2 = getKClass(KClass); else if (isArray(e)) tmp_2 = PrimitiveClasses_getInstance().arrayClass; else {
       var tmp_3, constructor = Object.getPrototypeOf(e).constructor;
       if (constructor === Object) tmp_3 = PrimitiveClasses_getInstance().anyClass; else if (constructor === Error) tmp_3 = PrimitiveClasses_getInstance().throwableClass; else {
        tmp_3 = getKClass1(constructor);
       }
       tmp_2 = tmp_3;
      }
      tmp = tmp_2;
     }
     return tmp;
    }, _.$_$.b = getKClass, _.$_$.c = VOID, _.$_$.d = function() {
     return function() {
      if (LazyThreadSafetyMode_entriesInitialized) return Unit_instance;
      LazyThreadSafetyMode_entriesInitialized = !0, new LazyThreadSafetyMode("SYNCHRONIZED", 0), 
      LazyThreadSafetyMode_PUBLICATION_instance = new LazyThreadSafetyMode("PUBLICATION", 1), 
      new LazyThreadSafetyMode("NONE", 2);
     }(), LazyThreadSafetyMode_PUBLICATION_instance;
    }, _.$_$.e = function(argument, $completion) {
     return null == argument || null != argument ? argument : THROW_CCE();
    }, _.$_$.f = ArrayDeque_init_$Create$, _.$_$.g = ArrayList_init_$Create$_0, _.$_$.h = ArrayList_init_$Create$, 
    _.$_$.i = ArrayList_init_$Create$_1, _.$_$.j = function(initialCapacity) {
     return HashMap_init_$Init$_2(initialCapacity, objectCreate(protoOf(HashMap)));
    }, _.$_$.k = HashMap_init_$Create$, _.$_$.l = HashSet_init_$Create$_0, _.$_$.m = function(initialCapacity) {
     return function(initialCapacity, $this) {
      return HashMap_init_$Init$_2(initialCapacity, $this), LinkedHashMap.call($this), 
      $this;
     }(initialCapacity, objectCreate(protoOf(LinkedHashMap)));
    }, _.$_$.n = LinkedHashMap_init_$Create$, _.$_$.o = function(original) {
     return function(original, $this) {
      return HashMap_init_$Init$_3(original, $this), LinkedHashMap.call($this), $this;
     }(original, objectCreate(protoOf(LinkedHashMap)));
    }, _.$_$.p = LinkedHashSet_init_$Create$, _.$_$.q = function CancellationException_init_$Create$_0(message) {
     var tmp = function(message, $this) {
      return IllegalStateException_init_$Init$_0(message, $this), CancellationException.call($this), 
      $this;
     }(message, objectCreate(protoOf(CancellationException)));
     return captureStack(tmp, CancellationException_init_$Create$_0), tmp;
    }, _.$_$.r = function(message, cause, $this) {
     return IllegalStateException_init_$Init$_1(message, cause, $this), CancellationException.call($this), 
     $this;
    }, _.$_$.s = function(delegate) {
     return function(delegate, $this) {
      return SafeContinuation.call($this, delegate, CoroutineSingletons_UNDECIDED_getInstance()), 
      $this;
     }(delegate, objectCreate(protoOf(SafeContinuation)));
    }, _.$_$.t = function(pattern) {
     return function(pattern, $this) {
      return Regex.call($this, pattern, emptySet()), $this;
     }(pattern, objectCreate(protoOf(Regex)));
    }, _.$_$.u = StringBuilder_init_$Create$, _.$_$.v = StringBuilder_init_$Create$_0, 
    _.$_$.w = function(message, cause, $this) {
     return extendThrowable($this, message, cause), Error_0.call($this), $this;
    }, _.$_$.x = Exception_init_$Init$_1, _.$_$.y = IllegalArgumentException_init_$Init$, 
    _.$_$.z = IllegalArgumentException_init_$Init$_0, _.$_$.a1 = IllegalArgumentException_init_$Create$_0, 
    _.$_$.b1 = function(message, cause, $this) {
     return RuntimeException_init_$Init$_1(message, cause, $this), IllegalArgumentException.call($this), 
     $this;
    }, _.$_$.c1 = IllegalStateException_init_$Create$_0, _.$_$.d1 = function IllegalStateException_init_$Create$_1(message, cause) {
     var tmp = IllegalStateException_init_$Init$_1(message, cause, objectCreate(protoOf(IllegalStateException)));
     return captureStack(tmp, IllegalStateException_init_$Create$_1), tmp;
    }, _.$_$.e1 = IndexOutOfBoundsException_init_$Create$_0, _.$_$.f1 = RuntimeException_init_$Init$_0, 
    _.$_$.g1 = RuntimeException_init_$Init$_1, _.$_$.h1 = function RuntimeException_init_$Create$_1(message, cause) {
     var tmp = RuntimeException_init_$Init$_1(message, cause, objectCreate(protoOf(RuntimeException)));
     return captureStack(tmp, RuntimeException_init_$Create$_1), tmp;
    }, _.$_$.i1 = UnsupportedOperationException_init_$Create$_0, _.$_$.j1 = _Char___init__impl__6a9atx, 
    _.$_$.k1 = Char__minus_impl_a2frrh, _.$_$.l1 = Char__toInt_impl_vasixd, _.$_$.m1 = toString, 
    _.$_$.n1 = _Result___init__impl__xyqfz8, _.$_$.o1 = Result__exceptionOrNull_impl_p6xea9, 
    _.$_$.p1 = _Result___get_value__impl__bjfvqg, _.$_$.q1 = Key_instance, _.$_$.r1 = EmptyCoroutineContext_getInstance, 
    _.$_$.s1 = StringCompanionObject_instance, _.$_$.t1 = Companion_instance_10, _.$_$.u1 = Unit_instance, 
    _.$_$.v1 = ArrayList, _.$_$.w1 = Collection, _.$_$.x1 = LinkedHashMap, _.$_$.y1 = KtList, 
    _.$_$.z1 = KtMap, _.$_$.a2 = KtMutableMap, _.$_$.b2 = addAll, _.$_$.c2 = checkIndexOverflow, 
    _.$_$.d2 = collectionSizeOrDefault, _.$_$.e2 = function(_this__u8e3s4, other) {
     return function(_this__u8e3s4, other) {
      var a = _this__u8e3s4, b = other;
      if (a === b) return !0;
      if (null == a || null == b || !isArrayish(b) || a.length != b.length) return !1;
      var inductionVariable = 0, last = a.length;
      if (inductionVariable < last) do {
       var i = inductionVariable;
       if (inductionVariable = inductionVariable + 1 | 0, !equals(a[i], b[i])) return !1;
      } while (inductionVariable < last);
      return !0;
     }(_this__u8e3s4, other);
    }, _.$_$.f2 = function(_this__u8e3s4) {
     return function(_this__u8e3s4) {
      var a = _this__u8e3s4;
      if (null == a) return 0;
      var result = 1, inductionVariable = 0, last = a.length;
      if (inductionVariable < last) do {
       var i = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0, result = imul(result, 31) + hashCode(a[i]) | 0;
      } while (inductionVariable < last);
      return result;
     }(_this__u8e3s4);
    }, _.$_$.g2 = copyOf_0, _.$_$.h2 = copyOf, _.$_$.i2 = copyToArray, _.$_$.j2 = emptyList, 
    _.$_$.k2 = function() {
     var tmp = function() {
      null == EmptyMap_instance && new EmptyMap;
      return EmptyMap_instance;
     }();
     return isInterface(tmp, KtMap) ? tmp : THROW_CCE();
    }, _.$_$.l2 = emptySet, _.$_$.m2 = function(_this__u8e3s4) {
     return _this__u8e3s4.q() ? null : _this__u8e3s4.p(0);
    }, _.$_$.n2 = function(_this__u8e3s4) {
     if (isInterface(_this__u8e3s4, KtList)) return _this__u8e3s4.q() ? null : _this__u8e3s4.p(0);
     var iterator = _this__u8e3s4.h();
     return iterator.i() ? iterator.j() : null;
    }, _.$_$.o2 = function(_this__u8e3s4, index) {
     return 0 <= index && index < _this__u8e3s4.k() ? _this__u8e3s4.p(index) : null;
    }, _.$_$.p2 = function(_this__u8e3s4, key) {
     return function(_this__u8e3s4, key) {
      if (isInterface(_this__u8e3s4, MapWithDefault)) return _this__u8e3s4.qc(key);
      var value = _this__u8e3s4.j1(key);
      if (null == value && !_this__u8e3s4.h1(key)) throw NoSuchElementException_init_$Create$_0("Key " + toString_0(key) + " is missing in the map.");
      return null == value || null != value ? value : THROW_CCE();
     }(_this__u8e3s4, key);
    }, _.$_$.q2 = function(_this__u8e3s4) {
     return new IntRange(0, function(_this__u8e3s4) {
      return _this__u8e3s4.length - 1 | 0;
     }(_this__u8e3s4));
    }, _.$_$.r2 = function(_this__u8e3s4) {
     return new IntRange(0, get_lastIndex(_this__u8e3s4));
    }, _.$_$.s2 = joinToString_0, _.$_$.t2 = joinToString, _.$_$.u2 = function(_this__u8e3s4) {
     return _this__u8e3s4.length - 1 | 0;
    }, _.$_$.v2 = get_lastIndex_2, _.$_$.w2 = function(_this__u8e3s4) {
     return _this__u8e3s4.q() ? null : _this__u8e3s4.p(_this__u8e3s4.k() - 1 | 0);
    }, _.$_$.x2 = function(_this__u8e3s4) {
     if (_this__u8e3s4.q()) throw NoSuchElementException_init_$Create$_0("List is empty.");
     return _this__u8e3s4.p(get_lastIndex_2(_this__u8e3s4));
    }, _.$_$.y2 = listOf, _.$_$.z2 = function(elements) {
     return elements.length > 0 ? new ArrayList(elements) : emptyList();
    }, _.$_$.a3 = mapCapacity, _.$_$.b3 = function(_this__u8e3s4, elements) {
     var tmp0_safe_receiver = function(_this__u8e3s4) {
      var tmp;
      tmp = isInterface(_this__u8e3s4, Collection) ? _this__u8e3s4.k() : null;
      return tmp;
     }(elements), tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : _this__u8e3s4.k() + tmp0_safe_receiver | 0, result = LinkedHashSet_init_$Create$_0(null == tmp1_elvis_lhs ? imul(_this__u8e3s4.k(), 2) : tmp1_elvis_lhs);
     return result.o(_this__u8e3s4), addAll(result, elements), result;
    }, _.$_$.c3 = function(_this__u8e3s4, elements) {
     if (isInterface(elements, Collection)) {
      var result = ArrayList_init_$Create$_0(_this__u8e3s4.k() + elements.k() | 0);
      return result.o(_this__u8e3s4), result.o(elements), result;
     }
     var result_0 = ArrayList_init_$Create$_1(_this__u8e3s4);
     return addAll(result_0, elements), result_0;
    }, _.$_$.d3 = function(_this__u8e3s4, element) {
     var result = ArrayList_init_$Create$_0(_this__u8e3s4.k() + 1 | 0);
     return result.o(_this__u8e3s4), result.e(element), result;
    }, _.$_$.e3 = function(_this__u8e3s4) {
     return _this__u8e3s4.q() ? null : _this__u8e3s4.r2(0);
    }, _.$_$.f3 = function(_this__u8e3s4) {
     if (_this__u8e3s4.q()) throw NoSuchElementException_init_$Create$_0("List is empty.");
     return _this__u8e3s4.r2(get_lastIndex_2(_this__u8e3s4));
    }, _.$_$.g3 = function(_this__u8e3s4) {
     return 1 === _this__u8e3s4.k() ? _this__u8e3s4.p(0) : null;
    }, _.$_$.h3 = function(_this__u8e3s4) {
     _this__u8e3s4.length > 1 && function(array) {
      if (function() {
       var tmp0_safe_receiver = _stableSortingIsSupported;
       if (null != tmp0_safe_receiver) return tmp0_safe_receiver;
       _stableSortingIsSupported = !1;
       var array = [], inductionVariable = 0;
       if (inductionVariable < 600) do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0, array.push(index);
       } while (inductionVariable < 600);
       var comparison = getStableSortingIsSupported$lambda;
       array.sort(comparison);
       var inductionVariable_0 = 1, last = array.length;
       if (inductionVariable_0 < last) do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var a = array[index_0 - 1 | 0], b = array[index_0];
        if ((3 & a) == (3 & b) && a >= b) return !1;
       } while (inductionVariable_0 < last);
       return _stableSortingIsSupported = !0, !0;
      }()) {
       var comparison = sortArray$lambda;
       array.sort(comparison);
      } else !function(array, start, endInclusive, comparator) {
       var size = array.length, buffer = Array(size), result = mergeSort_0(array, buffer, start, endInclusive, comparator);
       if (result !== array) {
        var inductionVariable = start;
        if (inductionVariable <= endInclusive) do {
         var i = inductionVariable;
         inductionVariable = inductionVariable + 1 | 0, array[i] = result[i];
        } while (i !== endInclusive);
       }
      }(array, 0, get_lastIndex(array), (tmp = NaturalOrderComparator_instance, isInterface(tmp, Comparator) ? tmp : THROW_CCE()));
      var tmp;
     }(_this__u8e3s4);
    }, _.$_$.i3 = function(_this__u8e3s4) {
     if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.k()) {
      case 0:
       tmp = emptyList();
       break;

      case 1:
       tmp = listOf(isInterface(_this__u8e3s4, KtList) ? _this__u8e3s4.p(0) : _this__u8e3s4.h().j());
       break;

      default:
       tmp = toMutableList_0(_this__u8e3s4);
      }
      return tmp;
     }
     return function(_this__u8e3s4) {
      switch (_this__u8e3s4.k()) {
      case 0:
       return emptyList();

      case 1:
       return listOf(_this__u8e3s4.p(0));

      default:
       return _this__u8e3s4;
      }
     }(function(_this__u8e3s4) {
      return isInterface(_this__u8e3s4, Collection) ? toMutableList_0(_this__u8e3s4) : toCollection_0(_this__u8e3s4, ArrayList_init_$Create$());
     }(_this__u8e3s4));
    }, _.$_$.j3 = function(_this__u8e3s4) {
     switch (_this__u8e3s4.length) {
     case 0:
      return emptyList();

     case 1:
      return listOf(_this__u8e3s4[0]);

     default:
      return function(_this__u8e3s4) {
       return ArrayList_init_$Create$_1(function(_this__u8e3s4) {
        return new ArrayAsCollection(_this__u8e3s4, !1);
       }(_this__u8e3s4));
      }(_this__u8e3s4);
     }
    }, _.$_$.k3 = function(_this__u8e3s4) {
     return new IndexingIterable(($this_withIndex = _this__u8e3s4, function() {
      return $this_withIndex.h();
     }));
     var $this_withIndex;
    }, _.$_$.l3 = function(_this__u8e3s4, other) {
     for (var first = _this__u8e3s4.h(), second = other.h(), tmp0 = collectionSizeOrDefault(_this__u8e3s4, 10), b = collectionSizeOrDefault(other, 10), list = ArrayList_init_$Create$_0(Math.min(tmp0, b)); first.i() && second.i(); ) {
      var tmp$ret$1 = to(first.j(), second.j());
      list.e(tmp$ret$1);
     }
     return list;
    }, _.$_$.m3 = CancellationException, _.$_$.n3 = get_COROUTINE_SUSPENDED, _.$_$.o3 = createCoroutineUnintercepted, 
    _.$_$.p3 = intercepted, _.$_$.q3 = function(_this__u8e3s4, receiver, completion) {
     var wrappedCompletion = completion instanceof InterceptedCoroutine ? completion : createSimpleCoroutineForSuspendFunction(completion);
     return "function" == typeof _this__u8e3s4 ? _this__u8e3s4(receiver, wrappedCompletion) : _this__u8e3s4.q7(receiver, wrappedCompletion);
    }, _.$_$.r3 = function() {
     return function() {
      if (!properties_initialized_EmptyContinuation_kt_4jdb9w) {
       properties_initialized_EmptyContinuation_kt_4jdb9w = !0;
       var context = EmptyCoroutineContext_getInstance();
       EmptyContinuation = new EmptyContinuation$$inlined$Continuation$1(context);
      }
     }(), EmptyContinuation;
    }, _.$_$.s3 = AbstractCoroutineContextElement, _.$_$.t3 = AbstractCoroutineContextKey, 
    _.$_$.u3 = function(key) {
     if (key instanceof AbstractCoroutineContextKey) {
      var tmp;
      if (key.pd(this.f1())) {
       var tmp_0 = key.od(this);
       tmp = null != tmp_0 && isInterface(tmp_0, Element) ? tmp_0 : null;
      } else tmp = null;
      return tmp;
     }
     return Key_instance === key ? isInterface(this, Element) ? this : THROW_CCE() : null;
    }, _.$_$.v3 = function(key) {
     return key instanceof AbstractCoroutineContextKey ? key.pd(this.f1()) && null != key.od(this) ? EmptyCoroutineContext_getInstance() : this : Key_instance === key ? EmptyCoroutineContext_getInstance() : this;
    }, _.$_$.w3 = ContinuationInterceptor, _.$_$.x3 = Continuation, _.$_$.y3 = fold, 
    _.$_$.z3 = get, _.$_$.a4 = minusKey, _.$_$.b4 = Element, _.$_$.c4 = plus, _.$_$.d4 = CoroutineImpl, 
    _.$_$.e4 = function(_this__u8e3s4, receiver, completion) {
     var this_0 = intercepted(createCoroutineUnintercepted(_this__u8e3s4, receiver, completion)), tmp$ret$0 = Unit_instance;
     this_0.f7(tmp$ret$0);
    }, _.$_$.f4 = function(entries) {
     return new EnumEntriesList(entries);
    }, _.$_$.g4 = anyToString, _.$_$.h4 = arrayIterator, _.$_$.i4 = function(size) {
     var array = fillArrayVal(Array(size), !1);
     return array.$type$ = "BooleanArray", array;
    }, _.$_$.j4 = captureStack, _.$_$.k4 = charArrayOf, _.$_$.l4 = function(size) {
     var array = new Uint16Array(size);
     return array.$type$ = "CharArray", array;
    }, _.$_$.m4 = charSequenceGet, _.$_$.n4 = charSequenceLength, _.$_$.o4 = charSequenceSubSequence, 
    _.$_$.p4 = function(obj, name, getter, setter) {
     return Object.defineProperty(obj, name, {
      configurable: !0,
      get: getter,
      set: setter
     });
    }, _.$_$.q4 = equals, _.$_$.r4 = extendThrowable, _.$_$.s4 = getBooleanHashCode, 
    _.$_$.t4 = function(name, paramCount, superType, getter, setter) {
     return _init_properties_reflectRuntime_kt__5r4uu3(), getter.get = getter, getter.set = setter, 
     getter.callableName = name, obj = getter, metadata = function(paramCount, setter) {
      return _init_properties_reflectRuntime_kt__5r4uu3(), (_init_properties_reflectRuntime_kt__5r4uu3(), 
      propertyRefClassMetadataCache)[paramCount][null == setter ? 0 : 1];
     }(paramCount, setter), imask = function(obj, superType) {
      _init_properties_reflectRuntime_kt__5r4uu3();
      var tmp0_elvis_lhs = obj.$imask$;
      return null == tmp0_elvis_lhs ? implement([ superType ]) : tmp0_elvis_lhs;
     }(getter, superType), _init_properties_reflectRuntime_kt__5r4uu3(), obj.$metadata$ = metadata, 
     obj.constructor = obj, obj.$imask$ = imask, obj;
     var obj, metadata, imask;
    }, _.$_$.u4 = getStringHashCode, _.$_$.v4 = hashCode, _.$_$.w4 = initMetadataForClass, 
    _.$_$.x4 = initMetadataForCompanion, _.$_$.y4 = function(ctor, parent, interfaces, suspendArity) {
     initMetadataForClass(ctor, "Coroutine", VOID, parent, interfaces, suspendArity, VOID, VOID);
    }, _.$_$.z4 = initMetadataForInterface, _.$_$.a5 = function(ctor, parent, interfaces, suspendArity) {
     initMetadataForClass(ctor, "Lambda", VOID, parent, interfaces, suspendArity, VOID, VOID);
    }, _.$_$.b5 = initMetadataForObject, _.$_$.c5 = isCharSequence, _.$_$.d5 = isInterface, 
    _.$_$.e5 = function(size) {
     var array = fillArrayVal(Array(size), new Long(0, 0));
     return array.$type$ = "LongArray", array;
    }, _.$_$.f5 = function(message, cause) {
     var tmp, throwable = new Error;
     if (isUndefined(message)) {
      var tmp_0;
      if (isUndefined(cause)) tmp_0 = message; else {
       var tmp1_elvis_lhs = null == cause ? null : cause.toString();
       tmp_0 = null == tmp1_elvis_lhs ? VOID : tmp1_elvis_lhs;
      }
      tmp = tmp_0;
     } else tmp = null == message ? VOID : message;
     return throwable.message = tmp, throwable.cause = cause, throwable.name = "Throwable", 
     throwable;
    }, _.$_$.g5 = numberRangeToNumber, _.$_$.h5 = numberToChar, _.$_$.i5 = numberToInt, 
    _.$_$.j5 = function(a) {
     return a instanceof Long ? a : fromNumber(a);
    }, _.$_$.k5 = objectCreate, _.$_$.l5 = protoOf, _.$_$.m5 = function(a) {
     return a << 24 >> 24;
    }, _.$_$.n5 = function(a) {
     return fromInt(a);
    }, _.$_$.o5 = toString_1, _.$_$.p5 = function(n) {
     return n.b1(new Long(0, 0)) < 0 ? n.b2() : n;
    }, _.$_$.q5 = function(_this__u8e3s4) {
     if (isNaN_0(_this__u8e3s4)) throw IllegalArgumentException_init_$Create$_0("Cannot round NaN value.");
     return _this__u8e3s4 > 2147483647 ? 2147483647 : _this__u8e3s4 < -2147483648 ? -2147483648 : numberToInt(Math.round(_this__u8e3s4));
    }, _.$_$.r5 = ClosedRange, _.$_$.s5 = coerceAtLeast, _.$_$.t5 = coerceAtMost, _.$_$.u5 = function(_this__u8e3s4, value) {
     var it = function(_this__u8e3s4) {
      return new Long(-2147483648, -1).b1(_this__u8e3s4) <= 0 && _this__u8e3s4.b1(new Long(2147483647, 0)) <= 0 ? _this__u8e3s4.a1() : null;
     }(value);
     return null != it && _this__u8e3s4.x(it);
    }, _.$_$.v5 = function(_this__u8e3s4, step) {
     return function(isPositive, step) {
      if (!isPositive) throw IllegalArgumentException_init_$Create$_0("Step must be positive, was: " + toString_1(step) + ".");
     }(step > 0, step), Companion_instance_9.t(_this__u8e3s4.u_1, _this__u8e3s4.v_1, _this__u8e3s4.w_1 > 0 ? step : 0 | -step);
    }, _.$_$.w5 = function(_this__u8e3s4, to) {
     return to <= -2147483648 ? Companion_getInstance_8().s_1 : numberRangeToNumber(_this__u8e3s4, to - 1 | 0);
    }, _.$_$.x5 = KProperty1, _.$_$.y5 = function(nextFunction) {
     return function(_this__u8e3s4) {
      var tmp;
      tmp = _this__u8e3s4 instanceof ConstrainedOnceSequence ? _this__u8e3s4 : new ConstrainedOnceSequence(_this__u8e3s4);
      return tmp;
     }(new GeneratorSequence(nextFunction, ($nextFunction = nextFunction, function(it) {
      return $nextFunction();
     })));
     var $nextFunction;
    }, _.$_$.z5 = map, _.$_$.a6 = function(elements) {
     return 0 === (_this__u8e3s4 = elements).length ? emptySequence() : new asSequence$$inlined$Sequence$1(_this__u8e3s4);
     var _this__u8e3s4;
    }, _.$_$.b6 = function(_this__u8e3s4, other, ignoreCase) {
     return ignoreCase = ignoreCase !== VOID && ignoreCase, "string" == typeof other ? indexOf_2(_this__u8e3s4, other, VOID, ignoreCase) >= 0 : indexOf_3(_this__u8e3s4, other, 0, charSequenceLength(_this__u8e3s4), ignoreCase) >= 0;
    }, _.$_$.c6 = endsWith, _.$_$.d6 = indexOf_2, _.$_$.e6 = indexOf_1, _.$_$.f6 = isBlank, 
    _.$_$.g6 = lastIndexOf_0, _.$_$.h6 = lastIndexOf, _.$_$.i6 = function(_this__u8e3s4, length, padChar) {
     return padChar = padChar === VOID ? 32 : padChar, toString_1(function(_this__u8e3s4, length, padChar) {
      if (padChar = padChar === VOID ? 32 : padChar, length < 0) throw IllegalArgumentException_init_$Create$_0("Desired length " + length + " is less than zero.");
      if (length <= charSequenceLength(_this__u8e3s4)) return charSequenceSubSequence(_this__u8e3s4, 0, charSequenceLength(_this__u8e3s4));
      var sb = StringBuilder_init_$Create$(), inductionVariable = 1, last = length - charSequenceLength(_this__u8e3s4) | 0;
      if (inductionVariable <= last) do {
       var i = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0, sb.j6(padChar);
      } while (i !== last);
      return sb.f(_this__u8e3s4), sb;
     }(isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE(), length, padChar));
    }, _.$_$.j6 = function(_this__u8e3s4, prefix) {
     if (function(_this__u8e3s4, prefix, ignoreCase) {
      var tmp, tmp_0;
      tmp_0 = !(ignoreCase = ignoreCase !== VOID && ignoreCase) && "string" == typeof _this__u8e3s4;
      tmp = !!tmp_0 && "string" == typeof prefix;
      return tmp ? startsWith(_this__u8e3s4, prefix) : regionMatchesImpl(_this__u8e3s4, 0, prefix, 0, charSequenceLength(prefix), ignoreCase);
     }(_this__u8e3s4, prefix)) {
      var startIndex = charSequenceLength(prefix);
      return _this__u8e3s4.substring(startIndex);
     }
     return _this__u8e3s4;
    }, _.$_$.k6 = function(_this__u8e3s4, suffix) {
     if (function(_this__u8e3s4, suffix, ignoreCase) {
      var tmp, tmp_0;
      tmp_0 = !(ignoreCase = ignoreCase !== VOID && ignoreCase) && "string" == typeof _this__u8e3s4;
      tmp = !!tmp_0 && "string" == typeof suffix;
      return tmp ? endsWith(_this__u8e3s4, suffix) : regionMatchesImpl(_this__u8e3s4, charSequenceLength(_this__u8e3s4) - charSequenceLength(suffix) | 0, suffix, 0, charSequenceLength(suffix), ignoreCase);
     }(_this__u8e3s4, suffix)) {
      var endIndex = _this__u8e3s4.length - charSequenceLength(suffix) | 0;
      return _this__u8e3s4.substring(0, endIndex);
     }
     return _this__u8e3s4;
    }, _.$_$.l6 = function(_this__u8e3s4, oldValue, newValue, ignoreCase) {
     ignoreCase = ignoreCase !== VOID && ignoreCase;
     var tmp1 = new RegExp(Companion_getInstance_3().ha(oldValue), ignoreCase ? "gui" : "gu"), replacement = Companion_getInstance_3().ia(newValue);
     return _this__u8e3s4.replace(tmp1, replacement);
    }, _.$_$.m6 = function(_this__u8e3s4, oldChar, newChar, ignoreCase) {
     ignoreCase = ignoreCase !== VOID && ignoreCase;
     var tmp1 = new RegExp(Companion_getInstance_3().ha(toString(oldChar)), ignoreCase ? "gui" : "gu"), replacement = toString(newChar);
     return _this__u8e3s4.replace(tmp1, replacement);
    }, _.$_$.n6 = startsWith, _.$_$.o6 = function(_this__u8e3s4, delimiter, missingDelimiterValue) {
     missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
     var tmp, index = lastIndexOf_0(_this__u8e3s4, delimiter);
     if (-1 === index) tmp = missingDelimiterValue; else {
      var tmp1 = index + 1 | 0, endIndex = _this__u8e3s4.length;
      tmp = _this__u8e3s4.substring(tmp1, endIndex);
     }
     return tmp;
    }, _.$_$.p6 = function(_this__u8e3s4, delimiter, missingDelimiterValue) {
     missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
     var tmp, index = lastIndexOf(_this__u8e3s4, delimiter);
     if (-1 === index) tmp = missingDelimiterValue; else {
      var tmp1 = index + delimiter.length | 0, endIndex = _this__u8e3s4.length;
      tmp = _this__u8e3s4.substring(tmp1, endIndex);
     }
     return tmp;
    }, _.$_$.q6 = function(_this__u8e3s4, delimiter, missingDelimiterValue) {
     missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
     var tmp, index = indexOf_1(_this__u8e3s4, delimiter);
     if (-1 === index) tmp = missingDelimiterValue; else {
      var tmp1 = index + 1 | 0, endIndex = _this__u8e3s4.length;
      tmp = _this__u8e3s4.substring(tmp1, endIndex);
     }
     return tmp;
    }, _.$_$.r6 = function(_this__u8e3s4, delimiter, missingDelimiterValue) {
     missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
     var tmp, index = indexOf_2(_this__u8e3s4, delimiter);
     if (-1 === index) tmp = missingDelimiterValue; else {
      var tmp1 = index + delimiter.length | 0, endIndex = _this__u8e3s4.length;
      tmp = _this__u8e3s4.substring(tmp1, endIndex);
     }
     return tmp;
    }, _.$_$.s6 = function(_this__u8e3s4, delimiter, missingDelimiterValue) {
     missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
     var index = indexOf_1(_this__u8e3s4, delimiter);
     return -1 === index ? missingDelimiterValue : _this__u8e3s4.substring(0, index);
    }, _.$_$.t6 = function(_this__u8e3s4) {
     return null != _this__u8e3s4 && "true" === _this__u8e3s4.toLowerCase();
    }, _.$_$.u6 = toIntOrNull, _.$_$.v6 = function(_this__u8e3s4) {
     var tmp, tmp0_elvis_lhs = toIntOrNull(_this__u8e3s4);
     return null == tmp0_elvis_lhs ? numberFormatError(_this__u8e3s4) : tmp = tmp0_elvis_lhs, 
     tmp;
    }, _.$_$.w6 = function(_this__u8e3s4, radix) {
     var tmp, tmp0_elvis_lhs = toIntOrNull_0(_this__u8e3s4, radix);
     return null == tmp0_elvis_lhs ? numberFormatError(_this__u8e3s4) : tmp = tmp0_elvis_lhs, 
     tmp;
    }, _.$_$.x6 = function(_this__u8e3s4) {
     var tmp$ret$1;
     $l$block: {
      var inductionVariable = charSequenceLength(_this__u8e3s4) - 1 | 0;
      if (0 <= inductionVariable) do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + -1 | 0, !isWhitespace(charSequenceGet(_this__u8e3s4, index))) {
        tmp$ret$1 = charSequenceSubSequence(_this__u8e3s4, 0, index + 1 | 0);
        break $l$block;
       }
      } while (0 <= inductionVariable);
      tmp$ret$1 = "";
     }
     return tmp$ret$1;
    }, _.$_$.y6 = trimEnd, _.$_$.z6 = function(_this__u8e3s4) {
     return function(_this__u8e3s4, newIndent) {
      newIndent = newIndent === VOID ? "" : newIndent;
      var lines_0 = function(_this__u8e3s4) {
       return function(_this__u8e3s4) {
        var it = _this__u8e3s4.h();
        if (!it.i()) return emptyList();
        var element = it.j();
        if (!it.i()) return listOf(element);
        var dst = ArrayList_init_$Create$();
        for (dst.e(element); it.i(); ) dst.e(it.j());
        return dst;
       }(lineSequence(_this__u8e3s4));
      }(_this__u8e3s4), destination = ArrayList_init_$Create$(), _iterator__ex2g4s = lines_0.h();
      for (;_iterator__ex2g4s.i(); ) {
       var element = _iterator__ex2g4s.j();
       isBlank(element) || destination.e(element);
      }
      var destination_0 = ArrayList_init_$Create$_0(collectionSizeOrDefault(destination, 10)), _iterator__ex2g4s_0 = destination.h();
      for (;_iterator__ex2g4s_0.i(); ) {
       var tmp$ret$4 = indentWidth(_iterator__ex2g4s_0.j());
       destination_0.e(tmp$ret$4);
      }
      var tmp0_elvis_lhs = function(_this__u8e3s4) {
       var iterator = _this__u8e3s4.h();
       if (!iterator.i()) return null;
       for (var min = iterator.j(); iterator.i(); ) {
        var e = iterator.j();
        compareTo(min, e) > 0 && (min = e);
       }
       return min;
      }(destination_0), minCommonIndent = null == tmp0_elvis_lhs ? 0 : tmp0_elvis_lhs, indentAddFunction = (_this__u8e3s4.length, 
      imul(newIndent.length, lines_0.k()), function(indent) {
       var tmp;
       0 === charSequenceLength(indent) ? tmp = getIndentFunction$lambda : ($indent = indent, 
       tmp = function(line) {
        return $indent + line;
       });
       var $indent;
       return tmp;
      }(newIndent)), lastIndex = get_lastIndex_2(lines_0), destination_1 = ArrayList_init_$Create$(), index = 0, _iterator__ex2g4s_1 = lines_0.h();
      for (;_iterator__ex2g4s_1.i(); ) {
       var item_0 = _iterator__ex2g4s_1.j(), _unary__edvuaz = index;
       index = _unary__edvuaz + 1 | 0;
       var tmp, index_0 = checkIndexOverflow(_unary__edvuaz);
       if (0 !== index_0 && index_0 !== lastIndex || !isBlank(item_0)) {
        var tmp_0, tmp0_safe_receiver = drop(item_0, minCommonIndent);
        tmp_0 = null == tmp0_safe_receiver ? null : indentAddFunction(tmp0_safe_receiver);
        tmp = null == tmp_0 ? item_0 : tmp_0;
       } else tmp = null;
       var tmp0_safe_receiver_0 = tmp;
       null == tmp0_safe_receiver_0 || destination_1.e(tmp0_safe_receiver_0);
      }
      return joinTo_0(destination_1, StringBuilder_init_$Create$(), "\n").toString();
     }(_this__u8e3s4, "");
    }, _.$_$.a7 = trimStart, _.$_$.b7 = function(_this__u8e3s4) {
     var startIndex = 0, endIndex = charSequenceLength(_this__u8e3s4) - 1 | 0, startFound = !1;
     $l$loop: for (;startIndex <= endIndex; ) {
      var match = isWhitespace(charSequenceGet(_this__u8e3s4, startFound ? endIndex : startIndex));
      if (startFound) {
       if (!match) break $l$loop;
       endIndex = endIndex - 1 | 0;
      } else match ? startIndex = startIndex + 1 | 0 : startFound = !0;
     }
     return charSequenceSubSequence(_this__u8e3s4, startIndex, endIndex + 1 | 0);
    }, _.$_$.c7 = DeepRecursiveFunction, _.$_$.d7 = DeepRecursiveScope, _.$_$.e7 = Enum, 
    _.$_$.f7 = Error_0, _.$_$.g7 = Exception, _.$_$.h7 = IllegalArgumentException, _.$_$.i7 = Long, 
    _.$_$.j7 = RuntimeException, _.$_$.k7 = THROW_CCE, _.$_$.l7 = Unit, _.$_$.m7 = UnsupportedOperationException, 
    _.$_$.n7 = function(_this__u8e3s4, exception) {
     if (_this__u8e3s4 !== exception) {
      var suppressed = _this__u8e3s4._suppressed;
      null == suppressed ? _this__u8e3s4._suppressed = 0 === (elements = [ exception ]).length ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, !0)) : suppressed.e(exception);
     }
     var elements;
    }, _.$_$.o7 = function(_this__u8e3s4) {
     var low = _this__u8e3s4.y_1;
     return 0 === low ? 32 + countTrailingZeroBits_0(_this__u8e3s4.z_1) | 0 : countTrailingZeroBits_0(low);
    }, _.$_$.p7 = createFailure, _.$_$.q7 = ensureNotNull, _.$_$.r7 = function(_this__u8e3s4, value) {
     return _init_properties_DeepRecursive_kt__zbwcac(), new DeepRecursiveScopeImpl(_this__u8e3s4.pe_1, value).ue();
    }, _.$_$.s7 = function(mode, initializer) {
     return new UnsafeLazyImpl(initializer);
    }, _.$_$.t7 = function() {
     throw NoWhenBranchMatchedException_init_$Create$();
    }, _.$_$.u7 = function(_this__u8e3s4, other) {
     var tmp1_elvis_lhs = null == _this__u8e3s4 ? null : toString_1(_this__u8e3s4), tmp = null == tmp1_elvis_lhs ? "null" : tmp1_elvis_lhs, tmp3_elvis_lhs = null == other ? null : toString_1(other);
     return tmp + (null == tmp3_elvis_lhs ? "null" : tmp3_elvis_lhs);
    }, _.$_$.v7 = function(_this__u8e3s4) {
     console.error(stackTraceToString(_this__u8e3s4));
    }, _.$_$.w7 = stackTraceToString, _.$_$.x7 = function(name) {
     throw UninitializedPropertyAccessException_init_$Create$_0("lateinit property " + name + " has not been initialized");
    }, _.$_$.y7 = toString_0, _.$_$.z7 = to;
   }(module.exports);
  },
  7426: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core, kotlin_org_jetbrains_kotlin_wrappers_kotlin_js) {
    "use strict";
    kotlin_kotlin.$_$.c;
    var Unit_instance = kotlin_kotlin.$_$.u1, ArrayList_init_$Create$ = kotlin_kotlin.$_$.h, sequenceOf = kotlin_kotlin.$_$.a6, intercepted = kotlin_kotlin.$_$.p3, CancellableContinuationImpl = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.c, thenToContinuation = kotlin_org_jetbrains_kotlin_wrappers_kotlin_js.$_$.b;
    function addEventHandler(_this__u8e3s4, type, handler) {
     return function(_this__u8e3s4, type, options, handler) {
      return _this__u8e3s4.addEventListener(type, handler, options), function($this_addEventHandler, $type, $handler, $options) {
       return function() {
        return $this_addEventHandler.removeEventListener($type, $handler, $options), Unit_instance;
       };
      }(_this__u8e3s4, type, handler, options);
     }(_this__u8e3s4, type, void 0, handler);
    }
    function safeAny(signal1, signal2) {
     if (null == signal1) return signal2;
     if (signal1.aborted) return signal1;
     if (signal2.aborted) return signal2;
     for (var $handlers, $controller, controller = new AbortController, handlers = ArrayList_init_$Create$(), abortHandler = ($handlers = handlers, 
     $controller = controller, function(event) {
      for (var _iterator__ex2g4s = $handlers.h(); _iterator__ex2g4s.i(); ) _iterator__ex2g4s.j()();
      return $controller.abort(event.currentTarget.reason), Unit_instance;
     }), _iterator__ex2g4s = sequenceOf([ signal1, signal2 ]).h(); _iterator__ex2g4s.i(); ) {
      var tmp$ret$6 = addEventHandler(_iterator__ex2g4s.j(), "abort", abortHandler);
      handlers.e(tmp$ret$6);
     }
     return controller.signal;
    }
    _.$_$ = _.$_$ || {}, _.$_$.a = function(promise, controller, $completion) {
     var $controller, cancellable = new CancellableContinuationImpl(intercepted($completion), 1);
     return cancellable.mi(), cancellable.bj(($controller = controller, function(it) {
      return $controller.abort(), Unit_instance;
     })), thenToContinuation(promise, cancellable), cancellable.wi();
    }, _.$_$.b = function(options, controller) {
     var signal, this_0, abortOptions = (signal = safeAny(null == options ? null : options.signal, controller.signal), 
     (this_0 = {}).signal = signal, this_0);
     return Object.assign({}, options, abortOptions);
    };
   }(module.exports, __webpack_require__(7036), __webpack_require__(9613), __webpack_require__(6077));
  },
  1426: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_kotlin) {
    "use strict";
    var None_instance, protoOf = kotlin_kotlin.$_$.l5, initMetadataForObject = kotlin_kotlin.$_$.b5, VOID = kotlin_kotlin.$_$.c, initMetadataForClass = kotlin_kotlin.$_$.w4, toString = kotlin_kotlin.$_$.y7;
    function None() {
     None_instance = this, atomicfu$TraceBase.call(this);
    }
    function None_getInstance() {
     return null == None_instance && new None, None_instance;
    }
    function atomicfu$TraceBase() {}
    function AtomicRef(value) {
     this.kotlinx$atomicfu$value = value;
    }
    function AtomicBoolean(value) {
     this.kotlinx$atomicfu$value = value;
    }
    function AtomicInt(value) {
     this.kotlinx$atomicfu$value = value;
    }
    initMetadataForClass(atomicfu$TraceBase, "TraceBase"), initMetadataForObject(None, "None", VOID, atomicfu$TraceBase), 
    initMetadataForClass(AtomicRef, "AtomicRef"), initMetadataForClass(AtomicBoolean, "AtomicBoolean"), 
    initMetadataForClass(AtomicInt, "AtomicInt"), protoOf(atomicfu$TraceBase).atomicfu$Trace$append$1 = function(event) {}, 
    protoOf(atomicfu$TraceBase).atomicfu$Trace$append$2 = function(event1, event2) {}, 
    protoOf(atomicfu$TraceBase).atomicfu$Trace$append$3 = function(event1, event2, event3) {}, 
    protoOf(atomicfu$TraceBase).atomicfu$Trace$append$4 = function(event1, event2, event3, event4) {}, 
    protoOf(AtomicRef).cf = function(_set____db54di) {
     this.kotlinx$atomicfu$value = _set____db54di;
    }, protoOf(AtomicRef).df = function() {
     return this.kotlinx$atomicfu$value;
    }, protoOf(AtomicRef).atomicfu$compareAndSet = function(expect, update) {
     return this.kotlinx$atomicfu$value === expect && (this.kotlinx$atomicfu$value = update, 
     !0);
    }, protoOf(AtomicRef).atomicfu$getAndSet = function(value) {
     var oldValue = this.kotlinx$atomicfu$value;
     return this.kotlinx$atomicfu$value = value, oldValue;
    }, protoOf(AtomicRef).toString = function() {
     return toString(this.kotlinx$atomicfu$value);
    }, protoOf(AtomicBoolean).ef = function(_set____db54di) {
     this.kotlinx$atomicfu$value = _set____db54di;
    }, protoOf(AtomicBoolean).df = function() {
     return this.kotlinx$atomicfu$value;
    }, protoOf(AtomicBoolean).atomicfu$compareAndSet = function(expect, update) {
     return this.kotlinx$atomicfu$value === expect && (this.kotlinx$atomicfu$value = update, 
     !0);
    }, protoOf(AtomicBoolean).atomicfu$getAndSet = function(value) {
     var oldValue = this.kotlinx$atomicfu$value;
     return this.kotlinx$atomicfu$value = value, oldValue;
    }, protoOf(AtomicBoolean).toString = function() {
     return this.kotlinx$atomicfu$value.toString();
    }, protoOf(AtomicInt).ff = function(_set____db54di) {
     this.kotlinx$atomicfu$value = _set____db54di;
    }, protoOf(AtomicInt).df = function() {
     return this.kotlinx$atomicfu$value;
    }, protoOf(AtomicInt).atomicfu$compareAndSet = function(expect, update) {
     return this.kotlinx$atomicfu$value === expect && (this.kotlinx$atomicfu$value = update, 
     !0);
    }, protoOf(AtomicInt).atomicfu$getAndSet = function(value) {
     var oldValue = this.kotlinx$atomicfu$value;
     return this.kotlinx$atomicfu$value = value, oldValue;
    }, protoOf(AtomicInt).atomicfu$getAndIncrement = function() {
     var _unary__edvuaz = this.kotlinx$atomicfu$value;
     return this.kotlinx$atomicfu$value = _unary__edvuaz + 1 | 0, _unary__edvuaz;
    }, protoOf(AtomicInt).atomicfu$getAndDecrement = function() {
     var _unary__edvuaz = this.kotlinx$atomicfu$value;
     return this.kotlinx$atomicfu$value = _unary__edvuaz - 1 | 0, _unary__edvuaz;
    }, protoOf(AtomicInt).atomicfu$getAndAdd = function(delta) {
     var oldValue = this.kotlinx$atomicfu$value;
     return this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + delta | 0, oldValue;
    }, protoOf(AtomicInt).atomicfu$addAndGet = function(delta) {
     return this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + delta | 0, this.kotlinx$atomicfu$value;
    }, protoOf(AtomicInt).atomicfu$incrementAndGet = function() {
     return this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + 1 | 0, this.kotlinx$atomicfu$value;
    }, protoOf(AtomicInt).atomicfu$decrementAndGet = function() {
     return this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value - 1 | 0, this.kotlinx$atomicfu$value;
    }, protoOf(AtomicInt).toString = function() {
     return this.kotlinx$atomicfu$value.toString();
    }, _.$_$ = _.$_$ || {}, _.$_$.a = function(initial) {
     return function(initial, trace) {
      return trace = trace === VOID ? None_getInstance() : trace, new AtomicBoolean(initial);
     }(initial, None_getInstance());
    }, _.$_$.b = function(initial) {
     return function(initial, trace) {
      return trace = trace === VOID ? None_getInstance() : trace, new AtomicRef(initial);
     }(initial, None_getInstance());
    }, _.$_$.c = function(initial) {
     return function(initial, trace) {
      return trace = trace === VOID ? None_getInstance() : trace, new AtomicInt(initial);
     }(initial, None_getInstance());
    };
   }(module.exports, __webpack_require__(7036));
  },
  9613: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_atomicfu) {
    "use strict";
    var Active_instance, Key_instance_0, Key_instance_1, GlobalScope_instance, CoroutineStart_DEFAULT_instance, CoroutineStart_LAZY_instance, CoroutineStart_entriesInitialized, ThreadLocalEventLoop_instance, Key_instance_2, NonDisposableHandle_instance, COMPLETING_ALREADY, COMPLETING_WAITING_CHILDREN, COMPLETING_RETRY, TOO_LATE_TO_CANCEL, SEALED, EMPTY_NEW, EMPTY_ACTIVE, properties_initialized_JobSupport_kt_5iq8a4, Unconfined_instance, Key_instance_3, UNDEFINED, REUSABLE_CLAIMED, properties_initialized_DispatchedContinuation_kt_2siadq, counter, DEBUG, NodeDispatcher_instance, SetTimeoutDispatcher_instance, Dispatchers_instance, platformExceptionHandlers_, properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx, imul = Math.imul, Unit_instance = kotlin_kotlin.$_$.u1, protoOf = kotlin_kotlin.$_$.l5, THROW_CCE = kotlin_kotlin.$_$.k7, Element = kotlin_kotlin.$_$.b4, Continuation = kotlin_kotlin.$_$.x3, initMetadataForClass = kotlin_kotlin.$_$.w4, VOID = kotlin_kotlin.$_$.c, EmptyCoroutineContext_getInstance = kotlin_kotlin.$_$.r1, createCoroutineUnintercepted = kotlin_kotlin.$_$.o3, UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.i1, isInterface = kotlin_kotlin.$_$.d5, toString = kotlin_kotlin.$_$.o5, IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.c1, toString_0 = kotlin_kotlin.$_$.y7, atomic$int$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.c, atomic$ref$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.b, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, initMetadataForInterface = kotlin_kotlin.$_$.z4, initMetadataForObject = kotlin_kotlin.$_$.b5, hashCode = kotlin_kotlin.$_$.v4, equals = kotlin_kotlin.$_$.q4, atomic$boolean$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.a, CancellationException_init_$Create$ = kotlin_kotlin.$_$.q, Result__exceptionOrNull_impl_p6xea9 = kotlin_kotlin.$_$.o1, _Result___get_value__impl__bjfvqg = kotlin_kotlin.$_$.p1, _Result___init__impl__xyqfz8 = (kotlin_kotlin.$_$.t1, 
    kotlin_kotlin.$_$.n1), createFailure = kotlin_kotlin.$_$.p7, AbstractCoroutineContextKey = kotlin_kotlin.$_$.t3, Key_instance = kotlin_kotlin.$_$.q1, AbstractCoroutineContextElement = kotlin_kotlin.$_$.s3, get = kotlin_kotlin.$_$.u3, minusKey = kotlin_kotlin.$_$.v3, ContinuationInterceptor = kotlin_kotlin.$_$.w3, RuntimeException_init_$Create$ = kotlin_kotlin.$_$.h1, addSuppressed = kotlin_kotlin.$_$.n7, Enum = kotlin_kotlin.$_$.e7, startCoroutine = kotlin_kotlin.$_$.e4, noWhenBranchMatchedException = kotlin_kotlin.$_$.t7, Long = kotlin_kotlin.$_$.i7, ArrayDeque_init_$Create$ = kotlin_kotlin.$_$.f, RuntimeException = kotlin_kotlin.$_$.j7, RuntimeException_init_$Init$ = kotlin_kotlin.$_$.g1, captureStack = kotlin_kotlin.$_$.j4, Error_0 = kotlin_kotlin.$_$.f7, Error_init_$Init$ = kotlin_kotlin.$_$.w, StringBuilder_init_$Create$ = kotlin_kotlin.$_$.v, throwUninitializedPropertyAccessException = kotlin_kotlin.$_$.x7, ArrayList_init_$Create$ = kotlin_kotlin.$_$.g, CancellationException = kotlin_kotlin.$_$.m3, ArrayList = kotlin_kotlin.$_$.v1, IllegalStateException_init_$Create$_0 = kotlin_kotlin.$_$.d1, plus = kotlin_kotlin.$_$.c4, get_0 = kotlin_kotlin.$_$.z3, fold = kotlin_kotlin.$_$.y3, minusKey_0 = kotlin_kotlin.$_$.a4, anyToString = kotlin_kotlin.$_$.g4, UnsupportedOperationException = kotlin_kotlin.$_$.m7, Exception = kotlin_kotlin.$_$.g7, IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.a1, Exception_init_$Init$ = kotlin_kotlin.$_$.x, defineProp = kotlin_kotlin.$_$.p4, intercepted = kotlin_kotlin.$_$.p3, startCoroutineUninterceptedOrReturnNonGeneratorVersion = kotlin_kotlin.$_$.q3, getKClassFromExpression = kotlin_kotlin.$_$.a, removeFirstOrNull = kotlin_kotlin.$_$.e3, KtList = kotlin_kotlin.$_$.y1, Collection = kotlin_kotlin.$_$.w1, CancellationException_init_$Init$ = kotlin_kotlin.$_$.r, ensureNotNull = kotlin_kotlin.$_$.q7, getStringHashCode = kotlin_kotlin.$_$.u4, HashSet_init_$Create$ = kotlin_kotlin.$_$.l, RuntimeException_init_$Init$_0 = kotlin_kotlin.$_$.f1, LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.p;
    function AbstractCoroutine(parentContext, initParentJob, active) {
     JobSupport.call(this, active), initParentJob && this.if(parentContext.h7(Key_instance_2)), 
     this.lf_1 = parentContext.sd(this);
    }
    function StandaloneCoroutine(parentContext, active) {
     AbstractCoroutine.call(this, parentContext, !0, active);
    }
    function LazyStandaloneCoroutine(parentContext, block) {
     StandaloneCoroutine.call(this, parentContext, !1), this.jh_1 = createCoroutineUnintercepted(block, this, this);
    }
    function _get_parentHandle__f8dcex($this) {
     return $this.ph_1.kotlinx$atomicfu$value;
    }
    function isReusable($this) {
     var tmp;
     if (2 === $this.yh_1) {
      var tmp_0 = $this.lh_1;
      tmp = (tmp_0 instanceof DispatchedContinuation ? tmp_0 : THROW_CCE()).xh();
     } else tmp = !1;
     return tmp;
    }
    function callSegmentOnCancellation($this, segment, cause) {
     var index = 536870911 & $this.nh_1.kotlinx$atomicfu$value;
     if (536870911 === index) {
      throw IllegalStateException_init_$Create$(toString("The index for Segment.onCancellation(..) is broken"));
     }
     try {
      segment.ai(index, cause, $this.a7());
     } catch ($p) {
      if (!($p instanceof Error)) throw $p;
      var ex = $p;
      handleCoroutineException($this.a7(), new CompletionHandlerException("Exception in invokeOnCancellation handler for " + $this.toString(), ex));
     }
    }
    function installParentHandle($this) {
     var tmp0_elvis_lhs = $this.a7().h7(Key_instance_2);
     if (null == tmp0_elvis_lhs) return null;
     var handle = invokeOnCompletion(tmp0_elvis_lhs, VOID, new ChildContinuation($this));
     return $this.ph_1.atomicfu$compareAndSet(null, handle), handle;
    }
    function multipleHandlersError($this, handler, state) {
     var message = "It's prohibited to register multiple handlers, tried to register " + toString(handler) + ", already has " + toString_0(state);
     throw IllegalStateException_init_$Create$(toString(message));
    }
    function dispatchResume($this, mode) {
     if (function($this) {
      for (var this_0 = $this.nh_1; ;) {
       var cur = this_0.kotlinx$atomicfu$value;
       switch (cur >> 29) {
       case 0:
        var tmp$ret$2 = (2 << 29) + (536870911 & cur) | 0;
        if ($this.nh_1.atomicfu$compareAndSet(cur, tmp$ret$2)) return !0;
        break;

       case 1:
        return !1;

       default:
        throw IllegalStateException_init_$Create$(toString("Already resumed"));
       }
      }
     }($this)) return Unit_instance;
     !function(_this__u8e3s4, mode) {
      var tmp, tmp_0, delegate = _this__u8e3s4.li(), undispatched = 4 === mode;
      tmp_0 = !undispatched && delegate instanceof DispatchedContinuation;
      tmp = !!tmp_0 && get_isCancellableMode(mode) === get_isCancellableMode(_this__u8e3s4.yh_1);
      if (tmp) {
       var dispatcher = delegate.sh_1, context = delegate.a7();
       safeIsDispatchNeeded(dispatcher, context) ? safeDispatch(dispatcher, context, _this__u8e3s4) : function(_this__u8e3s4) {
        var eventLoop = ThreadLocalEventLoop_getInstance().xk();
        if (eventLoop.rk()) eventLoop.qk(_this__u8e3s4); else {
         eventLoop.tk(!0);
         try {
          for (resume(_this__u8e3s4, _this__u8e3s4.li(), !0); eventLoop.pk(); ) ;
         } catch ($p) {
          if (!($p instanceof Error)) throw $p;
          var e = $p;
          _this__u8e3s4.kj(e);
         } finally {
          eventLoop.uk(!0);
         }
        }
       }(_this__u8e3s4);
      } else resume(_this__u8e3s4, delegate, undispatched);
     }($this, mode);
    }
    function resumedState($this, state, proposedUpdate, resumeMode, onCancellation, idempotent) {
     var tmp;
     proposedUpdate instanceof CompletedExceptionally ? tmp = proposedUpdate : tmp = (get_isCancellableMode(resumeMode) || null != idempotent) && (!!(null != onCancellation || isInterface(state, CancelHandler)) || !(null == idempotent)) ? new CompletedContinuation(proposedUpdate, isInterface(state, CancelHandler) ? state : null, onCancellation, idempotent) : proposedUpdate;
     return tmp;
    }
    function alreadyResumedError($this, proposedUpdate) {
     var message = "Already resumed, but proposed with update " + toString_0(proposedUpdate);
     throw IllegalStateException_init_$Create$(toString(message));
    }
    function detachChildIfNonReusable($this) {
     isReusable($this) || $this.ki();
    }
    function CancellableContinuationImpl(delegate, resumeMode) {
     DispatchedTask.call(this, resumeMode), this.lh_1 = delegate, this.mh_1 = this.lh_1.a7();
     this.nh_1 = atomic$int$1(536870911), this.oh_1 = atomic$ref$1(Active_instance), 
     this.ph_1 = atomic$ref$1(null);
    }
    function NotCompleted() {}
    function UserSupplied(handler) {
     this.lj_1 = handler;
    }
    function CancelHandler() {}
    function Active() {}
    function CompletedContinuation(result, cancelHandler, onCancellation, idempotentResume, cancelCause) {
     cancelHandler = cancelHandler === VOID ? null : cancelHandler, onCancellation = onCancellation === VOID ? null : onCancellation, 
     idempotentResume = idempotentResume === VOID ? null : idempotentResume, cancelCause = cancelCause === VOID ? null : cancelCause, 
     this.bi_1 = result, this.ci_1 = cancelHandler, this.di_1 = onCancellation, this.ei_1 = idempotentResume, 
     this.fi_1 = cancelCause;
    }
    function ChildContinuation(child) {
     JobNode.call(this), this.rj_1 = child;
    }
    function CompletedExceptionally(cause, handled) {
     handled = handled !== VOID && handled, this.sf_1 = cause, this.tf_1 = atomic$boolean$1(handled);
    }
    function CancelledContinuation(continuation, cause, handled) {
     CompletedExceptionally.call(this, null == cause ? CancellationException_init_$Create$("Continuation " + toString(continuation) + " was cancelled normally") : cause, handled), 
     this.fj_1 = atomic$boolean$1(!1);
    }
    function toState_0(_this__u8e3s4) {
     var tmp, exception = Result__exceptionOrNull_impl_p6xea9(_this__u8e3s4);
     if (null == exception) {
      var tmp_0 = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
      tmp = null == tmp_0 || null != tmp_0 ? tmp_0 : THROW_CCE();
     } else tmp = new CompletedExceptionally(exception);
     return tmp;
    }
    function recoverResult(state, uCont) {
     var tmp;
     if (state instanceof CompletedExceptionally) {
      var exception = recoverStackTrace(state.sf_1, uCont);
      tmp = _Result___init__impl__xyqfz8(createFailure(exception));
     } else {
      var value = null == state || null != state ? state : THROW_CCE();
      tmp = _Result___init__impl__xyqfz8(value);
     }
     return tmp;
    }
    function CoroutineDispatcher$Key$_init_$lambda_akl8b5(it) {
     return it instanceof CoroutineDispatcher ? it : null;
    }
    function Key() {
     Key_instance_0 = this;
     var tmp = Key_instance;
     AbstractCoroutineContextKey.call(this, tmp, CoroutineDispatcher$Key$_init_$lambda_akl8b5);
    }
    function CoroutineDispatcher() {
     null == Key_instance_0 && new Key, AbstractCoroutineContextElement.call(this, Key_instance);
    }
    function handleCoroutineException(context, exception) {
     var reportException = exception instanceof DispatchException ? exception.jk_1 : exception;
     try {
      var tmp0_safe_receiver = context.h7(Key_instance_1);
      if (null != tmp0_safe_receiver) return tmp0_safe_receiver.kk(context, reportException), 
      Unit_instance;
     } catch ($p) {
      if ($p instanceof Error) return handleUncaughtCoroutineException(context, handlerException(reportException, $p)), 
      Unit_instance;
      throw $p;
     }
     handleUncaughtCoroutineException(context, reportException);
    }
    function Key_0() {}
    function handlerException(originalException, thrownException) {
     if (originalException === thrownException) return originalException;
     var this_0 = RuntimeException_init_$Create$("Exception while trying to handle coroutine exception", thrownException);
     return addSuppressed(this_0, originalException), this_0;
    }
    function CoroutineScope() {}
    function GlobalScope() {}
    function CoroutineStart_initEntries() {
     if (CoroutineStart_entriesInitialized) return Unit_instance;
     CoroutineStart_entriesInitialized = !0, CoroutineStart_DEFAULT_instance = new CoroutineStart("DEFAULT", 0), 
     CoroutineStart_LAZY_instance = new CoroutineStart("LAZY", 1), new CoroutineStart("ATOMIC", 2), 
     new CoroutineStart("UNDISPATCHED", 3);
    }
    function CoroutineStart(name, ordinal) {
     Enum.call(this, name, ordinal);
    }
    function delta($this, unconfined) {
     return unconfined ? new Long(0, 1) : new Long(1, 0);
    }
    function EventLoop() {
     CoroutineDispatcher.call(this), this.mk_1 = new Long(0, 0), this.nk_1 = !1, this.ok_1 = null;
    }
    function ThreadLocalEventLoop() {
     ThreadLocalEventLoop_instance = this, this.wk_1 = (new Symbol("ThreadLocalEventLoop"), 
     new CommonThreadLocal);
    }
    function ThreadLocalEventLoop_getInstance() {
     return null == ThreadLocalEventLoop_instance && new ThreadLocalEventLoop, ThreadLocalEventLoop_instance;
    }
    function CompletionHandlerException(message, cause) {
     RuntimeException_init_$Init$(message, cause, this), captureStack(this, CompletionHandlerException);
    }
    function CoroutinesInternalError(message, cause) {
     Error_init_$Init$(message, cause, this), captureStack(this, CoroutinesInternalError);
    }
    function Key_1() {}
    function ParentJob() {}
    function NonDisposableHandle() {}
    function invokeOnCompletion(_this__u8e3s4, invokeImmediately, handler) {
     var tmp, $boundThis, l;
     if (invokeImmediately = invokeImmediately === VOID || invokeImmediately, _this__u8e3s4 instanceof JobSupport) tmp = _this__u8e3s4.og(invokeImmediately, handler); else {
      var tmp_0 = handler.sj();
      tmp = _this__u8e3s4.ng(tmp_0, invokeImmediately, ($boundThis = handler, (l = function(p0) {
       return $boundThis.ti(p0), Unit_instance;
      }).callableName = "invoke", l));
     }
     return tmp;
    }
    function get_COMPLETING_ALREADY() {
     return _init_properties_JobSupport_kt__68f172(), COMPLETING_ALREADY;
    }
    function get_COMPLETING_WAITING_CHILDREN() {
     return _init_properties_JobSupport_kt__68f172(), COMPLETING_WAITING_CHILDREN;
    }
    function get_COMPLETING_RETRY() {
     return _init_properties_JobSupport_kt__68f172(), COMPLETING_RETRY;
    }
    function get_TOO_LATE_TO_CANCEL() {
     return _init_properties_JobSupport_kt__68f172(), TOO_LATE_TO_CANCEL;
    }
    function get_SEALED() {
     return _init_properties_JobSupport_kt__68f172(), SEALED;
    }
    function get_EMPTY_ACTIVE() {
     return _init_properties_JobSupport_kt__68f172(), EMPTY_ACTIVE;
    }
    function Empty(isActive) {
     this.bl_1 = isActive;
    }
    function Incomplete() {}
    function NodeList() {
     LockFreeLinkedListHead.call(this);
    }
    function JobNode() {
     LockFreeLinkedListNode.call(this);
    }
    function _set_exceptionsHolder__tqm22h($this, value) {
     $this.kl_1.kotlinx$atomicfu$value = value;
    }
    function _get_exceptionsHolder__nhszp($this) {
     return $this.kl_1.kotlinx$atomicfu$value;
    }
    function allocateList($this) {
     return ArrayList_init_$Create$(4);
    }
    function finalizeFinishingState($this, state, proposedUpdate) {
     var wasCancelling, tmp0_safe_receiver = proposedUpdate instanceof CompletedExceptionally ? proposedUpdate : null, proposedException = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.sf_1;
     wasCancelling = state.ll();
     var exceptions = state.ml(proposedException), finalCause = function($this, state, exceptions) {
      if (exceptions.q()) return state.ll() ? new JobCancellationException($this.qf(), null, $this) : null;
      var tmp$ret$2;
      $l$block: {
       for (var _iterator__ex2g4s = exceptions.h(); _iterator__ex2g4s.i(); ) {
        var element = _iterator__ex2g4s.j();
        if (!(element instanceof CancellationException)) {
         tmp$ret$2 = element;
         break $l$block;
        }
       }
       tmp$ret$2 = null;
      }
      var firstNonCancellation = tmp$ret$2;
      if (null != firstNonCancellation) return firstNonCancellation;
      var first = exceptions.p(0);
      if (first instanceof TimeoutCancellationException) {
       var tmp$ret$4;
       $l$block_0: {
        for (var _iterator__ex2g4s_0 = exceptions.h(); _iterator__ex2g4s_0.i(); ) {
         var element_0 = _iterator__ex2g4s_0.j();
         if (element_0 !== first && element_0 instanceof TimeoutCancellationException) {
          tmp$ret$4 = element_0;
          break $l$block_0;
         }
        }
        tmp$ret$4 = null;
       }
       if (null != tmp$ret$4) return tmp$ret$4;
      }
      return first;
     }($this, state, exceptions);
     null != finalCause && function($this, rootCause, exceptions) {
      if (exceptions.k() <= 1) return Unit_instance;
      var seenExceptions = (expectedSize = exceptions.k(), HashSet_init_$Create$(expectedSize)), unwrappedCause = rootCause, _iterator__ex2g4s = exceptions.h();
      var expectedSize;
      for (;_iterator__ex2g4s.i(); ) {
       var unwrapped = _iterator__ex2g4s.j();
       !!(unwrapped !== rootCause && unwrapped !== unwrappedCause && !(unwrapped instanceof CancellationException)) && seenExceptions.e(unwrapped) && addSuppressed(rootCause, unwrapped);
      }
     }(0, finalCause, exceptions);
     var finalException = finalCause, finalState = null == finalException || finalException === proposedException ? proposedUpdate : new CompletedExceptionally(finalException);
     null != finalException && ((cancelParent($this, finalException) || $this.ah(finalException)) && (finalState instanceof CompletedExceptionally ? finalState : THROW_CCE()).ji());
     wasCancelling || $this.xg(finalException), $this.rf(finalState);
     $this.gf_1.atomicfu$compareAndSet(state, boxIncomplete(finalState));
     return completeStateFinalization($this, state, finalState), finalState;
    }
    function completeStateFinalization($this, state, update) {
     var tmp0_safe_receiver = $this.fg();
     null == tmp0_safe_receiver || (tmp0_safe_receiver.ni(), $this.eg(NonDisposableHandle_instance));
     var tmp1_safe_receiver = update instanceof CompletedExceptionally ? update : null, cause = null == tmp1_safe_receiver ? null : tmp1_safe_receiver.sf_1;
     if (state instanceof JobNode) try {
      state.ti(cause);
     } catch ($p) {
      if (!($p instanceof Error)) throw $p;
      var ex = $p;
      $this.yf(new CompletionHandlerException("Exception in completion handler " + state.toString() + " for " + $this.toString(), ex));
     } else {
      var tmp2_safe_receiver = state.yj();
      null == tmp2_safe_receiver || function($this, _this__u8e3s4, cause) {
       _this__u8e3s4.gl(1);
       var exception = null, cur = _this__u8e3s4.zj_1;
       for (;!equals(cur, _this__u8e3s4); ) {
        var node = cur;
        if (node instanceof JobNode) try {
         node.ti(cause);
        } catch ($p) {
         if (!($p instanceof Error)) throw $p;
         var tmp_0, ex = $p, tmp0_safe_receiver = exception;
         null == tmp0_safe_receiver ? tmp_0 = null : (addSuppressed(tmp0_safe_receiver, ex), 
         tmp_0 = tmp0_safe_receiver), null == tmp_0 && (exception = new CompletionHandlerException("Exception in completion handler " + node.toString() + " for " + $this.toString(), ex));
        }
        cur = cur.zj_1;
       }
       var tmp0_safe_receiver_0 = exception;
       null == tmp0_safe_receiver_0 || $this.yf(tmp0_safe_receiver_0);
      }($this, tmp2_safe_receiver, cause);
     }
    }
    function notifyCancelling($this, list, cause) {
     $this.xg(cause), list.gl(4);
     for (var exception = null, cur = list.zj_1; !equals(cur, list); ) {
      var node = cur;
      if (node instanceof JobNode && node.sj()) try {
       node.ti(cause);
      } catch ($p) {
       if (!($p instanceof Error)) throw $p;
       var tmp_0, ex = $p, tmp0_safe_receiver = exception;
       null == tmp0_safe_receiver ? tmp_0 = null : (addSuppressed(tmp0_safe_receiver, ex), 
       tmp_0 = tmp0_safe_receiver), null == tmp_0 && (exception = new CompletionHandlerException("Exception in completion handler " + node.toString() + " for " + $this.toString(), ex));
      }
      cur = cur.zj_1;
     }
     var tmp0_safe_receiver_0 = exception;
     null == tmp0_safe_receiver_0 || $this.yf(tmp0_safe_receiver_0), cancelParent($this, cause);
    }
    function cancelParent($this, cause) {
     if ($this.yg()) return !0;
     var isCancellation = cause instanceof CancellationException, parent = $this.fg();
     return null === parent || parent === NonDisposableHandle_instance ? isCancellation : parent.sg(cause) || isCancellation;
    }
    function startInternal($this, state) {
     return state instanceof Empty ? state.bl_1 ? 0 : $this.gf_1.atomicfu$compareAndSet(state, get_EMPTY_ACTIVE()) ? ($this.jg(), 
     1) : -1 : state instanceof InactiveNodeList ? $this.gf_1.atomicfu$compareAndSet(state, state.nl_1) ? ($this.jg(), 
     1) : -1 : 0;
    }
    function promoteEmptyToNodeList($this, state) {
     var list = new NodeList, update = state.bl_1 ? list : new InactiveNodeList(list);
     $this.gf_1.atomicfu$compareAndSet(state, update);
    }
    function promoteSingleToNodeList($this, state) {
     state.ek(new NodeList);
     var list = state.zj_1;
     $this.gf_1.atomicfu$compareAndSet(state, list);
    }
    function createCauseException($this, cause) {
     var tmp;
     null == cause || cause instanceof Error ? tmp = null == cause ? new JobCancellationException($this.qf(), null, $this) : cause : tmp = (null != cause && isInterface(cause, ParentJob) ? cause : THROW_CCE()).ug();
     return tmp;
    }
    function getOrPromoteCancellingList($this, state) {
     var tmp, tmp0_elvis_lhs = state.yj();
     if (null == tmp0_elvis_lhs) {
      var tmp_0;
      if (state instanceof Empty) tmp_0 = new NodeList; else {
       if (!(state instanceof JobNode)) {
        var message = "State should have list: " + toString(state);
        throw IllegalStateException_init_$Create$(toString(message));
       }
       promoteSingleToNodeList($this, state), tmp_0 = null;
      }
      tmp = tmp_0;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }
    function tryMakeCancelling($this, state, rootCause) {
     var tmp0_elvis_lhs = getOrPromoteCancellingList($this, state);
     if (null == tmp0_elvis_lhs) return !1;
     var list = tmp0_elvis_lhs, cancelling = new Finishing(list, !1, rootCause);
     return !!$this.gf_1.atomicfu$compareAndSet(state, cancelling) && (notifyCancelling($this, list, rootCause), 
     !0);
    }
    function tryMakeCompleting($this, state, proposedUpdate) {
     return null != state && isInterface(state, Incomplete) ? !!(!!(state instanceof Empty || state instanceof JobNode) && !(state instanceof ChildHandleNode)) && !(proposedUpdate instanceof CompletedExceptionally) ? function($this, state, update) {
      return !!$this.gf_1.atomicfu$compareAndSet(state, boxIncomplete(update)) && ($this.xg(null), 
      $this.rf(update), completeStateFinalization($this, state, update), !0);
     }($this, state, proposedUpdate) ? proposedUpdate : get_COMPLETING_RETRY() : function($this, state, proposedUpdate) {
      var tmp, tmp0_elvis_lhs = getOrPromoteCancellingList($this, state);
      if (null == tmp0_elvis_lhs) return get_COMPLETING_RETRY();
      tmp = tmp0_elvis_lhs;
      var notifyRootCause, list = tmp, tmp1_elvis_lhs = state instanceof Finishing ? state : null, finishing = null == tmp1_elvis_lhs ? new Finishing(list, !1, null) : tmp1_elvis_lhs;
      if (finishing.ol()) return get_COMPLETING_ALREADY();
      if (!(finishing.sl(!0), finishing === state || $this.gf_1.atomicfu$compareAndSet(state, finishing))) return get_COMPLETING_RETRY();
      var wasCancelling = finishing.ll(), tmp0_safe_receiver = proposedUpdate instanceof CompletedExceptionally ? proposedUpdate : null;
      null == tmp0_safe_receiver || finishing.ql(tmp0_safe_receiver.sf_1);
      var tmp_0, this_0 = finishing.rl();
      tmp_0 = wasCancelling ? null : this_0;
      notifyRootCause = tmp_0, null == notifyRootCause || notifyCancelling($this, list, notifyRootCause);
      var child = nextChild($this, list);
      if (null != child && tryWaitForChild($this, finishing, child, proposedUpdate)) return get_COMPLETING_WAITING_CHILDREN();
      list.gl(2);
      var anotherChild = nextChild($this, list);
      return null != anotherChild && tryWaitForChild($this, finishing, anotherChild, proposedUpdate) ? get_COMPLETING_WAITING_CHILDREN() : finalizeFinishingState($this, finishing, proposedUpdate);
     }($this, state, proposedUpdate) : get_COMPLETING_ALREADY();
    }
    function tryWaitForChild($this, state, child, proposedUpdate) {
     for (var $this_0 = $this, state_0 = state, child_0 = child, proposedUpdate_0 = proposedUpdate; ;) {
      if (invokeOnCompletion(child_0.xl_1, !1, new ChildCompletion($this_0, state_0, child_0, proposedUpdate_0)) !== NonDisposableHandle_instance) return !0;
      var tmp0_elvis_lhs = nextChild($this_0, child_0);
      if (null == tmp0_elvis_lhs) return !1;
      $this_0 = $this_0, state_0 = state_0, child_0 = tmp0_elvis_lhs, proposedUpdate_0 = proposedUpdate_0;
     }
    }
    function nextChild($this, _this__u8e3s4) {
     var cur = _this__u8e3s4;
     $l$loop: for (;cur.bk_1; ) cur = cur.ak_1;
     for (;;) if (!(cur = cur.zj_1).bk_1) {
      if (cur instanceof ChildHandleNode) return cur;
      if (cur instanceof NodeList) return null;
     }
    }
    function stateString($this, state) {
     return state instanceof Finishing ? state.ll() ? "Cancelling" : state.ol() ? "Completing" : "Active" : null != state && isInterface(state, Incomplete) ? state.nf() ? "Active" : "New" : state instanceof CompletedExceptionally ? "Cancelled" : "Completed";
    }
    function Finishing(list, isCompleting, rootCause) {
     SynchronizedObject.call(this), this.hl_1 = list, this.il_1 = atomic$boolean$1(isCompleting), 
     this.jl_1 = atomic$ref$1(rootCause), this.kl_1 = atomic$ref$1(null);
    }
    function ChildCompletion(parent, state, child, proposedUpdate) {
     JobNode.call(this), this.dm_1 = parent, this.em_1 = state, this.fm_1 = child, this.gm_1 = proposedUpdate;
    }
    function JobSupport(active) {
     this.gf_1 = atomic$ref$1(active ? get_EMPTY_ACTIVE() : (_init_properties_JobSupport_kt__68f172(), 
     EMPTY_NEW)), this.hf_1 = atomic$ref$1(null);
    }
    function boxIncomplete(_this__u8e3s4) {
     return _init_properties_JobSupport_kt__68f172(), null != _this__u8e3s4 && isInterface(_this__u8e3s4, Incomplete) ? new IncompleteStateBox(_this__u8e3s4) : _this__u8e3s4;
    }
    function InactiveNodeList(list) {
     this.nl_1 = list;
    }
    function InvokeOnCompletion(handler) {
     JobNode.call(this), this.lm_1 = handler;
    }
    function InvokeOnCancelling(handler) {
     JobNode.call(this), this.qm_1 = handler, this.rm_1 = atomic$boolean$1(!1);
    }
    function ChildHandleNode(childJob) {
     JobNode.call(this), this.xl_1 = childJob;
    }
    function IncompleteStateBox(state) {
     this.sm_1 = state;
    }
    function _init_properties_JobSupport_kt__68f172() {
     properties_initialized_JobSupport_kt_5iq8a4 || (properties_initialized_JobSupport_kt_5iq8a4 = !0, 
     COMPLETING_ALREADY = new Symbol("COMPLETING_ALREADY"), COMPLETING_WAITING_CHILDREN = new Symbol("COMPLETING_WAITING_CHILDREN"), 
     COMPLETING_RETRY = new Symbol("COMPLETING_RETRY"), TOO_LATE_TO_CANCEL = new Symbol("TOO_LATE_TO_CANCEL"), 
     SEALED = new Symbol("SEALED"), EMPTY_NEW = new Empty(!1), EMPTY_ACTIVE = new Empty(!0));
    }
    function MainCoroutineDispatcher() {
     CoroutineDispatcher.call(this);
    }
    function SupervisorCoroutine(context, uCont) {
     ScopeCoroutine.call(this, context, uCont);
    }
    function TimeoutCancellationException() {}
    function Unconfined() {
     Unconfined_instance = this, CoroutineDispatcher.call(this);
    }
    function Key_2() {}
    function Segment() {}
    function ConcurrentLinkedListNode() {}
    function handleUncaughtCoroutineException(context, exception) {
     for (var _iterator__ex2g4s = (_init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf(), 
     _init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf(), platformExceptionHandlers_).h(); _iterator__ex2g4s.i(); ) {
      var handler = _iterator__ex2g4s.j();
      try {
       handler.kk(context, exception);
      } catch ($p) {
       if ($p instanceof ExceptionSuccessfullyProcessed) {
        return Unit_instance;
       }
       if (!($p instanceof Error)) throw $p;
       propagateExceptionFinalResort(handlerException(exception, $p));
      }
     }
     try {
      addSuppressed(exception, new DiagnosticCoroutineContextException(context));
     } catch ($p) {
      if (!($p instanceof Error)) throw $p;
     }
     propagateExceptionFinalResort(exception);
    }
    function ExceptionSuccessfullyProcessed() {}
    function get_UNDEFINED() {
     return _init_properties_DispatchedContinuation_kt__tnmqc0(), UNDEFINED;
    }
    function get_REUSABLE_CLAIMED() {
     return _init_properties_DispatchedContinuation_kt__tnmqc0(), REUSABLE_CLAIMED;
    }
    function DispatchedContinuation(dispatcher, continuation) {
     DispatchedTask.call(this, -1), this.sh_1 = dispatcher, this.th_1 = continuation, 
     this.uh_1 = get_UNDEFINED(), this.vh_1 = (this.a7(), 0), this.wh_1 = atomic$ref$1(null);
    }
    function safeDispatch(_this__u8e3s4, context, runnable) {
     _init_properties_DispatchedContinuation_kt__tnmqc0();
     try {
      _this__u8e3s4.hk(context, runnable);
     } catch ($p) {
      if ($p instanceof Error) throw new DispatchException($p, _this__u8e3s4, context);
      throw $p;
     }
    }
    function safeIsDispatchNeeded(_this__u8e3s4, context) {
     _init_properties_DispatchedContinuation_kt__tnmqc0();
     try {
      return _this__u8e3s4.gk(context);
     } catch ($p) {
      if ($p instanceof Error) throw new DispatchException($p, _this__u8e3s4, context);
      throw $p;
     }
    }
    function resumeCancellableWith(_this__u8e3s4, result) {
     var tmp;
     if (_init_properties_DispatchedContinuation_kt__tnmqc0(), _this__u8e3s4 instanceof DispatchedContinuation) {
      var state = toState_0(result);
      if (safeIsDispatchNeeded(_this__u8e3s4.sh_1, _this__u8e3s4.a7())) _this__u8e3s4.uh_1 = state, 
      _this__u8e3s4.yh_1 = 1, safeDispatch(_this__u8e3s4.sh_1, _this__u8e3s4.a7(), _this__u8e3s4); else {
       var eventLoop = ThreadLocalEventLoop_getInstance().xk();
       if (eventLoop.rk()) _this__u8e3s4.uh_1 = state, _this__u8e3s4.yh_1 = 1, eventLoop.qk(_this__u8e3s4); else {
        eventLoop.tk(!0);
        try {
         var tmp$ret$4, job = _this__u8e3s4.a7().h7(Key_instance_2);
         if (null == job || job.nf()) tmp$ret$4 = !1; else {
          var cause = job.kg();
          _this__u8e3s4.pi(state, cause);
          var tmp$ret$2 = _Result___init__impl__xyqfz8(createFailure(cause));
          _this__u8e3s4.f7(tmp$ret$2), tmp$ret$4 = !0;
         }
         for (tmp$ret$4 || (_this__u8e3s4.th_1, _this__u8e3s4.vh_1, _this__u8e3s4.th_1.f7(result)); eventLoop.pk(); ) ;
        } catch ($p) {
         if (!($p instanceof Error)) throw $p;
         var e = $p;
         _this__u8e3s4.kj(e);
        } finally {
         eventLoop.uk(!0);
        }
        0;
       }
      }
      tmp = Unit_instance;
     } else _this__u8e3s4.f7(result), tmp = Unit_instance;
     return tmp;
    }
    function _init_properties_DispatchedContinuation_kt__tnmqc0() {
     properties_initialized_DispatchedContinuation_kt_2siadq || (properties_initialized_DispatchedContinuation_kt_2siadq = !0, 
     UNDEFINED = new Symbol("UNDEFINED"), REUSABLE_CLAIMED = new Symbol("REUSABLE_CLAIMED"));
    }
    function DispatchedTask(resumeMode) {
     SchedulerTask.call(this), this.yh_1 = resumeMode;
    }
    function get_isCancellableMode(_this__u8e3s4) {
     return 1 === _this__u8e3s4 || 2 === _this__u8e3s4;
    }
    function DispatchException(cause, dispatcher, context) {
     Exception_init_$Init$("Coroutine dispatcher " + dispatcher.toString() + " threw an exception, context = " + toString(context), cause, this), 
     captureStack(this, DispatchException), this.jk_1 = cause;
    }
    function resume(_this__u8e3s4, delegate, undispatched) {
     var tmp, state = _this__u8e3s4.oi(), exception = _this__u8e3s4.hj(state);
     if (null != exception) tmp = _Result___init__impl__xyqfz8(createFailure(exception)); else {
      var value = _this__u8e3s4.yi(state);
      tmp = _Result___init__impl__xyqfz8(value);
     }
     var result = tmp;
     if (undispatched) {
      var this_0 = delegate instanceof DispatchedContinuation ? delegate : THROW_CCE();
      this_0.th_1, this_0.vh_1, this_0.th_1.f7(result);
     } else delegate.f7(result);
    }
    function ScopeCoroutine(context, uCont) {
     AbstractCoroutine.call(this, context, !0, !0), this.in_1 = uCont;
    }
    function Symbol(symbol) {
     this.on_1 = symbol;
    }
    function dispatcherFailure(completion, e) {
     var reportException = e instanceof DispatchException ? e.jk_1 : e, tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(reportException));
     throw completion.f7(tmp$ret$0), reportException;
    }
    function createDefaultDispatcher() {
     var tmp;
     "undefined" != typeof navigator && null != navigator && null != navigator.userAgent && void 0 !== navigator.userAgent && void 0 !== navigator.userAgent.match && navigator.userAgent.match("\\bjsdom\\b") ? tmp = NodeDispatcher_getInstance() : tmp = !!("undefined" != typeof window && null != window) && !(void 0 === window.addEventListener) ? function(_this__u8e3s4) {
      var tmp, tmp0_elvis_lhs = _this__u8e3s4.coroutineDispatcher;
      if (null == tmp0_elvis_lhs) {
       var this_0 = new WindowDispatcher(_this__u8e3s4);
       _this__u8e3s4.coroutineDispatcher = this_0, tmp = this_0;
      } else tmp = tmp0_elvis_lhs;
      return tmp;
     }(window) : "undefined" == typeof process || void 0 === process.nextTick ? function() {
      null == SetTimeoutDispatcher_instance && new SetTimeoutDispatcher;
      return SetTimeoutDispatcher_instance;
     }() : NodeDispatcher_getInstance();
     return tmp;
    }
    function get_DEBUG() {
     return DEBUG;
    }
    function get_classSimpleName(_this__u8e3s4) {
     var tmp0_elvis_lhs = getKClassFromExpression(_this__u8e3s4).m8();
     return null == tmp0_elvis_lhs ? "Unknown" : tmp0_elvis_lhs;
    }
    function get_hexAddress(_this__u8e3s4) {
     var result = _this__u8e3s4.__debug_counter;
     return "number" != typeof result && (result = counter = counter + 1 | 0, _this__u8e3s4.__debug_counter = result), 
     (null != result && "number" == typeof result ? result : THROW_CCE()).toString();
    }
    function NodeDispatcher() {
     NodeDispatcher_instance = this, SetTimeoutBasedDispatcher.call(this);
    }
    function NodeDispatcher_getInstance() {
     return null == NodeDispatcher_instance && new NodeDispatcher, NodeDispatcher_instance;
    }
    function ScheduledMessageQueue(dispatcher) {
     MessageQueue.call(this), this.wn_1 = dispatcher;
     var this$0;
     this.xn_1 = (this$0 = this, function() {
      return this$0.do(), Unit_instance;
     });
    }
    function WindowMessageQueue(window_0) {
     var this$0;
     MessageQueue.call(this), this.no_1 = window_0, this.oo_1 = "dispatchCoroutine", 
     this.no_1.addEventListener("message", (this$0 = this, function(event) {
      return event.source == this$0.no_1 && event.data == this$0.oo_1 && (event.stopPropagation(), 
      this$0.do()), Unit_instance;
     }), !0);
    }
    function propagateExceptionFinalResort(exception) {
     console.error(exception.toString());
    }
    function UnconfinedEventLoop() {
     EventLoop.call(this);
    }
    function SetTimeoutDispatcher() {
     SetTimeoutDispatcher_instance = this, SetTimeoutBasedDispatcher.call(this);
    }
    function SetTimeoutBasedDispatcher() {
     CoroutineDispatcher.call(this), this.zn_1 = new ScheduledMessageQueue(this);
    }
    function MessageQueue() {
     this.ao_1 = ArrayDeque_init_$Create$(), this.bo_1 = 16, this.co_1 = !1;
    }
    function WindowDispatcher(window_0) {
     CoroutineDispatcher.call(this), this.wo_1 = window_0, this.xo_1 = new WindowMessageQueue(this.wo_1);
    }
    function toDebugString(_this__u8e3s4) {
     return toString(_this__u8e3s4);
    }
    function Dispatchers() {
     Dispatchers_instance = this, this.wm_1 = createDefaultDispatcher(), this.xm_1 = (null == Unconfined_instance && new Unconfined, 
     Unconfined_instance), this.ym_1 = new JsMainDispatcher(this.wm_1, !1), this.zm_1 = null;
    }
    function Dispatchers_getInstance() {
     return null == Dispatchers_instance && new Dispatchers, Dispatchers_instance;
    }
    function JsMainDispatcher(delegate, invokeImmediately) {
     MainCoroutineDispatcher.call(this), this.zo_1 = delegate, this.ap_1 = invokeImmediately, 
     this.bp_1 = this.ap_1 ? this : new JsMainDispatcher(this.zo_1, !0);
    }
    function JobCancellationException(message, cause, job) {
     CancellationException_init_$Init$(message, cause, this), captureStack(this, JobCancellationException), 
     this.cp_1 = job;
    }
    function Runnable() {}
    function SchedulerTask() {}
    function DiagnosticCoroutineContextException(context) {
     RuntimeException_init_$Init$_0(toString(context), this), captureStack(this, DiagnosticCoroutineContextException);
    }
    function _init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf() {
     properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx || (properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx = !0, 
     platformExceptionHandlers_ = LinkedHashSet_init_$Create$());
    }
    function LockFreeLinkedListHead() {
     LockFreeLinkedListNode.call(this);
    }
    function LockFreeLinkedListNode() {
     this.zj_1 = this, this.ak_1 = this, this.bk_1 = !1;
    }
    function ListClosed(forbiddenElementsBitmask) {
     LockFreeLinkedListNode.call(this), this.gp_1 = forbiddenElementsBitmask;
    }
    function recoverStackTrace(exception, continuation) {
     return exception;
    }
    function SynchronizedObject() {}
    function CommonThreadLocal() {
     this.yk_1 = null;
    }
    initMetadataForInterface(ParentJob, "ParentJob", VOID, VOID, [ Element ], [ 0 ]), 
    initMetadataForClass(JobSupport, "JobSupport", VOID, VOID, [ Element, ParentJob ], [ 0 ]), 
    initMetadataForInterface(CoroutineScope, "CoroutineScope"), initMetadataForClass(AbstractCoroutine, "AbstractCoroutine", VOID, JobSupport, [ JobSupport, Element, Continuation, CoroutineScope ], [ 0 ]), 
    initMetadataForClass(StandaloneCoroutine, "StandaloneCoroutine", VOID, AbstractCoroutine, VOID, [ 0 ]), 
    initMetadataForClass(LazyStandaloneCoroutine, "LazyStandaloneCoroutine", VOID, StandaloneCoroutine, VOID, [ 0 ]), 
    initMetadataForInterface(Runnable, "Runnable"), initMetadataForClass(SchedulerTask, "SchedulerTask", VOID, VOID, [ Runnable ]), 
    initMetadataForClass(DispatchedTask, "DispatchedTask", VOID, SchedulerTask), initMetadataForClass(CancellableContinuationImpl, "CancellableContinuationImpl", VOID, DispatchedTask, [ DispatchedTask, Continuation ]), 
    initMetadataForInterface(NotCompleted, "NotCompleted"), initMetadataForInterface(CancelHandler, "CancelHandler", VOID, VOID, [ NotCompleted ]), 
    initMetadataForClass(UserSupplied, "UserSupplied", VOID, VOID, [ CancelHandler ]), 
    initMetadataForObject(Active, "Active", VOID, VOID, [ NotCompleted ]), initMetadataForClass(CompletedContinuation, "CompletedContinuation"), 
    initMetadataForClass(LockFreeLinkedListNode, "LockFreeLinkedListNode", LockFreeLinkedListNode), 
    initMetadataForInterface(Incomplete, "Incomplete"), initMetadataForClass(JobNode, "JobNode", VOID, LockFreeLinkedListNode, [ LockFreeLinkedListNode, Incomplete ]), 
    initMetadataForClass(ChildContinuation, "ChildContinuation", VOID, JobNode), initMetadataForClass(CompletedExceptionally, "CompletedExceptionally"), 
    initMetadataForClass(CancelledContinuation, "CancelledContinuation", VOID, CompletedExceptionally), 
    initMetadataForObject(Key, "Key", VOID, AbstractCoroutineContextKey), initMetadataForClass(CoroutineDispatcher, "CoroutineDispatcher", VOID, AbstractCoroutineContextElement, [ AbstractCoroutineContextElement, ContinuationInterceptor ]), 
    initMetadataForObject(Key_0, "Key"), initMetadataForObject(GlobalScope, "GlobalScope", VOID, VOID, [ CoroutineScope ]), 
    initMetadataForClass(CoroutineStart, "CoroutineStart", VOID, Enum), initMetadataForClass(EventLoop, "EventLoop", VOID, CoroutineDispatcher), 
    initMetadataForObject(ThreadLocalEventLoop, "ThreadLocalEventLoop"), initMetadataForClass(CompletionHandlerException, "CompletionHandlerException", VOID, RuntimeException), 
    initMetadataForClass(CoroutinesInternalError, "CoroutinesInternalError", VOID, Error_0), 
    initMetadataForObject(Key_1, "Key"), initMetadataForObject(NonDisposableHandle, "NonDisposableHandle"), 
    initMetadataForClass(Empty, "Empty", VOID, VOID, [ Incomplete ]), initMetadataForClass(LockFreeLinkedListHead, "LockFreeLinkedListHead", LockFreeLinkedListHead, LockFreeLinkedListNode), 
    initMetadataForClass(NodeList, "NodeList", NodeList, LockFreeLinkedListHead, [ LockFreeLinkedListHead, Incomplete ]), 
    initMetadataForClass(SynchronizedObject, "SynchronizedObject", SynchronizedObject), 
    initMetadataForClass(Finishing, "Finishing", VOID, SynchronizedObject, [ SynchronizedObject, Incomplete ]), 
    initMetadataForClass(ChildCompletion, "ChildCompletion", VOID, JobNode), initMetadataForClass(InactiveNodeList, "InactiveNodeList", VOID, VOID, [ Incomplete ]), 
    initMetadataForClass(InvokeOnCompletion, "InvokeOnCompletion", VOID, JobNode), initMetadataForClass(InvokeOnCancelling, "InvokeOnCancelling", VOID, JobNode), 
    initMetadataForClass(ChildHandleNode, "ChildHandleNode", VOID, JobNode), initMetadataForClass(IncompleteStateBox, "IncompleteStateBox"), 
    initMetadataForClass(MainCoroutineDispatcher, "MainCoroutineDispatcher", VOID, CoroutineDispatcher), 
    initMetadataForClass(ScopeCoroutine, "ScopeCoroutine", VOID, AbstractCoroutine, VOID, [ 0 ]), 
    initMetadataForClass(SupervisorCoroutine, "SupervisorCoroutine", VOID, ScopeCoroutine, VOID, [ 0 ]), 
    initMetadataForClass(TimeoutCancellationException, "TimeoutCancellationException", VOID, CancellationException), 
    initMetadataForObject(Unconfined, "Unconfined", VOID, CoroutineDispatcher), initMetadataForObject(Key_2, "Key"), 
    initMetadataForClass(ConcurrentLinkedListNode, "ConcurrentLinkedListNode"), initMetadataForClass(Segment, "Segment", VOID, ConcurrentLinkedListNode, [ ConcurrentLinkedListNode, NotCompleted ]), 
    initMetadataForObject(ExceptionSuccessfullyProcessed, "ExceptionSuccessfullyProcessed", VOID, Exception), 
    initMetadataForClass(DispatchedContinuation, "DispatchedContinuation", VOID, DispatchedTask, [ DispatchedTask, Continuation ]), 
    initMetadataForClass(DispatchException, "DispatchException", VOID, Exception), initMetadataForClass(Symbol, "Symbol"), 
    initMetadataForClass(SetTimeoutBasedDispatcher, "SetTimeoutBasedDispatcher", VOID, CoroutineDispatcher, VOID, [ 1 ]), 
    initMetadataForObject(NodeDispatcher, "NodeDispatcher", VOID, SetTimeoutBasedDispatcher, VOID, [ 1 ]), 
    initMetadataForClass(MessageQueue, "MessageQueue", VOID, VOID, [ KtList, Collection ]), 
    initMetadataForClass(ScheduledMessageQueue, "ScheduledMessageQueue", VOID, MessageQueue), 
    initMetadataForClass(WindowMessageQueue, "WindowMessageQueue", VOID, MessageQueue), 
    initMetadataForClass(UnconfinedEventLoop, "UnconfinedEventLoop", UnconfinedEventLoop, EventLoop), 
    initMetadataForObject(SetTimeoutDispatcher, "SetTimeoutDispatcher", VOID, SetTimeoutBasedDispatcher, VOID, [ 1 ]), 
    initMetadataForClass(WindowDispatcher, "WindowDispatcher", VOID, CoroutineDispatcher, VOID, [ 1 ]), 
    initMetadataForObject(Dispatchers, "Dispatchers"), initMetadataForClass(JsMainDispatcher, "JsMainDispatcher", VOID, MainCoroutineDispatcher), 
    initMetadataForClass(JobCancellationException, "JobCancellationException", VOID, CancellationException), 
    initMetadataForClass(DiagnosticCoroutineContextException, "DiagnosticCoroutineContextException", VOID, RuntimeException), 
    initMetadataForClass(ListClosed, "ListClosed", VOID, LockFreeLinkedListNode), initMetadataForClass(CommonThreadLocal, "CommonThreadLocal", CommonThreadLocal), 
    protoOf(AbstractCoroutine).a7 = function() {
     return this.lf_1;
    }, protoOf(AbstractCoroutine).mf = function() {
     return this.lf_1;
    }, protoOf(AbstractCoroutine).nf = function() {
     return protoOf(JobSupport).nf.call(this);
    }, protoOf(AbstractCoroutine).of = function(value) {}, protoOf(AbstractCoroutine).pf = function(cause, handled) {}, 
    protoOf(AbstractCoroutine).qf = function() {
     return get_classSimpleName(this) + " was cancelled";
    }, protoOf(AbstractCoroutine).rf = function(state) {
     state instanceof CompletedExceptionally ? this.pf(state.sf_1, state.uf()) : this.of(null == state || null != state ? state : THROW_CCE());
    }, protoOf(AbstractCoroutine).f7 = function(result) {
     var state = this.vf(toState_0(result));
     if (state === get_COMPLETING_WAITING_CHILDREN()) return Unit_instance;
     this.wf(state);
    }, protoOf(AbstractCoroutine).wf = function(state) {
     return this.xf(state);
    }, protoOf(AbstractCoroutine).yf = function(exception) {
     handleCoroutineException(this.lf_1, exception);
    }, protoOf(AbstractCoroutine).zf = function() {
     var tmp0_elvis_lhs = (this.lf_1, null);
     return null == tmp0_elvis_lhs ? protoOf(JobSupport).zf.call(this) : '"' + tmp0_elvis_lhs + '":' + protoOf(JobSupport).zf.call(this);
    }, protoOf(AbstractCoroutine).ag = function(start, receiver, block) {
     start.dg(block, receiver, this);
    }, protoOf(StandaloneCoroutine).ah = function(exception) {
     return handleCoroutineException(this.lf_1, exception), !0;
    }, protoOf(LazyStandaloneCoroutine).jg = function() {
     !function(_this__u8e3s4, fatalCompletion) {
      try {
       resumeCancellableWith(intercepted(_this__u8e3s4), _Result___init__impl__xyqfz8(Unit_instance));
      } catch ($p) {
       if (!($p instanceof Error)) throw $p;
       dispatcherFailure(fatalCompletion, $p);
      }
     }(this.jh_1, this);
    }, protoOf(CancellableContinuationImpl).li = function() {
     return this.lh_1;
    }, protoOf(CancellableContinuationImpl).a7 = function() {
     return this.mh_1;
    }, protoOf(CancellableContinuationImpl).gg = function() {
     return this.oh_1.kotlinx$atomicfu$value;
    }, protoOf(CancellableContinuationImpl).hg = function() {
     var tmp = this.gg();
     return !(null != tmp && isInterface(tmp, NotCompleted));
    }, protoOf(CancellableContinuationImpl).mi = function() {
     var tmp0_elvis_lhs = installParentHandle(this);
     if (null == tmp0_elvis_lhs) return Unit_instance;
     var handle = tmp0_elvis_lhs;
     this.hg() && (handle.ni(), this.ph_1.kotlinx$atomicfu$value = NonDisposableHandle_instance);
    }, protoOf(CancellableContinuationImpl).oi = function() {
     return this.gg();
    }, protoOf(CancellableContinuationImpl).pi = function(takenState, cause) {
     for (var this_0 = this.oh_1; ;) {
      var state = this_0.kotlinx$atomicfu$value;
      if (null != state && isInterface(state, NotCompleted)) {
       throw IllegalStateException_init_$Create$(toString("Not completed"));
      }
      if (state instanceof CompletedExceptionally) return Unit_instance;
      if (state instanceof CompletedContinuation) {
       if (state.hi()) {
        throw IllegalStateException_init_$Create$(toString("Must be called at most once"));
       }
       var update = state.ii(VOID, VOID, VOID, VOID, cause);
       if (this.oh_1.atomicfu$compareAndSet(state, update)) return state.qi(this, cause), 
       Unit_instance;
      } else if (this.oh_1.atomicfu$compareAndSet(state, new CompletedContinuation(state, VOID, VOID, VOID, cause))) return Unit_instance;
     }
     return Unit_instance;
    }, protoOf(CancellableContinuationImpl).ri = function(cause) {
     for (var this_0 = this.oh_1; ;) {
      var tmp1 = this_0.kotlinx$atomicfu$value;
      if (null == tmp1 || !isInterface(tmp1, NotCompleted)) return !1;
      var update = new CancelledContinuation(this, cause, !!isInterface(tmp1, CancelHandler) || tmp1 instanceof Segment);
      if (this.oh_1.atomicfu$compareAndSet(tmp1, update)) return isInterface(tmp1, CancelHandler) ? this.gi(tmp1, cause) : tmp1 instanceof Segment && callSegmentOnCancellation(this, tmp1, cause), 
      detachChildIfNonReusable(this), dispatchResume(this, this.yh_1), !0;
     }
    }, protoOf(CancellableContinuationImpl).si = function(cause) {
     if (function($this, cause) {
      if (!isReusable($this)) return !1;
      var tmp = $this.lh_1;
      return (tmp instanceof DispatchedContinuation ? tmp : THROW_CCE()).zh(cause);
     }(this, cause)) return Unit_instance;
     this.ri(cause), detachChildIfNonReusable(this);
    }, protoOf(CancellableContinuationImpl).gi = function(handler, cause) {
     try {
      handler.ti(cause);
     } catch ($p) {
      if (!($p instanceof Error)) throw $p;
      var ex = $p;
      handleCoroutineException(this.a7(), new CompletionHandlerException("Exception in invokeOnCancellation handler for " + this.toString(), ex));
     }
     return Unit_instance;
    }, protoOf(CancellableContinuationImpl).ui = function(onCancellation, cause, value) {
     try {
      onCancellation(cause, value, this.a7());
     } catch ($p) {
      if (!($p instanceof Error)) throw $p;
      var ex = $p;
      handleCoroutineException(this.a7(), new CompletionHandlerException("Exception in resume onCancellation handler for " + this.toString(), ex));
     }
    }, protoOf(CancellableContinuationImpl).vi = function(parent) {
     return parent.kg();
    }, protoOf(CancellableContinuationImpl).wi = function() {
     var isReusable_0 = isReusable(this);
     if (function($this) {
      for (var this_0 = $this.nh_1; ;) {
       var cur = this_0.kotlinx$atomicfu$value;
       switch (cur >> 29) {
       case 0:
        var tmp$ret$2 = (1 << 29) + (536870911 & cur) | 0;
        if ($this.nh_1.atomicfu$compareAndSet(cur, tmp$ret$2)) return !0;
        break;

       case 2:
        return !1;

       default:
        throw IllegalStateException_init_$Create$(toString("Already suspended"));
       }
      }
     }(this)) return null == _get_parentHandle__f8dcex(this) && installParentHandle(this), 
     isReusable_0 && this.xi(), get_COROUTINE_SUSPENDED();
     isReusable_0 && this.xi();
     var state = this.gg();
     if (state instanceof CompletedExceptionally) throw recoverStackTrace(state.sf_1, this);
     if (get_isCancellableMode(this.yh_1)) {
      var job = this.a7().h7(Key_instance_2);
      if (null != job && !job.nf()) {
       var cause = job.kg();
       throw this.pi(state, cause), recoverStackTrace(cause, this);
      }
     }
     return this.yi(state);
    }, protoOf(CancellableContinuationImpl).xi = function() {
     var tmp = this.lh_1, tmp0_safe_receiver = tmp instanceof DispatchedContinuation ? tmp : null, tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.zi(this);
     if (null == tmp1_elvis_lhs) return Unit_instance;
     var cancellationCause = tmp1_elvis_lhs;
     this.ki(), this.ri(cancellationCause);
    }, protoOf(CancellableContinuationImpl).f7 = function(result) {
     return this.aj(function(_this__u8e3s4, caller) {
      var tmp, exception = Result__exceptionOrNull_impl_p6xea9(_this__u8e3s4);
      if (null == exception) {
       var tmp_0 = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
       tmp = null == tmp_0 || null != tmp_0 ? tmp_0 : THROW_CCE();
      } else tmp = new CompletedExceptionally(recoverStackTrace(exception, caller));
      return tmp;
     }(result, this), this.yh_1);
    }, protoOf(CancellableContinuationImpl).bj = function(handler) {
     return function(_this__u8e3s4, handler) {
      if (!(_this__u8e3s4 instanceof CancellableContinuationImpl)) throw UnsupportedOperationException_init_$Create$("third-party implementation of CancellableContinuation is not supported");
      return _this__u8e3s4.qh(handler), Unit_instance;
     }(this, new UserSupplied(handler));
    }, protoOf(CancellableContinuationImpl).qh = function(handler) {
     return function($this, handler) {
      for (var this_0 = $this.oh_1; ;) {
       var state = this_0.kotlinx$atomicfu$value;
       if (state instanceof Active) {
        if ($this.oh_1.atomicfu$compareAndSet(state, handler)) return Unit_instance;
       } else if (null != state && isInterface(state, CancelHandler) || state instanceof Segment) multipleHandlersError(0, handler, state); else {
        if (state instanceof CompletedExceptionally) {
         if (state.ji() || multipleHandlersError(0, handler, state), state instanceof CancelledContinuation) {
          var tmp1_safe_receiver = state instanceof CompletedExceptionally ? state : null, cause = null == tmp1_safe_receiver ? null : tmp1_safe_receiver.sf_1;
          isInterface(handler, CancelHandler) ? $this.gi(handler, cause) : callSegmentOnCancellation($this, handler instanceof Segment ? handler : THROW_CCE(), cause);
         }
         return Unit_instance;
        }
        if (state instanceof CompletedContinuation) {
         if (null != state.ci_1 && multipleHandlersError(0, handler, state), handler instanceof Segment) return Unit_instance;
         if (isInterface(handler, CancelHandler) || THROW_CCE(), state.hi()) return $this.gi(handler, state.fi_1), 
         Unit_instance;
         var update = state.ii(VOID, handler);
         if ($this.oh_1.atomicfu$compareAndSet(state, update)) return Unit_instance;
        } else {
         if (handler instanceof Segment) return Unit_instance;
         isInterface(handler, CancelHandler) || THROW_CCE();
         var update_0 = new CompletedContinuation(state, handler);
         if ($this.oh_1.atomicfu$compareAndSet(state, update_0)) return Unit_instance;
        }
       }
      }
     }(this, handler);
    }, protoOf(CancellableContinuationImpl).cj = function(proposedUpdate, resumeMode, onCancellation) {
     for (var this_0 = this.oh_1; ;) {
      var tmp1 = this_0.kotlinx$atomicfu$value;
      $l$block: {
       if (null != tmp1 && isInterface(tmp1, NotCompleted)) {
        var update = resumedState(0, tmp1, proposedUpdate, resumeMode, onCancellation, null);
        if (!this.oh_1.atomicfu$compareAndSet(tmp1, update)) break $l$block;
        return detachChildIfNonReusable(this), dispatchResume(this, resumeMode), Unit_instance;
       }
       if (tmp1 instanceof CancelledContinuation && tmp1.gj()) return null == onCancellation || this.ui(onCancellation, tmp1.sf_1, proposedUpdate), 
       Unit_instance;
       alreadyResumedError(0, proposedUpdate);
      }
     }
    }, protoOf(CancellableContinuationImpl).aj = function(proposedUpdate, resumeMode, onCancellation, $super) {
     var tmp;
     return onCancellation = onCancellation === VOID ? null : onCancellation, $super === VOID ? (this.cj(proposedUpdate, resumeMode, onCancellation), 
     tmp = Unit_instance) : tmp = $super.cj.call(this, proposedUpdate, resumeMode, onCancellation), 
     tmp;
    }, protoOf(CancellableContinuationImpl).ki = function() {
     var tmp0_elvis_lhs = _get_parentHandle__f8dcex(this);
     if (null == tmp0_elvis_lhs) return Unit_instance;
     tmp0_elvis_lhs.ni(), this.ph_1.kotlinx$atomicfu$value = NonDisposableHandle_instance;
    }, protoOf(CancellableContinuationImpl).yi = function(state) {
     var tmp;
     if (state instanceof CompletedContinuation) {
      var tmp_0 = state.bi_1;
      tmp = null == tmp_0 || null != tmp_0 ? tmp_0 : THROW_CCE();
     } else tmp = null == state || null != state ? state : THROW_CCE();
     return tmp;
    }, protoOf(CancellableContinuationImpl).hj = function(state) {
     var tmp0_safe_receiver = protoOf(DispatchedTask).hj.call(this, state);
     return null == tmp0_safe_receiver ? null : recoverStackTrace(tmp0_safe_receiver, this.lh_1);
    }, protoOf(CancellableContinuationImpl).toString = function() {
     return this.ij() + "(" + toDebugString(this.lh_1) + "){" + ((null != (tmp0_subject = this.gg()) && isInterface(tmp0_subject, NotCompleted) ? "Active" : tmp0_subject instanceof CancelledContinuation ? "Cancelled" : "Completed") + "}@") + get_hexAddress(this);
     var tmp0_subject;
    }, protoOf(CancellableContinuationImpl).ij = function() {
     return "CancellableContinuation";
    }, protoOf(UserSupplied).ti = function(cause) {
     this.lj_1(cause);
    }, protoOf(UserSupplied).toString = function() {
     return "CancelHandler.UserSupplied[" + get_classSimpleName(this.lj_1) + "@" + get_hexAddress(this) + "]";
    }, protoOf(Active).toString = function() {
     return "Active";
    }, protoOf(CompletedContinuation).hi = function() {
     return !(null == this.fi_1);
    }, protoOf(CompletedContinuation).qi = function(cont, cause) {
     var tmp0_safe_receiver = this.ci_1;
     null == tmp0_safe_receiver || cont.gi(tmp0_safe_receiver, cause);
     var tmp1_safe_receiver = this.di_1;
     null == tmp1_safe_receiver || cont.ui(tmp1_safe_receiver, cause, this.bi_1);
    }, protoOf(CompletedContinuation).mj = function(result, cancelHandler, onCancellation, idempotentResume, cancelCause) {
     return new CompletedContinuation(result, cancelHandler, onCancellation, idempotentResume, cancelCause);
    }, protoOf(CompletedContinuation).ii = function(result, cancelHandler, onCancellation, idempotentResume, cancelCause, $super) {
     return result = result === VOID ? this.bi_1 : result, cancelHandler = cancelHandler === VOID ? this.ci_1 : cancelHandler, 
     onCancellation = onCancellation === VOID ? this.di_1 : onCancellation, idempotentResume = idempotentResume === VOID ? this.ei_1 : idempotentResume, 
     cancelCause = cancelCause === VOID ? this.fi_1 : cancelCause, $super === VOID ? this.mj(result, cancelHandler, onCancellation, idempotentResume, cancelCause) : $super.mj.call(this, result, cancelHandler, onCancellation, idempotentResume, cancelCause);
    }, protoOf(CompletedContinuation).toString = function() {
     return "CompletedContinuation(result=" + toString_0(this.bi_1) + ", cancelHandler=" + toString_0(this.ci_1) + ", onCancellation=" + toString_0(this.di_1) + ", idempotentResume=" + toString_0(this.ei_1) + ", cancelCause=" + toString_0(this.fi_1) + ")";
    }, protoOf(CompletedContinuation).hashCode = function() {
     var result = null == this.bi_1 ? 0 : hashCode(this.bi_1);
     return result = imul(result, 31) + (null == this.ci_1 ? 0 : hashCode(this.ci_1)) | 0, 
     result = imul(result, 31) + (null == this.di_1 ? 0 : hashCode(this.di_1)) | 0, result = imul(result, 31) + (null == this.ei_1 ? 0 : hashCode(this.ei_1)) | 0, 
     result = imul(result, 31) + (null == this.fi_1 ? 0 : hashCode(this.fi_1)) | 0;
    }, protoOf(CompletedContinuation).equals = function(other) {
     if (this === other) return !0;
     if (!(other instanceof CompletedContinuation)) return !1;
     var tmp0_other_with_cast = other instanceof CompletedContinuation ? other : THROW_CCE();
     return !!equals(this.bi_1, tmp0_other_with_cast.bi_1) && (!!equals(this.ci_1, tmp0_other_with_cast.ci_1) && (!!equals(this.di_1, tmp0_other_with_cast.di_1) && (!!equals(this.ei_1, tmp0_other_with_cast.ei_1) && !!equals(this.fi_1, tmp0_other_with_cast.fi_1))));
    }, protoOf(ChildContinuation).sj = function() {
     return !0;
    }, protoOf(ChildContinuation).ti = function(cause) {
     this.rj_1.si(this.rj_1.vi(this.xj()));
    }, protoOf(CompletedExceptionally).uf = function() {
     return this.tf_1.kotlinx$atomicfu$value;
    }, protoOf(CompletedExceptionally).ji = function() {
     return this.tf_1.atomicfu$compareAndSet(!1, !0);
    }, protoOf(CompletedExceptionally).toString = function() {
     return get_classSimpleName(this) + "[" + this.sf_1.toString() + "]";
    }, protoOf(CancelledContinuation).gj = function() {
     return this.fj_1.atomicfu$compareAndSet(!1, !0);
    }, protoOf(CoroutineDispatcher).gk = function(context) {
     return !0;
    }, protoOf(CoroutineDispatcher).i7 = function(continuation) {
     return new DispatchedContinuation(this, continuation);
    }, protoOf(CoroutineDispatcher).j7 = function(continuation) {
     (continuation instanceof DispatchedContinuation ? continuation : THROW_CCE()).ik();
    }, protoOf(CoroutineDispatcher).toString = function() {
     return get_classSimpleName(this) + "@" + get_hexAddress(this);
    }, protoOf(GlobalScope).mf = function() {
     return EmptyCoroutineContext_getInstance();
    }, protoOf(CoroutineStart).dg = function(block, receiver, completion) {
     var tmp;
     switch (this.r1_1) {
     case 0:
      !function(_this__u8e3s4, receiver, completion) {
       try {
        resumeCancellableWith(intercepted(createCoroutineUnintercepted(_this__u8e3s4, receiver, completion)), _Result___init__impl__xyqfz8(Unit_instance));
       } catch ($p) {
        if (!($p instanceof Error)) throw $p;
        dispatcherFailure(completion, $p);
       }
      }(block, receiver, completion), tmp = Unit_instance;
      break;

     case 2:
      startCoroutine(block, receiver, completion), tmp = Unit_instance;
      break;

     case 3:
      !function(_this__u8e3s4, receiver, completion) {
       var tmp, actualCompletion = completion;
       try {
        actualCompletion.a7(), tmp = startCoroutineUninterceptedOrReturnNonGeneratorVersion(_this__u8e3s4, receiver, actualCompletion);
       } catch ($p) {
        if ($p instanceof Error) {
         var tmp_1, e = $p;
         tmp_1 = e instanceof DispatchException ? e.jk_1 : e;
         var tmp$ret$5 = _Result___init__impl__xyqfz8(createFailure(tmp_1));
         return actualCompletion.f7(tmp$ret$5), Unit_instance;
        }
        throw $p;
       }
       var value = tmp;
       if (value !== get_COROUTINE_SUSPENDED()) {
        var value_0 = null == value || null != value ? value : THROW_CCE(), tmp$ret$7 = _Result___init__impl__xyqfz8(value_0);
        actualCompletion.f7(tmp$ret$7);
       }
      }(block, receiver, completion), tmp = Unit_instance;
      break;

     case 1:
      tmp = Unit_instance;
      break;

     default:
      noWhenBranchMatchedException();
     }
     return tmp;
    }, protoOf(CoroutineStart).ch = function() {
     return this === (CoroutineStart_initEntries(), CoroutineStart_LAZY_instance);
    }, protoOf(EventLoop).pk = function() {
     var tmp0_elvis_lhs = this.ok_1;
     if (null == tmp0_elvis_lhs) return !1;
     var tmp1_elvis_lhs = tmp0_elvis_lhs.dc();
     return null != tmp1_elvis_lhs && (tmp1_elvis_lhs.jj(), !0);
    }, protoOf(EventLoop).qk = function(task) {
     var tmp, tmp0_elvis_lhs = this.ok_1;
     if (null == tmp0_elvis_lhs) {
      var this_0 = ArrayDeque_init_$Create$();
      this.ok_1 = this_0, tmp = this_0;
     } else tmp = tmp0_elvis_lhs;
     tmp.bc(task);
    }, protoOf(EventLoop).rk = function() {
     return this.mk_1.b1(delta(0, !0)) >= 0;
    }, protoOf(EventLoop).sk = function() {
     var tmp0_safe_receiver = this.ok_1, tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.q();
     return null == tmp1_elvis_lhs || tmp1_elvis_lhs;
    }, protoOf(EventLoop).tk = function(unconfined) {
     this.mk_1 = this.mk_1.x1(delta(0, unconfined)), unconfined || (this.nk_1 = !0);
    }, protoOf(EventLoop).uk = function(unconfined) {
     if (this.mk_1 = this.mk_1.y1(delta(0, unconfined)), this.mk_1.b1(new Long(0, 0)) > 0) return Unit_instance;
     this.nk_1 && this.vk();
    }, protoOf(EventLoop).vk = function() {}, protoOf(ThreadLocalEventLoop).xk = function() {
     var tmp, tmp0_elvis_lhs = this.wk_1.zk();
     if (null == tmp0_elvis_lhs) {
      var this_0 = new UnconfinedEventLoop;
      ThreadLocalEventLoop_getInstance().wk_1.al(this_0), tmp = this_0;
     } else tmp = tmp0_elvis_lhs;
     return tmp;
    }, protoOf(NonDisposableHandle).ni = function() {}, protoOf(NonDisposableHandle).sg = function(cause) {
     return !1;
    }, protoOf(NonDisposableHandle).toString = function() {
     return "NonDisposableHandle";
    }, protoOf(Empty).nf = function() {
     return this.bl_1;
    }, protoOf(Empty).yj = function() {
     return null;
    }, protoOf(Empty).toString = function() {
     return "Empty{" + (this.bl_1 ? "Active" : "New") + "}";
    }, protoOf(NodeList).nf = function() {
     return !0;
    }, protoOf(NodeList).yj = function() {
     return this;
    }, protoOf(NodeList).fl = function(state) {
     var this_0 = StringBuilder_init_$Create$();
     this_0.i6("List{"), this_0.i6(state), this_0.i6("}[");
     for (var first = !0, cur = this.zj_1; !equals(cur, this); ) {
      var node = cur;
      node instanceof JobNode && (first ? first = !1 : this_0.i6(", "), this_0.h6(node)), 
      cur = cur.zj_1;
     }
     return this_0.i6("]"), this_0.toString();
    }, protoOf(NodeList).toString = function() {
     return get_DEBUG() ? this.fl("Active") : protoOf(LockFreeLinkedListHead).toString.call(this);
    }, protoOf(JobNode).xj = function() {
     var tmp = this.wj_1;
     if (null != tmp) return tmp;
     throwUninitializedPropertyAccessException("job");
    }, protoOf(JobNode).nf = function() {
     return !0;
    }, protoOf(JobNode).yj = function() {
     return null;
    }, protoOf(JobNode).ni = function() {
     return this.xj().pg(this);
    }, protoOf(JobNode).toString = function() {
     return get_classSimpleName(this) + "@" + get_hexAddress(this) + "[job@" + get_hexAddress(this.xj()) + "]";
    }, protoOf(Finishing).yj = function() {
     return this.hl_1;
    }, protoOf(Finishing).sl = function(value) {
     this.il_1.kotlinx$atomicfu$value = value;
    }, protoOf(Finishing).ol = function() {
     return this.il_1.kotlinx$atomicfu$value;
    }, protoOf(Finishing).yl = function(value) {
     this.jl_1.kotlinx$atomicfu$value = value;
    }, protoOf(Finishing).rl = function() {
     return this.jl_1.kotlinx$atomicfu$value;
    }, protoOf(Finishing).pl = function() {
     return _get_exceptionsHolder__nhszp(this) === get_SEALED();
    }, protoOf(Finishing).ll = function() {
     return !(null == this.rl());
    }, protoOf(Finishing).nf = function() {
     return null == this.rl();
    }, protoOf(Finishing).ml = function(proposedException) {
     var tmp, eh = _get_exceptionsHolder__nhszp(this);
     if (null == eh) tmp = allocateList(); else if (eh instanceof Error) {
      var this_0 = allocateList();
      this_0.e(eh), tmp = this_0;
     } else {
      if (!(eh instanceof ArrayList)) {
       var message = "State is " + toString_0(eh);
       throw IllegalStateException_init_$Create$(toString(message));
      }
      tmp = eh instanceof ArrayList ? eh : THROW_CCE();
     }
     var list = tmp, rootCause = this.rl();
     return null == rootCause || list.x2(0, rootCause), null == proposedException || equals(proposedException, rootCause) || list.e(proposedException), 
     _set_exceptionsHolder__tqm22h(this, get_SEALED()), list;
    }, protoOf(Finishing).ql = function(exception) {
     var rootCause = this.rl();
     if (null == rootCause) return this.yl(exception), Unit_instance;
     if (exception === rootCause) return Unit_instance;
     var eh = _get_exceptionsHolder__nhszp(this);
     if (null == eh) _set_exceptionsHolder__tqm22h(this, exception); else if (eh instanceof Error) {
      if (exception === eh) return Unit_instance;
      var this_0 = allocateList();
      this_0.e(eh), this_0.e(exception), _set_exceptionsHolder__tqm22h(this, this_0);
     } else {
      if (!(eh instanceof ArrayList)) {
       var message = "State is " + toString_0(eh);
       throw IllegalStateException_init_$Create$(toString(message));
      }
      (eh instanceof ArrayList ? eh : THROW_CCE()).e(exception);
     }
    }, protoOf(Finishing).toString = function() {
     return "Finishing[cancelling=" + this.ll() + ", completing=" + this.ol() + ", rootCause=" + toString_0(this.rl()) + ", exceptions=" + toString_0(_get_exceptionsHolder__nhszp(this)) + ", list=" + this.hl_1.toString() + "]";
    }, protoOf(ChildCompletion).sj = function() {
     return !1;
    }, protoOf(ChildCompletion).ti = function(cause) {
     !function($this, state, lastChild, proposedUpdate) {
      var waitChild = nextChild(0, lastChild);
      if (null != waitChild && tryWaitForChild($this, state, waitChild, proposedUpdate)) return Unit_instance;
      state.hl_1.gl(2);
      var waitChildAgain = nextChild(0, lastChild);
      if (null != waitChildAgain && tryWaitForChild($this, state, waitChildAgain, proposedUpdate)) return Unit_instance;
      var finalState = finalizeFinishingState($this, state, proposedUpdate);
      $this.xf(finalState);
     }(this.dm_1, this.em_1, this.fm_1, this.gm_1);
    }, protoOf(JobSupport).f1 = function() {
     return Key_instance_2;
    }, protoOf(JobSupport).eg = function(value) {
     this.hf_1.kotlinx$atomicfu$value = value;
    }, protoOf(JobSupport).fg = function() {
     return this.hf_1.kotlinx$atomicfu$value;
    }, protoOf(JobSupport).if = function(parent) {
     if (null == parent) return this.eg(NonDisposableHandle_instance), Unit_instance;
     parent.ig();
     var handle = parent.wg(this);
     this.eg(handle), this.hg() && (handle.ni(), this.eg(NonDisposableHandle_instance));
    }, protoOf(JobSupport).gg = function() {
     return this.gf_1.kotlinx$atomicfu$value;
    }, protoOf(JobSupport).nf = function() {
     var state = this.gg();
     return !(null == state || !isInterface(state, Incomplete)) && state.nf();
    }, protoOf(JobSupport).hg = function() {
     var tmp = this.gg();
     return !(null != tmp && isInterface(tmp, Incomplete));
    }, protoOf(JobSupport).ig = function() {
     for (;;) {
      var tmp0_subject = startInternal(this, this.gg());
      if (0 === tmp0_subject) return !1;
      if (1 === tmp0_subject) return !0;
     }
    }, protoOf(JobSupport).jg = function() {}, protoOf(JobSupport).kg = function() {
     var tmp, state = this.gg();
     if (state instanceof Finishing) {
      var tmp0_safe_receiver = state.rl(), tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : this.lg(tmp0_safe_receiver, get_classSimpleName(this) + " is cancelling");
      if (null == tmp1_elvis_lhs) {
       var message = "Job is still new or active: " + this.toString();
       throw IllegalStateException_init_$Create$(toString(message));
      }
      tmp = tmp1_elvis_lhs;
     } else {
      if (null != state && isInterface(state, Incomplete)) {
       var message_0 = "Job is still new or active: " + this.toString();
       throw IllegalStateException_init_$Create$(toString(message_0));
      }
      tmp = state instanceof CompletedExceptionally ? this.mg(state.sf_1) : new JobCancellationException(get_classSimpleName(this) + " has completed normally", null, this);
     }
     return tmp;
    }, protoOf(JobSupport).lg = function(_this__u8e3s4, message) {
     var tmp0_elvis_lhs = _this__u8e3s4 instanceof CancellationException ? _this__u8e3s4 : null;
     return null == tmp0_elvis_lhs ? new JobCancellationException(null == message ? this.qf() : message, _this__u8e3s4, this) : tmp0_elvis_lhs;
    }, protoOf(JobSupport).mg = function(_this__u8e3s4, message, $super) {
     return message = message === VOID ? null : message, $super === VOID ? this.lg(_this__u8e3s4, message) : $super.lg.call(this, _this__u8e3s4, message);
    }, protoOf(JobSupport).ng = function(onCancelling, invokeImmediately, handler) {
     var tmp;
     return tmp = onCancelling ? new InvokeOnCancelling(handler) : new InvokeOnCompletion(handler), 
     this.og(invokeImmediately, tmp);
    }, protoOf(JobSupport).og = function(invokeImmediately, node) {
     var tmp$ret$0;
     node.wj_1 = this;
     $l$block_1: for (;;) {
      var state = this.gg();
      if (state instanceof Empty) if (state.bl_1) {
       if (this.gf_1.atomicfu$compareAndSet(state, node)) {
        tmp$ret$0 = !0;
        break $l$block_1;
       }
      } else promoteEmptyToNodeList(this, state); else {
       if (null == state || !isInterface(state, Incomplete)) {
        tmp$ret$0 = !1;
        break $l$block_1;
       }
       var list = state.yj();
       if (null == list) promoteSingleToNodeList(this, state instanceof JobNode ? state : THROW_CCE()); else {
        var tmp;
        if (node.sj()) {
         var tmp0_safe_receiver = state instanceof Finishing ? state : null, rootCause = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.rl();
         if (null != rootCause) return invokeImmediately && node.ti(rootCause), NonDisposableHandle_instance;
         tmp = list.ck(node, 5);
        } else tmp = list.ck(node, 1);
        if (tmp) {
         tmp$ret$0 = !0;
         break $l$block_1;
        }
       }
      }
     }
     if (tmp$ret$0) return node;
     if (invokeImmediately) {
      var tmp_1 = this.gg(), tmp0_safe_receiver_0 = tmp_1 instanceof CompletedExceptionally ? tmp_1 : null;
      node.ti(null == tmp0_safe_receiver_0 ? null : tmp0_safe_receiver_0.sf_1);
     }
     return NonDisposableHandle_instance;
    }, protoOf(JobSupport).pg = function(node) {
     for (;;) {
      var state = this.gg();
      if (!(state instanceof JobNode)) return null != state && isInterface(state, Incomplete) ? (null != state.yj() && node.dk(), 
      Unit_instance) : Unit_instance;
      if (state !== node) return Unit_instance;
      if (this.gf_1.atomicfu$compareAndSet(state, get_EMPTY_ACTIVE())) return Unit_instance;
     }
    }, protoOf(JobSupport).qg = function() {
     return !1;
    }, protoOf(JobSupport).qf = function() {
     return "Job was cancelled";
    }, protoOf(JobSupport).rg = function(parentJob) {
     this.tg(parentJob);
    }, protoOf(JobSupport).sg = function(cause) {
     return cause instanceof CancellationException || this.tg(cause) && this.zg();
    }, protoOf(JobSupport).tg = function(cause) {
     var tmp, finalState = get_COMPLETING_ALREADY();
     return !(!this.qg() || (finalState = function($this, cause) {
      for (;;) {
       var state = $this.gg();
       if (null == state || !isInterface(state, Incomplete) || state instanceof Finishing && state.ol()) return get_COMPLETING_ALREADY();
       var finalState = tryMakeCompleting($this, state, new CompletedExceptionally(createCauseException($this, cause)));
       if (finalState !== get_COMPLETING_RETRY()) return finalState;
      }
     }(this, cause), finalState !== get_COMPLETING_WAITING_CHILDREN())) || (finalState === get_COMPLETING_ALREADY() && (finalState = function($this, cause) {
      for (var causeExceptionCache = null; ;) {
       var tmp1 = $this.gg();
       $l$block: {
        if (tmp1 instanceof Finishing) {
         if (tmp1.pl()) return get_TOO_LATE_TO_CANCEL();
         var wasCancelling = tmp1.ll();
         if (null != cause || !wasCancelling) {
          var tmp, tmp0_elvis_lhs = causeExceptionCache;
          if (null == tmp0_elvis_lhs) {
           var this_0 = createCauseException($this, cause);
           causeExceptionCache = this_0, tmp = this_0;
          } else tmp = tmp0_elvis_lhs;
          var causeException = tmp;
          tmp1.ql(causeException);
         }
         var this_1 = tmp1.rl(), notifyRootCause = wasCancelling ? null : this_1;
         return null == notifyRootCause || notifyCancelling($this, tmp1.hl_1, notifyRootCause), 
         get_COMPLETING_ALREADY();
        }
        if (null == tmp1 || !isInterface(tmp1, Incomplete)) return get_TOO_LATE_TO_CANCEL();
        var tmp_1, tmp2_elvis_lhs = causeExceptionCache;
        if (null == tmp2_elvis_lhs) {
         var this_2 = createCauseException($this, cause);
         causeExceptionCache = this_2, tmp_1 = this_2;
        } else tmp_1 = tmp2_elvis_lhs;
        var causeException_0 = tmp_1;
        if (!tmp1.nf()) {
         var finalState = tryMakeCompleting($this, tmp1, new CompletedExceptionally(causeException_0));
         if (finalState === get_COMPLETING_ALREADY()) {
          var message = "Cannot happen in " + toString(tmp1);
          throw IllegalStateException_init_$Create$(toString(message));
         }
         if (finalState === get_COMPLETING_RETRY()) break $l$block;
         return finalState;
        }
        if (tryMakeCancelling($this, tmp1, causeException_0)) return get_COMPLETING_ALREADY();
       }
      }
     }(this, cause)), finalState === get_COMPLETING_ALREADY() || finalState === get_COMPLETING_WAITING_CHILDREN() ? tmp = !0 : finalState === get_TOO_LATE_TO_CANCEL() ? tmp = !1 : (this.xf(finalState), 
     tmp = !0), tmp);
    }, protoOf(JobSupport).ug = function() {
     var tmp, state = this.gg();
     if (state instanceof Finishing) tmp = state.rl(); else if (state instanceof CompletedExceptionally) tmp = state.sf_1; else {
      if (null != state && isInterface(state, Incomplete)) {
       var message = "Cannot be cancelling child in this state: " + toString(state);
       throw IllegalStateException_init_$Create$(toString(message));
      }
      tmp = null;
     }
     var rootCause = tmp, tmp1_elvis_lhs = rootCause instanceof CancellationException ? rootCause : null;
     return null == tmp1_elvis_lhs ? new JobCancellationException("Parent job is " + stateString(0, state), rootCause, this) : tmp1_elvis_lhs;
    }, protoOf(JobSupport).vg = function(proposedUpdate) {
     for (;;) {
      var finalState = tryMakeCompleting(this, this.gg(), proposedUpdate);
      if (finalState === get_COMPLETING_ALREADY()) return !1;
      if (finalState === get_COMPLETING_WAITING_CHILDREN()) return !0;
      if (finalState !== get_COMPLETING_RETRY()) return this.xf(finalState), !0;
     }
    }, protoOf(JobSupport).vf = function(proposedUpdate) {
     for (;;) {
      var finalState = tryMakeCompleting(this, this.gg(), proposedUpdate);
      if (finalState === get_COMPLETING_ALREADY()) throw IllegalStateException_init_$Create$_0("Job " + this.toString() + " is already complete or completing, but is being completed with " + toString_0(proposedUpdate), (tmp0_safe_receiver = void 0, 
      null == (tmp0_safe_receiver = (_this__u8e3s4 = proposedUpdate) instanceof CompletedExceptionally ? _this__u8e3s4 : null) ? null : tmp0_safe_receiver.sf_1));
      if (finalState !== get_COMPLETING_RETRY()) return finalState;
     }
     var _this__u8e3s4, tmp0_safe_receiver;
    }, protoOf(JobSupport).wg = function(child) {
     var this_0 = new ChildHandleNode(child);
     this_0.wj_1 = this;
     var tmp$ret$2, node = this_0;
     $l$block_1: for (;;) {
      var state = this.gg();
      if (state instanceof Empty) if (state.bl_1) {
       if (this.gf_1.atomicfu$compareAndSet(state, node)) {
        tmp$ret$2 = !0;
        break $l$block_1;
       }
      } else promoteEmptyToNodeList(this, state); else {
       if (null == state || !isInterface(state, Incomplete)) {
        tmp$ret$2 = !1;
        break $l$block_1;
       }
       var list = state.yj();
       if (null == list) promoteSingleToNodeList(this, state instanceof JobNode ? state : THROW_CCE()); else {
        var tmp;
        if (list.ck(node, 7)) tmp = !0; else {
         var tmp_0, addedBeforeCompletion = list.ck(node, 3), latestState = this.gg();
         if (latestState instanceof Finishing) tmp_0 = latestState.rl(); else {
          var tmp0_safe_receiver = latestState instanceof CompletedExceptionally ? latestState : null;
          tmp_0 = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.sf_1;
         }
         var rootCause = tmp_0;
         if (node.ti(rootCause), !addedBeforeCompletion) return NonDisposableHandle_instance;
         tmp = !0;
        }
        if (tmp) {
         tmp$ret$2 = !0;
         break $l$block_1;
        }
       }
      }
     }
     if (tmp$ret$2) return node;
     var tmp_2 = this.gg(), tmp0_safe_receiver_0 = tmp_2 instanceof CompletedExceptionally ? tmp_2 : null;
     return node.ti(null == tmp0_safe_receiver_0 ? null : tmp0_safe_receiver_0.sf_1), 
     NonDisposableHandle_instance;
    }, protoOf(JobSupport).yf = function(exception) {
     throw exception;
    }, protoOf(JobSupport).xg = function(cause) {}, protoOf(JobSupport).yg = function() {
     return !1;
    }, protoOf(JobSupport).zg = function() {
     return !0;
    }, protoOf(JobSupport).ah = function(exception) {
     return !1;
    }, protoOf(JobSupport).rf = function(state) {}, protoOf(JobSupport).xf = function(state) {}, 
    protoOf(JobSupport).toString = function() {
     return this.bh() + "@" + get_hexAddress(this);
    }, protoOf(JobSupport).bh = function() {
     return this.zf() + "{" + stateString(0, this.gg()) + "}";
    }, protoOf(JobSupport).zf = function() {
     return get_classSimpleName(this);
    }, protoOf(InactiveNodeList).yj = function() {
     return this.nl_1;
    }, protoOf(InactiveNodeList).nf = function() {
     return !1;
    }, protoOf(InactiveNodeList).toString = function() {
     return get_DEBUG() ? this.nl_1.fl("New") : anyToString(this);
    }, protoOf(InvokeOnCompletion).sj = function() {
     return !1;
    }, protoOf(InvokeOnCompletion).ti = function(cause) {
     return this.lm_1(cause);
    }, protoOf(InvokeOnCancelling).sj = function() {
     return !0;
    }, protoOf(InvokeOnCancelling).ti = function(cause) {
     this.rm_1.atomicfu$compareAndSet(!1, !0) && this.qm_1(cause);
    }, protoOf(ChildHandleNode).sj = function() {
     return !0;
    }, protoOf(ChildHandleNode).ti = function(cause) {
     return this.xl_1.rg(this.xj());
    }, protoOf(ChildHandleNode).sg = function(cause) {
     return this.xj().sg(cause);
    }, protoOf(MainCoroutineDispatcher).toString = function() {
     var tmp0_elvis_lhs = this.vm();
     return null == tmp0_elvis_lhs ? get_classSimpleName(this) + "@" + get_hexAddress(this) : tmp0_elvis_lhs;
    }, protoOf(MainCoroutineDispatcher).vm = function() {
     var tmp, main = Dispatchers_getInstance().an();
     if (this === main) return "Dispatchers.Main";
     try {
      tmp = main.um();
     } catch ($p) {
      if (!($p instanceof UnsupportedOperationException)) throw $p;
      tmp = null;
     }
     return this === tmp ? "Dispatchers.Main.immediate" : null;
    }, protoOf(SupervisorCoroutine).sg = function(cause) {
     return !1;
    }, protoOf(Unconfined).gk = function(context) {
     return !1;
    }, protoOf(Unconfined).hk = function(context, block) {
     var yieldContext = context.h7(Key_instance_3);
     if (null != yieldContext) return yieldContext.mn_1 = !0, Unit_instance;
     throw UnsupportedOperationException_init_$Create$("Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls.");
    }, protoOf(Unconfined).toString = function() {
     return "Dispatchers.Unconfined";
    }, protoOf(DispatchedContinuation).xh = function() {
     return !(null == this.wh_1.kotlinx$atomicfu$value);
    }, protoOf(DispatchedContinuation).nn = function() {
     for (var this_0 = this.wh_1; ;) if (this_0.kotlinx$atomicfu$value !== get_REUSABLE_CLAIMED()) return Unit_instance;
    }, protoOf(DispatchedContinuation).ik = function() {
     this.nn();
     var tmp, tmp0_safe_receiver = (tmp = this.wh_1.kotlinx$atomicfu$value) instanceof CancellableContinuationImpl ? tmp : null;
     null == tmp0_safe_receiver || tmp0_safe_receiver.ki();
    }, protoOf(DispatchedContinuation).zi = function(continuation) {
     for (var this_0 = this.wh_1; ;) {
      var state = this_0.kotlinx$atomicfu$value;
      if (state !== get_REUSABLE_CLAIMED()) {
       if (state instanceof Error) {
        if (!this.wh_1.atomicfu$compareAndSet(state, null)) {
         throw IllegalArgumentException_init_$Create$(toString("Failed requirement."));
        }
        return state;
       }
       var message_0 = "Inconsistent state " + toString_0(state);
       throw IllegalStateException_init_$Create$(toString(message_0));
      }
      if (this.wh_1.atomicfu$compareAndSet(get_REUSABLE_CLAIMED(), continuation)) return null;
     }
    }, protoOf(DispatchedContinuation).zh = function(cause) {
     for (var this_0 = this.wh_1; ;) {
      var state = this_0.kotlinx$atomicfu$value;
      if (equals(state, get_REUSABLE_CLAIMED())) {
       if (this.wh_1.atomicfu$compareAndSet(get_REUSABLE_CLAIMED(), cause)) return !0;
      } else {
       if (state instanceof Error) return !0;
       if (this.wh_1.atomicfu$compareAndSet(state, null)) return !1;
      }
     }
    }, protoOf(DispatchedContinuation).oi = function() {
     var state = this.uh_1;
     return this.uh_1 = get_UNDEFINED(), state;
    }, protoOf(DispatchedContinuation).li = function() {
     return this;
    }, protoOf(DispatchedContinuation).f7 = function(result) {
     var state = toState_0(result);
     if (safeIsDispatchNeeded(this.sh_1, this.a7())) this.uh_1 = state, this.yh_1 = 0, 
     safeDispatch(this.sh_1, this.a7(), this); else {
      var eventLoop = ThreadLocalEventLoop_getInstance().xk();
      if (eventLoop.rk()) this.uh_1 = state, this.yh_1 = 0, eventLoop.qk(this); else {
       eventLoop.tk(!0);
       try {
        for (this.a7(), this.vh_1, this.th_1.f7(result); eventLoop.pk(); ) ;
       } catch ($p) {
        if (!($p instanceof Error)) throw $p;
        var e = $p;
        this.kj(e);
       } finally {
        eventLoop.uk(!0);
       }
       0;
      }
     }
    }, protoOf(DispatchedContinuation).toString = function() {
     return "DispatchedContinuation[" + this.sh_1.toString() + ", " + toDebugString(this.th_1) + "]";
    }, protoOf(DispatchedContinuation).a7 = function() {
     return this.th_1.a7();
    }, protoOf(DispatchedTask).pi = function(takenState, cause) {}, protoOf(DispatchedTask).yi = function(state) {
     return null == state || null != state ? state : THROW_CCE();
    }, protoOf(DispatchedTask).hj = function(state) {
     var tmp0_safe_receiver = state instanceof CompletedExceptionally ? state : null;
     return null == tmp0_safe_receiver ? null : tmp0_safe_receiver.sf_1;
    }, protoOf(DispatchedTask).jj = function() {
     try {
      var tmp = this.li(), delegate = tmp instanceof DispatchedContinuation ? tmp : THROW_CCE(), continuation = delegate.th_1;
      delegate.vh_1;
      var context = continuation.a7(), state = this.oi(), exception = this.hj(state), job = null == exception && get_isCancellableMode(this.yh_1) ? context.h7(Key_instance_2) : null;
      if (null == job || job.nf()) if (null != exception) {
       var tmp$ret$3 = _Result___init__impl__xyqfz8(createFailure(exception));
       continuation.f7(tmp$ret$3);
      } else {
       var value = this.yi(state), tmp$ret$5 = _Result___init__impl__xyqfz8(value);
       continuation.f7(tmp$ret$5);
      } else {
       var cause = job.kg();
       this.pi(state, cause);
       var exception_0 = recoverStackTrace(cause, continuation), tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure(exception_0));
       continuation.f7(tmp$ret$1);
      }
     } catch ($p) {
      if ($p instanceof DispatchException) {
       var e = $p;
       handleCoroutineException(this.li().a7(), e.jk_1);
      } else {
       if (!($p instanceof Error)) throw $p;
       var e_0 = $p;
       this.kj(e_0);
      }
     }
    }, protoOf(DispatchedTask).kj = function(exception) {
     var reason = new CoroutinesInternalError("Fatal exception in coroutines machinery for " + toString(this) + ". Please read KDoc to 'handleFatalException' method and report this incident to maintainers", exception);
     handleCoroutineException(this.li().a7(), reason);
    }, protoOf(DispatchException).p7 = function() {
     return this.jk_1;
    }, protoOf(ScopeCoroutine).yg = function() {
     return !0;
    }, protoOf(ScopeCoroutine).xf = function(state) {
     resumeCancellableWith(intercepted(this.in_1), recoverResult(state, this.in_1));
    }, protoOf(ScopeCoroutine).jn = function() {}, protoOf(ScopeCoroutine).wf = function(state) {
     this.in_1.f7(recoverResult(state, this.in_1));
    }, protoOf(Symbol).toString = function() {
     return "<" + this.on_1 + ">";
    }, protoOf(NodeDispatcher).sn = function() {
     process.nextTick(this.zn_1.xn_1);
    }, protoOf(ScheduledMessageQueue).eo = function() {
     this.wn_1.sn();
    }, protoOf(ScheduledMessageQueue).fo = function() {
     setTimeout(this.xn_1, 0);
    }, protoOf(ScheduledMessageQueue).go = function(timeout) {
     setTimeout(this.xn_1, timeout);
    }, protoOf(WindowMessageQueue).eo = function() {
     var this$0;
     Promise.resolve(Unit_instance).then((this$0 = this, function(it) {
      return this$0.do(), Unit_instance;
     }));
    }, protoOf(WindowMessageQueue).fo = function() {
     this.no_1.postMessage(this.oo_1, "*");
    }, protoOf(UnconfinedEventLoop).hk = function(context, block) {
     !function() {
      throw UnsupportedOperationException_init_$Create$("runBlocking event loop is not supported");
     }();
    }, protoOf(SetTimeoutDispatcher).sn = function() {
     this.zn_1.go(0);
    }, protoOf(SetTimeoutBasedDispatcher).hk = function(context, block) {
     this.zn_1.ho(block);
    }, protoOf(MessageQueue).ho = function(element) {
     this.io(element), this.co_1 || (this.co_1 = !0, this.eo());
    }, protoOf(MessageQueue).do = function() {
     try {
      var times = this.bo_1, inductionVariable = 0;
      if (inductionVariable < times) do {
       inductionVariable = inductionVariable + 1 | 0;
       var tmp0_elvis_lhs = removeFirstOrNull(this);
       if (null == tmp0_elvis_lhs) return Unit_instance;
       tmp0_elvis_lhs.jj();
      } while (inductionVariable < times);
     } finally {
      this.q() ? this.co_1 = !1 : this.fo();
     }
    }, protoOf(MessageQueue).io = function(element) {
     return this.ao_1.e(element);
    }, protoOf(MessageQueue).e = function(element) {
     return this.io(null != element && isInterface(element, Runnable) ? element : THROW_CCE());
    }, protoOf(MessageQueue).jo = function(elements) {
     return this.ao_1.o(elements);
    }, protoOf(MessageQueue).o = function(elements) {
     return this.jo(elements);
    }, protoOf(MessageQueue).p1 = function() {
     this.ao_1.p1();
    }, protoOf(MessageQueue).r2 = function(index) {
     return this.ao_1.r2(index);
    }, protoOf(MessageQueue).q = function() {
     return this.ao_1.q();
    }, protoOf(MessageQueue).h = function() {
     return this.ao_1.h();
    }, protoOf(MessageQueue).p = function(index) {
     return this.ao_1.p(index);
    }, protoOf(MessageQueue).k = function() {
     return this.ao_1.xb_1;
    }, protoOf(WindowDispatcher).hk = function(context, block) {
     return this.xo_1.ho(block);
    }, protoOf(Dispatchers).an = function() {
     var tmp0_elvis_lhs = this.zm_1;
     return null == tmp0_elvis_lhs ? this.ym_1 : tmp0_elvis_lhs;
    }, protoOf(JsMainDispatcher).um = function() {
     return this.bp_1;
    }, protoOf(JsMainDispatcher).gk = function(context) {
     return !this.ap_1;
    }, protoOf(JsMainDispatcher).hk = function(context, block) {
     return this.zo_1.hk(context, block);
    }, protoOf(JsMainDispatcher).toString = function() {
     var tmp0_elvis_lhs = this.vm();
     return null == tmp0_elvis_lhs ? this.zo_1.toString() : tmp0_elvis_lhs;
    }, protoOf(JobCancellationException).toString = function() {
     return protoOf(CancellationException).toString.call(this) + "; job=" + toString(this.cp_1);
    }, protoOf(JobCancellationException).equals = function(other) {
     var tmp;
     other === this ? tmp = !0 : tmp = !!(!!(other instanceof JobCancellationException && other.message == this.message) && equals(other.cp_1, this.cp_1)) && equals(other.cause, this.cause);
     return tmp;
    }, protoOf(JobCancellationException).hashCode = function() {
     var tmp = imul(imul(getStringHashCode(ensureNotNull(this.message)), 31) + hashCode(this.cp_1) | 0, 31), tmp0_safe_receiver = this.cause, tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : hashCode(tmp0_safe_receiver);
     return tmp + (null == tmp1_elvis_lhs ? 0 : tmp1_elvis_lhs) | 0;
    }, protoOf(LockFreeLinkedListNode).ck = function(node, permissionsBitmask) {
     var tmp, prev = this.ak_1;
     return prev instanceof ListClosed ? tmp = !(prev.gp_1 & permissionsBitmask) && prev.ck(node, permissionsBitmask) : (node.zj_1 = this, 
     node.ak_1 = prev, prev.zj_1 = node, this.ak_1 = node, tmp = !0), tmp;
    }, protoOf(LockFreeLinkedListNode).gl = function(forbiddenElementsBit) {
     this.ck(new ListClosed(forbiddenElementsBit), forbiddenElementsBit);
    }, protoOf(LockFreeLinkedListNode).dk = function() {
     if (this.bk_1) return !1;
     var prev = this.ak_1, next = this.zj_1;
     return prev.zj_1 = next, next.ak_1 = prev, this.bk_1 = !0, !0;
    }, protoOf(LockFreeLinkedListNode).ek = function(node) {
     return this.zj_1 === this && (this.ck(node, -2147483648), !0);
    }, protoOf(CommonThreadLocal).zk = function() {
     var tmp = this.yk_1;
     return null == tmp || null != tmp ? tmp : THROW_CCE();
    }, protoOf(CommonThreadLocal).al = function(value) {
     this.yk_1 = value;
    }, protoOf(JobSupport).sd = plus, protoOf(JobSupport).h7 = get_0, protoOf(JobSupport).rd = fold, 
    protoOf(JobSupport).qd = minusKey_0, protoOf(CoroutineDispatcher).h7 = get, protoOf(CoroutineDispatcher).qd = minusKey, 
    defineProp(protoOf(DispatchException), "cause", (function() {
     return this.p7();
    })), Active_instance = new Active, Key_instance_1 = new Key_0, GlobalScope_instance = new GlobalScope, 
    Key_instance_2 = new Key_1, NonDisposableHandle_instance = new NonDisposableHandle, 
    Key_instance_3 = new Key_2, counter = 0, DEBUG = !1, _.$_$ = _.$_$ || {}, _.$_$.a = function(block, $completion) {
     var coroutine = new SupervisorCoroutine($completion.a7(), $completion);
     return function(_this__u8e3s4, receiver, block) {
      return function(_this__u8e3s4, alwaysRethrow, receiver, block) {
       var tmp;
       try {
        tmp = startCoroutineUninterceptedOrReturnNonGeneratorVersion(block, receiver, _this__u8e3s4);
       } catch ($p) {
        var tmp_0;
        if ($p instanceof DispatchException) {
         !function(_this__u8e3s4, e) {
          throw _this__u8e3s4.vg(new CompletedExceptionally(e.jk_1)), recoverStackTrace(e.jk_1, _this__u8e3s4.in_1);
         }(_this__u8e3s4, $p);
        } else {
         if (!($p instanceof Error)) throw $p;
         tmp_0 = new CompletedExceptionally($p);
        }
        tmp = tmp_0;
       }
       var result = tmp;
       if (result === get_COROUTINE_SUSPENDED()) return get_COROUTINE_SUSPENDED();
       var tmp_1, state = _this__u8e3s4.vf(result);
       if (state === get_COMPLETING_WAITING_CHILDREN()) return get_COROUTINE_SUSPENDED();
       if (_this__u8e3s4.jn(), state instanceof CompletedExceptionally) {
        if (alwaysRethrow || function(_this__u8e3s4, cause) {
         var tmp;
         tmp = !(cause instanceof TimeoutCancellationException) || !(cause.pn_1 === _this__u8e3s4);
         return tmp;
        }(_this__u8e3s4, state.sf_1)) throw recoverStackTrace(state.sf_1, _this__u8e3s4.in_1);
        if (result instanceof CompletedExceptionally) throw recoverStackTrace(result.sf_1, _this__u8e3s4.in_1);
        tmp_1 = result;
       } else tmp_1 = function(_this__u8e3s4) {
        _init_properties_JobSupport_kt__68f172();
        var tmp0_safe_receiver = _this__u8e3s4 instanceof IncompleteStateBox ? _this__u8e3s4 : null, tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.sm_1;
        return null == tmp1_elvis_lhs ? _this__u8e3s4 : tmp1_elvis_lhs;
       }(state);
       return tmp_1;
      }(_this__u8e3s4, !0, receiver, block);
     }(coroutine, coroutine, block);
    }, _.$_$.b = GlobalScope_instance, _.$_$.c = CancellableContinuationImpl, _.$_$.d = CoroutineScope, 
    _.$_$.e = function(_this__u8e3s4, context, start, block) {
     context = context === VOID ? EmptyCoroutineContext_getInstance() : context, start = start === VOID ? (CoroutineStart_initEntries(), 
     CoroutineStart_DEFAULT_instance) : start;
     var newContext = function(_this__u8e3s4, context) {
      var combined = _this__u8e3s4.mf().sd(context);
      return combined !== Dispatchers_getInstance().wm_1 && null == combined.h7(Key_instance) ? combined.sd(Dispatchers_getInstance().wm_1) : combined;
     }(_this__u8e3s4, context), coroutine = start.ch() ? new LazyStandaloneCoroutine(newContext, block) : new StandaloneCoroutine(newContext, !0);
     return coroutine.ag(start, coroutine, block), coroutine;
    };
   }(module.exports, __webpack_require__(7036), __webpack_require__(1426));
  },
  9539: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_kotlin) {
    "use strict";
    var ENUM_instance, CONTEXTUAL_instance, INT_instance, LONG_instance, STRING_instance, CLASS_instance, LIST_instance, MAP_instance, OBJECT_instance, Companion_instance, EMPTY_DESCRIPTOR_ARRAY, properties_initialized_Platform_common_kt_i7q4ty, EMPTY_SERIALIZER_ARRAY, properties_initialized_PluginHelperInterfaces_kt_ap8in1, StringSerializer_instance, LongSerializer_instance, IntSerializer_instance, EmptySerializersModule, properties_initialized_SerializersModule_kt_fjigjn, imul = Math.imul, protoOf = kotlin_kotlin.$_$.l5, initMetadataForInterface = kotlin_kotlin.$_$.z4, VOID = kotlin_kotlin.$_$.c, getKClassFromExpression = kotlin_kotlin.$_$.a, initMetadataForClass = kotlin_kotlin.$_$.w4, KProperty1 = kotlin_kotlin.$_$.x5, getPropertyCallableRef = kotlin_kotlin.$_$.t4, IllegalArgumentException_init_$Init$ = kotlin_kotlin.$_$.y, objectCreate = kotlin_kotlin.$_$.k5, captureStack = kotlin_kotlin.$_$.j4, IllegalArgumentException_init_$Init$_0 = kotlin_kotlin.$_$.z, IllegalArgumentException_init_$Init$_1 = kotlin_kotlin.$_$.b1, IllegalArgumentException = kotlin_kotlin.$_$.h7, toString = kotlin_kotlin.$_$.o5, emptyList = kotlin_kotlin.$_$.j2, initMetadataForObject = kotlin_kotlin.$_$.b5, ensureNotNull = kotlin_kotlin.$_$.q7, getStringHashCode = kotlin_kotlin.$_$.u4, THROW_CCE = kotlin_kotlin.$_$.k7, Long = kotlin_kotlin.$_$.i7, Unit_instance = kotlin_kotlin.$_$.u1, toIntOrNull = kotlin_kotlin.$_$.u6, IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.a1, equals = kotlin_kotlin.$_$.q4, hashCode = kotlin_kotlin.$_$.v4, IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.c1, ArrayList_init_$Create$ = kotlin_kotlin.$_$.h, ArrayList = kotlin_kotlin.$_$.v1, ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.i, KtList = kotlin_kotlin.$_$.y1, isInterface = kotlin_kotlin.$_$.d5, KtMap = kotlin_kotlin.$_$.z1, LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.n, LinkedHashMap = kotlin_kotlin.$_$.x1, LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.o, Collection = kotlin_kotlin.$_$.w1, until = kotlin_kotlin.$_$.w5, step = kotlin_kotlin.$_$.v5, KtMutableMap = kotlin_kotlin.$_$.a2, getValue = kotlin_kotlin.$_$.p2, longArray = kotlin_kotlin.$_$.e5, initMetadataForCompanion = kotlin_kotlin.$_$.x4, get_lastIndex = kotlin_kotlin.$_$.u2, countTrailingZeroBits = kotlin_kotlin.$_$.o7, contentEquals = kotlin_kotlin.$_$.e2, HashSet_init_$Create$ = kotlin_kotlin.$_$.l, copyToArray = kotlin_kotlin.$_$.i2, contentHashCode = kotlin_kotlin.$_$.f2, joinToString = kotlin_kotlin.$_$.s2, HashMap_init_$Create$ = kotlin_kotlin.$_$.k, ArrayList_init_$Create$_1 = kotlin_kotlin.$_$.g, booleanArray = kotlin_kotlin.$_$.i4, emptyMap = kotlin_kotlin.$_$.k2, LazyThreadSafetyMode_PUBLICATION_getInstance = kotlin_kotlin.$_$.d, lazy = kotlin_kotlin.$_$.s7, charSequenceLength = kotlin_kotlin.$_$.n4, lastOrNull = kotlin_kotlin.$_$.w2, get_lastIndex_0 = kotlin_kotlin.$_$.v2, get_indices = kotlin_kotlin.$_$.r2, IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.e1, get_indices_0 = kotlin_kotlin.$_$.q2;
    function get_isNullable() {
     return !1;
    }
    function get_isInline() {
     return !1;
    }
    function get_annotations() {
     return emptyList();
    }
    function decodeSerializableValue(deserializer) {
     return deserializer.zv(this);
    }
    function decodeSequentially() {
     return !1;
    }
    function decodeCollectionSize(descriptor) {
     return -1;
    }
    function decodeSerializableElement$default(descriptor, index, deserializer, previousValue, $super) {
     return previousValue = previousValue === VOID ? null : previousValue, $super === VOID ? this.hx(descriptor, index, deserializer, previousValue) : $super.hx.call(this, descriptor, index, deserializer, previousValue);
    }
    function typeParametersSerializers() {
     return get_EMPTY_SERIALIZER_ARRAY();
    }
    function KSerializer() {}
    function SerializationStrategy() {}
    function DeserializationStrategy() {}
    function SealedClassSerializer() {}
    function SerializationException_init_$Init$_0(message, $this) {
     return IllegalArgumentException_init_$Init$_0(message, $this), SerializationException.call($this), 
     $this;
    }
    function SerializationException_init_$Create$_0(message) {
     var tmp = SerializationException_init_$Init$_0(message, objectCreate(protoOf(SerializationException)));
     return captureStack(tmp, SerializationException_init_$Create$_0), tmp;
    }
    function SerializationException() {
     captureStack(this, SerializationException);
    }
    function UnknownFieldException(message) {
     SerializationException_init_$Init$_0(message, this), captureStack(this, UnknownFieldException);
    }
    function MissingFieldException_init_$Create$(missingFields, serialName) {
     var tmp = function(missingFields, serialName, $this) {
      return MissingFieldException.call($this, missingFields, 1 === missingFields.k() ? "Field '" + missingFields.p(0) + "' is required for type with serial name '" + serialName + "', but it was missing" : "Fields " + toString(missingFields) + " are required for type with serial name '" + serialName + "', but they were missing", null), 
      $this;
     }(missingFields, serialName, objectCreate(protoOf(MissingFieldException)));
     return captureStack(tmp, MissingFieldException_init_$Create$), tmp;
    }
    function MissingFieldException(missingFields, message, cause) {
     !function(message, cause, $this) {
      IllegalArgumentException_init_$Init$_1(message, cause, $this), SerializationException.call($this);
     }(message, cause, this), captureStack(this, MissingFieldException), this.ew_1 = missingFields;
    }
    function ContextDescriptor() {}
    function get_capturedKClass(_this__u8e3s4) {
     return _this__u8e3s4 instanceof ContextDescriptor ? _this__u8e3s4.hw_1 : _this__u8e3s4 instanceof SerialDescriptorForNullable ? get_capturedKClass(_this__u8e3s4.gw_1) : null;
    }
    function SerialDescriptor() {}
    function elementDescriptors$1($this_elementDescriptors) {
     this.uw_1 = $this_elementDescriptors, this.tw_1 = $this_elementDescriptors.mw();
    }
    function elementDescriptors$$inlined$Iterable$1($this_elementDescriptors) {
     this.vw_1 = $this_elementDescriptors;
    }
    function ENUM() {
     ENUM_instance = this, SerialKind.call(this);
    }
    function CONTEXTUAL() {
     CONTEXTUAL_instance = this, SerialKind.call(this);
    }
    function SerialKind() {}
    function PolymorphicKind() {}
    function INT() {
     INT_instance = this, PrimitiveKind.call(this);
    }
    function LONG() {
     LONG_instance = this, PrimitiveKind.call(this);
    }
    function STRING() {
     STRING_instance = this, PrimitiveKind.call(this);
    }
    function PrimitiveKind() {
     SerialKind.call(this);
    }
    function CLASS() {
     CLASS_instance = this, StructureKind.call(this);
    }
    function CLASS_getInstance() {
     return null == CLASS_instance && new CLASS, CLASS_instance;
    }
    function LIST() {
     LIST_instance = this, StructureKind.call(this);
    }
    function LIST_getInstance() {
     return null == LIST_instance && new LIST, LIST_instance;
    }
    function MAP() {
     MAP_instance = this, StructureKind.call(this);
    }
    function MAP_getInstance() {
     return null == MAP_instance && new MAP, MAP_instance;
    }
    function OBJECT() {
     OBJECT_instance = this, StructureKind.call(this);
    }
    function StructureKind() {
     SerialKind.call(this);
    }
    function AbstractDecoder() {}
    function AbstractEncoder() {}
    function Decoder() {}
    function CompositeDecoder() {}
    function Encoder() {}
    function AbstractPolymorphicSerializer() {}
    function throwSubtypeNotRegistered_0(subClassName, baseClass) {
     var scope = "in the polymorphic scope of '" + baseClass.m8() + "'";
     throw SerializationException_init_$Create$_0(null == subClassName ? "Class discriminator was missing and no default serializers were registered " + scope + "." : "Serializer for subclass '" + subClassName + "' is not found " + scope + ".\nCheck if class with serial name '" + subClassName + "' exists and serializer is registered in a corresponding SerializersModule.\nTo be registered automatically, class '" + subClassName + "' has to be '@Serializable', and the base class '" + baseClass.m8() + "' has to be sealed and '@Serializable'.");
    }
    function CachedNames() {}
    function ArrayListClassDesc(elementDesc) {
     ListLikeDescriptor.call(this, elementDesc);
    }
    function LinkedHashMapClassDesc(keyDesc, valueDesc) {
     MapLikeDescriptor.call(this, "kotlin.collections.LinkedHashMap", keyDesc, valueDesc);
    }
    function ListLikeDescriptor(elementDescriptor) {
     this.dy_1 = elementDescriptor, this.ey_1 = 1;
    }
    function MapLikeDescriptor(serialName, keyDescriptor, valueDescriptor) {
     this.fy_1 = serialName, this.gy_1 = keyDescriptor, this.hy_1 = valueDescriptor, 
     this.iy_1 = 2;
    }
    function ArrayListSerializer(element) {
     CollectionSerializer.call(this, element), this.ky_1 = new ArrayListClassDesc(element.xv());
    }
    function LinkedHashMapSerializer(kSerializer, vSerializer) {
     MapLikeSerializer.call(this, kSerializer, vSerializer), this.hz_1 = new LinkedHashMapClassDesc(kSerializer.xv(), vSerializer.xv());
    }
    function CollectionSerializer(element) {
     CollectionLikeSerializer.call(this, element);
    }
    function MapLikeSerializer(keySerializer, valueSerializer) {
     AbstractCollectionSerializer.call(this), this.qz_1 = keySerializer, this.rz_1 = valueSerializer;
    }
    function CollectionLikeSerializer(elementSerializer) {
     AbstractCollectionSerializer.call(this), this.zy_1 = elementSerializer;
    }
    function AbstractCollectionSerializer() {}
    function Companion() {
     Companion_instance = this, this.uz_1 = longArray(0);
    }
    function Companion_getInstance() {
     return null == Companion_instance && new Companion, Companion_instance;
    }
    function ElementMarker(descriptor, readIfAbsent) {
     Companion_getInstance(), this.vz_1 = descriptor, this.wz_1 = readIfAbsent;
     var elementsCount = this.vz_1.mw();
     if (elementsCount <= 64) {
      var tmp_0;
      tmp_0 = 64 === elementsCount ? new Long(0, 0) : new Long(-1, -1).d2(elementsCount), 
      this.xz_1 = tmp_0, this.yz_1 = Companion_getInstance().uz_1;
     } else this.xz_1 = new Long(0, 0), this.yz_1 = function($this, elementsCount) {
      var elementsInLastSlot = 63 & elementsCount, highMarks = longArray((elementsCount - 1 | 0) >>> 6 | 0);
      return 0 !== elementsInLastSlot && (highMarks[get_lastIndex(highMarks)] = new Long(-1, -1).d2(elementsCount)), 
      highMarks;
     }(0, elementsCount);
    }
    function InlineClassDescriptor(name, generatedSerializer) {
     PluginGeneratedSerialDescriptor.call(this, name, generatedSerializer, 1), this.n10_1 = !0;
    }
    function InlinePrimitiveDescriptor$1($primitiveSerializer) {
     this.c11_1 = $primitiveSerializer;
    }
    function SerialDescriptorForNullable() {}
    function compactArray(_this__u8e3s4) {
     var tmp;
     _init_properties_Platform_common_kt__3qzecs();
     tmp = null == _this__u8e3s4 || _this__u8e3s4.q() ? null : _this__u8e3s4;
     var tmp1_elvis_lhs = null == tmp ? null : copyToArray(tmp);
     return null == tmp1_elvis_lhs ? (_init_properties_Platform_common_kt__3qzecs(), 
     EMPTY_DESCRIPTOR_ARRAY) : tmp1_elvis_lhs;
    }
    function _init_properties_Platform_common_kt__3qzecs() {
     properties_initialized_Platform_common_kt_i7q4ty || (properties_initialized_Platform_common_kt_i7q4ty = !0, 
     EMPTY_DESCRIPTOR_ARRAY = []);
    }
    function hashCodeImpl(_this__u8e3s4, typeParams) {
     var result = getStringHashCode(_this__u8e3s4.iw());
     result = imul(31, result) + contentHashCode(typeParams) | 0;
     for (var elementDescriptors = function(_this__u8e3s4) {
      return new elementDescriptors$$inlined$Iterable$1(_this__u8e3s4);
     }(_this__u8e3s4), accumulator = 1, _iterator__ex2g4s = elementDescriptors.h(); _iterator__ex2g4s.i(); ) {
      var element = _iterator__ex2g4s.j(), tmp = imul(31, accumulator), tmp0_safe_receiver = element.iw(), tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : hashCode(tmp0_safe_receiver);
      accumulator = tmp + (null == tmp1_elvis_lhs ? 0 : tmp1_elvis_lhs) | 0;
     }
     for (var namesHash = accumulator, accumulator_0 = 1, _iterator__ex2g4s_0 = elementDescriptors.h(); _iterator__ex2g4s_0.i(); ) {
      var element_0 = _iterator__ex2g4s_0.j(), tmp_0 = imul(31, accumulator_0), tmp0_safe_receiver_0 = element_0.jw(), tmp1_elvis_lhs_0 = null == tmp0_safe_receiver_0 ? null : hashCode(tmp0_safe_receiver_0);
      accumulator_0 = tmp_0 + (null == tmp1_elvis_lhs_0 ? 0 : tmp1_elvis_lhs_0) | 0;
     }
     var kindHash = accumulator_0;
     return result = imul(31, result) + namesHash | 0, result = imul(31, result) + kindHash | 0;
    }
    function _get_childSerializers__7vnyfa($this) {
     var tmp0 = $this.x10_1;
     return getPropertyCallableRef("childSerializers", 1, KProperty1, (function(receiver) {
      return _get_childSerializers__7vnyfa(receiver);
     }), null), tmp0.g1();
    }
    function _get__hashCode__tgwhef($this) {
     var tmp0 = $this.z10_1;
     return getPropertyCallableRef("_hashCode", 1, KProperty1, (function(receiver) {
      return _get__hashCode__tgwhef(receiver);
     }), null), tmp0.g1();
    }
    function PluginGeneratedSerialDescriptor(serialName, generatedSerializer, elementsCount) {
     generatedSerializer = generatedSerializer === VOID ? null : generatedSerializer, 
     this.o10_1 = serialName, this.p10_1 = generatedSerializer, this.q10_1 = elementsCount, 
     this.r10_1 = -1;
     for (var tmp_0 = 0, tmp_1 = this.q10_1, tmp_2 = Array(tmp_1); tmp_0 < tmp_1; ) tmp_2[tmp_0] = "[UNINITIALIZED]", 
     tmp_0 = tmp_0 + 1 | 0;
     this.s10_1 = tmp_2;
     var size = this.q10_1;
     this.t10_1 = Array(size), this.u10_1 = null, this.v10_1 = booleanArray(this.q10_1), 
     this.w10_1 = emptyMap();
     var this$0, tmp_5 = LazyThreadSafetyMode_PUBLICATION_getInstance();
     this.x10_1 = lazy(tmp_5, (this$0 = this, function() {
      var tmp0_safe_receiver = this$0.p10_1, tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.d11();
      return null == tmp1_elvis_lhs ? get_EMPTY_SERIALIZER_ARRAY() : tmp1_elvis_lhs;
     }));
     var tmp_7 = LazyThreadSafetyMode_PUBLICATION_getInstance();
     this.y10_1 = lazy(tmp_7, function(this$0) {
      return function() {
       var tmp, tmp0_safe_receiver = this$0.p10_1, tmp1_safe_receiver = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.e11();
       if (null == tmp1_safe_receiver) tmp = null; else {
        for (var destination = ArrayList_init_$Create$_1(tmp1_safe_receiver.length), inductionVariable = 0, last = tmp1_safe_receiver.length; inductionVariable < last; ) {
         var item = tmp1_safe_receiver[inductionVariable];
         inductionVariable = inductionVariable + 1 | 0;
         var tmp$ret$0 = item.xv();
         destination.e(tmp$ret$0);
        }
        tmp = destination;
       }
       return compactArray(tmp);
      };
     }(this));
     var tmp_9 = LazyThreadSafetyMode_PUBLICATION_getInstance();
     this.z10_1 = lazy(tmp_9, function(this$0) {
      return function() {
       return hashCodeImpl(this$0, this$0.a11());
      };
     }(this));
    }
    function get_EMPTY_SERIALIZER_ARRAY() {
     return properties_initialized_PluginHelperInterfaces_kt_ap8in1 || (properties_initialized_PluginHelperInterfaces_kt_ap8in1 = !0, 
     EMPTY_SERIALIZER_ARRAY = []), EMPTY_SERIALIZER_ARRAY;
    }
    function GeneratedSerializer() {}
    function StringSerializer() {
     StringSerializer_instance = this, this.f11_1 = new PrimitiveSerialDescriptor("kotlin.String", (null == STRING_instance && new STRING, 
     STRING_instance));
    }
    function StringSerializer_getInstance() {
     return null == StringSerializer_instance && new StringSerializer, StringSerializer_instance;
    }
    function LongSerializer() {
     LongSerializer_instance = this, this.h11_1 = new PrimitiveSerialDescriptor("kotlin.Long", (null == LONG_instance && new LONG, 
     LONG_instance));
    }
    function IntSerializer() {
     IntSerializer_instance = this, this.j11_1 = new PrimitiveSerialDescriptor("kotlin.Int", (null == INT_instance && new INT, 
     INT_instance));
    }
    function error($this) {
     throw IllegalStateException_init_$Create$("Primitive descriptor " + $this.l11_1 + " does not have elements");
    }
    function PrimitiveSerialDescriptor(serialName, kind) {
     this.l11_1 = serialName, this.m11_1 = kind;
    }
    function NamedValueDecoder() {
     TaggedDecoder.call(this);
    }
    function TaggedDecoder() {
     this.s11_1 = ArrayList_init_$Create$(), this.t11_1 = !1;
    }
    function get_EmptySerializersModuleLegacyJs() {
     return properties_initialized_SerializersModule_kt_fjigjn || (properties_initialized_SerializersModule_kt_fjigjn = !0, 
     EmptySerializersModule = new SerialModuleImpl(emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), !1)), 
     EmptySerializersModule;
    }
    function SerializersModule() {}
    function SerialModuleImpl(class2ContextualFactory, polyBase2Serializers, polyBase2DefaultSerializerProvider, polyBase2NamedSerializers, polyBase2DefaultDeserializerProvider, hasInterfaceContextualSerializers) {
     SerializersModule.call(this), this.e12_1 = class2ContextualFactory, this.f12_1 = polyBase2Serializers, 
     this.g12_1 = polyBase2DefaultSerializerProvider, this.h12_1 = polyBase2NamedSerializers, 
     this.i12_1 = polyBase2DefaultDeserializerProvider, this.j12_1 = hasInterfaceContextualSerializers;
    }
    function EmptySerializersModule_0() {
     return get_EmptySerializersModuleLegacyJs();
    }
    function getChecked(_this__u8e3s4, index) {
     if (!(0 <= index && index <= (_this__u8e3s4.length - 1 | 0))) throw IndexOutOfBoundsException_init_$Create$("Index " + index + " out of bounds " + get_indices(_this__u8e3s4).toString());
     return _this__u8e3s4[index];
    }
    initMetadataForInterface(SerializationStrategy, "SerializationStrategy"), initMetadataForInterface(DeserializationStrategy, "DeserializationStrategy"), 
    initMetadataForInterface(KSerializer, "KSerializer", VOID, VOID, [ SerializationStrategy, DeserializationStrategy ]), 
    initMetadataForClass(AbstractPolymorphicSerializer, "AbstractPolymorphicSerializer", VOID, VOID, [ KSerializer ]), 
    initMetadataForClass(SealedClassSerializer, "SealedClassSerializer", VOID, AbstractPolymorphicSerializer), 
    initMetadataForClass(SerializationException, "SerializationException", (function SerializationException_init_$Create$() {
     var tmp = ($this = objectCreate(protoOf(SerializationException)), IllegalArgumentException_init_$Init$($this), 
     SerializationException.call($this), $this);
     var $this;
     return captureStack(tmp, SerializationException_init_$Create$), tmp;
    }), IllegalArgumentException), initMetadataForClass(UnknownFieldException, "UnknownFieldException", VOID, SerializationException), 
    initMetadataForClass(MissingFieldException, "MissingFieldException", VOID, SerializationException), 
    initMetadataForInterface(SerialDescriptor, "SerialDescriptor"), initMetadataForClass(ContextDescriptor, "ContextDescriptor", VOID, VOID, [ SerialDescriptor ]), 
    initMetadataForClass(elementDescriptors$1), initMetadataForClass(elementDescriptors$$inlined$Iterable$1), 
    initMetadataForClass(SerialKind, "SerialKind"), initMetadataForObject(ENUM, "ENUM", VOID, SerialKind), 
    initMetadataForObject(CONTEXTUAL, "CONTEXTUAL", VOID, SerialKind), initMetadataForClass(PolymorphicKind, "PolymorphicKind", VOID, SerialKind), 
    initMetadataForClass(PrimitiveKind, "PrimitiveKind", VOID, SerialKind), initMetadataForObject(INT, "INT", VOID, PrimitiveKind), 
    initMetadataForObject(LONG, "LONG", VOID, PrimitiveKind), initMetadataForObject(STRING, "STRING", VOID, PrimitiveKind), 
    initMetadataForClass(StructureKind, "StructureKind", VOID, SerialKind), initMetadataForObject(CLASS, "CLASS", VOID, StructureKind), 
    initMetadataForObject(LIST, "LIST", VOID, StructureKind), initMetadataForObject(MAP, "MAP", VOID, StructureKind), 
    initMetadataForObject(OBJECT, "OBJECT", VOID, StructureKind), initMetadataForInterface(Decoder, "Decoder"), 
    initMetadataForInterface(CompositeDecoder, "CompositeDecoder"), initMetadataForClass(AbstractDecoder, "AbstractDecoder", VOID, VOID, [ Decoder, CompositeDecoder ]), 
    initMetadataForInterface(Encoder, "Encoder"), initMetadataForClass(AbstractEncoder, "AbstractEncoder", VOID, VOID, [ Encoder ]), 
    initMetadataForInterface(CachedNames, "CachedNames"), initMetadataForClass(ListLikeDescriptor, "ListLikeDescriptor", VOID, VOID, [ SerialDescriptor ]), 
    initMetadataForClass(ArrayListClassDesc, "ArrayListClassDesc", VOID, ListLikeDescriptor), 
    initMetadataForClass(MapLikeDescriptor, "MapLikeDescriptor", VOID, VOID, [ SerialDescriptor ]), 
    initMetadataForClass(LinkedHashMapClassDesc, "LinkedHashMapClassDesc", VOID, MapLikeDescriptor), 
    initMetadataForClass(AbstractCollectionSerializer, "AbstractCollectionSerializer", VOID, VOID, [ KSerializer ]), 
    initMetadataForClass(CollectionLikeSerializer, "CollectionLikeSerializer", VOID, AbstractCollectionSerializer), 
    initMetadataForClass(CollectionSerializer, "CollectionSerializer", VOID, CollectionLikeSerializer), 
    initMetadataForClass(ArrayListSerializer, "ArrayListSerializer", VOID, CollectionSerializer), 
    initMetadataForClass(MapLikeSerializer, "MapLikeSerializer", VOID, AbstractCollectionSerializer), 
    initMetadataForClass(LinkedHashMapSerializer, "LinkedHashMapSerializer", VOID, MapLikeSerializer), 
    initMetadataForCompanion(Companion), initMetadataForClass(ElementMarker, "ElementMarker"), 
    initMetadataForClass(PluginGeneratedSerialDescriptor, "PluginGeneratedSerialDescriptor", VOID, VOID, [ SerialDescriptor, CachedNames ]), 
    initMetadataForClass(InlineClassDescriptor, "InlineClassDescriptor", VOID, PluginGeneratedSerialDescriptor), 
    initMetadataForInterface(GeneratedSerializer, "GeneratedSerializer", VOID, VOID, [ KSerializer ]), 
    initMetadataForClass(InlinePrimitiveDescriptor$1, VOID, VOID, VOID, [ GeneratedSerializer ]), 
    initMetadataForClass(SerialDescriptorForNullable, "SerialDescriptorForNullable", VOID, VOID, [ SerialDescriptor, CachedNames ]), 
    initMetadataForObject(StringSerializer, "StringSerializer", VOID, VOID, [ KSerializer ]), 
    initMetadataForObject(LongSerializer, "LongSerializer", VOID, VOID, [ KSerializer ]), 
    initMetadataForObject(IntSerializer, "IntSerializer", VOID, VOID, [ KSerializer ]), 
    initMetadataForClass(PrimitiveSerialDescriptor, "PrimitiveSerialDescriptor", VOID, VOID, [ SerialDescriptor ]), 
    initMetadataForClass(TaggedDecoder, "TaggedDecoder", VOID, VOID, [ Decoder, CompositeDecoder ]), 
    initMetadataForClass(NamedValueDecoder, "NamedValueDecoder", VOID, TaggedDecoder), 
    initMetadataForClass(SerializersModule, "SerializersModule"), initMetadataForClass(SerialModuleImpl, "SerialModuleImpl", VOID, SerializersModule), 
    initMetadataForClass((function() {}), "SerializableWith", VOID, VOID, VOID, VOID, 0), 
    protoOf(SealedClassSerializer).xv = function() {
     var tmp0 = this.dw_1;
     return getPropertyCallableRef("descriptor", 1, KProperty1, (function(receiver) {
      return receiver.xv();
     }), null), tmp0.g1();
    }, protoOf(elementDescriptors$1).i = function() {
     return this.tw_1 > 0;
    }, protoOf(elementDescriptors$1).j = function() {
     var tmp = this.uw_1.mw(), _unary__edvuaz = this.tw_1;
     return this.tw_1 = _unary__edvuaz - 1 | 0, this.uw_1.rw(tmp - _unary__edvuaz | 0);
    }, protoOf(elementDescriptors$$inlined$Iterable$1).h = function() {
     return new elementDescriptors$1(this.vw_1);
    }, protoOf(SerialKind).toString = function() {
     return ensureNotNull(getKClassFromExpression(this).m8());
    }, protoOf(SerialKind).hashCode = function() {
     return getStringHashCode(this.toString());
    }, protoOf(AbstractDecoder).ww = function() {
     throw SerializationException_init_$Create$_0(toString(getKClassFromExpression(this)) + " can't retrieve untyped values");
    }, protoOf(AbstractDecoder).xw = function() {
     var tmp = this.ww();
     return "number" == typeof tmp ? tmp : THROW_CCE();
    }, protoOf(AbstractDecoder).yw = function() {
     var tmp = this.ww();
     return tmp instanceof Long ? tmp : THROW_CCE();
    }, protoOf(AbstractDecoder).zw = function() {
     var tmp = this.ww();
     return "string" == typeof tmp ? tmp : THROW_CCE();
    }, protoOf(AbstractDecoder).ax = function(deserializer, previousValue) {
     return this.bx(deserializer);
    }, protoOf(AbstractDecoder).cx = function(descriptor) {
     return this;
    }, protoOf(AbstractDecoder).dx = function(descriptor) {}, protoOf(AbstractDecoder).ex = function(descriptor, index) {
     return this.xw();
    }, protoOf(AbstractDecoder).fx = function(descriptor, index) {
     return this.yw();
    }, protoOf(AbstractDecoder).gx = function(descriptor, index) {
     return this.zw();
    }, protoOf(AbstractDecoder).hx = function(descriptor, index, deserializer, previousValue) {
     return this.ax(deserializer, previousValue);
    }, protoOf(AbstractEncoder).cx = function(descriptor) {
     return this;
    }, protoOf(AbstractEncoder).dx = function(descriptor) {}, protoOf(AbstractEncoder).nx = function(descriptor, index) {
     return !0;
    }, protoOf(AbstractEncoder).ox = function(value) {
     throw SerializationException_init_$Create$_0("Non-serializable " + toString(getKClassFromExpression(value)) + " is not supported by " + toString(getKClassFromExpression(this)) + " encoder");
    }, protoOf(AbstractEncoder).px = function(value) {
     return this.ox(value);
    }, protoOf(AbstractEncoder).qx = function(value) {
     return this.ox(value);
    }, protoOf(AbstractEncoder).rx = function(value) {
     return this.ox(value);
    }, protoOf(AbstractEncoder).sx = function(descriptor, index, value) {
     this.nx(descriptor, index) && this.px(value);
    }, protoOf(AbstractEncoder).tx = function(descriptor, index, value) {
     this.nx(descriptor, index) && this.qx(value);
    }, protoOf(AbstractEncoder).ux = function(descriptor, index, value) {
     this.nx(descriptor, index) && this.rx(value);
    }, protoOf(AbstractEncoder).vx = function(descriptor, index, serializer, value) {
     this.nx(descriptor, index) && this.wx(serializer, value);
    }, protoOf(AbstractPolymorphicSerializer).cw = function(decoder, klassName) {
     return decoder.jx().yx(this.bw(), klassName);
    }, protoOf(AbstractPolymorphicSerializer).aw = function(encoder, value) {
     return encoder.jx().zx(this.bw(), value);
    }, protoOf(ArrayListClassDesc).iw = function() {
     return "kotlin.collections.ArrayList";
    }, protoOf(ListLikeDescriptor).jw = function() {
     return LIST_getInstance();
    }, protoOf(ListLikeDescriptor).mw = function() {
     return this.ey_1;
    }, protoOf(ListLikeDescriptor).ow = function(index) {
     return index.toString();
    }, protoOf(ListLikeDescriptor).pw = function(name) {
     var tmp0_elvis_lhs = toIntOrNull(name);
     if (null == tmp0_elvis_lhs) throw IllegalArgumentException_init_$Create$(name + " is not a valid list index");
     return tmp0_elvis_lhs;
    }, protoOf(ListLikeDescriptor).sw = function(index) {
     if (!(index >= 0)) {
      var message = "Illegal index " + index + ", " + this.iw() + " expects only non-negative indices";
      throw IllegalArgumentException_init_$Create$(toString(message));
     }
     return !1;
    }, protoOf(ListLikeDescriptor).qw = function(index) {
     if (!(index >= 0)) {
      var message = "Illegal index " + index + ", " + this.iw() + " expects only non-negative indices";
      throw IllegalArgumentException_init_$Create$(toString(message));
     }
     return emptyList();
    }, protoOf(ListLikeDescriptor).rw = function(index) {
     if (!(index >= 0)) {
      var message = "Illegal index " + index + ", " + this.iw() + " expects only non-negative indices";
      throw IllegalArgumentException_init_$Create$(toString(message));
     }
     return this.dy_1;
    }, protoOf(ListLikeDescriptor).equals = function(other) {
     return this === other || other instanceof ListLikeDescriptor && !(!equals(this.dy_1, other.dy_1) || this.iw() !== other.iw());
    }, protoOf(ListLikeDescriptor).hashCode = function() {
     return imul(hashCode(this.dy_1), 31) + getStringHashCode(this.iw()) | 0;
    }, protoOf(ListLikeDescriptor).toString = function() {
     return this.iw() + "(" + toString(this.dy_1) + ")";
    }, protoOf(MapLikeDescriptor).iw = function() {
     return this.fy_1;
    }, protoOf(MapLikeDescriptor).jw = function() {
     return MAP_getInstance();
    }, protoOf(MapLikeDescriptor).mw = function() {
     return this.iy_1;
    }, protoOf(MapLikeDescriptor).ow = function(index) {
     return index.toString();
    }, protoOf(MapLikeDescriptor).pw = function(name) {
     var tmp0_elvis_lhs = toIntOrNull(name);
     if (null == tmp0_elvis_lhs) throw IllegalArgumentException_init_$Create$(name + " is not a valid map index");
     return tmp0_elvis_lhs;
    }, protoOf(MapLikeDescriptor).sw = function(index) {
     if (!(index >= 0)) {
      var message = "Illegal index " + index + ", " + this.iw() + " expects only non-negative indices";
      throw IllegalArgumentException_init_$Create$(toString(message));
     }
     return !1;
    }, protoOf(MapLikeDescriptor).qw = function(index) {
     if (!(index >= 0)) {
      var message = "Illegal index " + index + ", " + this.iw() + " expects only non-negative indices";
      throw IllegalArgumentException_init_$Create$(toString(message));
     }
     return emptyList();
    }, protoOf(MapLikeDescriptor).rw = function(index) {
     if (!(index >= 0)) {
      var message = "Illegal index " + index + ", " + this.iw() + " expects only non-negative indices";
      throw IllegalArgumentException_init_$Create$(toString(message));
     }
     var tmp;
     switch (index % 2 | 0) {
     case 0:
      tmp = this.gy_1;
      break;

     case 1:
      tmp = this.hy_1;
      break;

     default:
      throw IllegalStateException_init_$Create$(toString("Unreached"));
     }
     return tmp;
    }, protoOf(MapLikeDescriptor).equals = function(other) {
     return this === other || other instanceof MapLikeDescriptor && (this.iw() === other.iw() && (!!equals(this.gy_1, other.gy_1) && !!equals(this.hy_1, other.hy_1)));
    }, protoOf(MapLikeDescriptor).hashCode = function() {
     var result = getStringHashCode(this.iw());
     return result = imul(31, result) + hashCode(this.gy_1) | 0, result = imul(31, result) + hashCode(this.hy_1) | 0;
    }, protoOf(MapLikeDescriptor).toString = function() {
     return this.iw() + "(" + toString(this.gy_1) + ", " + toString(this.hy_1) + ")";
    }, protoOf(ArrayListSerializer).xv = function() {
     return this.ky_1;
    }, protoOf(ArrayListSerializer).ly = function() {
     return ArrayList_init_$Create$();
    }, protoOf(ArrayListSerializer).my = function(_this__u8e3s4) {
     return _this__u8e3s4.k();
    }, protoOf(ArrayListSerializer).ny = function(_this__u8e3s4) {
     return this.my(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(ArrayListSerializer).oy = function(_this__u8e3s4) {
     return _this__u8e3s4;
    }, protoOf(ArrayListSerializer).py = function(_this__u8e3s4) {
     return this.oy(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(ArrayListSerializer).qy = function(_this__u8e3s4) {
     var tmp0_elvis_lhs = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : null;
     return null == tmp0_elvis_lhs ? ArrayList_init_$Create$_0(_this__u8e3s4) : tmp0_elvis_lhs;
    }, protoOf(ArrayListSerializer).ry = function(_this__u8e3s4) {
     return this.qy(null != _this__u8e3s4 && isInterface(_this__u8e3s4, KtList) ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(ArrayListSerializer).sy = function(_this__u8e3s4, size) {
     return _this__u8e3s4.q3(size);
    }, protoOf(ArrayListSerializer).ty = function(_this__u8e3s4, size) {
     return this.sy(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE(), size);
    }, protoOf(ArrayListSerializer).uy = function(_this__u8e3s4, index, element) {
     _this__u8e3s4.x2(index, element);
    }, protoOf(ArrayListSerializer).vy = function(_this__u8e3s4, index, element) {
     var tmp = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE();
     return this.uy(tmp, index, null == element || null != element ? element : THROW_CCE());
    }, protoOf(LinkedHashMapSerializer).xv = function() {
     return this.hz_1;
    }, protoOf(LinkedHashMapSerializer).iz = function(_this__u8e3s4) {
     return _this__u8e3s4.k();
    }, protoOf(LinkedHashMapSerializer).jz = function(_this__u8e3s4) {
     return this.iz(null != _this__u8e3s4 && isInterface(_this__u8e3s4, KtMap) ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(LinkedHashMapSerializer).kz = function(_this__u8e3s4) {
     return _this__u8e3s4.m1().h();
    }, protoOf(LinkedHashMapSerializer).lz = function(_this__u8e3s4) {
     return this.kz(null != _this__u8e3s4 && isInterface(_this__u8e3s4, KtMap) ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(LinkedHashMapSerializer).ly = function() {
     return LinkedHashMap_init_$Create$();
    }, protoOf(LinkedHashMapSerializer).mz = function(_this__u8e3s4) {
     return imul(_this__u8e3s4.k(), 2);
    }, protoOf(LinkedHashMapSerializer).ny = function(_this__u8e3s4) {
     return this.mz(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(LinkedHashMapSerializer).nz = function(_this__u8e3s4) {
     return _this__u8e3s4;
    }, protoOf(LinkedHashMapSerializer).py = function(_this__u8e3s4) {
     return this.nz(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(LinkedHashMapSerializer).oz = function(_this__u8e3s4) {
     var tmp0_elvis_lhs = _this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : null;
     return null == tmp0_elvis_lhs ? LinkedHashMap_init_$Create$_0(_this__u8e3s4) : tmp0_elvis_lhs;
    }, protoOf(LinkedHashMapSerializer).ry = function(_this__u8e3s4) {
     return this.oz(null != _this__u8e3s4 && isInterface(_this__u8e3s4, KtMap) ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(LinkedHashMapSerializer).pz = function(_this__u8e3s4, size) {}, protoOf(LinkedHashMapSerializer).ty = function(_this__u8e3s4, size) {
     return this.pz(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE(), size);
    }, protoOf(CollectionSerializer).xy = function(_this__u8e3s4) {
     return _this__u8e3s4.k();
    }, protoOf(CollectionSerializer).jz = function(_this__u8e3s4) {
     return this.xy(null != _this__u8e3s4 && isInterface(_this__u8e3s4, Collection) ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(CollectionSerializer).yy = function(_this__u8e3s4) {
     return _this__u8e3s4.h();
    }, protoOf(CollectionSerializer).lz = function(_this__u8e3s4) {
     return this.yy(null != _this__u8e3s4 && isInterface(_this__u8e3s4, Collection) ? _this__u8e3s4 : THROW_CCE());
    }, protoOf(MapLikeSerializer).sz = function(decoder, builder, startIndex, size) {
     if (!(size >= 0)) {
      throw IllegalArgumentException_init_$Create$(toString("Size must be known in advance when using READ_ALL"));
     }
     var progression = step(until(0, imul(size, 2)), 2), inductionVariable = progression.u_1, last = progression.v_1, step_0 = progression.w_1;
     if (step_0 > 0 && inductionVariable <= last || step_0 < 0 && last <= inductionVariable) do {
      var index = inductionVariable;
      inductionVariable = inductionVariable + step_0 | 0, this.tz(decoder, startIndex + index | 0, builder, !1);
     } while (index !== last);
    }, protoOf(MapLikeSerializer).bz = function(decoder, builder, startIndex, size) {
     return this.sz(decoder, null != builder && isInterface(builder, KtMutableMap) ? builder : THROW_CCE(), startIndex, size);
    }, protoOf(MapLikeSerializer).tz = function(decoder, index, builder, checkIndex) {
     var tmp, key = decoder.ix(this.xv(), index, this.qz_1);
     if (checkIndex) {
      var this_0 = decoder.lx(this.xv());
      if (this_0 !== (index + 1 | 0)) throw IllegalArgumentException_init_$Create$(toString("Value must follow key in a map, index for key: " + index + ", returned index for value: " + this_0));
      tmp = this_0;
     } else tmp = index + 1 | 0;
     var tmp_1, vIndex = tmp;
     builder.h1(key) ? tmp_1 = !(this.rz_1.xv().jw() instanceof PrimitiveKind) : tmp_1 = !1;
     var value = tmp_1 ? decoder.hx(this.xv(), vIndex, this.rz_1, getValue(builder, key)) : decoder.ix(this.xv(), vIndex, this.rz_1);
     builder.n1(key, value);
    }, protoOf(MapLikeSerializer).cz = function(decoder, index, builder, checkIndex) {
     return this.tz(decoder, index, null != builder && isInterface(builder, KtMutableMap) ? builder : THROW_CCE(), checkIndex);
    }, protoOf(MapLikeSerializer).az = function(encoder, value) {
     for (var size = this.jz(value), descriptor = this.xv(), composite = encoder.xx(descriptor, size), index = 0, _iterator__ex2g4s = this.lz(value); _iterator__ex2g4s.i(); ) {
      var element = _iterator__ex2g4s.j(), k = element.f1(), v = element.g1(), tmp = this.xv(), _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0, composite.vx(tmp, _unary__edvuaz, this.qz_1, k);
      var tmp_0 = this.xv(), _unary__edvuaz_0 = index;
      index = _unary__edvuaz_0 + 1 | 0, composite.vx(tmp_0, _unary__edvuaz_0, this.rz_1, v);
     }
     composite.dx(descriptor);
    }, protoOf(MapLikeSerializer).yv = function(encoder, value) {
     return this.az(encoder, null == value || null != value ? value : THROW_CCE());
    }, protoOf(CollectionLikeSerializer).az = function(encoder, value) {
     var size = this.jz(value), descriptor = this.xv(), composite = encoder.xx(descriptor, size), iterator = this.lz(value), inductionVariable = 0;
     if (inductionVariable < size) do {
      var index = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0, composite.vx(this.xv(), index, this.zy_1, iterator.j());
     } while (inductionVariable < size);
     composite.dx(descriptor);
    }, protoOf(CollectionLikeSerializer).yv = function(encoder, value) {
     return this.az(encoder, null == value || null != value ? value : THROW_CCE());
    }, protoOf(CollectionLikeSerializer).bz = function(decoder, builder, startIndex, size) {
     if (!(size >= 0)) {
      throw IllegalArgumentException_init_$Create$(toString("Size must be known in advance when using READ_ALL"));
     }
     var inductionVariable = 0;
     if (inductionVariable < size) do {
      var index = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0, this.cz(decoder, startIndex + index | 0, builder, !1);
     } while (inductionVariable < size);
    }, protoOf(CollectionLikeSerializer).cz = function(decoder, index, builder, checkIndex) {
     this.vy(builder, index, decoder.ix(this.xv(), index, this.zy_1));
    }, protoOf(AbstractCollectionSerializer).ez = function(decoder, previous) {
     var tmp1_elvis_lhs = null == previous ? null : this.ry(previous), builder = null == tmp1_elvis_lhs ? this.ly() : tmp1_elvis_lhs, startIndex = this.ny(builder), compositeDecoder = decoder.cx(this.xv());
     if (compositeDecoder.kx()) this.bz(compositeDecoder, builder, startIndex, function($this, decoder, builder) {
      var size = decoder.mx($this.xv());
      return $this.ty(builder, size), size;
     }(this, compositeDecoder, builder)); else $l$loop: for (;;) {
      var index = compositeDecoder.lx(this.xv());
      if (-1 === index) break $l$loop;
      this.dz(compositeDecoder, startIndex + index | 0, builder);
     }
     return compositeDecoder.dx(this.xv()), this.py(builder);
    }, protoOf(AbstractCollectionSerializer).zv = function(decoder) {
     return this.ez(decoder, null);
    }, protoOf(AbstractCollectionSerializer).dz = function(decoder, index, builder, checkIndex, $super) {
     var tmp;
     return checkIndex = checkIndex === VOID || checkIndex, $super === VOID ? (this.cz(decoder, index, builder, checkIndex), 
     tmp = Unit_instance) : tmp = $super.cz.call(this, decoder, index, builder, checkIndex), 
     tmp;
    }, protoOf(ElementMarker).zz = function(index) {
     index < 64 ? this.xz_1 = this.xz_1.e2(new Long(1, 0).d2(index)) : function($this, index) {
      var slot = (index >>> 6 | 0) - 1 | 0, offsetInSlot = 63 & index;
      $this.yz_1[slot] = $this.yz_1[slot].e2(new Long(1, 0).d2(offsetInSlot));
     }(this, index);
    }, protoOf(ElementMarker).a10 = function() {
     for (var elementsCount = this.vz_1.mw(); !this.xz_1.equals(new Long(-1, -1)); ) {
      var index = countTrailingZeroBits(this.xz_1.c2());
      if (this.xz_1 = this.xz_1.e2(new Long(1, 0).d2(index)), this.wz_1(this.vz_1, index)) return index;
     }
     return elementsCount > 64 ? function($this) {
      var inductionVariable = 0, last = $this.yz_1.length - 1 | 0;
      if (inductionVariable <= last) do {
       var slot = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0;
       for (var slotOffset = imul(slot + 1 | 0, 64), slotMarks = $this.yz_1[slot]; !slotMarks.equals(new Long(-1, -1)); ) {
        var indexInSlot = countTrailingZeroBits(slotMarks.c2());
        slotMarks = slotMarks.e2(new Long(1, 0).d2(indexInSlot));
        var index = slotOffset + indexInSlot | 0;
        if ($this.wz_1($this.vz_1, index)) return $this.yz_1[slot] = slotMarks, index;
       }
       $this.yz_1[slot] = slotMarks;
      } while (inductionVariable <= last);
      return -1;
     }(this) : -1;
    }, protoOf(InlineClassDescriptor).lw = function() {
     return this.n10_1;
    }, protoOf(InlineClassDescriptor).hashCode = function() {
     return imul(protoOf(PluginGeneratedSerialDescriptor).hashCode.call(this), 31);
    }, protoOf(InlineClassDescriptor).equals = function(other) {
     var tmp$ret$0;
     $l$block_5: if (this !== other) if (other instanceof InlineClassDescriptor) if (this.iw() === other.iw()) if (other.n10_1 && contentEquals(this.a11(), other.a11())) if (this.mw() === other.mw()) {
      var inductionVariable = 0, last = this.mw();
      if (inductionVariable < last) do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + 1 | 0, this.rw(index).iw() !== other.rw(index).iw()) {
        tmp$ret$0 = !1;
        break $l$block_5;
       }
       if (!equals(this.rw(index).jw(), other.rw(index).jw())) {
        tmp$ret$0 = !1;
        break $l$block_5;
       }
      } while (inductionVariable < last);
      tmp$ret$0 = !0;
     } else tmp$ret$0 = !1; else tmp$ret$0 = !1; else tmp$ret$0 = !1; else tmp$ret$0 = !1; else tmp$ret$0 = !0;
     return tmp$ret$0;
    }, protoOf(InlinePrimitiveDescriptor$1).d11 = function() {
     return [ this.c11_1 ];
    }, protoOf(InlinePrimitiveDescriptor$1).xv = function() {
     throw IllegalStateException_init_$Create$(toString("unsupported"));
    }, protoOf(InlinePrimitiveDescriptor$1).yv = function(encoder, value) {
     throw IllegalStateException_init_$Create$(toString("unsupported"));
    }, protoOf(InlinePrimitiveDescriptor$1).zv = function(decoder) {
     throw IllegalStateException_init_$Create$(toString("unsupported"));
    }, protoOf(PluginGeneratedSerialDescriptor).iw = function() {
     return this.o10_1;
    }, protoOf(PluginGeneratedSerialDescriptor).mw = function() {
     return this.q10_1;
    }, protoOf(PluginGeneratedSerialDescriptor).jw = function() {
     return CLASS_getInstance();
    }, protoOf(PluginGeneratedSerialDescriptor).nw = function() {
     var tmp0_elvis_lhs = this.u10_1;
     return null == tmp0_elvis_lhs ? emptyList() : tmp0_elvis_lhs;
    }, protoOf(PluginGeneratedSerialDescriptor).ay = function() {
     return this.w10_1.k1();
    }, protoOf(PluginGeneratedSerialDescriptor).a11 = function() {
     var tmp0 = this.y10_1;
     return getPropertyCallableRef("typeParameterDescriptors", 1, KProperty1, (function(receiver) {
      return receiver.a11();
     }), null), tmp0.g1();
    }, protoOf(PluginGeneratedSerialDescriptor).b11 = function(name, isOptional) {
     this.r10_1 = this.r10_1 + 1 | 0, this.s10_1[this.r10_1] = name, this.v10_1[this.r10_1] = isOptional, 
     this.t10_1[this.r10_1] = null, this.r10_1 === (this.q10_1 - 1 | 0) && (this.w10_1 = function($this) {
      var indices = HashMap_init_$Create$(), inductionVariable = 0, last = $this.s10_1.length - 1 | 0;
      if (inductionVariable <= last) do {
       var i = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0;
       var key = $this.s10_1[i];
       indices.n1(key, i);
      } while (inductionVariable <= last);
      return indices;
     }(this));
    }, protoOf(PluginGeneratedSerialDescriptor).rw = function(index) {
     return getChecked(_get_childSerializers__7vnyfa(this), index).xv();
    }, protoOf(PluginGeneratedSerialDescriptor).sw = function(index) {
     return function(_this__u8e3s4, index) {
      if (!(0 <= index && index <= (_this__u8e3s4.length - 1 | 0))) throw IndexOutOfBoundsException_init_$Create$("Index " + index + " out of bounds " + get_indices_0(_this__u8e3s4).toString());
      return _this__u8e3s4[index];
     }(this.v10_1, index);
    }, protoOf(PluginGeneratedSerialDescriptor).qw = function(index) {
     var tmp0_elvis_lhs = getChecked(this.t10_1, index);
     return null == tmp0_elvis_lhs ? emptyList() : tmp0_elvis_lhs;
    }, protoOf(PluginGeneratedSerialDescriptor).ow = function(index) {
     return getChecked(this.s10_1, index);
    }, protoOf(PluginGeneratedSerialDescriptor).pw = function(name) {
     var tmp0_elvis_lhs = this.w10_1.j1(name);
     return null == tmp0_elvis_lhs ? -3 : tmp0_elvis_lhs;
    }, protoOf(PluginGeneratedSerialDescriptor).equals = function(other) {
     var tmp$ret$0;
     $l$block_5: if (this !== other) if (other instanceof PluginGeneratedSerialDescriptor) if (this.iw() === other.iw()) if (contentEquals(this.a11(), other.a11())) if (this.mw() === other.mw()) {
      var inductionVariable = 0, last = this.mw();
      if (inductionVariable < last) do {
       var index = inductionVariable;
       if (inductionVariable = inductionVariable + 1 | 0, this.rw(index).iw() !== other.rw(index).iw()) {
        tmp$ret$0 = !1;
        break $l$block_5;
       }
       if (!equals(this.rw(index).jw(), other.rw(index).jw())) {
        tmp$ret$0 = !1;
        break $l$block_5;
       }
      } while (inductionVariable < last);
      tmp$ret$0 = !0;
     } else tmp$ret$0 = !1; else tmp$ret$0 = !1; else tmp$ret$0 = !1; else tmp$ret$0 = !1; else tmp$ret$0 = !0;
     return tmp$ret$0;
    }, protoOf(PluginGeneratedSerialDescriptor).hashCode = function() {
     return _get__hashCode__tgwhef(this);
    }, protoOf(PluginGeneratedSerialDescriptor).toString = function() {
     return tmp = until(0, (_this__u8e3s4 = this).mw()), tmp_0 = _this__u8e3s4.iw() + "(", 
     joinToString(tmp, ", ", tmp_0, ")", VOID, VOID, ($this_toStringImpl = _this__u8e3s4, 
     function(i) {
      return $this_toStringImpl.ow(i) + ": " + $this_toStringImpl.rw(i).iw();
     }));
     var _this__u8e3s4, $this_toStringImpl, tmp, tmp_0;
    }, protoOf(StringSerializer).xv = function() {
     return this.f11_1;
    }, protoOf(StringSerializer).g11 = function(encoder, value) {
     return encoder.rx(value);
    }, protoOf(StringSerializer).yv = function(encoder, value) {
     return this.g11(encoder, null != value && "string" == typeof value ? value : THROW_CCE());
    }, protoOf(StringSerializer).zv = function(decoder) {
     return decoder.zw();
    }, protoOf(LongSerializer).xv = function() {
     return this.h11_1;
    }, protoOf(LongSerializer).i11 = function(encoder, value) {
     return encoder.qx(value);
    }, protoOf(LongSerializer).yv = function(encoder, value) {
     return this.i11(encoder, value instanceof Long ? value : THROW_CCE());
    }, protoOf(LongSerializer).zv = function(decoder) {
     return decoder.yw();
    }, protoOf(IntSerializer).xv = function() {
     return this.j11_1;
    }, protoOf(IntSerializer).k11 = function(encoder, value) {
     return encoder.px(value);
    }, protoOf(IntSerializer).yv = function(encoder, value) {
     return this.k11(encoder, null != value && "number" == typeof value ? value : THROW_CCE());
    }, protoOf(IntSerializer).zv = function(decoder) {
     return decoder.xw();
    }, protoOf(PrimitiveSerialDescriptor).iw = function() {
     return this.l11_1;
    }, protoOf(PrimitiveSerialDescriptor).jw = function() {
     return this.m11_1;
    }, protoOf(PrimitiveSerialDescriptor).mw = function() {
     return 0;
    }, protoOf(PrimitiveSerialDescriptor).ow = function(index) {
     error(this);
    }, protoOf(PrimitiveSerialDescriptor).pw = function(name) {
     error(this);
    }, protoOf(PrimitiveSerialDescriptor).sw = function(index) {
     error(this);
    }, protoOf(PrimitiveSerialDescriptor).rw = function(index) {
     error(this);
    }, protoOf(PrimitiveSerialDescriptor).qw = function(index) {
     error(this);
    }, protoOf(PrimitiveSerialDescriptor).toString = function() {
     return "PrimitiveDescriptor(" + this.l11_1 + ")";
    }, protoOf(PrimitiveSerialDescriptor).equals = function(other) {
     return this === other || other instanceof PrimitiveSerialDescriptor && !(this.l11_1 !== other.l11_1 || !equals(this.m11_1, other.m11_1));
    }, protoOf(PrimitiveSerialDescriptor).hashCode = function() {
     return getStringHashCode(this.l11_1) + imul(31, this.m11_1.hashCode()) | 0;
    }, protoOf(NamedValueDecoder).p11 = function(_this__u8e3s4, index) {
     return this.r11(this.q11(_this__u8e3s4, index));
    }, protoOf(NamedValueDecoder).r11 = function(nestedName) {
     var tmp0_elvis_lhs = this.u11();
     return this.v11(null == tmp0_elvis_lhs ? "" : tmp0_elvis_lhs, nestedName);
    }, protoOf(NamedValueDecoder).q11 = function(descriptor, index) {
     return descriptor.ow(index);
    }, protoOf(NamedValueDecoder).v11 = function(parentName, childName) {
     return 0 === charSequenceLength(parentName) ? childName : parentName + "." + childName;
    }, protoOf(NamedValueDecoder).w11 = function() {
     return this.s11_1.q() ? "$" : joinToString(this.s11_1, ".", "$.");
    }, protoOf(TaggedDecoder).jx = function() {
     return EmptySerializersModule_0();
    }, protoOf(TaggedDecoder).x11 = function(tag) {
     throw SerializationException_init_$Create$_0(toString(getKClassFromExpression(this)) + " can't retrieve untyped values");
    }, protoOf(TaggedDecoder).y11 = function(tag) {
     var tmp = this.x11(tag);
     return "number" == typeof tmp ? tmp : THROW_CCE();
    }, protoOf(TaggedDecoder).z11 = function(tag) {
     var tmp = this.x11(tag);
     return tmp instanceof Long ? tmp : THROW_CCE();
    }, protoOf(TaggedDecoder).a12 = function(tag) {
     var tmp = this.x11(tag);
     return "string" == typeof tmp ? tmp : THROW_CCE();
    }, protoOf(TaggedDecoder).ax = function(deserializer, previousValue) {
     return this.bx(deserializer);
    }, protoOf(TaggedDecoder).xw = function() {
     return this.y11(this.c12());
    }, protoOf(TaggedDecoder).yw = function() {
     return this.z11(this.c12());
    }, protoOf(TaggedDecoder).zw = function() {
     return this.a12(this.c12());
    }, protoOf(TaggedDecoder).cx = function(descriptor) {
     return this;
    }, protoOf(TaggedDecoder).dx = function(descriptor) {}, protoOf(TaggedDecoder).ex = function(descriptor, index) {
     return this.y11(this.p11(descriptor, index));
    }, protoOf(TaggedDecoder).fx = function(descriptor, index) {
     return this.z11(this.p11(descriptor, index));
    }, protoOf(TaggedDecoder).gx = function(descriptor, index) {
     return this.a12(this.p11(descriptor, index));
    }, protoOf(TaggedDecoder).hx = function(descriptor, index, deserializer, previousValue) {
     var this$0, $deserializer, $previousValue;
     return function($this, tag, block) {
      $this.b12(tag);
      var r = block();
      return $this.t11_1 || $this.c12(), $this.t11_1 = !1, r;
     }(this, this.p11(descriptor, index), (this$0 = this, $deserializer = deserializer, 
     $previousValue = previousValue, function() {
      return this$0.ax($deserializer, $previousValue);
     }));
    }, protoOf(TaggedDecoder).u11 = function() {
     return lastOrNull(this.s11_1);
    }, protoOf(TaggedDecoder).b12 = function(name) {
     this.s11_1.e(name);
    }, protoOf(TaggedDecoder).c12 = function() {
     var r = this.s11_1.r2(get_lastIndex_0(this.s11_1));
     return this.t11_1 = !0, r;
    }, protoOf(SerializersModule).fw = function(kClass, typeArgumentsSerializers, $super) {
     return typeArgumentsSerializers = typeArgumentsSerializers === VOID ? emptyList() : typeArgumentsSerializers, 
     $super === VOID ? this.d12(kClass, typeArgumentsSerializers) : $super.d12.call(this, kClass, typeArgumentsSerializers);
    }, protoOf(SerialModuleImpl).zx = function(baseClass, value) {
     if (!baseClass.n8(value)) return null;
     var tmp0_safe_receiver = this.f12_1.j1(baseClass), tmp = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.j1(getKClassFromExpression(value)), registered = null != tmp && isInterface(tmp, SerializationStrategy) ? tmp : null;
     if (null != registered) return registered;
     var tmp_0 = this.g12_1.j1(baseClass), tmp1_safe_receiver = null != tmp_0 && "function" == typeof tmp_0 ? tmp_0 : null;
     return null == tmp1_safe_receiver ? null : tmp1_safe_receiver(value);
    }, protoOf(SerialModuleImpl).yx = function(baseClass, serializedClassName) {
     var tmp0_safe_receiver = this.h12_1.j1(baseClass), tmp_0 = null == tmp0_safe_receiver ? null : (isInterface(tmp0_safe_receiver, KtMap) ? tmp0_safe_receiver : THROW_CCE()).j1(serializedClassName), registered = null != tmp_0 && isInterface(tmp_0, KSerializer) ? tmp_0 : null;
     if (null != registered) return registered;
     var tmp_1 = this.i12_1.j1(baseClass), tmp1_safe_receiver = null != tmp_1 && "function" == typeof tmp_1 ? tmp_1 : null;
     return null == tmp1_safe_receiver ? null : tmp1_safe_receiver(serializedClassName);
    }, protoOf(SerialModuleImpl).d12 = function(kClass, typeArgumentsSerializers) {
     var tmp0_safe_receiver = this.e12_1.j1(kClass), tmp = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.k12(typeArgumentsSerializers);
     return null == tmp || isInterface(tmp, KSerializer) ? tmp : null;
    }, protoOf(AbstractDecoder).ix = decodeSerializableElement$default, protoOf(AbstractDecoder).bx = decodeSerializableValue, 
    protoOf(AbstractDecoder).kx = decodeSequentially, protoOf(AbstractDecoder).mx = decodeCollectionSize, 
    protoOf(AbstractEncoder).xx = function(descriptor, collectionSize) {
     return this.cx(descriptor);
    }, protoOf(AbstractEncoder).wx = function(serializer, value) {
     serializer.yv(this, value);
    }, protoOf(ListLikeDescriptor).kw = get_isNullable, protoOf(ListLikeDescriptor).lw = get_isInline, 
    protoOf(ListLikeDescriptor).nw = get_annotations, protoOf(MapLikeDescriptor).kw = get_isNullable, 
    protoOf(MapLikeDescriptor).lw = get_isInline, protoOf(MapLikeDescriptor).nw = get_annotations, 
    protoOf(PluginGeneratedSerialDescriptor).kw = get_isNullable, protoOf(PluginGeneratedSerialDescriptor).lw = get_isInline, 
    protoOf(InlinePrimitiveDescriptor$1).e11 = typeParametersSerializers, protoOf(PrimitiveSerialDescriptor).kw = get_isNullable, 
    protoOf(PrimitiveSerialDescriptor).lw = get_isInline, protoOf(PrimitiveSerialDescriptor).nw = get_annotations, 
    protoOf(TaggedDecoder).ix = decodeSerializableElement$default, protoOf(TaggedDecoder).bx = decodeSerializableValue, 
    protoOf(TaggedDecoder).kx = decodeSequentially, protoOf(TaggedDecoder).mx = decodeCollectionSize, 
    _.$_$ = _.$_$ || {}, _.$_$.a = SerializationException_init_$Init$_0, _.$_$.b = function UnknownFieldException_init_$Create$(index) {
     var tmp = function(index, $this) {
      return UnknownFieldException.call($this, "An unknown field for index " + index), 
      $this;
     }(index, objectCreate(protoOf(UnknownFieldException)));
     return captureStack(tmp, UnknownFieldException_init_$Create$), tmp;
    }, _.$_$.c = function() {
     return null == CONTEXTUAL_instance && new CONTEXTUAL, CONTEXTUAL_instance;
    }, _.$_$.d = function() {
     return null == ENUM_instance && new ENUM, ENUM_instance;
    }, _.$_$.e = CLASS_getInstance, _.$_$.f = LIST_getInstance, _.$_$.g = MAP_getInstance, 
    _.$_$.h = function() {
     return null == OBJECT_instance && new OBJECT, OBJECT_instance;
    }, _.$_$.i = function() {
     return null == IntSerializer_instance && new IntSerializer, IntSerializer_instance;
    }, _.$_$.j = function() {
     return null == LongSerializer_instance && new LongSerializer, LongSerializer_instance;
    }, _.$_$.k = StringSerializer_getInstance, _.$_$.l = function(_this__u8e3s4) {
     return StringSerializer_getInstance();
    }, _.$_$.m = PolymorphicKind, _.$_$.n = PrimitiveKind, _.$_$.o = SerialDescriptor, 
    _.$_$.p = ENUM, _.$_$.q = function(_this__u8e3s4, descriptor) {
     var tmp, tmp0_safe_receiver = get_capturedKClass(descriptor);
     if (null == tmp0_safe_receiver) tmp = null; else {
      var tmp0_safe_receiver_0 = _this__u8e3s4.fw(tmp0_safe_receiver);
      tmp = null == tmp0_safe_receiver_0 ? null : tmp0_safe_receiver_0.xv();
     }
     return tmp;
    }, _.$_$.r = AbstractDecoder, _.$_$.s = AbstractEncoder, _.$_$.t = CompositeDecoder, 
    _.$_$.u = Decoder, _.$_$.v = Encoder, _.$_$.w = AbstractPolymorphicSerializer, _.$_$.x = ArrayListSerializer, 
    _.$_$.y = ElementMarker, _.$_$.z = typeParametersSerializers, _.$_$.a1 = GeneratedSerializer, 
    _.$_$.b1 = function(name, primitiveSerializer) {
     return new InlineClassDescriptor(name, new InlinePrimitiveDescriptor$1(primitiveSerializer));
    }, _.$_$.c1 = LinkedHashMapSerializer, _.$_$.d1 = NamedValueDecoder, _.$_$.e1 = PluginGeneratedSerialDescriptor, 
    _.$_$.f1 = function(_this__u8e3s4) {
     return function(_this__u8e3s4) {
      if (_init_properties_Platform_common_kt__3qzecs(), isInterface(_this__u8e3s4, CachedNames)) return _this__u8e3s4.ay();
      var result = HashSet_init_$Create$(_this__u8e3s4.mw()), inductionVariable = 0, last = _this__u8e3s4.mw();
      if (inductionVariable < last) do {
       var i = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0;
       var element = _this__u8e3s4.ow(i);
       result.e(element);
      } while (inductionVariable < last);
      return result;
     }(_this__u8e3s4);
    }, _.$_$.g1 = function(seen, goldenMask, descriptor) {
     var missingFields = ArrayList_init_$Create$(), missingFieldsBits = goldenMask & ~seen, inductionVariable = 0;
     if (inductionVariable < 32) do {
      var i = inductionVariable;
      if (inductionVariable = inductionVariable + 1 | 0, 1 & missingFieldsBits) {
       var element = descriptor.ow(i);
       missingFields.e(element);
      }
      missingFieldsBits = missingFieldsBits >>> 1 | 0;
     } while (inductionVariable < 32);
     throw MissingFieldException_init_$Create$(missingFields, descriptor.iw());
    }, _.$_$.h1 = EmptySerializersModule_0, _.$_$.i1 = DeserializationStrategy, _.$_$.j1 = MissingFieldException, 
    _.$_$.k1 = SealedClassSerializer, _.$_$.l1 = SerializationException, _.$_$.m1 = SerializationStrategy, 
    _.$_$.n1 = function(_this__u8e3s4, decoder, klassName) {
     var tmp, tmp0_elvis_lhs = _this__u8e3s4.cw(decoder, klassName);
     return null == tmp0_elvis_lhs ? throwSubtypeNotRegistered_0(klassName, _this__u8e3s4.bw()) : tmp = tmp0_elvis_lhs, 
     tmp;
    }, _.$_$.o1 = function(_this__u8e3s4, encoder, value) {
     var tmp, tmp0_elvis_lhs = _this__u8e3s4.aw(encoder, value);
     return null == tmp0_elvis_lhs ? function(subClass, baseClass) {
      var tmp0_elvis_lhs = subClass.m8();
      throwSubtypeNotRegistered_0(null == tmp0_elvis_lhs ? toString(subClass) : tmp0_elvis_lhs, baseClass);
     }(getKClassFromExpression(value), _this__u8e3s4.bw()) : tmp = tmp0_elvis_lhs, tmp;
    };
   }(module.exports, __webpack_require__(7036));
  },
  1430: (module, __unused_webpack_exports, __webpack_require__) => {
   !function(_, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core, kotlin_kotlin) {
    "use strict";
    var Default_instance, ClassDiscriminatorMode_NONE_instance, ClassDiscriminatorMode_POLYMORPHIC_instance, ClassDiscriminatorMode_entriesInitialized, JsonNull_instance, properties_initialized_JsonElement_kt_abxy8s, JsonDeserializationNamesKey, JsonSerializationNamesKey, properties_initialized_JsonNamesMap_kt_ljpf42, Tombstone_instance, ESCAPE_STRINGS, properties_initialized_StringOps_kt_wzaea7, WriteMode_OBJ_instance, WriteMode_LIST_instance, WriteMode_MAP_instance, WriteMode_POLY_OBJ_instance, WriteMode_entriesInitialized, $ENTRIES, CharMappings_instance, imul = Math.imul, EmptySerializersModule = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.h1, protoOf = kotlin_kotlin.$_$.l5, initMetadataForObject = kotlin_kotlin.$_$.b5, VOID = kotlin_kotlin.$_$.c, Unit_instance = kotlin_kotlin.$_$.u1, initMetadataForClass = kotlin_kotlin.$_$.w4, toString = kotlin_kotlin.$_$.y7, Enum = kotlin_kotlin.$_$.e7, initMetadataForCompanion = kotlin_kotlin.$_$.x4, StringBuilder_init_$Create$ = kotlin_kotlin.$_$.v, _Char___init__impl__6a9atx = kotlin_kotlin.$_$.j1, equals = kotlin_kotlin.$_$.q4, hashCode = kotlin_kotlin.$_$.v4, joinToString = kotlin_kotlin.$_$.s2, THROW_CCE = kotlin_kotlin.$_$.k7, KtMap = kotlin_kotlin.$_$.z1, toString_0 = kotlin_kotlin.$_$.o5, IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.a1, getKClassFromExpression = kotlin_kotlin.$_$.a, getBooleanHashCode = kotlin_kotlin.$_$.s4, getStringHashCode = kotlin_kotlin.$_$.u4, KtList = kotlin_kotlin.$_$.y1, StringCompanionObject_instance = kotlin_kotlin.$_$.s1, serializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.l, InlinePrimitiveDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b1, toLong = kotlin_kotlin.$_$.n5, ElementMarker = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.y, captureStack = kotlin_kotlin.$_$.j4, charSequenceLength = kotlin_kotlin.$_$.n4, charSequenceSubSequence = kotlin_kotlin.$_$.o4, coerceAtLeast = kotlin_kotlin.$_$.s5, coerceAtMost = kotlin_kotlin.$_$.t5, SerializationException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.l1, SerializationException_init_$Init$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a, Collection = kotlin_kotlin.$_$.w1, isInterface = kotlin_kotlin.$_$.d5, CLASS_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.e, ENUM_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.d, LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.n, ArrayList_init_$Create$ = kotlin_kotlin.$_$.h, singleOrNull = kotlin_kotlin.$_$.g3, emptyMap = kotlin_kotlin.$_$.k2, getValue = kotlin_kotlin.$_$.p2, copyOf = kotlin_kotlin.$_$.g2, copyOf_0 = kotlin_kotlin.$_$.h2, LIST_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.f, SerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.o, DeepRecursiveFunction = kotlin_kotlin.$_$.c7, invoke = kotlin_kotlin.$_$.r7, CoroutineImpl = kotlin_kotlin.$_$.d4, DeepRecursiveScope = kotlin_kotlin.$_$.d7, Unit = kotlin_kotlin.$_$.l7, get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.n3, initMetadataForLambda = kotlin_kotlin.$_$.a5, initMetadataForCoroutine = kotlin_kotlin.$_$.y4, SealedClassSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k1, IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.c1, jsonCachedSerialNames = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.f1, ENUM = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.p, PrimitiveKind = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.n, PolymorphicKind = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.m, AbstractDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.r, AbstractPolymorphicSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.w, DeserializationStrategy = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.i1, getKClass = kotlin_kotlin.$_$.b, findPolymorphicSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.n1, ensureNotNull = kotlin_kotlin.$_$.q7, substringBefore = kotlin_kotlin.$_$.s6, removeSuffix = kotlin_kotlin.$_$.k6, substringAfter = kotlin_kotlin.$_$.q6, contains = kotlin_kotlin.$_$.b6, plus = kotlin_kotlin.$_$.u7, MissingFieldException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.j1, CompositeDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.t, Decoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.u, objectCreate = kotlin_kotlin.$_$.k5, AbstractEncoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.s, OBJECT_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.h, noWhenBranchMatchedException = kotlin_kotlin.$_$.t7, findPolymorphicSerializer_0 = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.o1, SerializationStrategy = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.m1, Encoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.v, Char__toInt_impl_vasixd = kotlin_kotlin.$_$.l1, numberToChar = kotlin_kotlin.$_$.h5, charSequenceGet = kotlin_kotlin.$_$.m4, toString_1 = kotlin_kotlin.$_$.m1, toByte = kotlin_kotlin.$_$.m5, startsWith = kotlin_kotlin.$_$.n6, NamedValueDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.d1, MAP_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g, numberRangeToNumber = kotlin_kotlin.$_$.g5, ClosedRange = kotlin_kotlin.$_$.r5, contains_0 = kotlin_kotlin.$_$.u5, IllegalArgumentException = kotlin_kotlin.$_$.h7, emptySet = kotlin_kotlin.$_$.l2, plus_0 = kotlin_kotlin.$_$.b3, toInt = kotlin_kotlin.$_$.v6, toList = kotlin_kotlin.$_$.i3, enumEntries = kotlin_kotlin.$_$.f4, getContextualDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.q, CONTEXTUAL_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c, last = kotlin_kotlin.$_$.x2, removeLast = kotlin_kotlin.$_$.f3, lastIndexOf = kotlin_kotlin.$_$.h6, Long = kotlin_kotlin.$_$.i7, Char__minus_impl_a2frrh = kotlin_kotlin.$_$.k1, numberToLong = kotlin_kotlin.$_$.j5, charArray = kotlin_kotlin.$_$.l4, indexOf = kotlin_kotlin.$_$.d6, indexOf_0 = kotlin_kotlin.$_$.e6, StringBuilder_init_$Create$_0 = kotlin_kotlin.$_$.u, HashMap_init_$Create$ = kotlin_kotlin.$_$.j;
    function Default() {
     Default_instance = this, Json.call(this, new JsonConfiguration, EmptySerializersModule());
    }
    function Default_getInstance() {
     return null == Default_instance && new Default, Default_instance;
    }
    function Json(configuration, serializersModule) {
     Default_getInstance(), this.k13_1 = configuration, this.l13_1 = serializersModule, 
     this.m13_1 = new DescriptorSchemaCache;
    }
    function JsonClassDiscriminator() {}
    function JsonIgnoreUnknownKeys() {}
    function JsonNames() {}
    function JsonConfiguration(encodeDefaults, ignoreUnknownKeys, isLenient, allowStructuredMapKeys, prettyPrint, explicitNulls, prettyPrintIndent, coerceInputValues, useArrayPolymorphism, classDiscriminator, allowSpecialFloatingPointValues, useAlternativeNames, namingStrategy, decodeEnumsCaseInsensitive, allowTrailingComma, allowComments, classDiscriminatorMode) {
     encodeDefaults = encodeDefaults !== VOID && encodeDefaults, ignoreUnknownKeys = ignoreUnknownKeys !== VOID && ignoreUnknownKeys, 
     isLenient = isLenient !== VOID && isLenient, allowStructuredMapKeys = allowStructuredMapKeys !== VOID && allowStructuredMapKeys, 
     prettyPrint = prettyPrint !== VOID && prettyPrint, explicitNulls = explicitNulls === VOID || explicitNulls, 
     prettyPrintIndent = prettyPrintIndent === VOID ? "    " : prettyPrintIndent, coerceInputValues = coerceInputValues !== VOID && coerceInputValues, 
     useArrayPolymorphism = useArrayPolymorphism !== VOID && useArrayPolymorphism, classDiscriminator = classDiscriminator === VOID ? "type" : classDiscriminator, 
     allowSpecialFloatingPointValues = allowSpecialFloatingPointValues !== VOID && allowSpecialFloatingPointValues, 
     useAlternativeNames = useAlternativeNames === VOID || useAlternativeNames, namingStrategy = namingStrategy === VOID ? null : namingStrategy, 
     decodeEnumsCaseInsensitive = decodeEnumsCaseInsensitive !== VOID && decodeEnumsCaseInsensitive, 
     allowTrailingComma = allowTrailingComma !== VOID && allowTrailingComma, allowComments = allowComments !== VOID && allowComments, 
     classDiscriminatorMode = classDiscriminatorMode === VOID ? (ClassDiscriminatorMode_initEntries(), 
     ClassDiscriminatorMode_POLYMORPHIC_instance) : classDiscriminatorMode, this.e14_1 = encodeDefaults, 
     this.f14_1 = ignoreUnknownKeys, this.g14_1 = isLenient, this.h14_1 = allowStructuredMapKeys, 
     this.i14_1 = prettyPrint, this.j14_1 = explicitNulls, this.k14_1 = prettyPrintIndent, 
     this.l14_1 = coerceInputValues, this.m14_1 = useArrayPolymorphism, this.n14_1 = classDiscriminator, 
     this.o14_1 = allowSpecialFloatingPointValues, this.p14_1 = useAlternativeNames, 
     this.q14_1 = namingStrategy, this.r14_1 = decodeEnumsCaseInsensitive, this.s14_1 = allowTrailingComma, 
     this.t14_1 = allowComments, this.u14_1 = classDiscriminatorMode;
    }
    function ClassDiscriminatorMode_initEntries() {
     if (ClassDiscriminatorMode_entriesInitialized) return Unit_instance;
     ClassDiscriminatorMode_entriesInitialized = !0, ClassDiscriminatorMode_NONE_instance = new ClassDiscriminatorMode("NONE", 0), 
     new ClassDiscriminatorMode("ALL_JSON_OBJECTS", 1), ClassDiscriminatorMode_POLYMORPHIC_instance = new ClassDiscriminatorMode("POLYMORPHIC", 2);
    }
    function ClassDiscriminatorMode(name, ordinal) {
     Enum.call(this, name, ordinal);
    }
    function Companion() {}
    function JsonElement() {}
    function Companion_0() {}
    function JsonObject$toString$lambda(_destruct__k2r9zo) {
     var k = _destruct__k2r9zo.f1(), v = _destruct__k2r9zo.g1(), this_0 = StringBuilder_init_$Create$();
     return printQuoted(this_0, k), this_0.j6(_Char___init__impl__6a9atx(58)), this_0.h6(v), 
     this_0.toString();
    }
    function JsonObject(content) {
     JsonElement.call(this), this.v14_1 = content;
    }
    function JsonNull() {
     JsonNull_instance = this, JsonPrimitive.call(this), this.y14_1 = "null";
    }
    function JsonNull_getInstance() {
     return null == JsonNull_instance && new JsonNull, JsonNull_instance;
    }
    function Companion_1() {}
    function JsonPrimitive() {
     JsonElement.call(this);
    }
    function JsonLiteral(body, isString, coerceToInlineType) {
     if (coerceToInlineType = coerceToInlineType === VOID ? null : coerceToInlineType, 
     JsonPrimitive.call(this), this.a15_1 = isString, this.b15_1 = coerceToInlineType, 
     this.c15_1 = toString_0(body), null != this.b15_1 && !this.b15_1.lw()) {
      throw IllegalArgumentException_init_$Create$(toString_0("Failed requirement."));
     }
    }
    function Companion_2() {}
    function JsonArray(content) {
     JsonElement.call(this), this.d15_1 = content;
    }
    function parseLongImpl(_this__u8e3s4) {
     return _init_properties_JsonElement_kt__7cbdc2(), new StringJsonLexer(_this__u8e3s4.z14()).e15();
    }
    function get_contentOrNull(_this__u8e3s4) {
     return _init_properties_JsonElement_kt__7cbdc2(), _this__u8e3s4 instanceof JsonNull ? null : _this__u8e3s4.z14();
    }
    function get_jsonPrimitive(_this__u8e3s4) {
     _init_properties_JsonElement_kt__7cbdc2();
     var tmp, tmp0_elvis_lhs = _this__u8e3s4 instanceof JsonPrimitive ? _this__u8e3s4 : null;
     return null == tmp0_elvis_lhs ? function(_this__u8e3s4, element) {
      throw _init_properties_JsonElement_kt__7cbdc2(), IllegalArgumentException_init_$Create$("Element " + toString_0(getKClassFromExpression(_this__u8e3s4)) + " is not a " + element);
     }(_this__u8e3s4, "JsonPrimitive") : tmp = tmp0_elvis_lhs, tmp;
    }
    function _init_properties_JsonElement_kt__7cbdc2() {
     properties_initialized_JsonElement_kt_abxy8s || (properties_initialized_JsonElement_kt_abxy8s = !0, 
     InlinePrimitiveDescriptor("kotlinx.serialization.json.JsonUnquotedLiteral", serializer(StringCompanionObject_instance)));
    }
    function Composer(writer) {
     this.f15_1 = writer, this.g15_1 = !0;
    }
    function ComposerWithPrettyPrint(writer, json) {
     Composer.call(this, writer), this.x15_1 = json, this.y15_1 = 0;
    }
    function JsonElementMarker(descriptor) {
     var $boundThis, l;
     this.z15_1 = new ElementMarker(descriptor, ($boundThis = this, l = function(p0, p1) {
      return descriptor = p0, index = p1, ($this = $boundThis).a16_1 = !descriptor.sw(index) && descriptor.rw(index).kw(), 
      $this.a16_1;
      var $this, descriptor, index;
     }, l.callableName = "readIfAbsent", l)), this.a16_1 = !1;
    }
    function invalidTrailingComma(_this__u8e3s4, entity) {
     entity = entity === VOID ? "object" : entity, _this__u8e3s4.d16("Trailing comma before the end of JSON " + entity, _this__u8e3s4.z13_1 - 1 | 0, "Trailing commas are non-complaint JSON and not allowed by default. Use 'allowTrailingComma = true' in 'Json {}' builder to support them.");
    }
    function JsonEncodingException(message) {
     JsonException.call(this, message), captureStack(this, JsonEncodingException);
    }
    function InvalidKeyKindException(keyDescriptor) {
     return new JsonEncodingException("Value of type '" + keyDescriptor.iw() + "' can't be used in JSON as a key in the map. It should have either primitive or enum kind, but its kind is '" + keyDescriptor.jw().toString() + "'.\nUse 'allowStructuredMapKeys = true' in 'Json {}' builder to convert such maps to [key1, value1, key2, value2,...] arrays.");
    }
    function JsonDecodingException(message) {
     JsonException.call(this, message), captureStack(this, JsonDecodingException);
    }
    function JsonDecodingException_0(offset, message, input) {
     return JsonDecodingException_1(offset, message + "\nJSON input: " + toString_0(minify(input, offset)));
    }
    function JsonDecodingException_1(offset, message) {
     return new JsonDecodingException(offset >= 0 ? "Unexpected JSON token at offset " + offset + ": " + message : message);
    }
    function minify(_this__u8e3s4, offset) {
     if (offset = offset === VOID ? -1 : offset, charSequenceLength(_this__u8e3s4) < 200) return _this__u8e3s4;
     if (-1 === offset) {
      var start = charSequenceLength(_this__u8e3s4) - 60 | 0;
      if (start <= 0) return _this__u8e3s4;
      var endIndex = charSequenceLength(_this__u8e3s4);
      return "....." + toString_0(charSequenceSubSequence(_this__u8e3s4, start, endIndex));
     }
     var start_0 = offset - 30 | 0, end = offset + 30 | 0, prefix = start_0 <= 0 ? "" : ".....", suffix = end >= charSequenceLength(_this__u8e3s4) ? "" : ".....", tmp4 = coerceAtLeast(start_0, 0), endIndex_0 = coerceAtMost(end, charSequenceLength(_this__u8e3s4));
     return prefix + toString_0(charSequenceSubSequence(_this__u8e3s4, tmp4, endIndex_0)) + suffix;
    }
    function JsonException(message) {
     SerializationException_init_$Init$(message, this), captureStack(this, JsonException);
    }
    function get_JsonDeserializationNamesKey() {
     return _init_properties_JsonNamesMap_kt__cbbp0k(), JsonDeserializationNamesKey;
    }
    function ignoreUnknownKeys(_this__u8e3s4, json) {
     var tmp;
     if (_init_properties_JsonNamesMap_kt__cbbp0k(), json.k13_1.f14_1) tmp = !0; else {
      var tmp$ret$0, tmp0 = _this__u8e3s4.nw();
      $l$block_0: {
       if (!!isInterface(tmp0, Collection) && tmp0.q()) tmp$ret$0 = !1; else {
        for (var _iterator__ex2g4s = tmp0.h(); _iterator__ex2g4s.i(); ) {
         if (_iterator__ex2g4s.j() instanceof JsonIgnoreUnknownKeys) {
          tmp$ret$0 = !0;
          break $l$block_0;
         }
        }
        tmp$ret$0 = !1;
       }
      }
      tmp = tmp$ret$0;
     }
     return tmp;
    }
    function getJsonNameIndex(_this__u8e3s4, json, name) {
     if (_init_properties_JsonNamesMap_kt__cbbp0k(), decodeCaseInsensitive(json, _this__u8e3s4)) return getJsonNameIndexSlowPath(_this__u8e3s4, json, name.toLowerCase());
     if (null != namingStrategy(_this__u8e3s4, json)) return getJsonNameIndexSlowPath(_this__u8e3s4, json, name);
     var index = _this__u8e3s4.pw(name);
     return -3 !== index ? index : json.k13_1.p14_1 ? getJsonNameIndexSlowPath(_this__u8e3s4, json, name) : index;
    }
    function getJsonElementName(_this__u8e3s4, json, index) {
     _init_properties_JsonNamesMap_kt__cbbp0k();
     var strategy = namingStrategy(_this__u8e3s4, json);
     return null == strategy ? _this__u8e3s4.ow(index) : function(_this__u8e3s4, json, strategy) {
      _init_properties_JsonNamesMap_kt__cbbp0k();
      var tmp = get_schemaCache(json), tmp_0 = (_init_properties_JsonNamesMap_kt__cbbp0k(), 
      JsonSerializationNamesKey);
      return tmp.f16(_this__u8e3s4, tmp_0, ($this_serializationNamesIndices = _this__u8e3s4, 
      $strategy = strategy, function() {
       for (var tmp = 0, tmp_0 = $this_serializationNamesIndices.mw(), tmp_1 = Array(tmp_0); tmp < tmp_0; ) {
        var tmp_2 = tmp, baseName = $this_serializationNamesIndices.ow(tmp_2);
        tmp_1[tmp_2] = $strategy.h16($this_serializationNamesIndices, tmp_2, baseName), 
        tmp = tmp + 1 | 0;
       }
       return tmp_1;
      }));
      var $this_serializationNamesIndices, $strategy;
     }(_this__u8e3s4, json, strategy)[index];
    }
    function namingStrategy(_this__u8e3s4, json) {
     return _init_properties_JsonNamesMap_kt__cbbp0k(), equals(_this__u8e3s4.jw(), CLASS_getInstance()) ? json.k13_1.q14_1 : null;
    }
    function deserializationNamesMap(_this__u8e3s4, descriptor) {
     _init_properties_JsonNamesMap_kt__cbbp0k();
     var $descriptor, $this_deserializationNamesMap, tmp = get_schemaCache(_this__u8e3s4), tmp_0 = get_JsonDeserializationNamesKey();
     return tmp.f16(descriptor, tmp_0, ($descriptor = descriptor, $this_deserializationNamesMap = _this__u8e3s4, 
     function() {
      return function(_this__u8e3s4, json) {
       _init_properties_JsonNamesMap_kt__cbbp0k();
       var builder = LinkedHashMap_init_$Create$(), useLowercaseEnums = decodeCaseInsensitive(json, _this__u8e3s4), strategyForClasses = namingStrategy(_this__u8e3s4, json), inductionVariable = 0, last = _this__u8e3s4.mw();
       if (inductionVariable < last) do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        for (var tmp0 = _this__u8e3s4.qw(i), destination = ArrayList_init_$Create$(), _iterator__ex2g4s = tmp0.h(); _iterator__ex2g4s.i(); ) {
         var element = _iterator__ex2g4s.j();
         element instanceof JsonNames && destination.e(element);
        }
        var tmp_0, tmp0_safe_receiver = singleOrNull(destination), tmp1_safe_receiver = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.g16_1;
        if (null == tmp1_safe_receiver) ; else for (var inductionVariable_0 = 0, last_0 = tmp1_safe_receiver.length; inductionVariable_0 < last_0; ) {
         var element_0 = tmp1_safe_receiver[inductionVariable_0];
         inductionVariable_0 = inductionVariable_0 + 1 | 0, buildDeserializationNamesMap$putOrThrow(builder, _this__u8e3s4, useLowercaseEnums ? element_0.toLowerCase() : element_0, i);
        }
        null == (tmp_0 = useLowercaseEnums ? _this__u8e3s4.ow(i).toLowerCase() : null != strategyForClasses ? strategyForClasses.h16(_this__u8e3s4, i, _this__u8e3s4.ow(i)) : null) || buildDeserializationNamesMap$putOrThrow(builder, _this__u8e3s4, tmp_0, i);
       } while (inductionVariable < last);
       return builder.q() ? emptyMap() : builder;
      }($descriptor, $this_deserializationNamesMap);
     }));
    }
    function decodeCaseInsensitive(_this__u8e3s4, descriptor) {
     return _init_properties_JsonNamesMap_kt__cbbp0k(), _this__u8e3s4.k13_1.r14_1 && equals(descriptor.jw(), ENUM_getInstance());
    }
    function getJsonNameIndexSlowPath(_this__u8e3s4, json, name) {
     _init_properties_JsonNamesMap_kt__cbbp0k();
     var tmp0_elvis_lhs = deserializationNamesMap(json, _this__u8e3s4).j1(name);
     return null == tmp0_elvis_lhs ? -3 : tmp0_elvis_lhs;
    }
    function buildDeserializationNamesMap$putOrThrow(_this__u8e3s4, $this_buildDeserializationNamesMap, name, index) {
     var entity = equals($this_buildDeserializationNamesMap.jw(), ENUM_getInstance()) ? "enum value" : "property";
     if ((isInterface(_this__u8e3s4, KtMap) ? _this__u8e3s4 : THROW_CCE()).h1(name)) throw new JsonException("The suggested name '" + name + "' for " + entity + " " + $this_buildDeserializationNamesMap.ow(index) + " is already one of the names for " + entity + " " + $this_buildDeserializationNamesMap.ow(getValue(_this__u8e3s4, name)) + " in " + toString_0($this_buildDeserializationNamesMap));
     _this__u8e3s4.n1(name, index);
    }
    function _init_properties_JsonNamesMap_kt__cbbp0k() {
     properties_initialized_JsonNamesMap_kt_ljpf42 || (properties_initialized_JsonNamesMap_kt_ljpf42 = !0, 
     JsonDeserializationNamesKey = new Key, JsonSerializationNamesKey = new Key);
    }
    function Tombstone() {}
    function resize($this) {
     var newSize = imul($this.k16_1, 2);
     $this.i16_1 = copyOf($this.i16_1, newSize), $this.j16_1 = copyOf_0($this.j16_1, newSize);
    }
    function JsonPath() {
     this.i16_1 = Array(8);
     for (var tmp_1 = 0, tmp_2 = new Int32Array(8); tmp_1 < 8; ) tmp_2[tmp_1] = -1, tmp_1 = tmp_1 + 1 | 0;
     this.j16_1 = tmp_2, this.k16_1 = -1;
    }
    function readObject_0($this, _this__u8e3s4, $completion) {
     var tmp = new $readObjectCOROUTINE$0($this, _this__u8e3s4, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }
    function readArray($this) {
     var lastToken = $this.a17_1.l17();
     4 === $this.a17_1.g17() && $this.a17_1.f17("Unexpected leading comma");
     for (var result = ArrayList_init_$Create$(); $this.a17_1.h17(); ) {
      var element = $this.k17();
      if (result.e(element), 4 !== (lastToken = $this.a17_1.l17())) {
       var tmp0 = $this.a17_1, condition = 9 === lastToken, position = tmp0.z13_1;
       if (!condition) {
        tmp0.f17("Expected end of the array or comma", position);
       }
      }
     }
     return 8 === lastToken ? $this.a17_1.e17(9) : 4 === lastToken && ($this.c17_1 || invalidTrailingComma($this.a17_1, "array"), 
     $this.a17_1.e17(9)), new JsonArray(result);
    }
    function readValue($this, isString) {
     var tmp;
     tmp = $this.b17_1 || !isString ? $this.a17_1.j17() : $this.a17_1.i17();
     return isString || "null" !== tmp ? new JsonLiteral(tmp, isString) : JsonNull_getInstance();
    }
    function readDeepRecursive($this) {
     return invoke(new DeepRecursiveFunction((i = new JsonTreeReader$readDeepRecursive$slambda($this, null), 
     (l = function($this$DeepRecursiveFunction, it, $completion) {
      return i.o18($this$DeepRecursiveFunction, it, $completion);
     }).$arity = 2, l)), Unit_instance);
     var i, l;
    }
    function JsonTreeReader$readDeepRecursive$slambda(this$0, resultContinuation) {
     this.j18_1 = this$0, CoroutineImpl.call(this, resultContinuation);
    }
    function $readObjectCOROUTINE$0(_this__u8e3s4, _this__u8e3s4_0, resultContinuation) {
     CoroutineImpl.call(this, resultContinuation), this.u17_1 = _this__u8e3s4, this.v17_1 = _this__u8e3s4_0;
    }
    function JsonTreeReader(configuration, lexer) {
     this.a17_1 = lexer, this.b17_1 = configuration.g14_1, this.c17_1 = configuration.s14_1, 
     this.d17_1 = 0;
    }
    function classDiscriminator(_this__u8e3s4, json) {
     for (var _iterator__ex2g4s = _this__u8e3s4.nw().h(); _iterator__ex2g4s.i(); ) {
      var annotation = _iterator__ex2g4s.j();
      if (annotation instanceof JsonClassDiscriminator) return annotation.q18_1;
     }
     return json.k13_1.n14_1;
    }
    function access$validateIfSealed$tPolymorphicKt(serializer, actualSerializer, classDiscriminator) {
     return function(serializer, actualSerializer, classDiscriminator) {
      if (!(serializer instanceof SealedClassSerializer)) return Unit_instance;
      if (jsonCachedSerialNames(actualSerializer.xv()).d1(classDiscriminator)) {
       var baseName = serializer.xv().iw(), actualName = actualSerializer.xv().iw();
       throw IllegalStateException_init_$Create$(toString_0("Sealed class '" + actualName + "' cannot be serialized as base class '" + baseName + "' because it has property name that conflicts with JSON class discriminator '" + classDiscriminator + "'. You can either change class discriminator in JsonConfiguration, rename property with @SerialName annotation or fall back to array polymorphism"));
      }
     }(serializer, actualSerializer, classDiscriminator);
    }
    function Key() {}
    function DescriptorSchemaCache() {
     this.e16_1 = createMapForCache(16);
    }
    function DiscriminatorHolder(discriminatorToSkip) {
     this.t18_1 = discriminatorToSkip;
    }
    function coerceInputValue($this, descriptor, index) {
     var tmp$ret$1, tmp0 = $this.r13_1;
     $l$block_2: {
      var isOptional = descriptor.sw(index), elementDescriptor = descriptor.rw(index);
      if (!(!isOptional || elementDescriptor.kw()) && $this.t13_1.w18(!0)) tmp$ret$1 = !0; else {
       if (equals(elementDescriptor.jw(), ENUM_getInstance())) {
        if (!!elementDescriptor.kw() && $this.t13_1.w18(!1)) {
         tmp$ret$1 = !1;
         break $l$block_2;
        }
        var tmp0_elvis_lhs = $this.t13_1.x18($this.x13_1.g14_1);
        if (null == tmp0_elvis_lhs) {
         tmp$ret$1 = !1;
         break $l$block_2;
        }
        var enumIndex = getJsonNameIndex(elementDescriptor, tmp0, tmp0_elvis_lhs), coerceToNull = !tmp0.k13_1.j14_1 && elementDescriptor.kw();
        if (-3 === enumIndex && (isOptional || coerceToNull)) {
         $this.t13_1.i17(), tmp$ret$1 = !0;
         break $l$block_2;
        }
       }
       tmp$ret$1 = !1;
      }
     }
     return tmp$ret$1;
    }
    function handleUnknown($this, descriptor, key) {
     var _this__u8e3s4, unknownKey;
     return ignoreUnknownKeys(descriptor, $this.r13_1) || (_this__u8e3s4 = $this.w13_1, 
     unknownKey = key, null != _this__u8e3s4 && _this__u8e3s4.t18_1 === unknownKey && (_this__u8e3s4.t18_1 = null, 
     1)) ? $this.t13_1.z18($this.x13_1.g14_1) : ($this.t13_1.a14_1.p16(), $this.t13_1.y18(key)), 
     $this.t13_1.v18();
    }
    function decodeStringKey($this) {
     return $this.x13_1.g14_1 ? $this.t13_1.b19() : $this.t13_1.a19();
    }
    function StreamingJsonDecoder(json, mode, lexer, descriptor, discriminatorHolder) {
     AbstractDecoder.call(this), this.r13_1 = json, this.s13_1 = mode, this.t13_1 = lexer, 
     this.u13_1 = this.r13_1.jx(), this.v13_1 = -1, this.w13_1 = discriminatorHolder, 
     this.x13_1 = this.r13_1.k13_1, this.y13_1 = this.x13_1.j14_1 ? null : new JsonElementMarker(descriptor);
    }
    function StreamingJsonEncoder(composer, json, mode, modeReuseCache) {
     AbstractEncoder.call(this), this.r16_1 = composer, this.s16_1 = json, this.t16_1 = mode, 
     this.u16_1 = modeReuseCache, this.v16_1 = this.s16_1.jx(), this.w16_1 = this.s16_1.k13_1, 
     this.x16_1 = !1, this.y16_1 = null, this.z16_1 = null;
     var i = this.t16_1.r1_1;
     null != this.u16_1 && (null === this.u16_1[i] && this.u16_1[i] === this || (this.u16_1[i] = this));
    }
    function get_ESCAPE_STRINGS() {
     return _init_properties_StringOps_kt__fcy1db(), ESCAPE_STRINGS;
    }
    function toHexChar(i) {
     _init_properties_StringOps_kt__fcy1db();
     var tmp, d = 15 & i;
     if (d < 10) {
      var this_0 = _Char___init__impl__6a9atx(48), tmp$ret$0 = Char__toInt_impl_vasixd(this_0);
      tmp = numberToChar(d + tmp$ret$0 | 0);
     } else {
      var tmp_0 = d - 10 | 0, this_1 = _Char___init__impl__6a9atx(97), tmp$ret$1 = Char__toInt_impl_vasixd(this_1);
      tmp = numberToChar(tmp_0 + tmp$ret$1 | 0);
     }
     return tmp;
    }
    function printQuoted(_this__u8e3s4, value) {
     _init_properties_StringOps_kt__fcy1db(), _this__u8e3s4.j6(_Char___init__impl__6a9atx(34));
     var lastPos = 0, inductionVariable = 0, last = charSequenceLength(value) - 1 | 0;
     if (inductionVariable <= last) do {
      var i = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0;
      var this_0 = charSequenceGet(value, i), c = Char__toInt_impl_vasixd(this_0);
      c < get_ESCAPE_STRINGS().length && null != get_ESCAPE_STRINGS()[c] && (_this__u8e3s4.s9(value, lastPos, i), 
      _this__u8e3s4.i6(get_ESCAPE_STRINGS()[c]), lastPos = i + 1 | 0);
     } while (inductionVariable <= last);
     0 !== lastPos ? _this__u8e3s4.s9(value, lastPos, value.length) : _this__u8e3s4.i6(value), 
     _this__u8e3s4.j6(_Char___init__impl__6a9atx(34));
    }
    function _init_properties_StringOps_kt__fcy1db() {
     if (!properties_initialized_StringOps_kt_wzaea7) {
      properties_initialized_StringOps_kt_wzaea7 = !0;
      var this_0 = Array(93), inductionVariable = 0;
      if (inductionVariable <= 31) do {
       var c = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0;
       var c1 = toHexChar(c >> 12), c2 = toHexChar(c >> 8), c3 = toHexChar(c >> 4), c4 = toHexChar(c);
       this_0[c] = "\\u" + toString_1(c1) + toString_1(c2) + toString_1(c3) + toString_1(c4);
      } while (inductionVariable <= 31);
      var this_1 = _Char___init__impl__6a9atx(34);
      this_0[Char__toInt_impl_vasixd(this_1)] = '\\"';
      var this_2 = _Char___init__impl__6a9atx(92);
      this_0[Char__toInt_impl_vasixd(this_2)] = "\\\\";
      var this_3 = _Char___init__impl__6a9atx(9);
      this_0[Char__toInt_impl_vasixd(this_3)] = "\\t";
      var this_4 = _Char___init__impl__6a9atx(8);
      this_0[Char__toInt_impl_vasixd(this_4)] = "\\b";
      var this_5 = _Char___init__impl__6a9atx(10);
      this_0[Char__toInt_impl_vasixd(this_5)] = "\\n";
      var this_6 = _Char___init__impl__6a9atx(13);
      this_0[Char__toInt_impl_vasixd(this_6)] = "\\r", this_0[12] = "\\f", ESCAPE_STRINGS = this_0;
      var this_7 = new Int8Array(93), inductionVariable_0 = 0;
      if (inductionVariable_0 <= 31) do {
       var c_0 = inductionVariable_0;
       inductionVariable_0 = inductionVariable_0 + 1 | 0, this_7[c_0] = 1;
      } while (inductionVariable_0 <= 31);
      var this_8 = _Char___init__impl__6a9atx(34), tmp = Char__toInt_impl_vasixd(this_8), this_9 = _Char___init__impl__6a9atx(34), tmp$ret$1 = Char__toInt_impl_vasixd(this_9);
      this_7[tmp] = toByte(tmp$ret$1);
      var this_10 = _Char___init__impl__6a9atx(92), tmp_0 = Char__toInt_impl_vasixd(this_10), this_11 = _Char___init__impl__6a9atx(92), tmp$ret$3 = Char__toInt_impl_vasixd(this_11);
      this_7[tmp_0] = toByte(tmp$ret$3);
      var this_12 = _Char___init__impl__6a9atx(9), tmp_1 = Char__toInt_impl_vasixd(this_12), this_13 = _Char___init__impl__6a9atx(116), tmp$ret$5 = Char__toInt_impl_vasixd(this_13);
      this_7[tmp_1] = toByte(tmp$ret$5);
      var this_14 = _Char___init__impl__6a9atx(8), tmp_2 = Char__toInt_impl_vasixd(this_14), this_15 = _Char___init__impl__6a9atx(98), tmp$ret$7 = Char__toInt_impl_vasixd(this_15);
      this_7[tmp_2] = toByte(tmp$ret$7);
      var this_16 = _Char___init__impl__6a9atx(10), tmp_3 = Char__toInt_impl_vasixd(this_16), this_17 = _Char___init__impl__6a9atx(110), tmp$ret$9 = Char__toInt_impl_vasixd(this_17);
      this_7[tmp_3] = toByte(tmp$ret$9);
      var this_18 = _Char___init__impl__6a9atx(13), tmp_4 = Char__toInt_impl_vasixd(this_18), this_19 = _Char___init__impl__6a9atx(114), tmp$ret$11 = Char__toInt_impl_vasixd(this_19);
      this_7[tmp_4] = toByte(tmp$ret$11);
      var this_20 = _Char___init__impl__6a9atx(102), tmp$ret$12 = Char__toInt_impl_vasixd(this_20);
      this_7[12] = toByte(tmp$ret$12);
     }
    }
    function unparsedPrimitive($this, literal, primitive, tag) {
     var type = startsWith(primitive, "i") ? "an " + primitive : "a " + primitive;
     throw JsonDecodingException_0(-1, "Failed to parse literal '" + literal.toString() + "' as " + type + " value at element: " + $this.q19(tag), toString_0($this.r19()));
    }
    function AbstractJsonTreeDecoder(json, value, polymorphicDiscriminator) {
     polymorphicDiscriminator = polymorphicDiscriminator === VOID ? null : polymorphicDiscriminator, 
     NamedValueDecoder.call(this), this.m19_1 = json, this.n19_1 = value, this.o19_1 = polymorphicDiscriminator, 
     this.p19_1 = this.c19().k13_1;
    }
    function setForceNull($this, descriptor, index) {
     return $this.f1a_1 = !$this.c19().k13_1.j14_1 && !descriptor.sw(index) && descriptor.rw(index).kw(), 
     $this.f1a_1;
    }
    function JsonTreeDecoder(json, value, polymorphicDiscriminator, polyDescriptor) {
     polymorphicDiscriminator = polymorphicDiscriminator === VOID ? null : polymorphicDiscriminator, 
     polyDescriptor = polyDescriptor === VOID ? null : polyDescriptor, AbstractJsonTreeDecoder.call(this, json, value, polymorphicDiscriminator), 
     this.c1a_1 = value, this.d1a_1 = polyDescriptor, this.e1a_1 = 0, this.f1a_1 = !1;
    }
    function JsonTreeListDecoder(json, value) {
     AbstractJsonTreeDecoder.call(this, json, value), this.n1a_1 = value, this.o1a_1 = this.n1a_1.k(), 
     this.p1a_1 = -1;
    }
    function JsonTreeMapDecoder(json, value) {
     JsonTreeDecoder.call(this, json, value), this.a1b_1 = value, this.b1b_1 = toList(this.a1b_1.k1()), 
     this.c1b_1 = imul(this.b1b_1.k(), 2), this.d1b_1 = -1;
    }
    function readPolymorphicJson(_this__u8e3s4, discriminator, element, deserializer) {
     return new JsonTreeDecoder(_this__u8e3s4, element, discriminator, deserializer.xv()).bx(deserializer);
    }
    function WriteMode_initEntries() {
     if (WriteMode_entriesInitialized) return Unit_instance;
     WriteMode_entriesInitialized = !0, WriteMode_OBJ_instance = new WriteMode("OBJ", 0, _Char___init__impl__6a9atx(123), _Char___init__impl__6a9atx(125)), 
     WriteMode_LIST_instance = new WriteMode("LIST", 1, _Char___init__impl__6a9atx(91), _Char___init__impl__6a9atx(93)), 
     WriteMode_MAP_instance = new WriteMode("MAP", 2, _Char___init__impl__6a9atx(123), _Char___init__impl__6a9atx(125)), 
     WriteMode_POLY_OBJ_instance = new WriteMode("POLY_OBJ", 3, _Char___init__impl__6a9atx(91), _Char___init__impl__6a9atx(93));
    }
    function WriteMode(name, ordinal, begin, end) {
     Enum.call(this, name, ordinal), this.h19_1 = begin, this.i19_1 = end;
    }
    function switchMode(_this__u8e3s4, desc) {
     var tmp, tmp0_subject = desc.jw();
     if (tmp0_subject instanceof PolymorphicKind) tmp = WriteMode_POLY_OBJ_getInstance(); else if (equals(tmp0_subject, LIST_getInstance())) tmp = WriteMode_LIST_getInstance(); else if (equals(tmp0_subject, MAP_getInstance())) {
      var tmp_0, keyDescriptor = carrierDescriptor(desc.rw(0), _this__u8e3s4.jx()), keyKind = keyDescriptor.jw();
      if (keyKind instanceof PrimitiveKind || equals(keyKind, ENUM_getInstance())) tmp_0 = WriteMode_MAP_getInstance(); else {
       if (!_this__u8e3s4.k13_1.h14_1) throw InvalidKeyKindException(keyDescriptor);
       tmp_0 = WriteMode_LIST_getInstance();
      }
      tmp = tmp_0;
     } else tmp = WriteMode_OBJ_getInstance();
     return tmp;
    }
    function carrierDescriptor(_this__u8e3s4, module_0) {
     var tmp;
     if (equals(_this__u8e3s4.jw(), CONTEXTUAL_getInstance())) {
      var tmp0_safe_receiver = getContextualDescriptor(module_0, _this__u8e3s4), tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : carrierDescriptor(tmp0_safe_receiver, module_0);
      tmp = null == tmp1_elvis_lhs ? _this__u8e3s4 : tmp1_elvis_lhs;
     } else tmp = _this__u8e3s4.lw() ? carrierDescriptor(_this__u8e3s4.rw(0), module_0) : _this__u8e3s4;
     return tmp;
    }
    function WriteMode_OBJ_getInstance() {
     return WriteMode_initEntries(), WriteMode_OBJ_instance;
    }
    function WriteMode_LIST_getInstance() {
     return WriteMode_initEntries(), WriteMode_LIST_instance;
    }
    function WriteMode_MAP_getInstance() {
     return WriteMode_initEntries(), WriteMode_MAP_instance;
    }
    function WriteMode_POLY_OBJ_getInstance() {
     return WriteMode_initEntries(), WriteMode_POLY_OBJ_instance;
    }
    function appendEscape($this, lastPosition, current) {
     return $this.e1b(lastPosition, current), function($this, startPosition) {
      var currentPosition = startPosition;
      currentPosition = $this.g1b(currentPosition), -1 === currentPosition && $this.f17("Expected escape sequence to continue, got EOF");
      var tmp = $this.f1b(), _unary__edvuaz = currentPosition;
      currentPosition = _unary__edvuaz + 1 | 0;
      var currentChar = charSequenceGet(tmp, _unary__edvuaz);
      if (currentChar === _Char___init__impl__6a9atx(117)) return appendHex($this, $this.f1b(), currentPosition);
      var c = function(c) {
       return c < 117 ? CharMappings_getInstance().n1b_1[c] : _Char___init__impl__6a9atx(0);
      }(Char__toInt_impl_vasixd(currentChar));
      c === _Char___init__impl__6a9atx(0) && $this.f17("Invalid escaped char '" + toString_1(currentChar) + "'");
      return $this.c14_1.j6(c), currentPosition;
     }($this, current + 1 | 0);
    }
    function decodedString($this, lastPosition, currentPosition) {
     $this.e1b(lastPosition, currentPosition);
     var result = $this.c14_1.toString();
     return $this.c14_1.w9(0), result;
    }
    function takePeeked($this) {
     var this_0 = ensureNotNull($this.b14_1);
     return $this.b14_1 = null, this_0;
    }
    function appendHex($this, source, startPos) {
     return (startPos + 4 | 0) >= charSequenceLength(source) ? ($this.z13_1 = startPos, 
     $this.h1b(), ($this.z13_1 + 4 | 0) >= charSequenceLength(source) && $this.f17("Unexpected EOF during unicode escape"), 
     appendHex($this, source, $this.z13_1)) : ($this.c14_1.j6(numberToChar((((fromHexChar($this, source, startPos) << 12) + (fromHexChar($this, source, startPos + 1 | 0) << 8) | 0) + (fromHexChar($this, source, startPos + 2 | 0) << 4) | 0) + fromHexChar($this, source, startPos + 3 | 0) | 0)), 
     startPos + 4 | 0);
    }
    function fromHexChar($this, source, currentPosition) {
     var tmp, character = charSequenceGet(source, currentPosition);
     if (_Char___init__impl__6a9atx(48) <= character && character <= _Char___init__impl__6a9atx(57)) {
      var tmp_0 = Char__toInt_impl_vasixd(character), this_0 = _Char___init__impl__6a9atx(48);
      tmp = tmp_0 - Char__toInt_impl_vasixd(this_0) | 0;
     } else if (_Char___init__impl__6a9atx(97) <= character && character <= _Char___init__impl__6a9atx(102)) {
      var tmp_1 = Char__toInt_impl_vasixd(character), this_1 = _Char___init__impl__6a9atx(97);
      tmp = 10 + (tmp_1 - Char__toInt_impl_vasixd(this_1) | 0) | 0;
     } else if (_Char___init__impl__6a9atx(65) <= character && character <= _Char___init__impl__6a9atx(70)) {
      var tmp_2 = Char__toInt_impl_vasixd(character), this_2 = _Char___init__impl__6a9atx(65);
      tmp = 10 + (tmp_2 - Char__toInt_impl_vasixd(this_2) | 0) | 0;
     } else $this.f17("Invalid toHexChar char '" + toString_1(character) + "' in unicode escape");
     return tmp;
    }
    function AbstractJsonLexer() {
     this.z13_1 = 0, this.a14_1 = new JsonPath, this.b14_1 = null, this.c14_1 = StringBuilder_init_$Create$();
    }
    function charToTokenClass(c) {
     var tmp;
     Char__toInt_impl_vasixd(c) < 126 ? tmp = CharMappings_getInstance().o1b_1[Char__toInt_impl_vasixd(c)] : tmp = 0;
     return tmp;
    }
    function tokenDescription(token) {
     return 1 === token ? "quotation mark '\"'" : 2 === token ? "string escape sequence '\\'" : 4 === token ? "comma ','" : 5 === token ? "colon ':'" : 6 === token ? "start of the object '{'" : 7 === token ? "end of the object '}'" : 8 === token ? "start of the array '['" : 9 === token ? "end of the array ']'" : 10 === token ? "end of the input" : 127 === token ? "invalid token" : "valid token";
    }
    function initC2ESC($this, c, esc) {
     if (esc !== _Char___init__impl__6a9atx(117)) {
      var tmp$ret$0 = Char__toInt_impl_vasixd(esc);
      $this.n1b_1[tmp$ret$0] = numberToChar(c);
     }
    }
    function initC2ESC_0($this, c, esc) {
     return initC2ESC($this, Char__toInt_impl_vasixd(c), esc);
    }
    function initC2TC($this, c, cl) {
     $this.o1b_1[c] = cl;
    }
    function initC2TC_0($this, c, cl) {
     return initC2TC($this, Char__toInt_impl_vasixd(c), cl);
    }
    function CharMappings() {
     CharMappings_instance = this, this.n1b_1 = charArray(117), this.o1b_1 = new Int8Array(126), 
     function($this) {
      var inductionVariable = 0;
      if (inductionVariable <= 31) do {
       var i = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0, initC2ESC($this, i, _Char___init__impl__6a9atx(117));
      } while (inductionVariable <= 31);
      initC2ESC($this, 8, _Char___init__impl__6a9atx(98)), initC2ESC($this, 9, _Char___init__impl__6a9atx(116)), 
      initC2ESC($this, 10, _Char___init__impl__6a9atx(110)), initC2ESC($this, 12, _Char___init__impl__6a9atx(102)), 
      initC2ESC($this, 13, _Char___init__impl__6a9atx(114)), initC2ESC_0($this, _Char___init__impl__6a9atx(47), _Char___init__impl__6a9atx(47)), 
      initC2ESC_0($this, _Char___init__impl__6a9atx(34), _Char___init__impl__6a9atx(34)), 
      initC2ESC_0($this, _Char___init__impl__6a9atx(92), _Char___init__impl__6a9atx(92));
     }(this), function($this) {
      var inductionVariable = 0;
      if (inductionVariable <= 32) do {
       var i = inductionVariable;
       inductionVariable = inductionVariable + 1 | 0, initC2TC($this, i, 127);
      } while (inductionVariable <= 32);
      initC2TC($this, 9, 3), initC2TC($this, 10, 3), initC2TC($this, 13, 3), initC2TC($this, 32, 3), 
      initC2TC_0($this, _Char___init__impl__6a9atx(44), 4), initC2TC_0($this, _Char___init__impl__6a9atx(58), 5), 
      initC2TC_0($this, _Char___init__impl__6a9atx(123), 6), initC2TC_0($this, _Char___init__impl__6a9atx(125), 7), 
      initC2TC_0($this, _Char___init__impl__6a9atx(91), 8), initC2TC_0($this, _Char___init__impl__6a9atx(93), 9), 
      initC2TC_0($this, _Char___init__impl__6a9atx(34), 1), initC2TC_0($this, _Char___init__impl__6a9atx(92), 2);
     }(this);
    }
    function CharMappings_getInstance() {
     return null == CharMappings_instance && new CharMappings, CharMappings_instance;
    }
    function StringJsonLexerWithComments(source) {
     StringJsonLexer.call(this, source);
    }
    function StringJsonLexer(source) {
     AbstractJsonLexer.call(this), this.y1b_1 = source;
    }
    function get_schemaCache(_this__u8e3s4) {
     return _this__u8e3s4.m13_1;
    }
    function JsonToStringWriter() {
     this.p13_1 = StringBuilder_init_$Create$_0(128);
    }
    function createMapForCache(initialCapacity) {
     return HashMap_init_$Create$(initialCapacity);
    }
    initMetadataForClass(Json, "Json"), initMetadataForObject(Default, "Default", VOID, Json), 
    initMetadataForClass(JsonClassDiscriminator, "JsonClassDiscriminator"), initMetadataForClass(JsonIgnoreUnknownKeys, "JsonIgnoreUnknownKeys"), 
    initMetadataForClass(JsonNames, "JsonNames"), initMetadataForClass(JsonConfiguration, "JsonConfiguration"), 
    initMetadataForClass(ClassDiscriminatorMode, "ClassDiscriminatorMode", VOID, Enum), 
    initMetadataForCompanion(Companion), initMetadataForClass(JsonElement, "JsonElement"), 
    initMetadataForCompanion(Companion_0), initMetadataForClass(JsonObject, "JsonObject", VOID, JsonElement, [ JsonElement, KtMap ]), 
    initMetadataForClass(JsonPrimitive, "JsonPrimitive", VOID, JsonElement), initMetadataForObject(JsonNull, "JsonNull", VOID, JsonPrimitive), 
    initMetadataForCompanion(Companion_1), initMetadataForClass(JsonLiteral, "JsonLiteral", VOID, JsonPrimitive), 
    initMetadataForCompanion(Companion_2), initMetadataForClass(JsonArray, "JsonArray", VOID, JsonElement, [ JsonElement, KtList ]), 
    initMetadataForClass(Composer, "Composer"), initMetadataForClass(ComposerWithPrettyPrint, "ComposerWithPrettyPrint", VOID, Composer), 
    initMetadataForClass(JsonElementMarker, "JsonElementMarker"), initMetadataForClass(JsonException, "JsonException", VOID, SerializationException), 
    initMetadataForClass(JsonEncodingException, "JsonEncodingException", VOID, JsonException), 
    initMetadataForClass(JsonDecodingException, "JsonDecodingException", VOID, JsonException), 
    initMetadataForObject(Tombstone, "Tombstone"), initMetadataForClass(JsonPath, "JsonPath", JsonPath), 
    initMetadataForLambda(JsonTreeReader$readDeepRecursive$slambda, CoroutineImpl, VOID, [ 2 ]), 
    initMetadataForCoroutine($readObjectCOROUTINE$0, CoroutineImpl), initMetadataForClass(JsonTreeReader, "JsonTreeReader", VOID, VOID, VOID, [ 0 ]), 
    initMetadataForClass(Key, "Key", Key), initMetadataForClass(DescriptorSchemaCache, "DescriptorSchemaCache", DescriptorSchemaCache), 
    initMetadataForClass(DiscriminatorHolder, "DiscriminatorHolder"), initMetadataForClass(StreamingJsonDecoder, "StreamingJsonDecoder", VOID, AbstractDecoder, [ CompositeDecoder, Decoder, AbstractDecoder ]), 
    initMetadataForClass(StreamingJsonEncoder, "StreamingJsonEncoder", VOID, AbstractEncoder, [ Encoder, AbstractEncoder ]), 
    initMetadataForClass(AbstractJsonTreeDecoder, "AbstractJsonTreeDecoder", VOID, NamedValueDecoder, [ NamedValueDecoder, CompositeDecoder, Decoder ]), 
    initMetadataForClass(JsonTreeDecoder, "JsonTreeDecoder", VOID, AbstractJsonTreeDecoder), 
    initMetadataForClass(JsonTreeListDecoder, "JsonTreeListDecoder", VOID, AbstractJsonTreeDecoder), 
    initMetadataForClass(JsonTreeMapDecoder, "JsonTreeMapDecoder", VOID, JsonTreeDecoder), 
    initMetadataForClass(WriteMode, "WriteMode", VOID, Enum), initMetadataForClass(AbstractJsonLexer, "AbstractJsonLexer"), 
    initMetadataForObject(CharMappings, "CharMappings"), initMetadataForClass(StringJsonLexer, "StringJsonLexer", VOID, AbstractJsonLexer), 
    initMetadataForClass(StringJsonLexerWithComments, "StringJsonLexerWithComments", VOID, StringJsonLexer), 
    initMetadataForClass(JsonToStringWriter, "JsonToStringWriter", JsonToStringWriter), 
    protoOf(Json).jx = function() {
     return this.l13_1;
    }, protoOf(Json).n13 = function(serializer, value) {
     var result = new JsonToStringWriter;
     try {
      return function(json, writer, serializer, value) {
       var tmp = WriteMode_OBJ_getInstance(), size = function() {
        null == $ENTRIES && ($ENTRIES = enumEntries([ WriteMode_OBJ_getInstance(), WriteMode_LIST_getInstance(), WriteMode_MAP_getInstance(), WriteMode_POLY_OBJ_getInstance() ]));
        return $ENTRIES;
       }().k(), tmp$ret$0 = Array(size);
       (function(output, json, mode, modeReuseCache) {
        return function(output, json, mode, modeReuseCache, $this) {
         return StreamingJsonEncoder.call($this, function(sb, json) {
          return json.k13_1.i14_1 ? new ComposerWithPrettyPrint(sb, json) : new Composer(sb);
         }(output, json), json, mode, modeReuseCache), $this;
        }(output, json, mode, modeReuseCache, objectCreate(protoOf(StreamingJsonEncoder)));
       })(writer, json, tmp, tmp$ret$0).wx(serializer, value);
      }(this, result, serializer, value), result.toString();
     } finally {
      result.q13();
     }
    }, protoOf(Json).o13 = function(deserializer, string) {
     var source, lexer = (source = string, this.k13_1.t14_1 ? new StringJsonLexerWithComments(source) : new StringJsonLexer(source)), result = new StreamingJsonDecoder(this, WriteMode_OBJ_getInstance(), lexer, deserializer.xv(), null).bx(deserializer);
     return lexer.d14(), result;
    }, protoOf(JsonConfiguration).toString = function() {
     return "JsonConfiguration(encodeDefaults=" + this.e14_1 + ", ignoreUnknownKeys=" + this.f14_1 + ", isLenient=" + this.g14_1 + ", allowStructuredMapKeys=" + this.h14_1 + ", prettyPrint=" + this.i14_1 + ", explicitNulls=" + this.j14_1 + ", prettyPrintIndent='" + this.k14_1 + "', coerceInputValues=" + this.l14_1 + ", useArrayPolymorphism=" + this.m14_1 + ", classDiscriminator='" + this.n14_1 + "', allowSpecialFloatingPointValues=" + this.o14_1 + ", useAlternativeNames=" + this.p14_1 + ", namingStrategy=" + toString(this.q14_1) + ", decodeEnumsCaseInsensitive=" + this.r14_1 + ", allowTrailingComma=" + this.s14_1 + ", allowComments=" + this.t14_1 + ", classDiscriminatorMode=" + this.u14_1.toString() + ")";
    }, protoOf(JsonObject).equals = function(other) {
     return equals(this.v14_1, other);
    }, protoOf(JsonObject).hashCode = function() {
     return hashCode(this.v14_1);
    }, protoOf(JsonObject).toString = function() {
     var tmp = this.v14_1.m1();
     return joinToString(tmp, ",", "{", "}", VOID, VOID, JsonObject$toString$lambda);
    }, protoOf(JsonObject).q = function() {
     return this.v14_1.q();
    }, protoOf(JsonObject).w14 = function(key) {
     return this.v14_1.h1(key);
    }, protoOf(JsonObject).h1 = function(key) {
     return null != key && "string" == typeof key && this.w14(null != key && "string" == typeof key ? key : THROW_CCE());
    }, protoOf(JsonObject).x14 = function(key) {
     return this.v14_1.j1(key);
    }, protoOf(JsonObject).j1 = function(key) {
     return null == key || "string" != typeof key ? null : this.x14(null != key && "string" == typeof key ? key : THROW_CCE());
    }, protoOf(JsonObject).k = function() {
     return this.v14_1.k();
    }, protoOf(JsonObject).k1 = function() {
     return this.v14_1.k1();
    }, protoOf(JsonObject).l1 = function() {
     return this.v14_1.l1();
    }, protoOf(JsonObject).m1 = function() {
     return this.v14_1.m1();
    }, protoOf(JsonNull).z14 = function() {
     return this.y14_1;
    }, protoOf(JsonPrimitive).toString = function() {
     return this.z14();
    }, protoOf(JsonLiteral).z14 = function() {
     return this.c15_1;
    }, protoOf(JsonLiteral).toString = function() {
     var tmp;
     if (this.a15_1) {
      var this_0 = StringBuilder_init_$Create$();
      printQuoted(this_0, this.c15_1), tmp = this_0.toString();
     } else tmp = this.c15_1;
     return tmp;
    }, protoOf(JsonLiteral).equals = function(other) {
     return this === other || !(null == other || !getKClassFromExpression(this).equals(getKClassFromExpression(other))) && (other instanceof JsonLiteral || THROW_CCE(), 
     this.a15_1 === other.a15_1 && this.c15_1 === other.c15_1);
    }, protoOf(JsonLiteral).hashCode = function() {
     var result = getBooleanHashCode(this.a15_1);
     return result = imul(31, result) + getStringHashCode(this.c15_1) | 0;
    }, protoOf(JsonArray).equals = function(other) {
     return equals(this.d15_1, other);
    }, protoOf(JsonArray).hashCode = function() {
     return hashCode(this.d15_1);
    }, protoOf(JsonArray).toString = function() {
     return joinToString(this.d15_1, ",", "[", "]");
    }, protoOf(JsonArray).q = function() {
     return this.d15_1.q();
    }, protoOf(JsonArray).h = function() {
     return this.d15_1.h();
    }, protoOf(JsonArray).p = function(index) {
     return this.d15_1.p(index);
    }, protoOf(JsonArray).k = function() {
     return this.d15_1.k();
    }, protoOf(Composer).h15 = function() {
     this.g15_1 = !0;
    }, protoOf(Composer).i15 = function() {
     return Unit_instance;
    }, protoOf(Composer).j15 = function() {
     this.g15_1 = !1;
    }, protoOf(Composer).k15 = function() {
     this.g15_1 = !1;
    }, protoOf(Composer).l15 = function() {
     return Unit_instance;
    }, protoOf(Composer).m15 = function(v) {
     return this.f15_1.n15(v);
    }, protoOf(Composer).o15 = function(v) {
     return this.f15_1.p15(v);
    }, protoOf(Composer).q15 = function(v) {
     return this.f15_1.r15(toLong(v));
    }, protoOf(Composer).s15 = function(v) {
     return this.f15_1.r15(v);
    }, protoOf(Composer).t15 = function(value) {
     return this.f15_1.u15(value);
    }, protoOf(ComposerWithPrettyPrint).h15 = function() {
     this.g15_1 = !0, this.y15_1 = this.y15_1 + 1 | 0;
    }, protoOf(ComposerWithPrettyPrint).i15 = function() {
     this.y15_1 = this.y15_1 - 1 | 0;
    }, protoOf(ComposerWithPrettyPrint).j15 = function() {
     this.g15_1 = !1, this.o15("\n");
     var times = this.y15_1, inductionVariable = 0;
     if (inductionVariable < times) do {
      inductionVariable = inductionVariable + 1 | 0, this.o15(this.x15_1.k13_1.k14_1);
     } while (inductionVariable < times);
    }, protoOf(ComposerWithPrettyPrint).k15 = function() {
     this.g15_1 ? this.g15_1 = !1 : this.j15();
    }, protoOf(ComposerWithPrettyPrint).l15 = function() {
     this.m15(_Char___init__impl__6a9atx(32));
    }, protoOf(JsonElementMarker).b16 = function(index) {
     this.z15_1.zz(index);
    }, protoOf(JsonElementMarker).c16 = function() {
     return this.z15_1.a10();
    }, protoOf(JsonPath).l16 = function(sd) {
     this.k16_1 = this.k16_1 + 1 | 0;
     var depth = this.k16_1;
     depth === this.i16_1.length && resize(this), this.i16_1[depth] = sd;
    }, protoOf(JsonPath).m16 = function(index) {
     this.j16_1[this.k16_1] = index;
    }, protoOf(JsonPath).n16 = function(key) {
     var tmp;
     -2 !== this.j16_1[this.k16_1] ? (this.k16_1 = this.k16_1 + 1 | 0, tmp = this.k16_1 === this.i16_1.length) : tmp = !1, 
     tmp && resize(this), this.i16_1[this.k16_1] = key, this.j16_1[this.k16_1] = -2;
    }, protoOf(JsonPath).o16 = function() {
     -2 === this.j16_1[this.k16_1] && (this.i16_1[this.k16_1] = Tombstone_instance);
    }, protoOf(JsonPath).p16 = function() {
     var depth = this.k16_1;
     -2 === this.j16_1[depth] && (this.j16_1[depth] = -1, this.k16_1 = this.k16_1 - 1 | 0), 
     -1 !== this.k16_1 && (this.k16_1 = this.k16_1 - 1 | 0);
    }, protoOf(JsonPath).q16 = function() {
     var this_0 = StringBuilder_init_$Create$();
     this_0.i6("$");
     var times = this.k16_1 + 1 | 0, inductionVariable = 0;
     if (inductionVariable < times) do {
      var index = inductionVariable;
      inductionVariable = inductionVariable + 1 | 0;
      var element = this.i16_1[index];
      if (null != element && isInterface(element, SerialDescriptor)) if (equals(element.jw(), LIST_getInstance())) -1 !== this.j16_1[index] && (this_0.i6("["), 
      this_0.u9(this.j16_1[index]), this_0.i6("]")); else {
       var idx = this.j16_1[index];
       idx >= 0 && (this_0.i6("."), this_0.i6(element.ow(idx)));
      } else element !== Tombstone_instance && (this_0.i6("["), this_0.i6("'"), this_0.h6(element), 
      this_0.i6("'"), this_0.i6("]"));
     } while (inductionVariable < times);
     return this_0.toString();
    }, protoOf(JsonPath).toString = function() {
     return this.q16();
    }, protoOf(JsonTreeReader$readDeepRecursive$slambda).o18 = function($this$DeepRecursiveFunction, it, $completion) {
     var tmp = this.p18($this$DeepRecursiveFunction, it, $completion);
     return tmp.w6_1 = Unit_instance, tmp.x6_1 = null, tmp.c7();
    }, protoOf(JsonTreeReader$readDeepRecursive$slambda).r7 = function(p1, p2, $completion) {
     var tmp = p1 instanceof DeepRecursiveScope ? p1 : THROW_CCE();
     return this.o18(tmp, p2 instanceof Unit ? p2 : THROW_CCE(), $completion);
    }, protoOf(JsonTreeReader$readDeepRecursive$slambda).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       if (this.v6_1 = 3, this.m18_1 = this.j18_1.a17_1.g17(), 1 === this.m18_1) {
        this.n18_1 = readValue(this.j18_1, !0), this.u6_1 = 2;
        continue $sm;
       }
       if (0 === this.m18_1) {
        this.n18_1 = readValue(this.j18_1, !1), this.u6_1 = 2;
        continue $sm;
       }
       if (6 === this.m18_1) {
        if (this.u6_1 = 1, (suspendResult = readObject_0(this.j18_1, this.k18_1, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
        continue $sm;
       }
       if (8 === this.m18_1) {
        this.n18_1 = readArray(this.j18_1), this.u6_1 = 2;
        continue $sm;
       }
       this.j18_1.a17_1.f17("Can't begin reading element, unexpected token");
       break;

      case 1:
       this.n18_1 = suspendResult, this.u6_1 = 2;
       continue $sm;

      case 2:
       return this.n18_1;

      case 3:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (3 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(JsonTreeReader$readDeepRecursive$slambda).p18 = function($this$DeepRecursiveFunction, it, completion) {
     var i = new JsonTreeReader$readDeepRecursive$slambda(this.j18_1, completion);
     return i.k18_1 = $this$DeepRecursiveFunction, i.l18_1 = it, i;
    }, protoOf($readObjectCOROUTINE$0).c7 = function() {
     var suspendResult = this.w6_1;
     $sm: for (;;) try {
      switch (this.u6_1) {
      case 0:
       this.v6_1 = 5;
       this.w17_1 = this.u17_1, this.x17_1 = this.w17_1, this.y17_1 = this.x17_1.a17_1.e17(6), 
       4 === this.x17_1.a17_1.g17() && this.x17_1.a17_1.f17("Unexpected leading comma");
       this.z17_1 = LinkedHashMap_init_$Create$(), this.u6_1 = 1;
       continue $sm;

      case 1:
       if (!this.x17_1.a17_1.h17()) {
        this.u6_1 = 4;
        continue $sm;
       }
       if (this.a18_1 = this.x17_1.b17_1 ? this.x17_1.a17_1.j17() : this.x17_1.a17_1.i17(), 
       this.x17_1.a17_1.e17(5), this.u6_1 = 2, (suspendResult = this.v17_1.oe(Unit_instance, this)) === get_COROUTINE_SUSPENDED()) return suspendResult;
       continue $sm;

      case 2:
       var element = suspendResult, tmp0 = this.z17_1, key = this.a18_1;
       tmp0.n1(key, element), this.y17_1 = this.x17_1.a17_1.l17();
       var tmp0_subject = this.y17_1;
       if (4 === tmp0_subject) {
        this.u6_1 = 3;
        continue $sm;
       }
       if (7 === tmp0_subject) {
        this.u6_1 = 4;
        continue $sm;
       }
       this.x17_1.a17_1.f17("Expected end of the object or comma");
       break;

      case 3:
       this.u6_1 = 1;
       continue $sm;

      case 4:
       return 6 === this.y17_1 ? this.x17_1.a17_1.e17(7) : 4 === this.y17_1 && (this.x17_1.c17_1 || invalidTrailingComma(this.x17_1.a17_1), 
       this.x17_1.a17_1.e17(7)), new JsonObject(this.z17_1);

      case 5:
       throw this.x6_1;
      }
     } catch ($p) {
      var e = $p;
      if (5 === this.v6_1) throw e;
      this.u6_1 = this.v6_1, this.x6_1 = e;
     }
    }, protoOf(JsonTreeReader).k17 = function() {
     var tmp, token = this.a17_1.g17();
     if (1 === token) tmp = readValue(this, !0); else if (0 === token) tmp = readValue(this, !1); else if (6 === token) {
      var tmp_0;
      this.d17_1 = this.d17_1 + 1 | 0, tmp_0 = 200 === this.d17_1 ? readDeepRecursive(this) : function($this) {
       var lastToken = $this.a17_1.e17(6);
       4 === $this.a17_1.g17() && $this.a17_1.f17("Unexpected leading comma");
       var result = LinkedHashMap_init_$Create$();
       $l$loop: for (;$this.a17_1.h17(); ) {
        var key = $this.b17_1 ? $this.a17_1.j17() : $this.a17_1.i17();
        $this.a17_1.e17(5);
        var element = $this.k17();
        if (result.n1(key, element), 4 !== (lastToken = $this.a17_1.l17())) {
         if (7 === lastToken) break $l$loop;
         $this.a17_1.f17("Expected end of the object or comma");
        }
       }
       return 6 === lastToken ? $this.a17_1.e17(7) : 4 === lastToken && ($this.c17_1 || invalidTrailingComma($this.a17_1), 
       $this.a17_1.e17(7)), new JsonObject(result);
      }(this);
      var result = tmp_0;
      this.d17_1 = this.d17_1 - 1 | 0, tmp = result;
     } else 8 === token ? tmp = readArray(this) : this.a17_1.f17("Cannot read Json element because of unexpected " + tokenDescription(token));
     return tmp;
    }, protoOf(DescriptorSchemaCache).r18 = function(descriptor, key, value) {
     var tmp, this_0 = this.e16_1, value_0 = this_0.j1(descriptor);
     if (null == value_0) {
      var answer = createMapForCache(2);
      this_0.n1(descriptor, answer), tmp = answer;
     } else tmp = value_0;
     var tmp2 = tmp, tmp3 = key instanceof Key ? key : THROW_CCE(), value_1 = null != value ? value : THROW_CCE();
     tmp2.n1(tmp3, value_1);
    }, protoOf(DescriptorSchemaCache).f16 = function(descriptor, key, defaultValue) {
     var tmp0_safe_receiver = this.s18(descriptor, key);
     if (null != tmp0_safe_receiver) return tmp0_safe_receiver;
     var value = defaultValue();
     return this.r18(descriptor, key, value), value;
    }, protoOf(DescriptorSchemaCache).s18 = function(descriptor, key) {
     var tmp, tmp0_safe_receiver = this.e16_1.j1(descriptor);
     tmp = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.j1(key instanceof Key ? key : THROW_CCE());
     return null != tmp ? tmp : null;
    }, protoOf(StreamingJsonDecoder).c19 = function() {
     return this.r13_1;
    }, protoOf(StreamingJsonDecoder).jx = function() {
     return this.u13_1;
    }, protoOf(StreamingJsonDecoder).d19 = function() {
     return new JsonTreeReader(this.r13_1.k13_1, this.t13_1).k17();
    }, protoOf(StreamingJsonDecoder).bx = function(deserializer) {
     try {
      if (!(deserializer instanceof AbstractPolymorphicSerializer) || this.r13_1.k13_1.m14_1) return deserializer.zv(this);
      var discriminator = classDiscriminator(deserializer.xv(), this.r13_1), tmp0_elvis_lhs = this.t13_1.e19(discriminator, this.x13_1.g14_1);
      if (null == tmp0_elvis_lhs) {
       var tmp$ret$0, tmp1 = isInterface(deserializer, DeserializationStrategy) ? deserializer : THROW_CCE();
       if (!(tmp1 instanceof AbstractPolymorphicSerializer) || this.c19().k13_1.m14_1) tmp$ret$0 = tmp1.zv(this); else {
        var discriminator_0 = classDiscriminator(tmp1.xv(), this.c19()), tmp0 = this.d19(), serialName = tmp1.xv().iw();
        if (!(tmp0 instanceof JsonObject)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonObject).m8() + ", but had " + getKClassFromExpression(tmp0).m8() + " as the serialized body of " + serialName + " at element: " + this.t13_1.a14_1.q16(), toString_0(tmp0));
        var tmp_4, jsonTree = tmp0, tmp0_safe_receiver = jsonTree.x14(discriminator_0), tmp1_safe_receiver = null == tmp0_safe_receiver ? null : get_jsonPrimitive(tmp0_safe_receiver), type = null == tmp1_safe_receiver ? null : get_contentOrNull(tmp1_safe_receiver);
        try {
         tmp_4 = findPolymorphicSerializer(tmp1, this, type);
        } catch ($p) {
         if ($p instanceof SerializationException) throw JsonDecodingException_0(-1, ensureNotNull($p.message), jsonTree.toString());
         throw $p;
        }
        var tmp_6 = tmp_4, actualSerializer = isInterface(tmp_6, DeserializationStrategy) ? tmp_6 : THROW_CCE();
        tmp$ret$0 = readPolymorphicJson(this.c19(), discriminator_0, jsonTree, actualSerializer);
       }
       return tmp$ret$0;
      }
      var tmp_7, type_0 = tmp0_elvis_lhs;
      try {
       tmp_7 = findPolymorphicSerializer(deserializer, this, type_0);
      } catch ($p) {
       if (!($p instanceof SerializationException)) throw $p;
       var it_0 = $p, message = removeSuffix(substringBefore(ensureNotNull(it_0.message), _Char___init__impl__6a9atx(10)), "."), hint = substringAfter(ensureNotNull(it_0.message), _Char___init__impl__6a9atx(10), "");
       this.t13_1.f17(message, VOID, hint), tmp_7 = undefined;
      }
      var tmp_9 = tmp_7, actualSerializer_0 = isInterface(tmp_9, DeserializationStrategy) ? tmp_9 : THROW_CCE();
      return this.w13_1 = new DiscriminatorHolder(discriminator), actualSerializer_0.zv(this);
     } catch ($p) {
      if ($p instanceof MissingFieldException) {
       var e = $p;
       if (contains(ensureNotNull(e.message), "at path")) throw e;
       throw new MissingFieldException(e.ew_1, plus(e.message, " at path: ") + this.t13_1.a14_1.q16(), e);
      }
      throw $p;
     }
    }, protoOf(StreamingJsonDecoder).cx = function(descriptor) {
     var $this, tmp, newMode = switchMode(this.r13_1, descriptor);
     switch (this.t13_1.a14_1.l16(descriptor), this.t13_1.u18(newMode.h19_1), 4 === ($this = this).t13_1.g17() && $this.t13_1.f17("Unexpected leading comma"), 
     newMode.r1_1) {
     case 1:
     case 2:
     case 3:
      tmp = new StreamingJsonDecoder(this.r13_1, newMode, this.t13_1, descriptor, this.w13_1);
      break;

     default:
      tmp = this.s13_1.equals(newMode) && this.r13_1.k13_1.j14_1 ? this : new StreamingJsonDecoder(this.r13_1, newMode, this.t13_1, descriptor, this.w13_1);
     }
     return tmp;
    }, protoOf(StreamingJsonDecoder).dx = function(descriptor) {
     0 === descriptor.mw() && ignoreUnknownKeys(descriptor, this.r13_1) && function($this, descriptor) {
      for (;-1 !== $this.lx(descriptor); ) ;
     }(this, descriptor), this.t13_1.v18() && !this.r13_1.k13_1.s14_1 && invalidTrailingComma(this.t13_1, ""), 
     this.t13_1.u18(this.s13_1.i19_1), this.t13_1.a14_1.p16();
    }, protoOf(StreamingJsonDecoder).hx = function(descriptor, index, deserializer, previousValue) {
     var isMapKey = this.s13_1.equals(WriteMode_MAP_getInstance()) && !(1 & index);
     isMapKey && this.t13_1.a14_1.o16();
     var value = protoOf(AbstractDecoder).hx.call(this, descriptor, index, deserializer, previousValue);
     return isMapKey && this.t13_1.a14_1.n16(value), value;
    }, protoOf(StreamingJsonDecoder).lx = function(descriptor) {
     var index, $this, tmp, hasComma;
     switch (this.s13_1.r1_1) {
     case 0:
      index = function($this, descriptor) {
       for (var hasComma = $this.t13_1.v18(); $this.t13_1.h17(); ) {
        hasComma = !1;
        var key = decodeStringKey($this);
        $this.t13_1.u18(_Char___init__impl__6a9atx(58));
        var tmp, index = getJsonNameIndex(descriptor, $this.r13_1, key);
        if (-3 !== index) {
         if (!$this.x13_1.l14_1 || !coerceInputValue($this, descriptor, index)) {
          var tmp0_safe_receiver = $this.y13_1;
          return null == tmp0_safe_receiver || tmp0_safe_receiver.b16(index), index;
         }
         hasComma = $this.t13_1.v18(), tmp = !1;
        } else tmp = !0;
        tmp && (hasComma = handleUnknown($this, descriptor, key));
       }
       hasComma && !$this.r13_1.k13_1.s14_1 && invalidTrailingComma($this.t13_1);
       var tmp1_safe_receiver = $this.y13_1, tmp2_elvis_lhs = null == tmp1_safe_receiver ? null : tmp1_safe_receiver.c16();
       return null == tmp2_elvis_lhs ? -1 : tmp2_elvis_lhs;
      }(this, descriptor);
      break;

     case 2:
      index = function($this) {
       var tmp, hasComma = !1, decodingKey = !!($this.v13_1 % 2 | 0);
       if (decodingKey ? -1 !== $this.v13_1 && (hasComma = $this.t13_1.v18()) : $this.t13_1.u18(_Char___init__impl__6a9atx(58)), 
       $this.t13_1.h17()) {
        if (decodingKey) if (-1 === $this.v13_1) {
         var tmp0 = $this.t13_1, condition = !hasComma, position = tmp0.z13_1;
         condition || tmp0.f17("Unexpected leading comma", position);
        } else {
         var tmp3 = $this.t13_1, condition_0 = hasComma, position_0 = tmp3.z13_1;
         condition_0 || tmp3.f17("Expected comma after the key-value pair", position_0);
        }
        $this.v13_1 = $this.v13_1 + 1 | 0, tmp = $this.v13_1;
       } else hasComma && !$this.r13_1.k13_1.s14_1 && invalidTrailingComma($this.t13_1), 
       tmp = -1;
       return tmp;
      }(this);
      break;

     default:
      hasComma = ($this = this).t13_1.v18(), $this.t13_1.h17() ? (-1 === $this.v13_1 || hasComma || $this.t13_1.f17("Expected end of the array or comma"), 
      $this.v13_1 = $this.v13_1 + 1 | 0, tmp = $this.v13_1) : (hasComma && !$this.r13_1.k13_1.s14_1 && invalidTrailingComma($this.t13_1, "array"), 
      tmp = -1), index = tmp;
     }
     return this.s13_1.equals(WriteMode_MAP_getInstance()) || this.t13_1.a14_1.m16(index), 
     index;
    }, protoOf(StreamingJsonDecoder).xw = function() {
     var value = this.t13_1.j19();
     return value.equals(toLong(value.a1())) || this.t13_1.f17("Failed to parse int for input '" + value.toString() + "'"), 
     value.a1();
    }, protoOf(StreamingJsonDecoder).yw = function() {
     return this.t13_1.j19();
    }, protoOf(StreamingJsonDecoder).zw = function() {
     return this.x13_1.g14_1 ? this.t13_1.b19() : this.t13_1.i17();
    }, protoOf(StreamingJsonEncoder).c19 = function() {
     return this.s16_1;
    }, protoOf(StreamingJsonEncoder).jx = function() {
     return this.v16_1;
    }, protoOf(StreamingJsonEncoder).wx = function(serializer, value) {
     if (this.c19().k13_1.m14_1) serializer.yv(this, value); else {
      var tmp, isPolymorphicSerializer = serializer instanceof AbstractPolymorphicSerializer;
      if (isPolymorphicSerializer) tmp = !this.c19().k13_1.u14_1.equals((ClassDiscriminatorMode_initEntries(), 
      ClassDiscriminatorMode_NONE_instance)); else {
       var tmp_0;
       switch (this.c19().k13_1.u14_1.r1_1) {
       case 0:
       case 2:
        tmp_0 = !1;
        break;

       case 1:
        var it = serializer.xv().jw();
        tmp_0 = equals(it, CLASS_getInstance()) || equals(it, OBJECT_getInstance());
        break;

       default:
        noWhenBranchMatchedException();
       }
       tmp = tmp_0;
      }
      var tmp_1, baseClassDiscriminator = tmp ? classDiscriminator(serializer.xv(), this.c19()) : null;
      if (isPolymorphicSerializer) {
       var casted = serializer instanceof AbstractPolymorphicSerializer ? serializer : THROW_CCE();
       if (null == value) {
        var message = "Value for serializer " + toString_0(serializer.xv()) + " should always be non-null. Please report issue to the kotlinx.serialization tracker.";
        throw IllegalArgumentException_init_$Create$(toString_0(message));
       }
       var actual = findPolymorphicSerializer_0(casted, this, value);
       null != baseClassDiscriminator && (access$validateIfSealed$tPolymorphicKt(serializer, actual, baseClassDiscriminator), 
       function(kind) {
        if (kind instanceof ENUM) throw IllegalStateException_init_$Create$(toString_0("Enums cannot be serialized polymorphically with 'type' parameter. You can use 'JsonBuilder.useArrayPolymorphism' instead"));
        if (kind instanceof PrimitiveKind) throw IllegalStateException_init_$Create$(toString_0("Primitives cannot be serialized polymorphically with 'type' parameter. You can use 'JsonBuilder.useArrayPolymorphism' instead"));
        if (kind instanceof PolymorphicKind) throw IllegalStateException_init_$Create$(toString_0("Actual serializer for polymorphic cannot be polymorphic itself"));
       }(actual.xv().jw())), tmp_1 = isInterface(actual, SerializationStrategy) ? actual : THROW_CCE();
      } else tmp_1 = serializer;
      var actualSerializer = tmp_1;
      if (null != baseClassDiscriminator) {
       var serialName = actualSerializer.xv().iw();
       this.y16_1 = baseClassDiscriminator, this.z16_1 = serialName;
      }
      actualSerializer.yv(this, value);
     }
    }, protoOf(StreamingJsonEncoder).cx = function(descriptor) {
     var newMode = switchMode(this.s16_1, descriptor);
     newMode.h19_1 !== _Char___init__impl__6a9atx(0) && (this.r16_1.m15(newMode.h19_1), 
     this.r16_1.h15());
     var discriminator = this.y16_1;
     if (null != discriminator) {
      var tmp0_elvis_lhs = this.z16_1;
      !function($this, discriminator, serialName) {
       $this.r16_1.j15(), $this.rx(discriminator), $this.r16_1.m15(_Char___init__impl__6a9atx(58)), 
       $this.r16_1.l15(), $this.rx(serialName);
      }(this, discriminator, null == tmp0_elvis_lhs ? descriptor.iw() : tmp0_elvis_lhs), 
      this.y16_1 = null, this.z16_1 = null;
     }
     if (this.t16_1.equals(newMode)) return this;
     var tmp1_safe_receiver = this.u16_1, tmp2_elvis_lhs = null == tmp1_safe_receiver ? null : tmp1_safe_receiver[newMode.r1_1];
     return null == tmp2_elvis_lhs ? new StreamingJsonEncoder(this.r16_1, this.s16_1, newMode, this.u16_1) : tmp2_elvis_lhs;
    }, protoOf(StreamingJsonEncoder).dx = function(descriptor) {
     this.t16_1.i19_1 !== _Char___init__impl__6a9atx(0) && (this.r16_1.i15(), this.r16_1.k15(), 
     this.r16_1.m15(this.t16_1.i19_1));
    }, protoOf(StreamingJsonEncoder).nx = function(descriptor, index) {
     switch (this.t16_1.r1_1) {
     case 1:
      this.r16_1.g15_1 || this.r16_1.m15(_Char___init__impl__6a9atx(44)), this.r16_1.j15();
      break;

     case 2:
      if (this.r16_1.g15_1) this.x16_1 = !0, this.r16_1.j15(); else {
       var tmp_0;
       index % 2 | 0 ? (this.r16_1.m15(_Char___init__impl__6a9atx(58)), this.r16_1.l15(), 
       tmp_0 = !1) : (this.r16_1.m15(_Char___init__impl__6a9atx(44)), this.r16_1.j15(), 
       tmp_0 = !0), this.x16_1 = tmp_0;
      }
      break;

     case 3:
      0 === index && (this.x16_1 = !0), 1 === index && (this.r16_1.m15(_Char___init__impl__6a9atx(44)), 
      this.r16_1.l15(), this.x16_1 = !1);
      break;

     default:
      this.r16_1.g15_1 || this.r16_1.m15(_Char___init__impl__6a9atx(44)), this.r16_1.j15(), 
      this.rx(getJsonElementName(descriptor, this.s16_1, index)), this.r16_1.m15(_Char___init__impl__6a9atx(58)), 
      this.r16_1.l15();
     }
     return !0;
    }, protoOf(StreamingJsonEncoder).px = function(value) {
     this.x16_1 ? this.rx(value.toString()) : this.r16_1.q15(value);
    }, protoOf(StreamingJsonEncoder).qx = function(value) {
     this.x16_1 ? this.rx(value.toString()) : this.r16_1.s15(value);
    }, protoOf(StreamingJsonEncoder).rx = function(value) {
     return this.r16_1.t15(value);
    }, protoOf(AbstractJsonTreeDecoder).c19 = function() {
     return this.m19_1;
    }, protoOf(AbstractJsonTreeDecoder).g1 = function() {
     return this.n19_1;
    }, protoOf(AbstractJsonTreeDecoder).jx = function() {
     return this.c19().jx();
    }, protoOf(AbstractJsonTreeDecoder).r19 = function() {
     var tmp0_safe_receiver = this.u11(), tmp1_elvis_lhs = null == tmp0_safe_receiver ? null : this.s19(tmp0_safe_receiver);
     return null == tmp1_elvis_lhs ? this.g1() : tmp1_elvis_lhs;
    }, protoOf(AbstractJsonTreeDecoder).q19 = function(currentTag) {
     return this.w11() + "." + currentTag;
    }, protoOf(AbstractJsonTreeDecoder).d19 = function() {
     return this.r19();
    }, protoOf(AbstractJsonTreeDecoder).bx = function(deserializer) {
     var tmp$ret$0;
     if (!(deserializer instanceof AbstractPolymorphicSerializer) || this.c19().k13_1.m14_1) tmp$ret$0 = deserializer.zv(this); else {
      var discriminator = classDiscriminator(deserializer.xv(), this.c19()), tmp0 = this.d19(), serialName = deserializer.xv().iw();
      if (!(tmp0 instanceof JsonObject)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonObject).m8() + ", but had " + getKClassFromExpression(tmp0).m8() + " as the serialized body of " + serialName + " at element: " + this.w11(), toString_0(tmp0));
      var tmp_2, jsonTree = tmp0, tmp0_safe_receiver = jsonTree.x14(discriminator), tmp1_safe_receiver = null == tmp0_safe_receiver ? null : get_jsonPrimitive(tmp0_safe_receiver), type = null == tmp1_safe_receiver ? null : get_contentOrNull(tmp1_safe_receiver);
      try {
       tmp_2 = findPolymorphicSerializer(deserializer, this, type);
      } catch ($p) {
       if ($p instanceof SerializationException) throw JsonDecodingException_0(-1, ensureNotNull($p.message), jsonTree.toString());
       throw $p;
      }
      var tmp_4 = tmp_2, actualSerializer = isInterface(tmp_4, DeserializationStrategy) ? tmp_4 : THROW_CCE();
      tmp$ret$0 = readPolymorphicJson(this.c19(), discriminator, jsonTree, actualSerializer);
     }
     return tmp$ret$0;
    }, protoOf(AbstractJsonTreeDecoder).v11 = function(parentName, childName) {
     return childName;
    }, protoOf(AbstractJsonTreeDecoder).cx = function(descriptor) {
     var tmp, currentObject = this.r19(), tmp0_subject = descriptor.jw();
     if (!!equals(tmp0_subject, LIST_getInstance()) || tmp0_subject instanceof PolymorphicKind) {
      var tmp_1 = this.c19(), serialName = descriptor.iw();
      if (!(currentObject instanceof JsonArray)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonArray).m8() + ", but had " + getKClassFromExpression(currentObject).m8() + " as the serialized body of " + serialName + " at element: " + this.w11(), toString_0(currentObject));
      tmp = new JsonTreeListDecoder(tmp_1, currentObject);
     } else if (equals(tmp0_subject, MAP_getInstance())) {
      var tmp_4, this_0 = this.c19(), keyDescriptor = carrierDescriptor(descriptor.rw(0), this_0.jx()), keyKind = keyDescriptor.jw();
      if (keyKind instanceof PrimitiveKind || equals(keyKind, ENUM_getInstance())) {
       var tmp_6 = this.c19(), serialName_0 = descriptor.iw();
       if (!(currentObject instanceof JsonObject)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonObject).m8() + ", but had " + getKClassFromExpression(currentObject).m8() + " as the serialized body of " + serialName_0 + " at element: " + this.w11(), toString_0(currentObject));
       tmp_4 = new JsonTreeMapDecoder(tmp_6, currentObject);
      } else {
       if (!this_0.k13_1.h14_1) throw InvalidKeyKindException(keyDescriptor);
       var tmp_9 = this.c19(), serialName_1 = descriptor.iw();
       if (!(currentObject instanceof JsonArray)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonArray).m8() + ", but had " + getKClassFromExpression(currentObject).m8() + " as the serialized body of " + serialName_1 + " at element: " + this.w11(), toString_0(currentObject));
       tmp_4 = new JsonTreeListDecoder(tmp_9, currentObject);
      }
      tmp = tmp_4;
     } else {
      var tmp_12 = this.c19(), serialName_2 = descriptor.iw();
      if (!(currentObject instanceof JsonObject)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonObject).m8() + ", but had " + getKClassFromExpression(currentObject).m8() + " as the serialized body of " + serialName_2 + " at element: " + this.w11(), toString_0(currentObject));
      tmp = new JsonTreeDecoder(tmp_12, currentObject, this.o19_1);
     }
     return tmp;
    }, protoOf(AbstractJsonTreeDecoder).dx = function(descriptor) {}, protoOf(AbstractJsonTreeDecoder).t19 = function(tag) {
     var tmp$ret$5;
     $l$block: {
      var value = this.s19(tag);
      if (!(value instanceof JsonPrimitive)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonPrimitive).m8() + ", but had " + getKClassFromExpression(value).m8() + " as the serialized body of int at element: " + this.q19(tag), toString_0(value));
      var literal = value;
      try {
       var tmp_2, result = parseLongImpl(literal), this_0 = numberRangeToNumber(-2147483648, 2147483647), tmp0_elvis_lhs = contains_0(isInterface(this_0, ClosedRange) ? this_0 : THROW_CCE(), result) ? result.a1() : null;
       null == tmp0_elvis_lhs ? unparsedPrimitive(this, literal, "int", tag) : tmp_2 = tmp0_elvis_lhs, 
       tmp$ret$5 = tmp_2;
       break $l$block;
      } catch ($p) {
       if (!($p instanceof IllegalArgumentException)) throw $p;
       unparsedPrimitive(this, literal, "int", tag);
      }
     }
     return tmp$ret$5;
    }, protoOf(AbstractJsonTreeDecoder).y11 = function(tag) {
     return this.t19(null != tag && "string" == typeof tag ? tag : THROW_CCE());
    }, protoOf(AbstractJsonTreeDecoder).u19 = function(tag) {
     var tmp$ret$4;
     $l$block: {
      var value = this.s19(tag);
      if (!(value instanceof JsonPrimitive)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonPrimitive).m8() + ", but had " + getKClassFromExpression(value).m8() + " as the serialized body of long at element: " + this.q19(tag), toString_0(value));
      var literal = value;
      try {
       var tmp_1, tmp0_elvis_lhs = parseLongImpl(literal);
       null == tmp0_elvis_lhs ? unparsedPrimitive(this, literal, "long", tag) : tmp_1 = tmp0_elvis_lhs, 
       tmp$ret$4 = tmp_1;
       break $l$block;
      } catch ($p) {
       if (!($p instanceof IllegalArgumentException)) throw $p;
       unparsedPrimitive(this, literal, "long", tag);
      }
     }
     return tmp$ret$4;
    }, protoOf(AbstractJsonTreeDecoder).z11 = function(tag) {
     return this.u19(null != tag && "string" == typeof tag ? tag : THROW_CCE());
    }, protoOf(AbstractJsonTreeDecoder).v19 = function(tag) {
     var value = this.s19(tag);
     if (!(value instanceof JsonPrimitive)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonPrimitive).m8() + ", but had " + getKClassFromExpression(value).m8() + " as the serialized body of string at element: " + this.q19(tag), toString_0(value));
     var value_0 = value;
     if (!(value_0 instanceof JsonLiteral)) throw JsonDecodingException_0(-1, "Expected string value for a non-null key '" + tag + "', got null literal instead at element: " + this.q19(tag), toString_0(this.r19()));
     if (!value_0.a15_1 && !this.c19().k13_1.g14_1) throw JsonDecodingException_0(-1, "String literal for key '" + tag + "' should be quoted at element: " + this.q19(tag) + ".\nUse 'isLenient = true' in 'Json {}' builder to accept non-compliant JSON.", toString_0(this.r19()));
     return value_0.c15_1;
    }, protoOf(AbstractJsonTreeDecoder).a12 = function(tag) {
     return this.v19(null != tag && "string" == typeof tag ? tag : THROW_CCE());
    }, protoOf(JsonTreeDecoder).g1 = function() {
     return this.c1a_1;
    }, protoOf(JsonTreeDecoder).lx = function(descriptor) {
     $l$loop: for (;this.e1a_1 < descriptor.mw(); ) {
      var _unary__edvuaz = this.e1a_1;
      this.e1a_1 = _unary__edvuaz + 1 | 0;
      var name = this.p11(descriptor, _unary__edvuaz), index = this.e1a_1 - 1 | 0;
      this.f1a_1 = !1;
      var this_0 = this.g1();
      if (!!(isInterface(this_0, KtMap) ? this_0 : THROW_CCE()).h1(name) || setForceNull(this, descriptor, index)) {
       if (!this.p19_1.l14_1) return index;
       var tmp$ret$3, tmp2 = this.c19();
       $l$block_2: {
        var tmp_0, isOptional = descriptor.sw(index), elementDescriptor = descriptor.rw(index);
        if (isOptional && !elementDescriptor.kw()) tmp_0 = this.g1a(name) instanceof JsonNull; else tmp_0 = !1;
        if (tmp_0) tmp$ret$3 = !0; else {
         if (equals(elementDescriptor.jw(), ENUM_getInstance())) {
          var tmp_2;
          if (elementDescriptor.kw()) tmp_2 = this.g1a(name) instanceof JsonNull; else tmp_2 = !1;
          if (tmp_2) {
           tmp$ret$3 = !1;
           break $l$block_2;
          }
          var tmp_4 = this.g1a(name), tmp0_safe_receiver = tmp_4 instanceof JsonPrimitive ? tmp_4 : null, tmp0_elvis_lhs = null == tmp0_safe_receiver ? null : get_contentOrNull(tmp0_safe_receiver);
          if (null == tmp0_elvis_lhs) {
           tmp$ret$3 = !1;
           break $l$block_2;
          }
          var enumIndex = getJsonNameIndex(elementDescriptor, tmp2, tmp0_elvis_lhs), coerceToNull = !tmp2.k13_1.j14_1 && elementDescriptor.kw();
          if (-3 === enumIndex && (isOptional || coerceToNull)) {
           if (setForceNull(this, descriptor, index)) return index;
           tmp$ret$3 = !0;
           break $l$block_2;
          }
         }
         tmp$ret$3 = !1;
        }
       }
       if (tmp$ret$3) continue $l$loop;
       return index;
      }
     }
     return -1;
    }, protoOf(JsonTreeDecoder).q11 = function(descriptor, index) {
     var strategy = namingStrategy(descriptor, this.c19()), baseName = descriptor.ow(index);
     if (null == strategy) {
      if (!this.p19_1.p14_1) return baseName;
      if (this.g1().k1().d1(baseName)) return baseName;
     }
     var tmp$ret$1, deserializationNamesMap_0 = deserializationNamesMap(this.c19(), descriptor);
     $l$block: {
      for (var _iterator__ex2g4s = this.g1().k1().h(); _iterator__ex2g4s.i(); ) {
       var element = _iterator__ex2g4s.j();
       if (deserializationNamesMap_0.j1(element) === index) {
        tmp$ret$1 = element;
        break $l$block;
       }
      }
      tmp$ret$1 = null;
     }
     if (null != tmp$ret$1) return tmp$ret$1;
     var fallbackName = null == strategy ? null : strategy.h16(descriptor, index, baseName);
     return null == fallbackName ? baseName : fallbackName;
    }, protoOf(JsonTreeDecoder).s19 = function(tag) {
     return getValue(this.g1(), tag);
    }, protoOf(JsonTreeDecoder).g1a = function(tag) {
     return this.g1().x14(tag);
    }, protoOf(JsonTreeDecoder).cx = function(descriptor) {
     if (descriptor === this.d1a_1) {
      var tmp = this.c19(), tmp1 = this.r19(), serialName = this.d1a_1.iw();
      if (!(tmp1 instanceof JsonObject)) throw JsonDecodingException_0(-1, "Expected " + getKClass(JsonObject).m8() + ", but had " + getKClassFromExpression(tmp1).m8() + " as the serialized body of " + serialName + " at element: " + this.w11(), toString_0(tmp1));
      return new JsonTreeDecoder(tmp, tmp1, this.o19_1, this.d1a_1);
     }
     return protoOf(AbstractJsonTreeDecoder).cx.call(this, descriptor);
    }, protoOf(JsonTreeDecoder).dx = function(descriptor) {
     var tmp;
     ignoreUnknownKeys(descriptor, this.c19()) ? tmp = !0 : tmp = descriptor.jw() instanceof PolymorphicKind;
     if (tmp) return Unit_instance;
     var tmp_1, strategy = namingStrategy(descriptor, this.c19());
     if (null != strategy || this.p19_1.p14_1) if (null != strategy) tmp_1 = deserializationNamesMap(this.c19(), descriptor).k1(); else {
      var tmp_2 = jsonCachedSerialNames(descriptor), tmp0_safe_receiver = get_schemaCache(this.c19()).s18(descriptor, get_JsonDeserializationNamesKey()), tmp0_elvis_lhs = null == tmp0_safe_receiver ? null : tmp0_safe_receiver.k1(), tmp$ret$0 = null == tmp0_elvis_lhs ? emptySet() : tmp0_elvis_lhs;
      tmp_1 = plus_0(tmp_2, tmp$ret$0);
     } else tmp_1 = jsonCachedSerialNames(descriptor);
     for (var names = tmp_1, _iterator__ex2g4s = this.g1().k1().h(); _iterator__ex2g4s.i(); ) {
      var key = _iterator__ex2g4s.j();
      if (!names.d1(key) && key !== this.o19_1) throw JsonDecodingException_1(-1, "Encountered an unknown key '" + key + "' at element: " + this.w11() + "\nUse 'ignoreUnknownKeys = true' in 'Json {}' builder or '@JsonIgnoreUnknownKeys' annotation to ignore unknown keys.\nJSON input: " + toString_0(minify(this.g1().toString())));
     }
    }, protoOf(JsonTreeListDecoder).g1 = function() {
     return this.n1a_1;
    }, protoOf(JsonTreeListDecoder).q11 = function(descriptor, index) {
     return index.toString();
    }, protoOf(JsonTreeListDecoder).s19 = function(tag) {
     return this.n1a_1.p(toInt(tag));
    }, protoOf(JsonTreeListDecoder).lx = function(descriptor) {
     for (;this.p1a_1 < (this.o1a_1 - 1 | 0); ) return this.p1a_1 = this.p1a_1 + 1 | 0, 
     this.p1a_1;
     return -1;
    }, protoOf(JsonTreeMapDecoder).g1 = function() {
     return this.a1b_1;
    }, protoOf(JsonTreeMapDecoder).q11 = function(descriptor, index) {
     var i = index / 2 | 0;
     return this.b1b_1.p(i);
    }, protoOf(JsonTreeMapDecoder).lx = function(descriptor) {
     for (;this.d1b_1 < (this.c1b_1 - 1 | 0); ) return this.d1b_1 = this.d1b_1 + 1 | 0, 
     this.d1b_1;
     return -1;
    }, protoOf(JsonTreeMapDecoder).s19 = function(tag) {
     return this.d1b_1 % 2 | 0 ? getValue(this.a1b_1, tag) : (value = tag, _init_properties_JsonElement_kt__7cbdc2(), 
     null == value ? JsonNull_getInstance() : new JsonLiteral(value, !0));
     var value;
    }, protoOf(JsonTreeMapDecoder).dx = function(descriptor) {}, protoOf(AbstractJsonLexer).h1b = function() {}, 
    protoOf(AbstractJsonLexer).v18 = function() {
     var current = this.i1b(), source = this.f1b();
     return !(current >= charSequenceLength(source) || -1 === current) && (charSequenceGet(source, current) === _Char___init__impl__6a9atx(44) && (this.z13_1 = this.z13_1 + 1 | 0, 
     !0));
    }, protoOf(AbstractJsonLexer).j1b = function(c) {
     return c !== _Char___init__impl__6a9atx(125) && c !== _Char___init__impl__6a9atx(93) && c !== _Char___init__impl__6a9atx(58) && c !== _Char___init__impl__6a9atx(44);
    }, protoOf(AbstractJsonLexer).d14 = function() {
     10 !== this.l17() && this.f17("Expected EOF after parsing, but had " + toString_1(charSequenceGet(this.f1b(), this.z13_1 - 1 | 0)) + " instead");
    }, protoOf(AbstractJsonLexer).e17 = function(expected) {
     var token = this.l17();
     if (token !== expected) {
      var expected_0 = tokenDescription(expected), position = this.z13_1 - 1 | 0, tmp$ret$0 = "Expected " + expected_0 + ", but had '" + (this.z13_1 === charSequenceLength(this.f1b()) || position < 0 ? "EOF" : toString_1(charSequenceGet(this.f1b(), position))) + "' instead";
      this.f17(tmp$ret$0, position);
     }
     return token;
    }, protoOf(AbstractJsonLexer).k1b = function(expected) {
     if (this.z13_1 > 0 && expected === _Char___init__impl__6a9atx(34)) {
      var tmp$ret$1;
      $l$block: {
       var snapshot = this.z13_1;
       try {
        this.z13_1 = this.z13_1 - 1 | 0, tmp$ret$1 = this.j17();
        break $l$block;
       } finally {
        this.z13_1 = snapshot;
       }
      }
      "null" === tmp$ret$1 && this.d16("Expected string literal but 'null' literal was found", this.z13_1 - 1 | 0, "Use 'coerceInputValues = true' in 'Json {}' builder to coerce nulls if property has a default value.");
     }
     var expected_0 = tokenDescription(charToTokenClass(expected)), position = this.z13_1 - 1 | 0, tmp$ret$2 = "Expected " + expected_0 + ", but had '" + (this.z13_1 === charSequenceLength(this.f1b()) || position < 0 ? "EOF" : toString_1(charSequenceGet(this.f1b(), position))) + "' instead";
     this.f17(tmp$ret$2, position);
    }, protoOf(AbstractJsonLexer).g17 = function() {
     var source = this.f1b(), cpos = this.z13_1;
     $l$loop_0: for (;-1 !== (cpos = this.g1b(cpos)); ) {
      var ch = charSequenceGet(source, cpos);
      if (ch !== _Char___init__impl__6a9atx(32) && ch !== _Char___init__impl__6a9atx(10) && ch !== _Char___init__impl__6a9atx(13) && ch !== _Char___init__impl__6a9atx(9)) return this.z13_1 = cpos, 
      charToTokenClass(ch);
      cpos = cpos + 1 | 0;
     }
     return this.z13_1 = cpos, 10;
    }, protoOf(AbstractJsonLexer).w18 = function(doConsume) {
     var current = this.i1b();
     current = this.g1b(current);
     var len = charSequenceLength(this.f1b()) - current | 0;
     if (len < 4 || -1 === current) return !1;
     var inductionVariable = 0;
     if (inductionVariable <= 3) do {
      var i = inductionVariable;
      if (inductionVariable = inductionVariable + 1 | 0, charSequenceGet("null", i) !== charSequenceGet(this.f1b(), current + i | 0)) return !1;
     } while (inductionVariable <= 3);
     return !(len > 4 && 0 === charToTokenClass(charSequenceGet(this.f1b(), current + 4 | 0))) && (doConsume && (this.z13_1 = current + 4 | 0), 
     !0);
    }, protoOf(AbstractJsonLexer).x18 = function(isLenient) {
     var tmp, token = this.g17();
     if (isLenient) {
      if (1 !== token && 0 !== token) return null;
      tmp = this.j17();
     } else {
      if (1 !== token) return null;
      tmp = this.i17();
     }
     var string = tmp;
     return this.b14_1 = string, string;
    }, protoOf(AbstractJsonLexer).l1b = function() {
     this.b14_1 = null;
    }, protoOf(AbstractJsonLexer).m1b = function(startPos, endPos) {
     var this_0 = this.f1b();
     return toString_0(charSequenceSubSequence(this_0, startPos, endPos));
    }, protoOf(AbstractJsonLexer).i17 = function() {
     return null != this.b14_1 ? takePeeked(this) : this.a19();
    }, protoOf(AbstractJsonLexer).consumeString2 = function(source, startPosition, current) {
     for (var currentPosition = current, lastPosition = startPosition, char = charSequenceGet(source, currentPosition), usedAppend = !1; char !== _Char___init__impl__6a9atx(34); ) char === _Char___init__impl__6a9atx(92) ? (usedAppend = !0, 
     -1 === (currentPosition = this.g1b(appendEscape(this, lastPosition, currentPosition))) && this.f17("Unexpected EOF", currentPosition), 
     lastPosition = currentPosition) : (currentPosition = currentPosition + 1 | 0) >= charSequenceLength(source) && (usedAppend = !0, 
     this.e1b(lastPosition, currentPosition), -1 === (currentPosition = this.g1b(currentPosition)) && this.f17("Unexpected EOF", currentPosition), 
     lastPosition = currentPosition), char = charSequenceGet(source, currentPosition);
     var string = usedAppend ? decodedString(this, lastPosition, currentPosition) : this.m1b(lastPosition, currentPosition);
     return this.z13_1 = currentPosition + 1 | 0, string;
    }, protoOf(AbstractJsonLexer).b19 = function() {
     var $this, result = this.j17();
     return "null" === result && charSequenceGet(($this = this).f1b(), $this.z13_1 - 1 | 0) !== _Char___init__impl__6a9atx(34) && this.f17("Unexpected 'null' value instead of string literal"), 
     result;
    }, protoOf(AbstractJsonLexer).j17 = function() {
     if (null != this.b14_1) return takePeeked(this);
     var current = this.i1b();
     (current >= charSequenceLength(this.f1b()) || -1 === current) && this.f17("EOF", current);
     var token = charToTokenClass(charSequenceGet(this.f1b(), current));
     if (1 === token) return this.i17();
     0 !== token && this.f17("Expected beginning of the string, but got " + toString_1(charSequenceGet(this.f1b(), current)));
     for (var usedAppend = !1; 0 === charToTokenClass(charSequenceGet(this.f1b(), current)); ) if ((current = current + 1 | 0) >= charSequenceLength(this.f1b())) {
      usedAppend = !0, this.e1b(this.z13_1, current);
      var eof = this.g1b(current);
      if (-1 === eof) return this.z13_1 = current, decodedString(this, 0, 0);
      current = eof;
     }
     var result = usedAppend ? decodedString(this, this.z13_1, current) : this.m1b(this.z13_1, current);
     return this.z13_1 = current, result;
    }, protoOf(AbstractJsonLexer).e1b = function(fromIndex, toIndex) {
     this.c14_1.s9(this.f1b(), fromIndex, toIndex);
    }, protoOf(AbstractJsonLexer).z18 = function(allowLenientStrings) {
     var tokenStack = ArrayList_init_$Create$(), lastToken = this.g17();
     if (8 !== lastToken && 6 !== lastToken) return this.j17(), Unit_instance;
     for (;;) if (1 !== (lastToken = this.g17())) {
      var tmp0_subject = lastToken;
      if (8 === tmp0_subject || 6 === tmp0_subject) tokenStack.e(lastToken); else if (9 === tmp0_subject) {
       if (8 !== last(tokenStack)) throw JsonDecodingException_0(this.z13_1, "found ] instead of } at path: " + this.a14_1.toString(), this.f1b());
       removeLast(tokenStack);
      } else if (7 === tmp0_subject) {
       if (6 !== last(tokenStack)) throw JsonDecodingException_0(this.z13_1, "found } instead of ] at path: " + this.a14_1.toString(), this.f1b());
       removeLast(tokenStack);
      } else 10 === tmp0_subject && this.f17("Unexpected end of input due to malformed JSON during ignoring unknown keys");
      if (this.l17(), 0 === tokenStack.k()) return Unit_instance;
     } else allowLenientStrings ? this.j17() : this.a19();
    }, protoOf(AbstractJsonLexer).toString = function() {
     return "JsonReader(source='" + toString_0(this.f1b()) + "', currentPosition=" + this.z13_1 + ")";
    }, protoOf(AbstractJsonLexer).y18 = function(key) {
     var processed = this.m1b(0, this.z13_1), lastIndexOf_0 = lastIndexOf(processed, key);
     throw new JsonDecodingException("Encountered an unknown key '" + key + "' at offset " + lastIndexOf_0 + " at path: " + this.a14_1.q16() + "\nUse 'ignoreUnknownKeys = true' in 'Json {}' builder or '@JsonIgnoreUnknownKeys' annotation to ignore unknown keys.\nJSON input: " + toString_0(minify(this.f1b(), lastIndexOf_0)));
    }, protoOf(AbstractJsonLexer).d16 = function(message, position, hint) {
     var hintMessage = 0 === charSequenceLength(hint) ? "" : "\n" + hint;
     throw JsonDecodingException_0(position, message + " at path: " + this.a14_1.q16() + hintMessage, this.f1b());
    }, protoOf(AbstractJsonLexer).f17 = function(message, position, hint, $super) {
     return position = position === VOID ? this.z13_1 : position, hint = hint === VOID ? "" : hint, 
     $super === VOID ? this.d16(message, position, hint) : $super.d16.call(this, message, position, hint);
    }, protoOf(AbstractJsonLexer).j19 = function() {
     var tmp, current = this.i1b();
     ((current = this.g1b(current)) >= charSequenceLength(this.f1b()) || -1 === current) && this.f17("EOF"), 
     charSequenceGet(this.f1b(), current) === _Char___init__impl__6a9atx(34) ? ((current = current + 1 | 0) === charSequenceLength(this.f1b()) && this.f17("EOF"), 
     tmp = !0) : tmp = !1;
     var hasQuotation = tmp, accumulator = new Long(0, 0), exponentAccumulator = new Long(0, 0), isNegative = !1, isExponentPositive = !1, hasExponent = !1, start = current;
     $l$loop_4: for (;current !== charSequenceLength(this.f1b()); ) {
      var ch = charSequenceGet(this.f1b(), current);
      if (ch !== _Char___init__impl__6a9atx(101) && ch !== _Char___init__impl__6a9atx(69) || hasExponent) if (ch === _Char___init__impl__6a9atx(45) && hasExponent) current === start && this.f17("Unexpected symbol '-' in numeric literal"), 
      isExponentPositive = !1, current = current + 1 | 0; else if (ch === _Char___init__impl__6a9atx(43) && hasExponent) current === start && this.f17("Unexpected symbol '+' in numeric literal"), 
      isExponentPositive = !0, current = current + 1 | 0; else if (ch !== _Char___init__impl__6a9atx(45)) {
       if (0 !== charToTokenClass(ch)) break $l$loop_4;
       current = current + 1 | 0;
       var digit = Char__minus_impl_a2frrh(ch, _Char___init__impl__6a9atx(48));
       0 <= digit && digit <= 9 || this.f17("Unexpected symbol '" + toString_1(ch) + "' in numeric literal"), 
       hasExponent ? exponentAccumulator = exponentAccumulator.z1(toLong(10)).x1(toLong(digit)) : (accumulator = accumulator.z1(toLong(10)).y1(toLong(digit))).b1(new Long(0, 0)) > 0 && this.f17("Numeric value overflow");
      } else current !== start && this.f17("Unexpected symbol '-' in numeric literal"), 
      isNegative = !0, current = current + 1 | 0; else current === start && this.f17("Unexpected symbol " + toString_1(ch) + " in numeric literal"), 
      isExponentPositive = !0, hasExponent = !0, current = current + 1 | 0;
     }
     var tmp_0, hasChars = !(current === start);
     if ((start === current || isNegative && start === (current - 1 | 0)) && this.f17("Expected numeric literal"), 
     hasQuotation && (hasChars || this.f17("EOF"), charSequenceGet(this.f1b(), current) !== _Char___init__impl__6a9atx(34) && this.f17("Expected closing quotation mark"), 
     current = current + 1 | 0), this.z13_1 = current, hasExponent) {
      var doubleAccumulator = accumulator.f2() * function(exponentAccumulator, isExponentPositive) {
       var tmp;
       switch (isExponentPositive) {
       case !1:
        var x = -exponentAccumulator.f2();
        tmp = Math.pow(10, x);
        break;

       case !0:
        var x_0 = exponentAccumulator.f2();
        tmp = Math.pow(10, x_0);
        break;

       default:
        noWhenBranchMatchedException();
       }
       return tmp;
      }(exponentAccumulator, isExponentPositive);
      (doubleAccumulator > new Long(-1, 2147483647).f2() || doubleAccumulator < new Long(0, -2147483648).f2()) && this.f17("Numeric value overflow"), 
      Math.floor(doubleAccumulator) !== doubleAccumulator && this.f17("Can't convert " + doubleAccumulator + " to Long"), 
      accumulator = numberToLong(doubleAccumulator);
     }
     return isNegative ? tmp_0 = accumulator : accumulator.equals(new Long(0, -2147483648)) ? this.f17("Numeric value overflow") : tmp_0 = accumulator.b2(), 
     tmp_0;
    }, protoOf(AbstractJsonLexer).e15 = function() {
     var result = this.j19();
     if (10 !== this.l17()) {
      tokenDescription(10);
      var position = this.z13_1 - 1 | 0, tmp$ret$0 = "Expected input to contain a single valid number, but got '" + (this.z13_1 === charSequenceLength(this.f1b()) || position < 0 ? "EOF" : toString_1(charSequenceGet(this.f1b(), position))) + "' after it";
      this.f17(tmp$ret$0, position);
     }
     return result;
    }, protoOf(StringJsonLexerWithComments).l17 = function() {
     var source = this.f1b(), cpos = this.i1b();
     return cpos >= source.length || -1 === cpos ? 10 : (this.z13_1 = cpos + 1 | 0, charToTokenClass(charSequenceGet(source, cpos)));
    }, protoOf(StringJsonLexerWithComments).h17 = function() {
     var current = this.i1b();
     return !(current >= this.f1b().length || -1 === current) && this.j1b(charSequenceGet(this.f1b(), current));
    }, protoOf(StringJsonLexerWithComments).u18 = function(expected) {
     var source = this.f1b(), current = this.i1b();
     (current >= source.length || -1 === current) && (this.z13_1 = -1, this.k1b(expected));
     var c = charSequenceGet(source, current);
     if (this.z13_1 = current + 1 | 0, c === expected) return Unit_instance;
     this.k1b(expected);
    }, protoOf(StringJsonLexerWithComments).g17 = function() {
     var source = this.f1b(), cpos = this.i1b();
     return cpos >= source.length || -1 === cpos ? 10 : (this.z13_1 = cpos, charToTokenClass(charSequenceGet(source, cpos)));
    }, protoOf(StringJsonLexerWithComments).i1b = function() {
     var current = this.z13_1;
     if (-1 === current) return current;
     var source = this.f1b();
     $l$loop_1: for (;current < source.length; ) {
      var c = charSequenceGet(source, current);
      if (c !== _Char___init__impl__6a9atx(32) && c !== _Char___init__impl__6a9atx(10) && c !== _Char___init__impl__6a9atx(13) && c !== _Char___init__impl__6a9atx(9)) {
       if (c === _Char___init__impl__6a9atx(47) && (current + 1 | 0) < source.length) {
        var tmp0_subject = charSequenceGet(source, current + 1 | 0);
        if (tmp0_subject === _Char___init__impl__6a9atx(47)) {
         current = -1 === (current = indexOf_0(source, _Char___init__impl__6a9atx(10), current + 2 | 0)) ? source.length : current + 1 | 0;
         continue $l$loop_1;
        }
        if (tmp0_subject === _Char___init__impl__6a9atx(42)) {
         -1 === (current = indexOf(source, "*/", current + 2 | 0)) ? (this.z13_1 = source.length, 
         this.f17('Expected end of the block comment: "*/", but had EOF instead')) : current = current + 2 | 0;
         continue $l$loop_1;
        }
       }
       break $l$loop_1;
      }
      current = current + 1 | 0;
     }
     return this.z13_1 = current, current;
    }, protoOf(StringJsonLexer).f1b = function() {
     return this.y1b_1;
    }, protoOf(StringJsonLexer).g1b = function(position) {
     return position < this.f1b().length ? position : -1;
    }, protoOf(StringJsonLexer).l17 = function() {
     for (var source = this.f1b(), cpos = this.z13_1; -1 !== cpos && cpos < source.length; ) {
      var _unary__edvuaz = cpos;
      cpos = _unary__edvuaz + 1 | 0;
      var c = charSequenceGet(source, _unary__edvuaz);
      if (c !== _Char___init__impl__6a9atx(32) && c !== _Char___init__impl__6a9atx(10) && c !== _Char___init__impl__6a9atx(13) && c !== _Char___init__impl__6a9atx(9)) return this.z13_1 = cpos, 
      charToTokenClass(c);
     }
     return this.z13_1 = source.length, 10;
    }, protoOf(StringJsonLexer).h17 = function() {
     var current = this.z13_1;
     if (-1 === current) return !1;
     for (var source = this.f1b(); current < source.length; ) {
      var c = charSequenceGet(source, current);
      if (c !== _Char___init__impl__6a9atx(32) && c !== _Char___init__impl__6a9atx(10) && c !== _Char___init__impl__6a9atx(13) && c !== _Char___init__impl__6a9atx(9)) return this.z13_1 = current, 
      this.j1b(c);
      current = current + 1 | 0;
     }
     return this.z13_1 = current, !1;
    }, protoOf(StringJsonLexer).i1b = function() {
     var current = this.z13_1;
     if (-1 === current) return current;
     var source = this.f1b();
     $l$loop: for (;current < source.length; ) {
      var c = charSequenceGet(source, current);
      if (c !== _Char___init__impl__6a9atx(32) && c !== _Char___init__impl__6a9atx(10) && c !== _Char___init__impl__6a9atx(13) && c !== _Char___init__impl__6a9atx(9)) break $l$loop;
      current = current + 1 | 0;
     }
     return this.z13_1 = current, current;
    }, protoOf(StringJsonLexer).u18 = function(expected) {
     -1 === this.z13_1 && this.k1b(expected);
     for (var source = this.f1b(), cpos = this.z13_1; cpos < source.length; ) {
      var _unary__edvuaz = cpos;
      cpos = _unary__edvuaz + 1 | 0;
      var c = charSequenceGet(source, _unary__edvuaz);
      if (c !== _Char___init__impl__6a9atx(32) && c !== _Char___init__impl__6a9atx(10) && c !== _Char___init__impl__6a9atx(13) && c !== _Char___init__impl__6a9atx(9)) {
       if (this.z13_1 = cpos, c === expected) return Unit_instance;
       this.k1b(expected);
      }
     }
     this.z13_1 = -1, this.k1b(expected);
    }, protoOf(StringJsonLexer).a19 = function() {
     this.u18(_Char___init__impl__6a9atx(34));
     var current = this.z13_1, closingQuote = indexOf_0(this.f1b(), _Char___init__impl__6a9atx(34), current);
     if (-1 === closingQuote) {
      this.j17();
      var expected = tokenDescription(1), position = this.z13_1, tmp$ret$0 = "Expected " + expected + ", but had '" + (this.z13_1 === charSequenceLength(this.f1b()) || position < 0 ? "EOF" : toString_1(charSequenceGet(this.f1b(), position))) + "' instead";
      this.f17(tmp$ret$0, position);
     }
     var inductionVariable = current;
     if (inductionVariable < closingQuote) do {
      var i = inductionVariable;
      if (inductionVariable = inductionVariable + 1 | 0, charSequenceGet(this.f1b(), i) === _Char___init__impl__6a9atx(92)) return this.consumeString2(this.f1b(), this.z13_1, i);
     } while (inductionVariable < closingQuote);
     return this.z13_1 = closingQuote + 1 | 0, this.f1b().substring(current, closingQuote);
    }, protoOf(StringJsonLexer).e19 = function(keyToMatch, isLenient) {
     var positionSnapshot = this.z13_1;
     try {
      return 6 !== this.l17() || this.x18(isLenient) !== keyToMatch ? null : (this.l1b(), 
      5 !== this.l17() ? null : this.x18(isLenient));
     } finally {
      this.z13_1 = positionSnapshot, this.l1b();
     }
    }, protoOf(JsonToStringWriter).r15 = function(value) {
     this.p13_1.v9(value);
    }, protoOf(JsonToStringWriter).n15 = function(char) {
     this.p13_1.j6(char);
    }, protoOf(JsonToStringWriter).p15 = function(text) {
     this.p13_1.i6(text);
    }, protoOf(JsonToStringWriter).u15 = function(text) {
     printQuoted(this.p13_1, text);
    }, protoOf(JsonToStringWriter).q13 = function() {
     this.p13_1.x9();
    }, protoOf(JsonToStringWriter).toString = function() {
     return this.p13_1.toString();
    }, new Companion, new Companion_0, new Companion_1, new Companion_2, Tombstone_instance = new Tombstone, 
    _.$_$ = _.$_$ || {}, _.$_$.a = Default_getInstance;
   }(module.exports, __webpack_require__(9539), __webpack_require__(7036));
  },
  2613: module => {
   "use strict";
   module.exports = require("assert");
  },
  290: module => {
   "use strict";
   module.exports = require("async_hooks");
  },
  181: module => {
   "use strict";
   module.exports = require("buffer");
  },
  5317: module => {
   "use strict";
   module.exports = require("child_process");
  },
  4236: module => {
   "use strict";
   module.exports = require("console");
  },
  6982: module => {
   "use strict";
   module.exports = require("crypto");
  },
  1637: module => {
   "use strict";
   module.exports = require("diagnostics_channel");
  },
  4434: module => {
   "use strict";
   module.exports = require("events");
  },
  9896: module => {
   "use strict";
   module.exports = require("fs");
  },
  8611: module => {
   "use strict";
   module.exports = require("http");
  },
  5675: module => {
   "use strict";
   module.exports = require("http2");
  },
  5692: module => {
   "use strict";
   module.exports = require("https");
  },
  9278: module => {
   "use strict";
   module.exports = require("net");
  },
  7598: module => {
   "use strict";
   module.exports = require("node:crypto");
  },
  8474: module => {
   "use strict";
   module.exports = require("node:events");
  },
  3024: module => {
   "use strict";
   module.exports = require("node:fs");
  },
  1455: module => {
   "use strict";
   module.exports = require("node:fs/promises");
  },
  7067: module => {
   "use strict";
   module.exports = require("node:http");
  },
  8161: module => {
   "use strict";
   module.exports = require("node:os");
  },
  6760: module => {
   "use strict";
   module.exports = require("node:path");
  },
  1708: module => {
   "use strict";
   module.exports = require("node:process");
  },
  7075: module => {
   "use strict";
   module.exports = require("node:stream");
  },
  6466: module => {
   "use strict";
   module.exports = require("node:stream/promises");
  },
  3136: module => {
   "use strict";
   module.exports = require("node:url");
  },
  7975: module => {
   "use strict";
   module.exports = require("node:util");
  },
  857: module => {
   "use strict";
   module.exports = require("os");
  },
  6928: module => {
   "use strict";
   module.exports = require("path");
  },
  2987: module => {
   "use strict";
   module.exports = require("perf_hooks");
  },
  3480: module => {
   "use strict";
   module.exports = require("querystring");
  },
  2203: module => {
   "use strict";
   module.exports = require("stream");
  },
  3774: module => {
   "use strict";
   module.exports = require("stream/web");
  },
  3193: module => {
   "use strict";
   module.exports = require("string_decoder");
  },
  3557: module => {
   "use strict";
   module.exports = require("timers");
  },
  4756: module => {
   "use strict";
   module.exports = require("tls");
  },
  2018: module => {
   "use strict";
   module.exports = require("tty");
  },
  7016: module => {
   "use strict";
   module.exports = require("url");
  },
  9023: module => {
   "use strict";
   module.exports = require("util");
  },
  8253: module => {
   "use strict";
   module.exports = require("util/types");
  },
  8167: module => {
   "use strict";
   module.exports = require("worker_threads");
  },
  3106: module => {
   "use strict";
   module.exports = require("zlib");
  },
  5924: (__unused_webpack_module, exports) => {
   "use strict";
   exports.w = void 0, exports.w = {
    operationRequestMap: new WeakMap
   };
  },
  4417: (__unused_webpack_module, exports) => {
   "use strict";
   exports.w = void 0, exports.w = {
    instrumenterImplementation: void 0
   };
  },
  3139: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const WritableStream = __webpack_require__(7075).Writable, inherits = __webpack_require__(7975).inherits, StreamSearch = __webpack_require__(1409), PartStream = __webpack_require__(3691), HeaderParser = __webpack_require__(2556), B_ONEDASH = Buffer.from("-"), B_CRLF = Buffer.from("\r\n"), EMPTY_FN = function() {};
   function Dicer(cfg) {
    if (!(this instanceof Dicer)) return new Dicer(cfg);
    if (WritableStream.call(this, cfg), !cfg || !cfg.headerFirst && "string" != typeof cfg.boundary) throw new TypeError("Boundary required");
    "string" == typeof cfg.boundary ? this.setBoundary(cfg.boundary) : this._bparser = void 0, 
    this._headerFirst = cfg.headerFirst, this._dashes = 0, this._parts = 0, this._finished = !1, 
    this._realFinish = !1, this._isPreamble = !0, this._justMatched = !1, this._firstWrite = !0, 
    this._inHeader = !0, this._part = void 0, this._cb = void 0, this._ignoreData = !1, 
    this._partOpts = {
     highWaterMark: cfg.partHwm
    }, this._pause = !1;
    const self = this;
    this._hparser = new HeaderParser(cfg), this._hparser.on("header", (function(header) {
     self._inHeader = !1, self._part.emit("header", header);
    }));
   }
   inherits(Dicer, WritableStream), Dicer.prototype.emit = function(ev) {
    if ("finish" !== ev || this._realFinish) WritableStream.prototype.emit.apply(this, arguments); else if (!this._finished) {
     const self = this;
     process.nextTick((function() {
      if (self.emit("error", new Error("Unexpected end of multipart data")), self._part && !self._ignoreData) {
       const type = self._isPreamble ? "Preamble" : "Part";
       return self._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data")), 
       self._part.push(null), void process.nextTick((function() {
        self._realFinish = !0, self.emit("finish"), self._realFinish = !1;
       }));
      }
      self._realFinish = !0, self.emit("finish"), self._realFinish = !1;
     }));
    }
   }, Dicer.prototype._write = function(data, encoding, cb) {
    if (!this._hparser && !this._bparser) return cb();
    if (this._headerFirst && this._isPreamble) {
     this._part || (this._part = new PartStream(this._partOpts), 0 !== this.listenerCount("preamble") ? this.emit("preamble", this._part) : this._ignore());
     const r = this._hparser.push(data);
     if (this._inHeader || void 0 === r || !(r < data.length)) return cb();
     data = data.slice(r);
    }
    this._firstWrite && (this._bparser.push(B_CRLF), this._firstWrite = !1), this._bparser.push(data), 
    this._pause ? this._cb = cb : cb();
   }, Dicer.prototype.reset = function() {
    this._part = void 0, this._bparser = void 0, this._hparser = void 0;
   }, Dicer.prototype.setBoundary = function(boundary) {
    const self = this;
    this._bparser = new StreamSearch("\r\n--" + boundary), this._bparser.on("info", (function(isMatch, data, start, end) {
     self._oninfo(isMatch, data, start, end);
    }));
   }, Dicer.prototype._ignore = function() {
    this._part && !this._ignoreData && (this._ignoreData = !0, this._part.on("error", EMPTY_FN), 
    this._part.resume());
   }, Dicer.prototype._oninfo = function(isMatch, data, start, end) {
    let buf;
    const self = this;
    let r, i = 0, shouldWriteMore = !0;
    if (!this._part && this._justMatched && data) {
     for (;this._dashes < 2 && start + i < end; ) {
      if (45 !== data[start + i]) {
       this._dashes && (buf = B_ONEDASH), this._dashes = 0;
       break;
      }
      ++i, ++this._dashes;
     }
     if (2 === this._dashes && (start + i < end && 0 !== this.listenerCount("trailer") && this.emit("trailer", data.slice(start + i, end)), 
     this.reset(), this._finished = !0, 0 === self._parts && (self._realFinish = !0, 
     self.emit("finish"), self._realFinish = !1)), this._dashes) return;
    }
    this._justMatched && (this._justMatched = !1), this._part || (this._part = new PartStream(this._partOpts), 
    this._part._read = function(n) {
     self._unpause();
    }, this._isPreamble && 0 !== this.listenerCount("preamble") ? this.emit("preamble", this._part) : !0 !== this._isPreamble && 0 !== this.listenerCount("part") ? this.emit("part", this._part) : this._ignore(), 
    this._isPreamble || (this._inHeader = !0)), data && start < end && !this._ignoreData && (this._isPreamble || !this._inHeader ? (buf && (shouldWriteMore = this._part.push(buf)), 
    shouldWriteMore = this._part.push(data.slice(start, end)), shouldWriteMore || (this._pause = !0)) : !this._isPreamble && this._inHeader && (buf && this._hparser.push(buf), 
    r = this._hparser.push(data.slice(start, end)), !this._inHeader && void 0 !== r && r < end && this._oninfo(!1, data, start + r, end))), 
    isMatch && (this._hparser.reset(), this._isPreamble ? this._isPreamble = !1 : start !== end && (++this._parts, 
    this._part.on("end", (function() {
     0 == --self._parts && (self._finished ? (self._realFinish = !0, self.emit("finish"), 
     self._realFinish = !1) : self._unpause());
    }))), this._part.push(null), this._part = void 0, this._ignoreData = !1, this._justMatched = !0, 
    this._dashes = 0);
   }, Dicer.prototype._unpause = function() {
    if (this._pause && (this._pause = !1, this._cb)) {
     const cb = this._cb;
     this._cb = void 0, cb();
    }
   }, module.exports = Dicer;
  },
  2556: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const EventEmitter = __webpack_require__(8474).EventEmitter, inherits = __webpack_require__(7975).inherits, getLimit = __webpack_require__(4808), StreamSearch = __webpack_require__(1409), B_DCRLF = Buffer.from("\r\n\r\n"), RE_CRLF = /\r\n/g, RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
   function HeaderParser(cfg) {
    EventEmitter.call(this), cfg = cfg || {};
    const self = this;
    this.nread = 0, this.maxed = !1, this.npairs = 0, this.maxHeaderPairs = getLimit(cfg, "maxHeaderPairs", 2e3), 
    this.maxHeaderSize = getLimit(cfg, "maxHeaderSize", 81920), this.buffer = "", this.header = {}, 
    this.finished = !1, this.ss = new StreamSearch(B_DCRLF), this.ss.on("info", (function(isMatch, data, start, end) {
     data && !self.maxed && (self.nread + end - start >= self.maxHeaderSize ? (end = self.maxHeaderSize - self.nread + start, 
     self.nread = self.maxHeaderSize, self.maxed = !0) : self.nread += end - start, self.buffer += data.toString("binary", start, end)), 
     isMatch && self._finish();
    }));
   }
   inherits(HeaderParser, EventEmitter), HeaderParser.prototype.push = function(data) {
    const r = this.ss.push(data);
    if (this.finished) return r;
   }, HeaderParser.prototype.reset = function() {
    this.finished = !1, this.buffer = "", this.header = {}, this.ss.reset();
   }, HeaderParser.prototype._finish = function() {
    this.buffer && this._parseHeader(), this.ss.matches = this.ss.maxMatches;
    const header = this.header;
    this.header = {}, this.buffer = "", this.finished = !0, this.nread = this.npairs = 0, 
    this.maxed = !1, this.emit("header", header);
   }, HeaderParser.prototype._parseHeader = function() {
    if (this.npairs === this.maxHeaderPairs) return;
    const lines = this.buffer.split(RE_CRLF), len = lines.length;
    let m, h;
    for (var i = 0; i < len; ++i) {
     if (0 === lines[i].length) continue;
     if (("\t" === lines[i][0] || " " === lines[i][0]) && h) {
      this.header[h][this.header[h].length - 1] += lines[i];
      continue;
     }
     const posColon = lines[i].indexOf(":");
     if (-1 === posColon || 0 === posColon) return;
     if (m = RE_HDR.exec(lines[i]), h = m[1].toLowerCase(), this.header[h] = this.header[h] || [], 
     this.header[h].push(m[2] || ""), ++this.npairs === this.maxHeaderPairs) break;
    }
   }, module.exports = HeaderParser;
  },
  3691: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const inherits = __webpack_require__(7975).inherits, ReadableStream = __webpack_require__(7075).Readable;
   function PartStream(opts) {
    ReadableStream.call(this, opts);
   }
   inherits(PartStream, ReadableStream), PartStream.prototype._read = function(n) {}, 
   module.exports = PartStream;
  },
  1409: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const EventEmitter = __webpack_require__(8474).EventEmitter;
   function SBMH(needle) {
    if ("string" == typeof needle && (needle = Buffer.from(needle)), !Buffer.isBuffer(needle)) throw new TypeError("The needle has to be a String or a Buffer.");
    const needleLength = needle.length;
    if (0 === needleLength) throw new Error("The needle cannot be an empty String/Buffer.");
    if (needleLength > 256) throw new Error("The needle cannot have a length bigger than 256.");
    this.maxMatches = 1 / 0, this.matches = 0, this._occ = new Array(256).fill(needleLength), 
    this._lookbehind_size = 0, this._needle = needle, this._bufpos = 0, this._lookbehind = Buffer.alloc(needleLength);
    for (var i = 0; i < needleLength - 1; ++i) this._occ[needle[i]] = needleLength - 1 - i;
   }
   (0, __webpack_require__(7975).inherits)(SBMH, EventEmitter), SBMH.prototype.reset = function() {
    this._lookbehind_size = 0, this.matches = 0, this._bufpos = 0;
   }, SBMH.prototype.push = function(chunk, pos) {
    Buffer.isBuffer(chunk) || (chunk = Buffer.from(chunk, "binary"));
    const chlen = chunk.length;
    let r;
    for (this._bufpos = pos || 0; r !== chlen && this.matches < this.maxMatches; ) r = this._sbmh_feed(chunk);
    return r;
   }, SBMH.prototype._sbmh_feed = function(data) {
    const len = data.length, needle = this._needle, needleLength = needle.length, lastNeedleChar = needle[needleLength - 1];
    let ch, pos = -this._lookbehind_size;
    if (pos < 0) {
     for (;pos < 0 && pos <= len - needleLength; ) {
      if (ch = this._sbmh_lookup_char(data, pos + needleLength - 1), ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) return this._lookbehind_size = 0, 
      ++this.matches, this.emit("info", !0), this._bufpos = pos + needleLength;
      pos += this._occ[ch];
     }
     if (pos < 0) for (;pos < 0 && !this._sbmh_memcmp(data, pos, len - pos); ) ++pos;
     if (!(pos >= 0)) {
      const bytesToCutOff = this._lookbehind_size + pos;
      return bytesToCutOff > 0 && this.emit("info", !1, this._lookbehind, 0, bytesToCutOff), 
      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff), 
      this._lookbehind_size -= bytesToCutOff, data.copy(this._lookbehind, this._lookbehind_size), 
      this._lookbehind_size += len, this._bufpos = len, len;
     }
     this.emit("info", !1, this._lookbehind, 0, this._lookbehind_size), this._lookbehind_size = 0;
    }
    if (pos += (pos >= 0) * this._bufpos, -1 !== data.indexOf(needle, pos)) return pos = data.indexOf(needle, pos), 
    ++this.matches, pos > 0 ? this.emit("info", !0, data, this._bufpos, pos) : this.emit("info", !0), 
    this._bufpos = pos + needleLength;
    for (pos = len - needleLength; pos < len && (data[pos] !== needle[0] || 0 !== Buffer.compare(data.subarray(pos, pos + len - pos), needle.subarray(0, len - pos))); ) ++pos;
    return pos < len && (data.copy(this._lookbehind, 0, pos, pos + (len - pos)), this._lookbehind_size = len - pos), 
    pos > 0 && this.emit("info", !1, data, this._bufpos, pos < len ? pos : len), this._bufpos = len, 
    len;
   }, SBMH.prototype._sbmh_lookup_char = function(data, pos) {
    return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
   }, SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
    for (var i = 0; i < len; ++i) if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) return !1;
    return !0;
   }, module.exports = SBMH;
  },
  1484: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const WritableStream = __webpack_require__(7075).Writable, {inherits} = __webpack_require__(7975), Dicer = __webpack_require__(3139), MultipartParser = __webpack_require__(3843), UrlencodedParser = __webpack_require__(7094), parseParams = __webpack_require__(7722);
   function Busboy(opts) {
    if (!(this instanceof Busboy)) return new Busboy(opts);
    if ("object" != typeof opts) throw new TypeError("Busboy expected an options-Object.");
    if ("object" != typeof opts.headers) throw new TypeError("Busboy expected an options-Object with headers-attribute.");
    if ("string" != typeof opts.headers["content-type"]) throw new TypeError("Missing Content-Type-header.");
    const {headers, ...streamOptions} = opts;
    this.opts = {
     autoDestroy: !1,
     ...streamOptions
    }, WritableStream.call(this, this.opts), this._done = !1, this._parser = this.getParserByHeaders(headers), 
    this._finished = !1;
   }
   inherits(Busboy, WritableStream), Busboy.prototype.emit = function(ev) {
    if ("finish" === ev) {
     if (!this._done) return void this._parser?.end();
     if (this._finished) return;
     this._finished = !0;
    }
    WritableStream.prototype.emit.apply(this, arguments);
   }, Busboy.prototype.getParserByHeaders = function(headers) {
    const parsed = parseParams(headers["content-type"]), cfg = {
     defCharset: this.opts.defCharset,
     fileHwm: this.opts.fileHwm,
     headers,
     highWaterMark: this.opts.highWaterMark,
     isPartAFile: this.opts.isPartAFile,
     limits: this.opts.limits,
     parsedConType: parsed,
     preservePath: this.opts.preservePath
    };
    if (MultipartParser.detect.test(parsed[0])) return new MultipartParser(this, cfg);
    if (UrlencodedParser.detect.test(parsed[0])) return new UrlencodedParser(this, cfg);
    throw new Error("Unsupported Content-Type.");
   }, Busboy.prototype._write = function(chunk, encoding, cb) {
    this._parser.write(chunk, cb);
   }, module.exports = Busboy, module.exports.default = Busboy, module.exports.Busboy = Busboy, 
   module.exports.Dicer = Dicer;
  },
  3843: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const {Readable} = __webpack_require__(7075), {inherits} = __webpack_require__(7975), Dicer = __webpack_require__(3139), parseParams = __webpack_require__(7722), decodeText = __webpack_require__(494), basename = __webpack_require__(2429), getLimit = __webpack_require__(4808), RE_BOUNDARY = /^boundary$/i, RE_FIELD = /^form-data$/i, RE_CHARSET = /^charset$/i, RE_FILENAME = /^filename$/i, RE_NAME = /^name$/i;
   function Multipart(boy, cfg) {
    let i, len;
    const self = this;
    let boundary;
    const limits = cfg.limits, isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => "application/octet-stream" === contentType || void 0 !== fileName), parsedConType = cfg.parsedConType || [], defCharset = cfg.defCharset || "utf8", preservePath = cfg.preservePath, fileOpts = {
     highWaterMark: cfg.fileHwm
    };
    for (i = 0, len = parsedConType.length; i < len; ++i) if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
     boundary = parsedConType[i][1];
     break;
    }
    function checkFinished() {
     0 === nends && finished && !boy._done && (finished = !1, self.end());
    }
    if ("string" != typeof boundary) throw new Error("Multipart: Boundary not found");
    const fieldSizeLimit = getLimit(limits, "fieldSize", 1048576), fileSizeLimit = getLimit(limits, "fileSize", 1 / 0), filesLimit = getLimit(limits, "files", 1 / 0), fieldsLimit = getLimit(limits, "fields", 1 / 0), partsLimit = getLimit(limits, "parts", 1 / 0), headerPairsLimit = getLimit(limits, "headerPairs", 2e3), headerSizeLimit = getLimit(limits, "headerSize", 81920);
    let curFile, curField, nfiles = 0, nfields = 0, nends = 0, finished = !1;
    this._needDrain = !1, this._pause = !1, this._cb = void 0, this._nparts = 0, this._boy = boy;
    const parserCfg = {
     boundary,
     maxHeaderPairs: headerPairsLimit,
     maxHeaderSize: headerSizeLimit,
     partHwm: fileOpts.highWaterMark,
     highWaterMark: cfg.highWaterMark
    };
    this.parser = new Dicer(parserCfg), this.parser.on("drain", (function() {
     if (self._needDrain = !1, self._cb && !self._pause) {
      const cb = self._cb;
      self._cb = void 0, cb();
     }
    })).on("part", (function onPart(part) {
     if (++self._nparts > partsLimit) return self.parser.removeListener("part", onPart), 
     self.parser.on("part", skipPart), boy.hitPartsLimit = !0, boy.emit("partsLimit"), 
     skipPart(part);
     if (curField) {
      const field = curField;
      field.emit("end"), field.removeAllListeners("end");
     }
     part.on("header", (function(header) {
      let contype, fieldname, parsed, charset, encoding, filename, onData, onEnd, nsize = 0;
      if (header["content-type"] && (parsed = parseParams(header["content-type"][0]), 
      parsed[0])) for (contype = parsed[0].toLowerCase(), i = 0, len = parsed.length; i < len; ++i) if (RE_CHARSET.test(parsed[i][0])) {
       charset = parsed[i][1].toLowerCase();
       break;
      }
      if (void 0 === contype && (contype = "text/plain"), void 0 === charset && (charset = defCharset), 
      !header["content-disposition"]) return skipPart(part);
      if (parsed = parseParams(header["content-disposition"][0]), !RE_FIELD.test(parsed[0])) return skipPart(part);
      for (i = 0, len = parsed.length; i < len; ++i) RE_NAME.test(parsed[i][0]) ? fieldname = parsed[i][1] : RE_FILENAME.test(parsed[i][0]) && (filename = parsed[i][1], 
      preservePath || (filename = basename(filename)));
      if (encoding = header["content-transfer-encoding"] ? header["content-transfer-encoding"][0].toLowerCase() : "7bit", 
      isPartAFile(fieldname, contype, filename)) {
       if (nfiles === filesLimit) return boy.hitFilesLimit || (boy.hitFilesLimit = !0, 
       boy.emit("filesLimit")), skipPart(part);
       if (++nfiles, 0 === boy.listenerCount("file")) return void self.parser._ignore();
       ++nends;
       const file = new FileStream(fileOpts);
       curFile = file, file.on("end", (function() {
        if (--nends, self._pause = !1, checkFinished(), self._cb && !self._needDrain) {
         const cb = self._cb;
         self._cb = void 0, cb();
        }
       })), file._read = function(n) {
        if (self._pause && (self._pause = !1, self._cb && !self._needDrain)) {
         const cb = self._cb;
         self._cb = void 0, cb();
        }
       }, boy.emit("file", fieldname, file, filename, encoding, contype), onData = function(data) {
        if ((nsize += data.length) > fileSizeLimit) {
         const extralen = fileSizeLimit - nsize + data.length;
         return extralen > 0 && file.push(data.slice(0, extralen)), file.truncated = !0, 
         file.bytesRead = fileSizeLimit, part.removeAllListeners("data"), void file.emit("limit");
        }
        file.push(data) || (self._pause = !0), file.bytesRead = nsize;
       }, onEnd = function() {
        curFile = void 0, file.push(null);
       };
      } else {
       if (nfields === fieldsLimit) return boy.hitFieldsLimit || (boy.hitFieldsLimit = !0, 
       boy.emit("fieldsLimit")), skipPart(part);
       ++nfields, ++nends;
       let buffer = "", truncated = !1;
       curField = part, onData = function(data) {
        if ((nsize += data.length) > fieldSizeLimit) {
         const extralen = fieldSizeLimit - (nsize - data.length);
         buffer += data.toString("binary", 0, extralen), truncated = !0, part.removeAllListeners("data");
        } else buffer += data.toString("binary");
       }, onEnd = function() {
        curField = void 0, buffer.length && (buffer = decodeText(buffer, "binary", charset)), 
        boy.emit("field", fieldname, buffer, !1, truncated, encoding, contype), --nends, 
        checkFinished();
       };
      }
      part._readableState.sync = !1, part.on("data", onData), part.on("end", onEnd);
     })).on("error", (function(err) {
      curFile && curFile.emit("error", err);
     }));
    })).on("error", (function(err) {
     boy.emit("error", err);
    })).on("finish", (function() {
     finished = !0, checkFinished();
    }));
   }
   function skipPart(part) {
    part.resume();
   }
   function FileStream(opts) {
    Readable.call(this, opts), this.bytesRead = 0, this.truncated = !1;
   }
   Multipart.detect = /^multipart\/form-data/i, Multipart.prototype.write = function(chunk, cb) {
    const r = this.parser.write(chunk);
    r && !this._pause ? cb() : (this._needDrain = !r, this._cb = cb);
   }, Multipart.prototype.end = function() {
    const self = this;
    self.parser.writable ? self.parser.end() : self._boy._done || process.nextTick((function() {
     self._boy._done = !0, self._boy.emit("finish");
    }));
   }, inherits(FileStream, Readable), FileStream.prototype._read = function(n) {}, 
   module.exports = Multipart;
  },
  7094: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const Decoder = __webpack_require__(5947), decodeText = __webpack_require__(494), getLimit = __webpack_require__(4808), RE_CHARSET = /^charset$/i;
   function UrlEncoded(boy, cfg) {
    const limits = cfg.limits, parsedConType = cfg.parsedConType;
    let charset;
    this.boy = boy, this.fieldSizeLimit = getLimit(limits, "fieldSize", 1048576), this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100), 
    this.fieldsLimit = getLimit(limits, "fields", 1 / 0);
    for (var i = 0, len = parsedConType.length; i < len; ++i) if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
     charset = parsedConType[i][1].toLowerCase();
     break;
    }
    void 0 === charset && (charset = cfg.defCharset || "utf8"), this.decoder = new Decoder, 
    this.charset = charset, this._fields = 0, this._state = "key", this._checkingBytes = !0, 
    this._bytesKey = 0, this._bytesVal = 0, this._key = "", this._val = "", this._keyTrunc = !1, 
    this._valTrunc = !1, this._hitLimit = !1;
   }
   UrlEncoded.detect = /^application\/x-www-form-urlencoded/i, UrlEncoded.prototype.write = function(data, cb) {
    if (this._fields === this.fieldsLimit) return this.boy.hitFieldsLimit || (this.boy.hitFieldsLimit = !0, 
    this.boy.emit("fieldsLimit")), cb();
    let idxeq, idxamp, i, p = 0;
    const len = data.length;
    for (;p < len; ) if ("key" === this._state) {
     for (idxeq = idxamp = void 0, i = p; i < len; ++i) {
      if (this._checkingBytes || ++p, 61 === data[i]) {
       idxeq = i;
       break;
      }
      if (38 === data[i]) {
       idxamp = i;
       break;
      }
      if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
       this._hitLimit = !0;
       break;
      }
      this._checkingBytes && ++this._bytesKey;
     }
     if (void 0 !== idxeq) idxeq > p && (this._key += this.decoder.write(data.toString("binary", p, idxeq))), 
     this._state = "val", this._hitLimit = !1, this._checkingBytes = !0, this._val = "", 
     this._bytesVal = 0, this._valTrunc = !1, this.decoder.reset(), p = idxeq + 1; else if (void 0 !== idxamp) {
      let key;
      ++this._fields;
      const keyTrunc = this._keyTrunc;
      if (key = idxamp > p ? this._key += this.decoder.write(data.toString("binary", p, idxamp)) : this._key, 
      this._hitLimit = !1, this._checkingBytes = !0, this._key = "", this._bytesKey = 0, 
      this._keyTrunc = !1, this.decoder.reset(), key.length && this.boy.emit("field", decodeText(key, "binary", this.charset), "", keyTrunc, !1), 
      p = idxamp + 1, this._fields === this.fieldsLimit) return cb();
     } else this._hitLimit ? (i > p && (this._key += this.decoder.write(data.toString("binary", p, i))), 
     p = i, (this._bytesKey = this._key.length) === this.fieldNameSizeLimit && (this._checkingBytes = !1, 
     this._keyTrunc = !0)) : (p < len && (this._key += this.decoder.write(data.toString("binary", p))), 
     p = len);
    } else {
     for (idxamp = void 0, i = p; i < len; ++i) {
      if (this._checkingBytes || ++p, 38 === data[i]) {
       idxamp = i;
       break;
      }
      if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
       this._hitLimit = !0;
       break;
      }
      this._checkingBytes && ++this._bytesVal;
     }
     if (void 0 !== idxamp) {
      if (++this._fields, idxamp > p && (this._val += this.decoder.write(data.toString("binary", p, idxamp))), 
      this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc), 
      this._state = "key", this._hitLimit = !1, this._checkingBytes = !0, this._key = "", 
      this._bytesKey = 0, this._keyTrunc = !1, this.decoder.reset(), p = idxamp + 1, this._fields === this.fieldsLimit) return cb();
     } else this._hitLimit ? (i > p && (this._val += this.decoder.write(data.toString("binary", p, i))), 
     p = i, ("" === this._val && 0 === this.fieldSizeLimit || (this._bytesVal = this._val.length) === this.fieldSizeLimit) && (this._checkingBytes = !1, 
     this._valTrunc = !0)) : (p < len && (this._val += this.decoder.write(data.toString("binary", p))), 
     p = len);
    }
    cb();
   }, UrlEncoded.prototype.end = function() {
    this.boy._done || ("key" === this._state && this._key.length > 0 ? this.boy.emit("field", decodeText(this._key, "binary", this.charset), "", this._keyTrunc, !1) : "val" === this._state && this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc), 
    this.boy._done = !0, this.boy.emit("finish"));
   }, module.exports = UrlEncoded;
  },
  5947: module => {
   "use strict";
   const RE_PLUS = /\+/g, HEX = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
   function Decoder() {
    this.buffer = void 0;
   }
   Decoder.prototype.write = function(str) {
    let res = "", i = 0, p = 0;
    const len = (str = str.replace(RE_PLUS, " ")).length;
    for (;i < len; ++i) void 0 !== this.buffer ? HEX[str.charCodeAt(i)] ? (this.buffer += str[i], 
    ++p, 2 === this.buffer.length && (res += String.fromCharCode(parseInt(this.buffer, 16)), 
    this.buffer = void 0)) : (res += "%" + this.buffer, this.buffer = void 0, --i) : "%" === str[i] && (i > p && (res += str.substring(p, i), 
    p = i), this.buffer = "", ++p);
    return p < len && void 0 === this.buffer && (res += str.substring(p)), res;
   }, Decoder.prototype.reset = function() {
    this.buffer = void 0;
   }, module.exports = Decoder;
  },
  2429: module => {
   "use strict";
   module.exports = function(path) {
    if ("string" != typeof path) return "";
    for (var i = path.length - 1; i >= 0; --i) switch (path.charCodeAt(i)) {
    case 47:
    case 92:
     return ".." === (path = path.slice(i + 1)) || "." === path ? "" : path;
    }
    return ".." === path || "." === path ? "" : path;
   };
  },
  494: function(module) {
   "use strict";
   const utf8Decoder = new TextDecoder("utf-8"), textDecoders = new Map([ [ "utf-8", utf8Decoder ], [ "utf8", utf8Decoder ] ]);
   const decoders = {
    utf8: (data, sourceEncoding) => 0 === data.length ? "" : ("string" == typeof data && (data = Buffer.from(data, sourceEncoding)), 
    data.utf8Slice(0, data.length)),
    latin1: (data, sourceEncoding) => 0 === data.length ? "" : "string" == typeof data ? data : data.latin1Slice(0, data.length),
    utf16le: (data, sourceEncoding) => 0 === data.length ? "" : ("string" == typeof data && (data = Buffer.from(data, sourceEncoding)), 
    data.ucs2Slice(0, data.length)),
    base64: (data, sourceEncoding) => 0 === data.length ? "" : ("string" == typeof data && (data = Buffer.from(data, sourceEncoding)), 
    data.base64Slice(0, data.length)),
    other: (data, sourceEncoding) => {
     if (0 === data.length) return "";
     if ("string" == typeof data && (data = Buffer.from(data, sourceEncoding)), textDecoders.has(this.toString())) try {
      return textDecoders.get(this).decode(data);
     } catch {}
     return "string" == typeof data ? data : data.toString();
    }
   };
   module.exports = function(text, sourceEncoding, destEncoding) {
    return text ? function(charset) {
     let lc;
     for (;;) switch (charset) {
     case "utf-8":
     case "utf8":
      return decoders.utf8;

     case "latin1":
     case "ascii":
     case "us-ascii":
     case "iso-8859-1":
     case "iso8859-1":
     case "iso88591":
     case "iso_8859-1":
     case "windows-1252":
     case "iso_8859-1:1987":
     case "cp1252":
     case "x-cp1252":
      return decoders.latin1;

     case "utf16le":
     case "utf-16le":
     case "ucs2":
     case "ucs-2":
      return decoders.utf16le;

     case "base64":
      return decoders.base64;

     default:
      if (void 0 === lc) {
       lc = !0, charset = charset.toLowerCase();
       continue;
      }
      return decoders.other.bind(charset);
     }
    }(destEncoding)(text, sourceEncoding) : text;
   };
  },
  4808: module => {
   "use strict";
   module.exports = function(limits, name, defaultLimit) {
    if (!limits || void 0 === limits[name] || null === limits[name]) return defaultLimit;
    if ("number" != typeof limits[name] || isNaN(limits[name])) throw new TypeError("Limit " + name + " is not a valid number");
    return limits[name];
   };
  },
  7722: (module, __unused_webpack_exports, __webpack_require__) => {
   "use strict";
   const decodeText = __webpack_require__(494), RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g, EncodedLookup = {
    "%00": "\0",
    "%01": "",
    "%02": "",
    "%03": "",
    "%04": "",
    "%05": "",
    "%06": "",
    "%07": "",
    "%08": "\b",
    "%09": "\t",
    "%0a": "\n",
    "%0A": "\n",
    "%0b": "\v",
    "%0B": "\v",
    "%0c": "\f",
    "%0C": "\f",
    "%0d": "\r",
    "%0D": "\r",
    "%0e": "",
    "%0E": "",
    "%0f": "",
    "%0F": "",
    "%10": "",
    "%11": "",
    "%12": "",
    "%13": "",
    "%14": "",
    "%15": "",
    "%16": "",
    "%17": "",
    "%18": "",
    "%19": "",
    "%1a": "",
    "%1A": "",
    "%1b": "",
    "%1B": "",
    "%1c": "",
    "%1C": "",
    "%1d": "",
    "%1D": "",
    "%1e": "",
    "%1E": "",
    "%1f": "",
    "%1F": "",
    "%20": " ",
    "%21": "!",
    "%22": '"',
    "%23": "#",
    "%24": "$",
    "%25": "%",
    "%26": "&",
    "%27": "'",
    "%28": "(",
    "%29": ")",
    "%2a": "*",
    "%2A": "*",
    "%2b": "+",
    "%2B": "+",
    "%2c": ",",
    "%2C": ",",
    "%2d": "-",
    "%2D": "-",
    "%2e": ".",
    "%2E": ".",
    "%2f": "/",
    "%2F": "/",
    "%30": "0",
    "%31": "1",
    "%32": "2",
    "%33": "3",
    "%34": "4",
    "%35": "5",
    "%36": "6",
    "%37": "7",
    "%38": "8",
    "%39": "9",
    "%3a": ":",
    "%3A": ":",
    "%3b": ";",
    "%3B": ";",
    "%3c": "<",
    "%3C": "<",
    "%3d": "=",
    "%3D": "=",
    "%3e": ">",
    "%3E": ">",
    "%3f": "?",
    "%3F": "?",
    "%40": "@",
    "%41": "A",
    "%42": "B",
    "%43": "C",
    "%44": "D",
    "%45": "E",
    "%46": "F",
    "%47": "G",
    "%48": "H",
    "%49": "I",
    "%4a": "J",
    "%4A": "J",
    "%4b": "K",
    "%4B": "K",
    "%4c": "L",
    "%4C": "L",
    "%4d": "M",
    "%4D": "M",
    "%4e": "N",
    "%4E": "N",
    "%4f": "O",
    "%4F": "O",
    "%50": "P",
    "%51": "Q",
    "%52": "R",
    "%53": "S",
    "%54": "T",
    "%55": "U",
    "%56": "V",
    "%57": "W",
    "%58": "X",
    "%59": "Y",
    "%5a": "Z",
    "%5A": "Z",
    "%5b": "[",
    "%5B": "[",
    "%5c": "\\",
    "%5C": "\\",
    "%5d": "]",
    "%5D": "]",
    "%5e": "^",
    "%5E": "^",
    "%5f": "_",
    "%5F": "_",
    "%60": "`",
    "%61": "a",
    "%62": "b",
    "%63": "c",
    "%64": "d",
    "%65": "e",
    "%66": "f",
    "%67": "g",
    "%68": "h",
    "%69": "i",
    "%6a": "j",
    "%6A": "j",
    "%6b": "k",
    "%6B": "k",
    "%6c": "l",
    "%6C": "l",
    "%6d": "m",
    "%6D": "m",
    "%6e": "n",
    "%6E": "n",
    "%6f": "o",
    "%6F": "o",
    "%70": "p",
    "%71": "q",
    "%72": "r",
    "%73": "s",
    "%74": "t",
    "%75": "u",
    "%76": "v",
    "%77": "w",
    "%78": "x",
    "%79": "y",
    "%7a": "z",
    "%7A": "z",
    "%7b": "{",
    "%7B": "{",
    "%7c": "|",
    "%7C": "|",
    "%7d": "}",
    "%7D": "}",
    "%7e": "~",
    "%7E": "~",
    "%7f": "",
    "%7F": "",
    "%80": "",
    "%81": "",
    "%82": "",
    "%83": "",
    "%84": "",
    "%85": "",
    "%86": "",
    "%87": "",
    "%88": "",
    "%89": "",
    "%8a": "",
    "%8A": "",
    "%8b": "",
    "%8B": "",
    "%8c": "",
    "%8C": "",
    "%8d": "",
    "%8D": "",
    "%8e": "",
    "%8E": "",
    "%8f": "",
    "%8F": "",
    "%90": "",
    "%91": "",
    "%92": "",
    "%93": "",
    "%94": "",
    "%95": "",
    "%96": "",
    "%97": "",
    "%98": "",
    "%99": "",
    "%9a": "",
    "%9A": "",
    "%9b": "",
    "%9B": "",
    "%9c": "",
    "%9C": "",
    "%9d": "",
    "%9D": "",
    "%9e": "",
    "%9E": "",
    "%9f": "",
    "%9F": "",
    "%a0": " ",
    "%A0": " ",
    "%a1": "¡",
    "%A1": "¡",
    "%a2": "¢",
    "%A2": "¢",
    "%a3": "£",
    "%A3": "£",
    "%a4": "¤",
    "%A4": "¤",
    "%a5": "¥",
    "%A5": "¥",
    "%a6": "¦",
    "%A6": "¦",
    "%a7": "§",
    "%A7": "§",
    "%a8": "¨",
    "%A8": "¨",
    "%a9": "©",
    "%A9": "©",
    "%aa": "ª",
    "%Aa": "ª",
    "%aA": "ª",
    "%AA": "ª",
    "%ab": "«",
    "%Ab": "«",
    "%aB": "«",
    "%AB": "«",
    "%ac": "¬",
    "%Ac": "¬",
    "%aC": "¬",
    "%AC": "¬",
    "%ad": "­",
    "%Ad": "­",
    "%aD": "­",
    "%AD": "­",
    "%ae": "®",
    "%Ae": "®",
    "%aE": "®",
    "%AE": "®",
    "%af": "¯",
    "%Af": "¯",
    "%aF": "¯",
    "%AF": "¯",
    "%b0": "°",
    "%B0": "°",
    "%b1": "±",
    "%B1": "±",
    "%b2": "²",
    "%B2": "²",
    "%b3": "³",
    "%B3": "³",
    "%b4": "´",
    "%B4": "´",
    "%b5": "µ",
    "%B5": "µ",
    "%b6": "¶",
    "%B6": "¶",
    "%b7": "·",
    "%B7": "·",
    "%b8": "¸",
    "%B8": "¸",
    "%b9": "¹",
    "%B9": "¹",
    "%ba": "º",
    "%Ba": "º",
    "%bA": "º",
    "%BA": "º",
    "%bb": "»",
    "%Bb": "»",
    "%bB": "»",
    "%BB": "»",
    "%bc": "¼",
    "%Bc": "¼",
    "%bC": "¼",
    "%BC": "¼",
    "%bd": "½",
    "%Bd": "½",
    "%bD": "½",
    "%BD": "½",
    "%be": "¾",
    "%Be": "¾",
    "%bE": "¾",
    "%BE": "¾",
    "%bf": "¿",
    "%Bf": "¿",
    "%bF": "¿",
    "%BF": "¿",
    "%c0": "À",
    "%C0": "À",
    "%c1": "Á",
    "%C1": "Á",
    "%c2": "Â",
    "%C2": "Â",
    "%c3": "Ã",
    "%C3": "Ã",
    "%c4": "Ä",
    "%C4": "Ä",
    "%c5": "Å",
    "%C5": "Å",
    "%c6": "Æ",
    "%C6": "Æ",
    "%c7": "Ç",
    "%C7": "Ç",
    "%c8": "È",
    "%C8": "È",
    "%c9": "É",
    "%C9": "É",
    "%ca": "Ê",
    "%Ca": "Ê",
    "%cA": "Ê",
    "%CA": "Ê",
    "%cb": "Ë",
    "%Cb": "Ë",
    "%cB": "Ë",
    "%CB": "Ë",
    "%cc": "Ì",
    "%Cc": "Ì",
    "%cC": "Ì",
    "%CC": "Ì",
    "%cd": "Í",
    "%Cd": "Í",
    "%cD": "Í",
    "%CD": "Í",
    "%ce": "Î",
    "%Ce": "Î",
    "%cE": "Î",
    "%CE": "Î",
    "%cf": "Ï",
    "%Cf": "Ï",
    "%cF": "Ï",
    "%CF": "Ï",
    "%d0": "Ð",
    "%D0": "Ð",
    "%d1": "Ñ",
    "%D1": "Ñ",
    "%d2": "Ò",
    "%D2": "Ò",
    "%d3": "Ó",
    "%D3": "Ó",
    "%d4": "Ô",
    "%D4": "Ô",
    "%d5": "Õ",
    "%D5": "Õ",
    "%d6": "Ö",
    "%D6": "Ö",
    "%d7": "×",
    "%D7": "×",
    "%d8": "Ø",
    "%D8": "Ø",
    "%d9": "Ù",
    "%D9": "Ù",
    "%da": "Ú",
    "%Da": "Ú",
    "%dA": "Ú",
    "%DA": "Ú",
    "%db": "Û",
    "%Db": "Û",
    "%dB": "Û",
    "%DB": "Û",
    "%dc": "Ü",
    "%Dc": "Ü",
    "%dC": "Ü",
    "%DC": "Ü",
    "%dd": "Ý",
    "%Dd": "Ý",
    "%dD": "Ý",
    "%DD": "Ý",
    "%de": "Þ",
    "%De": "Þ",
    "%dE": "Þ",
    "%DE": "Þ",
    "%df": "ß",
    "%Df": "ß",
    "%dF": "ß",
    "%DF": "ß",
    "%e0": "à",
    "%E0": "à",
    "%e1": "á",
    "%E1": "á",
    "%e2": "â",
    "%E2": "â",
    "%e3": "ã",
    "%E3": "ã",
    "%e4": "ä",
    "%E4": "ä",
    "%e5": "å",
    "%E5": "å",
    "%e6": "æ",
    "%E6": "æ",
    "%e7": "ç",
    "%E7": "ç",
    "%e8": "è",
    "%E8": "è",
    "%e9": "é",
    "%E9": "é",
    "%ea": "ê",
    "%Ea": "ê",
    "%eA": "ê",
    "%EA": "ê",
    "%eb": "ë",
    "%Eb": "ë",
    "%eB": "ë",
    "%EB": "ë",
    "%ec": "ì",
    "%Ec": "ì",
    "%eC": "ì",
    "%EC": "ì",
    "%ed": "í",
    "%Ed": "í",
    "%eD": "í",
    "%ED": "í",
    "%ee": "î",
    "%Ee": "î",
    "%eE": "î",
    "%EE": "î",
    "%ef": "ï",
    "%Ef": "ï",
    "%eF": "ï",
    "%EF": "ï",
    "%f0": "ð",
    "%F0": "ð",
    "%f1": "ñ",
    "%F1": "ñ",
    "%f2": "ò",
    "%F2": "ò",
    "%f3": "ó",
    "%F3": "ó",
    "%f4": "ô",
    "%F4": "ô",
    "%f5": "õ",
    "%F5": "õ",
    "%f6": "ö",
    "%F6": "ö",
    "%f7": "÷",
    "%F7": "÷",
    "%f8": "ø",
    "%F8": "ø",
    "%f9": "ù",
    "%F9": "ù",
    "%fa": "ú",
    "%Fa": "ú",
    "%fA": "ú",
    "%FA": "ú",
    "%fb": "û",
    "%Fb": "û",
    "%fB": "û",
    "%FB": "û",
    "%fc": "ü",
    "%Fc": "ü",
    "%fC": "ü",
    "%FC": "ü",
    "%fd": "ý",
    "%Fd": "ý",
    "%fD": "ý",
    "%FD": "ý",
    "%fe": "þ",
    "%Fe": "þ",
    "%fE": "þ",
    "%FE": "þ",
    "%ff": "ÿ",
    "%Ff": "ÿ",
    "%fF": "ÿ",
    "%FF": "ÿ"
   };
   function encodedReplacer(match) {
    return EncodedLookup[match];
   }
   module.exports = function(str) {
    const res = [];
    let state = 0, charset = "", inquote = !1, escaping = !1, p = 0, tmp = "";
    const len = str.length;
    for (var i = 0; i < len; ++i) {
     const char = str[i];
     if ("\\" === char && inquote) {
      if (!escaping) {
       escaping = !0;
       continue;
      }
      escaping = !1;
     } else if ('"' === char) {
      if (!escaping) {
       inquote ? (inquote = !1, state = 0) : inquote = !0;
       continue;
      }
      escaping = !1;
     } else {
      if (escaping && inquote && (tmp += "\\"), escaping = !1, (2 === state || 3 === state) && "'" === char) {
       2 === state ? (state = 3, charset = tmp.substring(1)) : state = 1, tmp = "";
       continue;
      }
      if (0 === state && ("*" === char || "=" === char) && res.length) {
       state = "*" === char ? 2 : 1, res[p] = [ tmp, void 0 ], tmp = "";
       continue;
      }
      if (!inquote && ";" === char) {
       state = 0, charset ? (tmp.length && (tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset)), 
       charset = "") : tmp.length && (tmp = decodeText(tmp, "binary", "utf8")), void 0 === res[p] ? res[p] = tmp : res[p][1] = tmp, 
       tmp = "", ++p;
       continue;
      }
      if (!inquote && (" " === char || "\t" === char)) continue;
     }
     tmp += char;
    }
    return charset && tmp.length ? tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset) : tmp && (tmp = decodeText(tmp, "binary", "utf8")), 
    void 0 === res[p] ? tmp && (res[p] = tmp) : res[p][1] = tmp, res;
   };
  },
  8187: module => {
   "use strict";
   module.exports = JSON.parse('{"name":"@actions/cache","version":"4.0.3","preview":true,"description":"Actions cache lib","keywords":["github","actions","cache"],"homepage":"https://github.com/actions/toolkit/tree/main/packages/cache","license":"MIT","main":"lib/cache.js","types":"lib/cache.d.ts","directories":{"lib":"lib","test":"__tests__"},"files":["lib","!.DS_Store"],"publishConfig":{"access":"public"},"repository":{"type":"git","url":"git+https://github.com/actions/toolkit.git","directory":"packages/cache"},"scripts":{"audit-moderate":"npm install && npm audit --json --audit-level=moderate > audit.json","test":"echo \\"Error: run tests from root\\" && exit 1","tsc":"tsc"},"bugs":{"url":"https://github.com/actions/toolkit/issues"},"dependencies":{"@actions/core":"^1.11.1","@actions/exec":"^1.0.1","@actions/glob":"^0.1.0","@actions/http-client":"^2.1.1","@actions/io":"^1.0.1","@azure/abort-controller":"^1.1.0","@azure/ms-rest-js":"^2.6.0","@azure/storage-blob":"^12.13.0","@protobuf-ts/plugin":"^2.9.4","semver":"^6.3.1"},"devDependencies":{"@types/node":"^22.13.9","@types/semver":"^6.0.0","typescript":"^5.2.2"}}');
  }
 }, __webpack_module_cache__ = {};
 function __webpack_require__(moduleId) {
  var cachedModule = __webpack_module_cache__[moduleId];
  if (void 0 !== cachedModule) return cachedModule.exports;
  var module = __webpack_module_cache__[moduleId] = {
   exports: {}
  };
  return __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__), 
  module.exports;
 }
 return __webpack_require__.n = module => {
  var getter = module && module.__esModule ? () => module.default : () => module;
  return __webpack_require__.d(getter, {
   a: getter
  }), getter;
 }, getProto = Object.getPrototypeOf ? obj => Object.getPrototypeOf(obj) : obj => obj.__proto__, 
 __webpack_require__.t = function(value, mode) {
  if (1 & mode && (value = this(value)), 8 & mode) return value;
  if ("object" == typeof value && value) {
   if (4 & mode && value.__esModule) return value;
   if (16 & mode && "function" == typeof value.then) return value;
  }
  var ns = Object.create(null);
  __webpack_require__.r(ns);
  var def = {};
  leafPrototypes = leafPrototypes || [ null, getProto({}), getProto([]), getProto(getProto) ];
  for (var current = 2 & mode && value; "object" == typeof current && !~leafPrototypes.indexOf(current); current = getProto(current)) Object.getOwnPropertyNames(current).forEach((key => def[key] = () => value[key]));
  return def.default = () => value, __webpack_require__.d(ns, def), ns;
 }, __webpack_require__.d = (exports, definition) => {
  for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key) && Object.defineProperty(exports, key, {
   enumerable: !0,
   get: definition[key]
  });
 }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), 
 __webpack_require__.r = exports => {
  "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports, Symbol.toStringTag, {
   value: "Module"
  }), Object.defineProperty(exports, "__esModule", {
   value: !0
  });
 }, __webpack_require__(1718);
})()));
//# sourceMappingURL=cache-action-entrypoint.js.map